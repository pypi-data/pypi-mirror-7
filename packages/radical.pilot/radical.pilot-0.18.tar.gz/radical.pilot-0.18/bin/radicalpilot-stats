#!/usr/bin/env python

import os
import sys
import numpy
import pprint
import pymongo
import radical.utils       as ru
import radical.pilot       as rp
import radical.pilot.utils as rpu


_DEFAULT_DBURL = 'mongodb://localhost:27017/radicalpilot/'
_DEFAULT_DBURL = 'mongodb://ec2-184-72-89-141.compute-1.amazonaws.com:27017/radicalpilot/'

# for graphing events, we assign numerical pseudo values to each event.  
# Note: make sure that those are translated back into event tags via 'set # [xy]tics'
# 
#   set xtics ("lbl1" 1, "lbl2" 2, "lbl3" 3, "lbl4" 4)
#
_EVENT_ENCODING = {
        'session': {
            'created'                  :  1
        }, 
        'pmgr': {
        }, 
        'pilot' : {
            rp.PENDING_LAUNCH          :  1,
            rp.LAUNCHING               :  2,
            rp.PENDING_ACTIVE          :  3,
            rp.ACTIVE                  :  4,
            rp.DONE                    :  5,
            rp.CANCELED                :  6,
            rp.FAILED                  :  7
        },
        'umgr': {
        }, 
        'unit': {
            rp.NEW                     :  1,
            rp.PENDING_INPUT_TRANSFER  :  2,
            rp.TRANSFERRING_INPUT      :  3,
            rp.PENDING_EXECUTION       :  4,
            rp.SCHEDULING              :  5,
            rp.EXECUTING               :  6,
            rp.PENDING_OUTPUT_TRANSFER :  7,
            rp.TRANSFERRING_OUTPUT     :  8,
            rp.DONE                    :  9,
            rp.CANCELED                : 10,
            rp.FAILED                  : 11
        }
    }

# DONE                        
# CANCELED                    
# FAILED                      
# 
# # pilot states
# PENDING_LAUNCH              
# LAUNCHING                   
# PENDING_ACTIVE              
# ACTIVE                      
# 
# # ComputeUnit States
# NEW                         
# PENDING_INPUT_TRANSFER      
# TRANSFERRING_INPUT          
# 
# PENDING_EXECUTION           
# SCHEDULING                  
# EXECUTING                   
# 
# PENDING_OUTPUT_TRANSFER     
# TRANSFERRING_OUTPUT         

# ------------------------------------------------------------------------------
#
def my_round (x, base=5) :

    # thanks to 
    # http://stackoverflow.com/questions/2272149/round-to-5-or-other-number-in-python

    return int(base * round(float(x) / base))


# ------------------------------------------------------------------------------
#
def usage (msg=None, noexit=False) :

    if  msg :
        print "\n      Error: %s" % msg

    print """
      usage   : %s -m <mode> [-d dburl] [-s session]
      example : %s -m stat    -d mongodb://localhost/radicalpilot -s 536afe101d41c83696ea0135

      modes :

        help  : show this message
        list  : show  a  list   of sessions in the database
        tree  : show  a  tree   of session objects
        dump  : show  a  tree   of session objects, with full details
        sort  : show  a  list   of session objects, sorted by type
        hist  : show timeline   of session history
        stat  : show statistics of session history (not implemented)
        plot  : save gnuplot representing session history

      The default command is 'list'.  If no session ID is specified, operations
      which apply to a single session will choose the last session in the given
      DB.  The default MongoDB is '%s'
      
""" % (sys.argv[0], sys.argv[0], _DEFAULT_DBURL)

    if  msg :
        sys.exit (1)

    if  not noexit :
        sys.exit (0)


# ------------------------------------------------------------------------------
#
def dump_session (dbclient, dbname, session) :

    print "session : %s" % session
    handle_session (dbclient, 'dump', dbname, session, None)


# ------------------------------------------------------------------------------
#
def tree_session (dbclient, dbname, session) :

    handle_session (dbclient, 'tree', dbname, session, None)


# ------------------------------------------------------------------------------
#
def list_sessions (dbclient, dbname, session) :

    if  session :
        print "invalid session parameter on 'list'"
        sys.exit (-1)

    sids = rpu.get_session_ids (dbclient, dbname)


    if not sids :
        print 'no session recorded in database at %s' % url

    else :
        print "Session IDs:"
        for sid in sids :
            print "  %s" % sid


# ------------------------------------------------------------------------------
def sort_session (dbclient, dbname, session) :

    docs = rpu.get_session_docs (dbclient, dbname, session)

    print "pilot managers :" 
    for doc in docs['pmgr'] :
        print "  %s" %  doc['_id']

    print "pilots :" 
    for doc in docs['pilot'] :
        print "  %s" %  doc['_id']

    print "unit manager"
    for doc in docs['umgr'] :
        print "  %s" %  doc['_id']

    print "units"
    for doc in docs['unit'] :
        print "  %s" %  doc['_id']


# ------------------------------------------------------------------------------
def hist_session (dbclient, dbname, session) :

    events    = rpu.get_session_events   (dbclient, dbname, session)
    slothists = rpu.get_session_slothist (dbclient, dbname, session)

    if  not events :
        print "no events found for session %s" % session
        sys.exit (-1)

    if  not slothists :
        print "no slot configuration for session %s" % session
        print "Please enable benchmarking: export RADICAL_PILOT_BENCHMARK="

    start = events[0][4]

    # ascii output of time sorted events and slot history

    print "session : %s" % session
    print "          %s" % str(start)

    for e in events :
        seconds = ru.time_diff (start, e[4])
        print "          %08.2fs : %10s : %15s : %20s (%s)" % (seconds, e[1], e[2], e[5], e[0])


    if  slothists :
        for pilot_info in slothists :
            print "pilot   : %s" % pilot_info['pilot_id']
            for slothist in pilot_info['slothist'] :
                seconds = ru.time_diff (start, slothist['timestamp'])
                print "          %08.2fs : %s" % (seconds, str(slothist['slotstate']))


# ------------------------------------------------------------------------------
def get_stats (docs, events, slothist) :

    n_units               = 0
    n_pilots              = 0
    unit_state_durations  = dict()
    pilot_utilization     = dict()
    units                 = dict()

    pilot_utilization['pilots'] = dict()

    for cu in docs['unit'] :
        units[str(cu['_id'])] = cu

    for pilot_doc in docs['pilot'] :

        n_pilots   += 1
        pid         = str(pilot_doc['_id'])
        pilot_util  = dict()

        pilot_util['n_units']      = 0
        pilot_util['unit_states']  = dict()
        pilot_util['pilot_states'] = list()

        # we assume that states are time-ordered
        state = pilot_doc['statehistory'][0]['state']
        start = pilot_doc['statehistory'][0]['timestamp']
        for t in pilot_doc['statehistory'][1:] :
            ts = t['timestamp']
            s  = t['state']
            pilot_util['pilot_states'].append ({'state'    : state, 
                                                'duration' : ru.time_diff(start, ts)})
            state = s
            start = ts

        for cu in pilot_doc['wu_queue'] :
            uid                    = str(cu)
            n_units               += 1
            pilot_util['n_units'] += 1

            if  not uid in units :
                print 'unknonwn unit %s' % uid
                sys.exit ()

            unit_doc = units[uid]
            state    = unit_doc['statehistory'][0]['state']
            start    = unit_doc['statehistory'][0]['timestamp']

            for t in unit_doc['statehistory'][1:] :
                ts = t['timestamp']
                s  = t['state']

                if not state in pilot_util['unit_states'] :
                    pilot_util['unit_states'][state]        = dict()
                    pilot_util['unit_states'][state]['dur'] = list()

                pilot_util['unit_states'][state]['dur'].append (ru.time_diff(start, ts))
                state = s
                start = ts

        for s in pilot_util['unit_states'] :
            array = numpy.array (pilot_util['unit_states'][s]['dur'])
            pilot_util['unit_states'][s]['num' ] = len        (array)
            pilot_util['unit_states'][s]['mean'] = numpy.mean (array)
            pilot_util['unit_states'][s]['std' ] = numpy.std  (array)
            pilot_util['unit_states'][s]['dur' ] = list()


        pilot_utilization['pilots'][pid] = pilot_util

    pilot_utilization['n_pilots'] = n_pilots

    return pilot_utilization



    
# ------------------------------------------------------------------------------
def stat_session (dbclient, dbname, session) :

    docs      = rpu.get_session_docs     (dbclient, dbname, session)
    events    = rpu.get_session_events   (dbclient, dbname, session)
    slothists = rpu.get_session_slothist (dbclient, dbname, session)

    stats     = get_stats (docs, events, slothists)

    print "Session Statistics"
    print "------------------"
    print ""
    print "  pilots : %s" % stats['n_pilots']

    for pid in stats['pilots'] :
        print "  pilot [%s]" % pid
        pilot = stats['pilots'][pid]

        print "      pilot states:"
        for ps in pilot['pilot_states'] :
            print "        state %-18s : %10.1fs" % (ps['state'], ps['duration'])
        print "      units : %d" % pilot['n_units']
        print "      unit states:"
        for us  in pilot['unit_states'] :
            data = pilot['unit_states'][us]
            print "        state %-18s : %10.1fs  +/- %8.1fs" % (us, data['mean'], data['std'])



# ------------------------------------------------------------------------------
def plot_session (dbclient, dbname, session) :
    """
    plot results :P
    """

    docs      = rpu.get_session_docs     (dbclient, dbname, session)
    events    = rpu.get_session_events   (dbclient, dbname, session)
    slothists = rpu.get_session_slothist (dbclient, dbname, session)

    if  not events :
        print "no events found for session %s" % session
        sys.exit (-1)

    if  not slothists :
        print "no slot configuration for session %s" % session
        print "Please enable benchmarking: export RADICAL_PILOT_BENCHMARK="

    start       = events[0][4]
    pids        = list()
    maxtime     = 0.0
    maxslots    = 0
    nodesize    = 0
    slots       = list()
    hosts       = list()
    delete_me   = list()

    for pilot in docs['pilot'] :

        pid = str(pilot['_id'])
        pids.append (pid)
        hosts.append (ru.Url (pilot['sandbox']).host)

        with open ("/tmp/rp.%s.pilot.states.%s.dat" % (session, pid), "w") as dat :
            for event in pilot['statehistory'] :
                etag    = _EVENT_ENCODING['pilot'].get (event['state'], 0)
                seconds = ru.time_diff (start, event['timestamp'])
                maxtime = max (maxtime, seconds)
                dat.write (" %10.2f  %-25s\n" % (seconds, etag))
            dat.write ("\n")
            delete_me.append (dat.name)
            
        with open ("/tmp/rp.%s.pilot.callbacks.%s.dat" % (session, pid), "w") as dat :
            if  'callbackhistory' in pilot :
                for event in pilot['callbackhistory'] :
                    etag    = _EVENT_ENCODING['pilot'].get (event['state'], 0)
                    seconds = ru.time_diff (start, event['timestamp'])
                    maxtime = max (maxtime, seconds)
                    dat.write ("%10.2f  %-25s\n" % (seconds, etag))
                dat.write ("\n")
            delete_me.append (dat.name)

            
        with open ("/tmp/rp.%s.unit.states.%s.dat" % (session, pid), "w") as dat :
            for unit_id in pilot['wu_queue'] :
                for unit in docs['unit'] :
                    if  unit_id == unit['_id'] :
                        for event in unit['statehistory'] :
                            etag    = _EVENT_ENCODING['unit'].get (event['state'], 0)
                            seconds = ru.time_diff (start, event['timestamp'])
                            maxtime = max (maxtime, seconds)
                            dat.write (" %10.2f  %-25s\n" % (seconds, etag))
                        dat.write ("\n")
            delete_me.append (dat.name)
            
        with open ("/tmp/rp.%s.unit.callbacks.%s.dat" % (session, pid), "w") as dat :
            for unit_id in pilot['wu_queue'] :
                for unit in docs['unit'] :
                    if  unit_id == unit['_id'] :
                        for event in unit['callbackhistory'] :
                            etag    = _EVENT_ENCODING['unit'].get (event['state'], 0)
                            seconds = ru.time_diff (start, event['timestamp'])
                            maxtime = max (maxtime, seconds)
                            dat.write (" %10.2f  %-25s\n" % (seconds, etag))
                        dat.write ("\n")
            delete_me.append (dat.name)

            
        with open ("/tmp/rp.%s.pilot.queue.%s.dat" % (session, pid), "w") as dat :

            queue_size = 0
            dat.write ("%10.2f  %6d\n" % (0, queue_size))

            for event in events :
                if  event[0] == 'state' and \
                    event[1] == 'unit'  and \
                    event[3] ==  pid    :
                    if  event[5] == rp.NEW :
                        seconds     = ru.time_diff (start, event[4])
                        queue_size += 1
                        dat.write ("%10.2f  %6d\n" % (seconds, queue_size))
                    if  event[5] == rp.EXECUTING :
                        seconds     = ru.time_diff (start, event[4])
                        queue_size -= 1
                        dat.write ("%10.2f  %6d\n" % (seconds, queue_size))



        with open ("/tmp/rp.%s.pilot.slots.%s.dat" % (session, pid), "w") as dat :

            if  not 'slothistory' in pilot :
                slots.append (0)


            else :

                slotidxs = list()
                slotstr  = pilot['slothistory'][0]['slotstate']

                for idx in range (0, len(slotstr)) :
                    if  slotstr[idx] in ['-', '+'] :
                        slotidxs.append (idx)

                nodesize = max (nodesize, pilot['cores_per_node'])
                maxslots = max (maxslots, len(slotidxs))
                slots.append (len(slotidxs))

                for number,slotidx in enumerate(slotidxs) :

                    used = False
                    for entry in pilot['slothistory'] :

                        seconds   = ru.time_diff (start, entry['timestamp'])
                        maxtime   = max (maxtime, seconds)
                        slotstate = entry['slotstate'][slotidx]

                        if  slotstate == '-' : 
                            if  used :
                                dat.write ("%10.2f  %6d\n" % (seconds, number+1))
                                dat.write ("\n")
                                used    = False

                        elif  slotstate == '+' : 
                            dat.write ("%10.2f  %6d\n" % (seconds, number+1))
                            used    = True

                        else :
                            print "oops?  invalid slotstate '%s'" % slotstate
                    dat.write ("\n")
                delete_me.append (dat.name)

    pilotnum = len(pids)

    timetics = 10
    for i in range(1,10) :
        if  maxtime  > 10**i :
            timetics = 10**(i-1)
        if  maxtime  > 5*(10**i) :
            timetics = 5*(10**(i-1))

    mtimetics = timetics/10

    plotfile = "%s/radicalpilot-stats.plot" % os.path.dirname (__file__)
    plotname = os.environ.get ('RP_PLOTNAME', None)

                                         
    cmd  = "gnuplot -e  maxtime=%d "        % int(maxtime+10)
    cmd +=        " -e  timetics=%d "       % timetics
    cmd +=        " -e  mtimetics=%d "      % mtimetics
    cmd +=        " -e  maxslots=%d "       % maxslots
    for idx,pid in enumerate(pids) :
        cmd +=    " -e  slotnum_%d=%d "     % (idx+1, slots[idx])
    cmd +=        " -e  nodesize=%d "       % nodesize
    cmd +=        " -e 'session=\"%s\"' "   % session
    cmd +=        " -e 'plottitle=\"RADICAL-Pilot\\n============="
    if plotname :
        cmd +=    "\\n[%s]" % plotname
    cmd +=        "\\nPilot and Unit Event Traces\"'  "
    cmd +=        " -e  pilotnum=%d "       % len(pids)
    for idx,pid in enumerate(pids) :
        cmd +=    " -e 'pilot_%d_name=\"%s[%d]\"' " % (idx+1, hosts[idx], slots[idx])
    for idx,pid in enumerate(pids) :
        cmd +=    " -e 'pilot_%d_id=\"%s\"' "       % (idx+1, pids[idx])
    cmd +=        "     %s "                        % plotfile

  # print cmd
    print "\nplotting..."
    os.system (cmd) 

    if  plotname :
        os.system ("mv %s.png %s.png" % (session, plotname))
        os.system ("mv %s.pdf %s.pdf" % (session, plotname))

    for filename in delete_me :
      # print "removing %s" % filename
        try :
            os.remove (filename)
        except Exception as e :
            print "Error removing %s: %s" % (filename, str(e))



# ------------------------------------------------------------------------------
def handle_session (dbclient, mode, dbname, session, pname) :
    """
    For the given db, traverse collections
    """

    database = dbclient[dbname]
    print " +-- db   %s" % dbname

    cnames = list()
    cnames.append ("%s"    % session)
    cnames.append ("%s.pm" % session)
    cnames.append ("%s.p"  % session)
    cnames.append ("%s.wm" % session)
    cnames.append ("%s.w"  % session)

    for name in cnames :

        if  mode == 'list' and not cname :
            print " | +-- coll %s" % name

        elif  mode == 'remove' and not pname :
            try :
                database.drop_collection (name)
                print "  removed collection %s" % name
            except :
                pass # ignore errors

        else :
            handle_coll (database, mode, name, pname)



# ------------------------------------------------------------------------------
def handle_coll (database, mode, cname, pname) :
    """
    For a given collection, traverse all documents
    """

    if 'indexes' in cname :
        return

    collection = database[cname]
    print " | +-- coll %s" % cname

    docs = collection.find ()

    for doc in docs :

        name = doc['_id']

        if  mode == 'list' and not pname :
            print " | | +-- doc  %s" % name

        elif  mode == 'remove' :
            if (not pname) or (str(name)==str(pname)) :
                try :
                    collection.remove (name)
                    print "  removed document %s" % name
                except Exception as e:
                    pass # ignore errors

        else :
            if (not pname) or (str(name)==str(pname)) :
                handle_doc (collection, mode, doc)


# ------------------------------------------------------------------------------
def handle_doc (collection, mode, doc) :
    """
    And, surprise, for a given document, show it according to 'mode'
    """

    name = doc['_id']

    if  mode == 'list' :

        for key in doc :
            print " | | | +-- %s" % (key)

    elif  mode == 'tree' :
        print " | | +-- doc  %s" % (name)
        for key in doc :
            print " | | | +-- %s" % (key)

    elif  mode == 'dump' :
        print " | | +-- doc  %s" % (name)
        for key in doc :
            txt_in  = pprint.pformat (doc[key])
            txt_out = ""
            lnum    = 1
            for line in txt_in.split ('\n') :
                if  lnum != 1 :
                    txt_out += ' | | | |                '
                txt_out += line
                txt_out += '\n'
                lnum    += 1

            print " | | | +-- %-10s : %s" % (key, txt_out[:-1]) # remove last \n
# ------------------------------------------------------------------------------
# 
def parse_commandline():

    return options


# ------------------------------------------------------------------------------
#
if __name__ == '__main__' :

    # import datetime
    # h = [ {'s' : 'PendingLaunch',
    #        'ts': datetime.datetime(2014, 7, 11, 19, 18, 3, 959000)},
    #       {'s' : 'Launching',
    #        'ts': datetime.datetime(2014, 7, 11, 19, 18, 4, 124000)},
    #       {'s' : 'PendingActive',
    #        'ts': datetime.datetime(2014, 7, 11, 19, 18, 26)},
    #       {'s' : 'Active',
    #        'ts': datetime.datetime(2014, 7, 11, 19, 21, 11, 498000)},
    #       {'s' : 'Canceled',
    #        'ts': datetime.datetime(2014, 7, 11, 19, 32, 26, 764000)}]

    # d     = dict()
    # print h
    # print h[0]

    # state = h[0]['s']
    # start = h[0]['ts']

    # for t in h :
    #     s = t['s']
    #     x = ru.time_diff(start, t['ts'])
    #     d[state] = x
    #     start = t['ts']
    #     state = t['s']

    # print d
    # sys.exit (0)


    import optparse
    parser = optparse.OptionParser (add_help_option=False)

    parser.add_option('-s', '--session', dest='session')
    parser.add_option('-d', '--dburl',   dest='url')
    parser.add_option('-m', '--mode',    dest='mode')
    parser.add_option('-h', '--help',    dest='help', action="store_true")

    options, args = parser.parse_args ()

    if  args :
        usage ("Too many arguments (%s)" % args)

    if  options.help :
        usage ()

    if  options.mode in ['help'] : 
        usage ()

    if  not options.mode :
        usage ("No mode specified")

    if  not options.url : 
        options.url = _DEFAULT_DBURL 


    mode    = options.mode 
    url     = options.url
    session = options.session

    host, port, dbname, cname, pname = ru.split_dburl (url, _DEFAULT_DBURL)[0:4]
    dbclient = pymongo.MongoClient (host=host, port=port)

    print "modes   : %s" % mode
    print "db url  : %s" % url

    if  not session and mode != 'list' :
        session = rpu.get_last_session  (dbclient, dbname)
        print "session : %s (last session in database)" % session
    else :
        print "session : %s" % session

    for m in mode.split (',') :

        if  m not in ['list', 'dump', 'tree', 'hist', 'sort', 'stat', 'plot', 'help'] : 
            usage ("Unsupported mode '%s'" % m)

        if   m == 'list' : list_sessions (dbclient, dbname, session)
        elif m == 'tree' : tree_session  (dbclient, dbname, session) 
        elif m == 'dump' : dump_session  (dbclient, dbname, session) 
        elif m == 'sort' : sort_session  (dbclient, dbname, session) 
        elif m == 'hist' : hist_session  (dbclient, dbname, session) 
        elif m == 'stat' : stat_session  (dbclient, dbname, session) 
        elif m == 'plot' : plot_session  (dbclient, dbname, session) 
        elif m == 'help' : usage (noexit=True)
        else             : usage ("unknown mode '%s'" % mode)

    # ------------------------------------------------------------------------------------
    dbclient.disconnect ()

# ------------------------------------------------------------------------------

