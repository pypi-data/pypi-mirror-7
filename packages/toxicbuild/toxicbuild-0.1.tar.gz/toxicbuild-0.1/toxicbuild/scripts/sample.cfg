# -*- coding: utf-8 -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# Including here the pythonpath directory which is located at toxicbuild
# basedir in the sys.path, so we can put our scripts there and import
# it here
import sys
sys.path.append('../pythonpath')

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave

slaves = [BuildSlave("easyslave", "dummypass")]
slavenames = [s.slavename for s in slaves]

c['slaves'] = slaves

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we import GitPoller from toxicbuild.changes.
# To use toxicbuild we need to use some poller from toxicbuild.changes.

from toxicbuild.changes.gitpoller import GitPoller

toxicbuild_source = GitPoller(
    'https://git.gitorious.org/toxicbuild/toxicbuild.git',
    workdir='toxicbuild-workdir',
    project='toxicbuild', pollinterval=300)
c['change_source'] = [toxicbuild_source]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

branch_scheduler = SingleBranchScheduler(
    name="branch-scheduler", change_filter=filter.ChangeFilter(
        branch='master', project='toxicbuild'),
    treeStableTimer=None,
    builderNames=['dynamic-builder'])

force_scheduler = ForceScheduler(
    name="Force",
    builderNames=[
        'dynamic-builder'])

c['schedulers'] = [branch_scheduler, force_scheduler]

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
from toxicbuild.config  import DynamicBuilderConfig

dynamic_builder = DynamicBuilderConfig(venv_path='py27',
                                       pyversion='/usr/bin/python2.7',
                                       slavenames=slavenames,
                                       name='dynamic-builder')
c['builders'] = [dynamic_builder]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("toxicbuild","toxicbuild")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ToxicBuild"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
    'toxicbuild_db_url' : "sqlite:///toxicbuild.sqlite",
}
