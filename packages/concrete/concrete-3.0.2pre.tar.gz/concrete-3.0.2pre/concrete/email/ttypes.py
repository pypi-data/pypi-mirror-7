#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class EmailAddress(object):
  """
  An email address, optionally accompanied by a display_name. These
  values are typically extracted from strings such as:
  <tt> "John Smith" &lt;john\@xyz.com&gt; </tt>.

  \see RFC2822 <http://tools.ietf.org/html/rfc2822>

  Attributes:
   - address
   - displayName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'address', None, None, ), # 1
    (2, TType.STRING, 'displayName', None, None, ), # 2
  )

  def __init__(self, address=None, displayName=None,):
    self.address = address
    self.displayName = displayName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.address = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.displayName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EmailAddress')
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 1)
      oprot.writeString(self.address.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.displayName is not None:
      oprot.writeFieldBegin('displayName', TType.STRING, 2)
      oprot.writeString(self.displayName.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EmailCommunicationInfo(object):
  """
  Extra information about an email communication instance.

  Attributes:
   - messageId
   - contentType
   - userAgent
   - inReplyTo
   - reference
   - senderAddress
   - returnPathAddress
   - toAddress
   - ccAddress
   - bccAddress
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'messageId', None, None, ), # 1
    (2, TType.STRING, 'contentType', None, None, ), # 2
    (3, TType.STRING, 'userAgent', None, None, ), # 3
    (4, TType.LIST, 'inReplyTo', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'reference', (TType.STRING,None), None, ), # 5
    (6, TType.STRUCT, 'senderAddress', (EmailAddress, EmailAddress.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'returnPathAddress', (EmailAddress, EmailAddress.thrift_spec), None, ), # 7
    (8, TType.LIST, 'toAddress', (TType.STRUCT,(EmailAddress, EmailAddress.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'ccAddress', (TType.STRUCT,(EmailAddress, EmailAddress.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'bccAddress', (TType.STRUCT,(EmailAddress, EmailAddress.thrift_spec)), None, ), # 10
  )

  def __init__(self, messageId=None, contentType=None, userAgent=None, inReplyTo=None, reference=None, senderAddress=None, returnPathAddress=None, toAddress=None, ccAddress=None, bccAddress=None,):
    self.messageId = messageId
    self.contentType = contentType
    self.userAgent = userAgent
    self.inReplyTo = inReplyTo
    self.reference = reference
    self.senderAddress = senderAddress
    self.returnPathAddress = returnPathAddress
    self.toAddress = toAddress
    self.ccAddress = ccAddress
    self.bccAddress = bccAddress

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.messageId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.contentType = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userAgent = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.inReplyTo = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.inReplyTo.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.reference = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString().decode('utf-8')
            self.reference.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.senderAddress = EmailAddress()
          self.senderAddress.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.returnPathAddress = EmailAddress()
          self.returnPathAddress.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.toAddress = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = EmailAddress()
            _elem17.read(iprot)
            self.toAddress.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.ccAddress = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = EmailAddress()
            _elem23.read(iprot)
            self.ccAddress.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.bccAddress = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = EmailAddress()
            _elem29.read(iprot)
            self.bccAddress.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EmailCommunicationInfo')
    if self.messageId is not None:
      oprot.writeFieldBegin('messageId', TType.STRING, 1)
      oprot.writeString(self.messageId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.contentType is not None:
      oprot.writeFieldBegin('contentType', TType.STRING, 2)
      oprot.writeString(self.contentType.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.userAgent is not None:
      oprot.writeFieldBegin('userAgent', TType.STRING, 3)
      oprot.writeString(self.userAgent.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.inReplyTo is not None:
      oprot.writeFieldBegin('inReplyTo', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.inReplyTo))
      for iter30 in self.inReplyTo:
        oprot.writeString(iter30.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reference is not None:
      oprot.writeFieldBegin('reference', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.reference))
      for iter31 in self.reference:
        oprot.writeString(iter31.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.senderAddress is not None:
      oprot.writeFieldBegin('senderAddress', TType.STRUCT, 6)
      self.senderAddress.write(oprot)
      oprot.writeFieldEnd()
    if self.returnPathAddress is not None:
      oprot.writeFieldBegin('returnPathAddress', TType.STRUCT, 7)
      self.returnPathAddress.write(oprot)
      oprot.writeFieldEnd()
    if self.toAddress is not None:
      oprot.writeFieldBegin('toAddress', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.toAddress))
      for iter32 in self.toAddress:
        iter32.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ccAddress is not None:
      oprot.writeFieldBegin('ccAddress', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.ccAddress))
      for iter33 in self.ccAddress:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bccAddress is not None:
      oprot.writeFieldBegin('bccAddress', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.bccAddress))
      for iter34 in self.bccAddress:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
