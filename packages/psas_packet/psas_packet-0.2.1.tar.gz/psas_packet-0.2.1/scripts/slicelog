#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import argparse
import sys
import itertools
import codecs
from psas_packet import io
from psas_packet import messages

PSAS = messages.MESSAGE_DICT
HEAD = messages.HEADER

def slicelog(begin, end, inlog, outlog):
    with io.BinFile(inlog) as log:
        messages = log.read()
        if begin is not None:
            messages = itertools.dropwhile(lambda data: not ('SEQN' in data and data['SEQN']['Sequence'] >= begin))
        if end is not None:
            messages = itertools.takewhile(lambda data: not ('SEQN' in data and data['SEQN']['Sequence'] <= end))

        for data in log.read():
            for key in data:
                # copy log
                if key in PSAS:
                    msg = PSAS[key]
                    outlog.write(HEAD.encode(msg, data[key]['timestamp']))
                    outlog.write(msg.encode(data[key]))
        else:
            print("No break")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='log2csv')
    parser.add_argument('logfile', type=argparse.FileType('rb'), help="Log file to read")
    parser.add_argument('slice', type=str, help="slice")
    parser.add_argument('-o', '--output', type=argparse.FileType('wb'), default=getattr(sys.stdout, 'buffer', sys.stdout), help="Output File", required=False)

    args = vars(parser.parse_args())

    begin, end = args['slice'].split(':')
    try:
        begin = int(begin)
    except:
        begin = None
    try:
        end = int(end)
    except:
        end = None

    slicelog(begin, end, args['logfile'], args['output'])
