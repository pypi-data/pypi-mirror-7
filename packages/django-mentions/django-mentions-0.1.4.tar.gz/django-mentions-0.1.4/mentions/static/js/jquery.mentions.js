// Generated by CoffeeScript 1.7.1
(function() {
  var Key, MentionsInput, Selection, mimicProperties, namespace, settings,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  namespace = "mentionsInput";

  Key = {
    LEFT: 37,
    RIGHT: 39
  };

  mimicProperties = ['marginTop', 'marginBottom', 'marginLeft', 'marginRight', 'paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight', 'borderTopWidth', 'borderLeftWidth', 'borderBottomWidth', 'borderRightWidth', 'fontSize', 'fontStyle', 'fontFamily', 'fontWeight', 'lineHeight', 'height', 'boxSizing'];

  Selection = {
    get: function(input) {
      return {
        start: input[0].selectionStart,
        end: input[0].selectionEnd
      };
    },
    set: function(input, start, end) {
      if (end == null) {
        end = start;
      }
      input[0].selectStart = start;
      return input[0].selectionEnd = end;
    }
  };

  settings = {
    delay: 0,
    trigger: '@'
  };

  $.widget("ui.areacomplete", $.ui.autocomplete, {
    options: $.extend({}, $.ui.autocomplete.prototype.options, {
      matcher: "(\\b[^,]*)",
      suffix: ', '
    }),
    _create: function() {
      this.overriden = {
        select: this.options.select,
        focus: this.options.focus
      };
      this.options.select = $.proxy(this.selectCallback, this);
      this.options.focus = $.proxy(this.focusCallback, this);
      $.ui.autocomplete.prototype._create.call(this);
      return this.matcher = new RegExp(this.options.matcher + '$');
    },
    selectCallback: function(event, ui) {
      var after, before, newval, value;
      value = this._value();
      before = value.substring(0, this.start);
      after = value.substring(this.end);
      newval = ui.item.value + this.options.suffix;
      value = before + newval + after;
      if (this.overriden.select) {
        ui.item.pos = this.start;
        if (this.overriden.select(event, ui) === false) {
          return false;
        }
      }
      this._value(value);
      this.element.change();
      Selection.set(this.element, before.length + newval.length);
      return false;
    },
    focusCallback: function() {
      if (this.overriden.focus) {
        return this.overriden.focus(event, ui);
      }
      return false;
    },
    search: function(value, event) {
      var match, pos;
      if (!value) {
        value = this._value();
        pos = Selection.get(this.element).start;
        value = value.substring(0, pos);
        match = this.matcher.exec(value);
        if (!match) {
          return '';
        }
        this.start = match.index;
        this.end = match.index + match[0].length;
        value = match[1];
      }
      return $.ui.autocomplete.prototype.search.call(this, value, event);
    },
    _renderItem: function(ul, item) {
      var anchor, li;
      li = $('<li>');
      anchor = $('<a>').appendTo(li);
      if (item.image) {
        anchor.append("<img src=\"" + item.image + "\" />");
      }
      anchor.append(item.value);
      return li.appendTo(ul);
    }
  });

  MentionsInput = (function() {
    MentionsInput.prototype.marker = '\uFEFF';

    function MentionsInput(input, options) {
      var container;
      this.input = input;
      this._updateHScroll = __bind(this._updateHScroll, this);
      this._updateVScroll = __bind(this._updateVScroll, this);
      this._updateValue = __bind(this._updateValue, this);
      this._onSelect = __bind(this._onSelect, this);
      this._addMention = __bind(this._addMention, this);
      this._updateMentions = __bind(this._updateMentions, this);
      this._update = __bind(this._update, this);
      this._mark = __bind(this._mark, this);
      this._handleLeftRight = __bind(this._handleLeftRight, this);
      this.options = $.extend({}, settings, options);
      if (!this.options.source) {
        this.options.source = this.input.data('source') || [];
      }
      this.mentions = [];
      this.input.addClass('input');
      container = $('<div>', {
        'class': 'mentions-input'
      });
      container.css('display', this.input.css('display'));
      this.container = this.input.wrapAll(container).parent();
      this.hidden = this._createHidden();
      this.highlighter = this._createHighlighter();
      this.highlighterContent = $('div', this.highlighter);
      this.input.focus((function(_this) {
        return function() {
          return _this.highlighter.addClass('focus');
        };
      })(this)).blur((function(_this) {
        return function() {
          return _this.highlighter.removeClass('focus');
        };
      })(this));
      this.autocomplete = this.input.areacomplete({
        matcher: this._getMatcher(),
        suffix: this.marker,
        select: this._onSelect,
        source: this.options.source,
        delay: this.options.delay,
        appendTo: this.input.parent()
      });
      this._initValue();
      this._initEvents();
    }

    MentionsInput.prototype._initEvents = function() {
      var tagName;
      this.input.on("input." + namespace, this._update);
      this.input.on("change." + namespace, this._update);
      this.input.on("keydown." + namespace, (function(_this) {
        return function(event) {
          return setTimeout((function() {
            return _this._handleLeftRight(event);
          }), 10);
        };
      })(this));
      tagName = this.input.prop("tagName");
      if (tagName === "INPUT") {
        this.input.on("focus." + namespace, (function(_this) {
          return function() {
            return _this.interval = setInterval(_this._updateHScroll, 10);
          };
        })(this));
        return this.input.on("blur." + namespace, (function(_this) {
          return function() {
            setTimeout(_this._updateHScroll, 10);
            return clearInterval(_this.interval);
          };
        })(this));
      } else if (tagName === "TEXTAREA") {
        this.input.on("scroll." + namespace, ((function(_this) {
          return function() {
            return setTimeout(_this._updateVScroll, 10);
          };
        })(this)));
        return this.input.on("resize." + namespace, ((function(_this) {
          return function() {
            return setTimeout(_this._updateVScroll, 10);
          };
        })(this)));
      }
    };

    MentionsInput.prototype._initValue = function() {
      var markedValue, match, mentionRE, pos, value;
      value = this.input.val();
      mentionRE = /@\[([^\]]+)\]\(([^ \)]+)\)/g;
      markedValue = value.replace(mentionRE, this._mark('$1'));
      this.input.val(markedValue);
      match = mentionRE.exec(value);
      while (match) {
        this._addMention({
          name: match[1],
          uid: match[2]
        }, pos = markedValue.indexOf(this._mark(match[1])));
        match = mentionRE.exec(value);
      }
      return this._updateValue();
    };

    MentionsInput.prototype._createHidden = function() {
      var hidden;
      hidden = $('<input>', {
        type: 'hidden',
        name: this.input.attr('name')
      });
      hidden.appendTo(this.container);
      this.input.removeAttr('name');
      return hidden;
    };

    MentionsInput.prototype._createHighlighter = function() {
      var content, highlighter, property, _i, _len;
      highlighter = $('<div>', {
        'class': 'highlighter'
      });
      highlighter.prependTo(this.container);
      content = $('<div>', {
        'class': 'highlighter-content'
      });
      highlighter.append(content);
      this.input.css('backgroundColor', 'transparent');
      for (_i = 0, _len = mimicProperties.length; _i < _len; _i++) {
        property = mimicProperties[_i];
        highlighter.css(property, this.input.css(property));
      }
      return highlighter;
    };

    MentionsInput.prototype._getMatcher = function() {
      var allowedChars;
      allowedChars = '[^' + this.options.trigger + ']';
      return '\\B[' + this.options.trigger + '](' + allowedChars + '{0,20})';
    };

    MentionsInput.prototype._handleLeftRight = function(event) {
      var delta, deltaEnd, deltaStart, sel, value;
      if (event.keyCode === Key.LEFT || event.keyCode === Key.RIGHT) {
        value = this.input.val();
        sel = Selection.get(this.input);
        delta = event.keyCode === Key.LEFT ? -1 : 1;
        deltaStart = value.charAt(sel.start) === this.marker ? delta : 0;
        deltaEnd = value.charAt(sel.end) === this.marker ? delta : 0;
        if (deltaStart || deltaEnd) {
          return Selection.set(this.input, sel.start + deltaStart, sel.end + deltaEnd);
        }
      }
    };

    MentionsInput.prototype._mark = function(name) {
      return name + this.marker;
    };

    MentionsInput.prototype._update = function() {
      this._updateMentions();
      return this._updateValue();
    };

    MentionsInput.prototype._updateMentions = function() {
      var i, index, marked, mention, newval, selection, value, _i, _len, _ref;
      value = this.input.val();
      if (value) {
        _ref = this.mentions.slice(0);
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          mention = _ref[i];
          marked = this._mark(mention.name);
          index = value.indexOf(marked);
          if (index === -1) {
            this.mentions.splice(i, 1);
          } else {
            mention.pos = index;
          }
          value = this._replaceWithSpaces(value, marked);
        }
        newval = this.input.val();
        while ((index = value.indexOf(this.marker)) >= 0) {
          value = this._cutChar(value, index);
          newval = this._cutChar(newval, index);
        }
        if (value !== newval) {
          selection = Selection.get(this.input);
          this.input.val(newval);
          return Selection.set(this.input, selection.start);
        }
      }
    };

    MentionsInput.prototype._addMention = function(mention) {
      return this.mentions.push(mention);
    };

    MentionsInput.prototype._onSelect = function(event, ui) {
      return this._addMention({
        name: ui.item.value,
        pos: ui.item.pos,
        uid: ui.item.uid
      });
    };

    MentionsInput.prototype._updateValue = function() {
      var hlContent, markedName, mention, value, _i, _len, _ref;
      value = hlContent = this.input.val();
      _ref = this.mentions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mention = _ref[_i];
        markedName = this._mark(mention.name);
        hlContent = hlContent.replace(markedName, "<strong>" + mention.name + "</strong>");
        value = value.replace(markedName, "@[" + mention.name + "](" + mention.uid + ")");
      }
      this.hidden.val(value);
      return this.highlighterContent.html(hlContent);
    };

    MentionsInput.prototype._updateVScroll = function() {
      var scrollTop;
      scrollTop = this.input.scrollTop();
      this.highlighterContent.css({
        top: "-" + scrollTop + "px"
      });
      return this.highlighter.height(this.input.height());
    };

    MentionsInput.prototype._updateHScroll = function() {
      var scrollLeft;
      scrollLeft = this.input.scrollLeft();
      this.highlighterContent.css({
        left: "-" + scrollLeft + "px"
      });
      return this.highlighterContent.width(this.input.get(0).scrollWidth);
    };

    MentionsInput.prototype._replaceWithSpaces = function(value, what) {
      return value.replace(what, Array(what.length).join(' '));
    };

    MentionsInput.prototype._cutChar = function(value, index) {
      return value.substring(0, index) + value.substring(index + 1);
    };

    MentionsInput.prototype.append = function() {
      var piece, pieces, value, _i, _len;
      pieces = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      value = this.input.val();
      for (_i = 0, _len = pieces.length; _i < _len; _i++) {
        piece = pieces[_i];
        if (typeof piece === 'string') {
          value += piece;
        } else {
          this._addMention({
            name: piece.name,
            uid: piece.uid,
            pos: value.length
          });
          value += this._mark(piece.name);
        }
      }
      this.input.val(value);
      return this._updateValue();
    };

    MentionsInput.prototype.getValue = function() {
      return this.hidden.val();
    };

    MentionsInput.prototype.clear = function() {
      this.input.val('');
      return this._update();
    };

    MentionsInput.prototype.destroy = function() {
      this.input.areacomplete("destroy");
      this.input.off("." + namespace).attr('name', this.hidden.attr('name'));
      return this.container.replaceWith(this.input);
    };

    return MentionsInput;

  })();

  $.fn[namespace] = function() {
    var args, options, returnValue;
    options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    returnValue = this;
    this.each(function() {
      var instance;
      if (typeof options === 'string' && options.charAt(0) !== '_') {
        instance = $(this).data('mentionsInput');
        if (options in instance) {
          return returnValue = instance[options].apply(instance, args);
        }
      } else {
        return $(this).data('mentionsInput', new MentionsInput($(this), options));
      }
    });
    return returnValue;
  };

}).call(this);
