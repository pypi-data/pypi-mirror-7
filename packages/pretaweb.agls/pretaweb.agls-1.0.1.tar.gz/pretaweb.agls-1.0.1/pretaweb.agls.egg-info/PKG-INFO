Metadata-Version: 1.1
Name: pretaweb.agls
Version: 1.0.1
Summary: This package injects AGLS meta tags into Plone page.
Home-page: https://github.com/djay/pretaweb.agls
Author: Dylan Jay
Author-email: software@pretaweb.com
License: GPL
Description: Introduction
        ============
        
        .. image:: https://secure.travis-ci.org/collective/pretaweb.agls.png
            :target: http://travis-ci.org/collective/pretaweb.agls
        
        This package introduces AGLS Metadata into Plone pages.
        
        
        Compatibility
        -------------
        
        Tested on plone 4.
        
        Works for the next Plone content type frameworks:
        
        * Archetypes
        
        * Dexterity
        
        
        
        Useful Links
        ------------
        
        * AGLS Standard:
            http://www.agls.gov.au/
        
        * AGLS Usage Guide:
            http://www.agls.gov.au/pdf/AGLS%20Metadata%20Standard%20Part%202%20Usage%20Guide.PDF
        
        Change history
        **************
        
        Changelog
        =========
        
        1.0.1 (30-May-2013)
        -----------------
        - fixed incorrect merge [djay]
        - put in place travis testing [djay]
        
        
        1.0 (30-May-2013)
        -----------------
        - initial public release [djay]
        
        
        1.0alpha1 (unreleased)
        ----------------------
        
        - handle if schema isn't found. don't error [djay]
        - Add uninstall step for browserlayer [Ivan Teoh]
        - Fix the Schema could not find 'agls_type'
        - Created recipe with ZopeSkel
          [Vitaliy Podoba]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  
        
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.  We then ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        Finally, let's return to the front page of our site before continuing
        
            >>> browser.open(portal_url)
        
        -*- extra stuff goes here -*-
        
        
        Contributors
        ************
        
        vitaliypodoba@gmail.com, Author
        Ivan Teoh, Contributor
        Dylan Jay, Contributor
        
        
        Download
        ********
        
Keywords: plone agls metadata
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
