# Automatically generated wrappers.
# Override by adding wrappers to helpers.py.
from .dso import ffi, _LIB
from .structs import Struct, unbox

SDL_PIXELFORMAT_UNKNOWN = _LIB.SDL_PIXELFORMAT_UNKNOWN

SDL_LOG_CATEGORY_APPLICATION = _LIB.SDL_LOG_CATEGORY_APPLICATION
SDL_LOG_CATEGORY_ERROR = _LIB.SDL_LOG_CATEGORY_ERROR
SDL_LOG_CATEGORY_ASSERT = _LIB.SDL_LOG_CATEGORY_ASSERT
SDL_LOG_CATEGORY_SYSTEM = _LIB.SDL_LOG_CATEGORY_SYSTEM
SDL_LOG_CATEGORY_AUDIO = _LIB.SDL_LOG_CATEGORY_AUDIO
SDL_LOG_CATEGORY_VIDEO = _LIB.SDL_LOG_CATEGORY_VIDEO
SDL_LOG_CATEGORY_RENDER = _LIB.SDL_LOG_CATEGORY_RENDER
SDL_LOG_CATEGORY_INPUT = _LIB.SDL_LOG_CATEGORY_INPUT
SDL_LOG_CATEGORY_TEST = _LIB.SDL_LOG_CATEGORY_TEST
SDL_LOG_CATEGORY_RESERVED1 = _LIB.SDL_LOG_CATEGORY_RESERVED1
SDL_LOG_CATEGORY_RESERVED2 = _LIB.SDL_LOG_CATEGORY_RESERVED2
SDL_LOG_CATEGORY_RESERVED3 = _LIB.SDL_LOG_CATEGORY_RESERVED3
SDL_LOG_CATEGORY_RESERVED4 = _LIB.SDL_LOG_CATEGORY_RESERVED4
SDL_LOG_CATEGORY_RESERVED5 = _LIB.SDL_LOG_CATEGORY_RESERVED5
SDL_LOG_CATEGORY_RESERVED6 = _LIB.SDL_LOG_CATEGORY_RESERVED6
SDL_LOG_CATEGORY_RESERVED7 = _LIB.SDL_LOG_CATEGORY_RESERVED7
SDL_LOG_CATEGORY_RESERVED8 = _LIB.SDL_LOG_CATEGORY_RESERVED8
SDL_LOG_CATEGORY_RESERVED9 = _LIB.SDL_LOG_CATEGORY_RESERVED9
SDL_LOG_CATEGORY_RESERVED10 = _LIB.SDL_LOG_CATEGORY_RESERVED10
SDL_LOG_CATEGORY_CUSTOM = _LIB.SDL_LOG_CATEGORY_CUSTOM

SDL_PIXELTYPE_UNKNOWN = _LIB.SDL_PIXELTYPE_UNKNOWN
SDL_PIXELTYPE_INDEX1 = _LIB.SDL_PIXELTYPE_INDEX1
SDL_PIXELTYPE_INDEX4 = _LIB.SDL_PIXELTYPE_INDEX4
SDL_PIXELTYPE_INDEX8 = _LIB.SDL_PIXELTYPE_INDEX8
SDL_PIXELTYPE_PACKED8 = _LIB.SDL_PIXELTYPE_PACKED8
SDL_PIXELTYPE_PACKED16 = _LIB.SDL_PIXELTYPE_PACKED16
SDL_PIXELTYPE_PACKED32 = _LIB.SDL_PIXELTYPE_PACKED32
SDL_PIXELTYPE_ARRAYU8 = _LIB.SDL_PIXELTYPE_ARRAYU8
SDL_PIXELTYPE_ARRAYU16 = _LIB.SDL_PIXELTYPE_ARRAYU16
SDL_PIXELTYPE_ARRAYU32 = _LIB.SDL_PIXELTYPE_ARRAYU32
SDL_PIXELTYPE_ARRAYF16 = _LIB.SDL_PIXELTYPE_ARRAYF16
SDL_PIXELTYPE_ARRAYF32 = _LIB.SDL_PIXELTYPE_ARRAYF32

SDL_BITMAPORDER_NONE = _LIB.SDL_BITMAPORDER_NONE
SDL_BITMAPORDER_4321 = _LIB.SDL_BITMAPORDER_4321
SDL_BITMAPORDER_1234 = _LIB.SDL_BITMAPORDER_1234

SDL_PACKEDORDER_NONE = _LIB.SDL_PACKEDORDER_NONE
SDL_PACKEDORDER_XRGB = _LIB.SDL_PACKEDORDER_XRGB
SDL_PACKEDORDER_RGBX = _LIB.SDL_PACKEDORDER_RGBX
SDL_PACKEDORDER_ARGB = _LIB.SDL_PACKEDORDER_ARGB
SDL_PACKEDORDER_RGBA = _LIB.SDL_PACKEDORDER_RGBA
SDL_PACKEDORDER_XBGR = _LIB.SDL_PACKEDORDER_XBGR
SDL_PACKEDORDER_BGRX = _LIB.SDL_PACKEDORDER_BGRX
SDL_PACKEDORDER_ABGR = _LIB.SDL_PACKEDORDER_ABGR
SDL_PACKEDORDER_BGRA = _LIB.SDL_PACKEDORDER_BGRA

SDL_ARRAYORDER_NONE = _LIB.SDL_ARRAYORDER_NONE
SDL_ARRAYORDER_RGB = _LIB.SDL_ARRAYORDER_RGB
SDL_ARRAYORDER_RGBA = _LIB.SDL_ARRAYORDER_RGBA
SDL_ARRAYORDER_ARGB = _LIB.SDL_ARRAYORDER_ARGB
SDL_ARRAYORDER_BGR = _LIB.SDL_ARRAYORDER_BGR
SDL_ARRAYORDER_BGRA = _LIB.SDL_ARRAYORDER_BGRA
SDL_ARRAYORDER_ABGR = _LIB.SDL_ARRAYORDER_ABGR

SDL_PACKEDLAYOUT_NONE = _LIB.SDL_PACKEDLAYOUT_NONE
SDL_PACKEDLAYOUT_332 = _LIB.SDL_PACKEDLAYOUT_332
SDL_PACKEDLAYOUT_4444 = _LIB.SDL_PACKEDLAYOUT_4444
SDL_PACKEDLAYOUT_1555 = _LIB.SDL_PACKEDLAYOUT_1555
SDL_PACKEDLAYOUT_5551 = _LIB.SDL_PACKEDLAYOUT_5551
SDL_PACKEDLAYOUT_565 = _LIB.SDL_PACKEDLAYOUT_565
SDL_PACKEDLAYOUT_8888 = _LIB.SDL_PACKEDLAYOUT_8888
SDL_PACKEDLAYOUT_2101010 = _LIB.SDL_PACKEDLAYOUT_2101010
SDL_PACKEDLAYOUT_1010102 = _LIB.SDL_PACKEDLAYOUT_1010102

SDL_AUDIO_STOPPED = _LIB.SDL_AUDIO_STOPPED
SDL_AUDIO_PLAYING = _LIB.SDL_AUDIO_PLAYING
SDL_AUDIO_PAUSED = _LIB.SDL_AUDIO_PAUSED

SDL_BLENDMODE_NONE = _LIB.SDL_BLENDMODE_NONE
SDL_BLENDMODE_BLEND = _LIB.SDL_BLENDMODE_BLEND
SDL_BLENDMODE_ADD = _LIB.SDL_BLENDMODE_ADD
SDL_BLENDMODE_MOD = _LIB.SDL_BLENDMODE_MOD

SDL_FIRSTEVENT = _LIB.SDL_FIRSTEVENT
SDL_QUIT = _LIB.SDL_QUIT
SDL_APP_TERMINATING = _LIB.SDL_APP_TERMINATING
SDL_APP_LOWMEMORY = _LIB.SDL_APP_LOWMEMORY
SDL_APP_WILLENTERBACKGROUND = _LIB.SDL_APP_WILLENTERBACKGROUND
SDL_APP_DIDENTERBACKGROUND = _LIB.SDL_APP_DIDENTERBACKGROUND
SDL_APP_WILLENTERFOREGROUND = _LIB.SDL_APP_WILLENTERFOREGROUND
SDL_APP_DIDENTERFOREGROUND = _LIB.SDL_APP_DIDENTERFOREGROUND
SDL_WINDOWEVENT = _LIB.SDL_WINDOWEVENT
SDL_SYSWMEVENT = _LIB.SDL_SYSWMEVENT
SDL_KEYDOWN = _LIB.SDL_KEYDOWN
SDL_KEYUP = _LIB.SDL_KEYUP
SDL_TEXTEDITING = _LIB.SDL_TEXTEDITING
SDL_TEXTINPUT = _LIB.SDL_TEXTINPUT
SDL_MOUSEMOTION = _LIB.SDL_MOUSEMOTION
SDL_MOUSEBUTTONDOWN = _LIB.SDL_MOUSEBUTTONDOWN
SDL_MOUSEBUTTONUP = _LIB.SDL_MOUSEBUTTONUP
SDL_MOUSEWHEEL = _LIB.SDL_MOUSEWHEEL
SDL_JOYAXISMOTION = _LIB.SDL_JOYAXISMOTION
SDL_JOYBALLMOTION = _LIB.SDL_JOYBALLMOTION
SDL_JOYHATMOTION = _LIB.SDL_JOYHATMOTION
SDL_JOYBUTTONDOWN = _LIB.SDL_JOYBUTTONDOWN
SDL_JOYBUTTONUP = _LIB.SDL_JOYBUTTONUP
SDL_JOYDEVICEADDED = _LIB.SDL_JOYDEVICEADDED
SDL_JOYDEVICEREMOVED = _LIB.SDL_JOYDEVICEREMOVED
SDL_CONTROLLERAXISMOTION = _LIB.SDL_CONTROLLERAXISMOTION
SDL_CONTROLLERBUTTONDOWN = _LIB.SDL_CONTROLLERBUTTONDOWN
SDL_CONTROLLERBUTTONUP = _LIB.SDL_CONTROLLERBUTTONUP
SDL_CONTROLLERDEVICEADDED = _LIB.SDL_CONTROLLERDEVICEADDED
SDL_CONTROLLERDEVICEREMOVED = _LIB.SDL_CONTROLLERDEVICEREMOVED
SDL_CONTROLLERDEVICEREMAPPED = _LIB.SDL_CONTROLLERDEVICEREMAPPED
SDL_FINGERDOWN = _LIB.SDL_FINGERDOWN
SDL_FINGERUP = _LIB.SDL_FINGERUP
SDL_FINGERMOTION = _LIB.SDL_FINGERMOTION
SDL_DOLLARGESTURE = _LIB.SDL_DOLLARGESTURE
SDL_DOLLARRECORD = _LIB.SDL_DOLLARRECORD
SDL_MULTIGESTURE = _LIB.SDL_MULTIGESTURE
SDL_CLIPBOARDUPDATE = _LIB.SDL_CLIPBOARDUPDATE
SDL_DROPFILE = _LIB.SDL_DROPFILE
SDL_USEREVENT = _LIB.SDL_USEREVENT
SDL_LASTEVENT = _LIB.SDL_LASTEVENT

SDL_GL_RED_SIZE = _LIB.SDL_GL_RED_SIZE
SDL_GL_GREEN_SIZE = _LIB.SDL_GL_GREEN_SIZE
SDL_GL_BLUE_SIZE = _LIB.SDL_GL_BLUE_SIZE
SDL_GL_ALPHA_SIZE = _LIB.SDL_GL_ALPHA_SIZE
SDL_GL_BUFFER_SIZE = _LIB.SDL_GL_BUFFER_SIZE
SDL_GL_DOUBLEBUFFER = _LIB.SDL_GL_DOUBLEBUFFER
SDL_GL_DEPTH_SIZE = _LIB.SDL_GL_DEPTH_SIZE
SDL_GL_STENCIL_SIZE = _LIB.SDL_GL_STENCIL_SIZE
SDL_GL_ACCUM_RED_SIZE = _LIB.SDL_GL_ACCUM_RED_SIZE
SDL_GL_ACCUM_GREEN_SIZE = _LIB.SDL_GL_ACCUM_GREEN_SIZE
SDL_GL_ACCUM_BLUE_SIZE = _LIB.SDL_GL_ACCUM_BLUE_SIZE
SDL_GL_ACCUM_ALPHA_SIZE = _LIB.SDL_GL_ACCUM_ALPHA_SIZE
SDL_GL_STEREO = _LIB.SDL_GL_STEREO
SDL_GL_MULTISAMPLEBUFFERS = _LIB.SDL_GL_MULTISAMPLEBUFFERS
SDL_GL_MULTISAMPLESAMPLES = _LIB.SDL_GL_MULTISAMPLESAMPLES
SDL_GL_ACCELERATED_VISUAL = _LIB.SDL_GL_ACCELERATED_VISUAL
SDL_GL_RETAINED_BACKING = _LIB.SDL_GL_RETAINED_BACKING
SDL_GL_CONTEXT_MAJOR_VERSION = _LIB.SDL_GL_CONTEXT_MAJOR_VERSION
SDL_GL_CONTEXT_MINOR_VERSION = _LIB.SDL_GL_CONTEXT_MINOR_VERSION
SDL_GL_CONTEXT_EGL = _LIB.SDL_GL_CONTEXT_EGL
SDL_GL_CONTEXT_FLAGS = _LIB.SDL_GL_CONTEXT_FLAGS
SDL_GL_CONTEXT_PROFILE_MASK = _LIB.SDL_GL_CONTEXT_PROFILE_MASK
SDL_GL_SHARE_WITH_CURRENT_CONTEXT = _LIB.SDL_GL_SHARE_WITH_CURRENT_CONTEXT

SDL_GL_CONTEXT_DEBUG_FLAG = _LIB.SDL_GL_CONTEXT_DEBUG_FLAG
SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = _LIB.SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG
SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = _LIB.SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG
SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = _LIB.SDL_GL_CONTEXT_RESET_ISOLATION_FLAG

SDL_GL_CONTEXT_PROFILE_CORE = _LIB.SDL_GL_CONTEXT_PROFILE_CORE
SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = _LIB.SDL_GL_CONTEXT_PROFILE_COMPATIBILITY
SDL_GL_CONTEXT_PROFILE_ES = _LIB.SDL_GL_CONTEXT_PROFILE_ES

SDL_CONTROLLER_AXIS_INVALID = _LIB.SDL_CONTROLLER_AXIS_INVALID
SDL_CONTROLLER_AXIS_LEFTX = _LIB.SDL_CONTROLLER_AXIS_LEFTX
SDL_CONTROLLER_AXIS_LEFTY = _LIB.SDL_CONTROLLER_AXIS_LEFTY
SDL_CONTROLLER_AXIS_RIGHTX = _LIB.SDL_CONTROLLER_AXIS_RIGHTX
SDL_CONTROLLER_AXIS_RIGHTY = _LIB.SDL_CONTROLLER_AXIS_RIGHTY
SDL_CONTROLLER_AXIS_TRIGGERLEFT = _LIB.SDL_CONTROLLER_AXIS_TRIGGERLEFT
SDL_CONTROLLER_AXIS_TRIGGERRIGHT = _LIB.SDL_CONTROLLER_AXIS_TRIGGERRIGHT
SDL_CONTROLLER_AXIS_MAX = _LIB.SDL_CONTROLLER_AXIS_MAX

SDL_CONTROLLER_BINDTYPE_NONE = _LIB.SDL_CONTROLLER_BINDTYPE_NONE
SDL_CONTROLLER_BINDTYPE_BUTTON = _LIB.SDL_CONTROLLER_BINDTYPE_BUTTON
SDL_CONTROLLER_BINDTYPE_AXIS = _LIB.SDL_CONTROLLER_BINDTYPE_AXIS
SDL_CONTROLLER_BINDTYPE_HAT = _LIB.SDL_CONTROLLER_BINDTYPE_HAT

SDL_CONTROLLER_BUTTON_INVALID = _LIB.SDL_CONTROLLER_BUTTON_INVALID
SDL_CONTROLLER_BUTTON_A = _LIB.SDL_CONTROLLER_BUTTON_A
SDL_CONTROLLER_BUTTON_B = _LIB.SDL_CONTROLLER_BUTTON_B
SDL_CONTROLLER_BUTTON_X = _LIB.SDL_CONTROLLER_BUTTON_X
SDL_CONTROLLER_BUTTON_Y = _LIB.SDL_CONTROLLER_BUTTON_Y
SDL_CONTROLLER_BUTTON_BACK = _LIB.SDL_CONTROLLER_BUTTON_BACK
SDL_CONTROLLER_BUTTON_GUIDE = _LIB.SDL_CONTROLLER_BUTTON_GUIDE
SDL_CONTROLLER_BUTTON_START = _LIB.SDL_CONTROLLER_BUTTON_START
SDL_CONTROLLER_BUTTON_LEFTSTICK = _LIB.SDL_CONTROLLER_BUTTON_LEFTSTICK
SDL_CONTROLLER_BUTTON_RIGHTSTICK = _LIB.SDL_CONTROLLER_BUTTON_RIGHTSTICK
SDL_CONTROLLER_BUTTON_LEFTSHOULDER = _LIB.SDL_CONTROLLER_BUTTON_LEFTSHOULDER
SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = _LIB.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER
SDL_CONTROLLER_BUTTON_DPAD_UP = _LIB.SDL_CONTROLLER_BUTTON_DPAD_UP
SDL_CONTROLLER_BUTTON_DPAD_DOWN = _LIB.SDL_CONTROLLER_BUTTON_DPAD_DOWN
SDL_CONTROLLER_BUTTON_DPAD_LEFT = _LIB.SDL_CONTROLLER_BUTTON_DPAD_LEFT
SDL_CONTROLLER_BUTTON_DPAD_RIGHT = _LIB.SDL_CONTROLLER_BUTTON_DPAD_RIGHT
SDL_CONTROLLER_BUTTON_MAX = _LIB.SDL_CONTROLLER_BUTTON_MAX

SDL_HINT_DEFAULT = _LIB.SDL_HINT_DEFAULT
SDL_HINT_NORMAL = _LIB.SDL_HINT_NORMAL
SDL_HINT_OVERRIDE = _LIB.SDL_HINT_OVERRIDE

SDL_KMOD_NONE = _LIB.SDL_KMOD_NONE
SDL_KMOD_LSHIFT = _LIB.SDL_KMOD_LSHIFT
SDL_KMOD_RSHIFT = _LIB.SDL_KMOD_RSHIFT
SDL_KMOD_LCTRL = _LIB.SDL_KMOD_LCTRL
SDL_KMOD_RCTRL = _LIB.SDL_KMOD_RCTRL
SDL_KMOD_LALT = _LIB.SDL_KMOD_LALT
SDL_KMOD_RALT = _LIB.SDL_KMOD_RALT
SDL_KMOD_LGUI = _LIB.SDL_KMOD_LGUI
SDL_KMOD_RGUI = _LIB.SDL_KMOD_RGUI
SDL_KMOD_NUM = _LIB.SDL_KMOD_NUM
SDL_KMOD_CAPS = _LIB.SDL_KMOD_CAPS
SDL_KMOD_MODE = _LIB.SDL_KMOD_MODE
SDL_KMOD_RESERVED = _LIB.SDL_KMOD_RESERVED

SDL_LOG_PRIORITY_VERBOSE = _LIB.SDL_LOG_PRIORITY_VERBOSE
SDL_LOG_PRIORITY_DEBUG = _LIB.SDL_LOG_PRIORITY_DEBUG
SDL_LOG_PRIORITY_INFO = _LIB.SDL_LOG_PRIORITY_INFO
SDL_LOG_PRIORITY_WARN = _LIB.SDL_LOG_PRIORITY_WARN
SDL_LOG_PRIORITY_ERROR = _LIB.SDL_LOG_PRIORITY_ERROR
SDL_LOG_PRIORITY_CRITICAL = _LIB.SDL_LOG_PRIORITY_CRITICAL
SDL_NUM_LOG_PRIORITIES = _LIB.SDL_NUM_LOG_PRIORITIES

SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = _LIB.SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT
SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = _LIB.SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT

SDL_MESSAGEBOX_COLOR_BACKGROUND = _LIB.SDL_MESSAGEBOX_COLOR_BACKGROUND
SDL_MESSAGEBOX_COLOR_TEXT = _LIB.SDL_MESSAGEBOX_COLOR_TEXT
SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = _LIB.SDL_MESSAGEBOX_COLOR_BUTTON_BORDER
SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = _LIB.SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND
SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = _LIB.SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED
SDL_MESSAGEBOX_COLOR_MAX = _LIB.SDL_MESSAGEBOX_COLOR_MAX

SDL_MESSAGEBOX_ERROR = _LIB.SDL_MESSAGEBOX_ERROR
SDL_MESSAGEBOX_WARNING = _LIB.SDL_MESSAGEBOX_WARNING
SDL_MESSAGEBOX_INFORMATION = _LIB.SDL_MESSAGEBOX_INFORMATION

SDL_POWERSTATE_UNKNOWN = _LIB.SDL_POWERSTATE_UNKNOWN
SDL_POWERSTATE_ON_BATTERY = _LIB.SDL_POWERSTATE_ON_BATTERY
SDL_POWERSTATE_NO_BATTERY = _LIB.SDL_POWERSTATE_NO_BATTERY
SDL_POWERSTATE_CHARGING = _LIB.SDL_POWERSTATE_CHARGING
SDL_POWERSTATE_CHARGED = _LIB.SDL_POWERSTATE_CHARGED

SDL_RENDERER_SOFTWARE = _LIB.SDL_RENDERER_SOFTWARE
SDL_RENDERER_ACCELERATED = _LIB.SDL_RENDERER_ACCELERATED
SDL_RENDERER_PRESENTVSYNC = _LIB.SDL_RENDERER_PRESENTVSYNC
SDL_RENDERER_TARGETTEXTURE = _LIB.SDL_RENDERER_TARGETTEXTURE

SDL_FLIP_NONE = _LIB.SDL_FLIP_NONE
SDL_FLIP_HORIZONTAL = _LIB.SDL_FLIP_HORIZONTAL
SDL_FLIP_VERTICAL = _LIB.SDL_FLIP_VERTICAL

SDL_SCANCODE_UNKNOWN = _LIB.SDL_SCANCODE_UNKNOWN
SDL_SCANCODE_A = _LIB.SDL_SCANCODE_A
SDL_SCANCODE_B = _LIB.SDL_SCANCODE_B
SDL_SCANCODE_C = _LIB.SDL_SCANCODE_C
SDL_SCANCODE_D = _LIB.SDL_SCANCODE_D
SDL_SCANCODE_E = _LIB.SDL_SCANCODE_E
SDL_SCANCODE_F = _LIB.SDL_SCANCODE_F
SDL_SCANCODE_G = _LIB.SDL_SCANCODE_G
SDL_SCANCODE_H = _LIB.SDL_SCANCODE_H
SDL_SCANCODE_I = _LIB.SDL_SCANCODE_I
SDL_SCANCODE_J = _LIB.SDL_SCANCODE_J
SDL_SCANCODE_K = _LIB.SDL_SCANCODE_K
SDL_SCANCODE_L = _LIB.SDL_SCANCODE_L
SDL_SCANCODE_M = _LIB.SDL_SCANCODE_M
SDL_SCANCODE_N = _LIB.SDL_SCANCODE_N
SDL_SCANCODE_O = _LIB.SDL_SCANCODE_O
SDL_SCANCODE_P = _LIB.SDL_SCANCODE_P
SDL_SCANCODE_Q = _LIB.SDL_SCANCODE_Q
SDL_SCANCODE_R = _LIB.SDL_SCANCODE_R
SDL_SCANCODE_S = _LIB.SDL_SCANCODE_S
SDL_SCANCODE_T = _LIB.SDL_SCANCODE_T
SDL_SCANCODE_U = _LIB.SDL_SCANCODE_U
SDL_SCANCODE_V = _LIB.SDL_SCANCODE_V
SDL_SCANCODE_W = _LIB.SDL_SCANCODE_W
SDL_SCANCODE_X = _LIB.SDL_SCANCODE_X
SDL_SCANCODE_Y = _LIB.SDL_SCANCODE_Y
SDL_SCANCODE_Z = _LIB.SDL_SCANCODE_Z
SDL_SCANCODE_1 = _LIB.SDL_SCANCODE_1
SDL_SCANCODE_2 = _LIB.SDL_SCANCODE_2
SDL_SCANCODE_3 = _LIB.SDL_SCANCODE_3
SDL_SCANCODE_4 = _LIB.SDL_SCANCODE_4
SDL_SCANCODE_5 = _LIB.SDL_SCANCODE_5
SDL_SCANCODE_6 = _LIB.SDL_SCANCODE_6
SDL_SCANCODE_7 = _LIB.SDL_SCANCODE_7
SDL_SCANCODE_8 = _LIB.SDL_SCANCODE_8
SDL_SCANCODE_9 = _LIB.SDL_SCANCODE_9
SDL_SCANCODE_0 = _LIB.SDL_SCANCODE_0
SDL_SCANCODE_RETURN = _LIB.SDL_SCANCODE_RETURN
SDL_SCANCODE_ESCAPE = _LIB.SDL_SCANCODE_ESCAPE
SDL_SCANCODE_BACKSPACE = _LIB.SDL_SCANCODE_BACKSPACE
SDL_SCANCODE_TAB = _LIB.SDL_SCANCODE_TAB
SDL_SCANCODE_SPACE = _LIB.SDL_SCANCODE_SPACE
SDL_SCANCODE_MINUS = _LIB.SDL_SCANCODE_MINUS
SDL_SCANCODE_EQUALS = _LIB.SDL_SCANCODE_EQUALS
SDL_SCANCODE_LEFTBRACKET = _LIB.SDL_SCANCODE_LEFTBRACKET
SDL_SCANCODE_RIGHTBRACKET = _LIB.SDL_SCANCODE_RIGHTBRACKET
SDL_SCANCODE_BACKSLASH = _LIB.SDL_SCANCODE_BACKSLASH
SDL_SCANCODE_NONUSHASH = _LIB.SDL_SCANCODE_NONUSHASH
SDL_SCANCODE_SEMICOLON = _LIB.SDL_SCANCODE_SEMICOLON
SDL_SCANCODE_APOSTROPHE = _LIB.SDL_SCANCODE_APOSTROPHE
SDL_SCANCODE_GRAVE = _LIB.SDL_SCANCODE_GRAVE
SDL_SCANCODE_COMMA = _LIB.SDL_SCANCODE_COMMA
SDL_SCANCODE_PERIOD = _LIB.SDL_SCANCODE_PERIOD
SDL_SCANCODE_SLASH = _LIB.SDL_SCANCODE_SLASH
SDL_SCANCODE_CAPSLOCK = _LIB.SDL_SCANCODE_CAPSLOCK
SDL_SCANCODE_F1 = _LIB.SDL_SCANCODE_F1
SDL_SCANCODE_F2 = _LIB.SDL_SCANCODE_F2
SDL_SCANCODE_F3 = _LIB.SDL_SCANCODE_F3
SDL_SCANCODE_F4 = _LIB.SDL_SCANCODE_F4
SDL_SCANCODE_F5 = _LIB.SDL_SCANCODE_F5
SDL_SCANCODE_F6 = _LIB.SDL_SCANCODE_F6
SDL_SCANCODE_F7 = _LIB.SDL_SCANCODE_F7
SDL_SCANCODE_F8 = _LIB.SDL_SCANCODE_F8
SDL_SCANCODE_F9 = _LIB.SDL_SCANCODE_F9
SDL_SCANCODE_F10 = _LIB.SDL_SCANCODE_F10
SDL_SCANCODE_F11 = _LIB.SDL_SCANCODE_F11
SDL_SCANCODE_F12 = _LIB.SDL_SCANCODE_F12
SDL_SCANCODE_PRINTSCREEN = _LIB.SDL_SCANCODE_PRINTSCREEN
SDL_SCANCODE_SCROLLLOCK = _LIB.SDL_SCANCODE_SCROLLLOCK
SDL_SCANCODE_PAUSE = _LIB.SDL_SCANCODE_PAUSE
SDL_SCANCODE_INSERT = _LIB.SDL_SCANCODE_INSERT
SDL_SCANCODE_HOME = _LIB.SDL_SCANCODE_HOME
SDL_SCANCODE_PAGEUP = _LIB.SDL_SCANCODE_PAGEUP
SDL_SCANCODE_DELETE = _LIB.SDL_SCANCODE_DELETE
SDL_SCANCODE_END = _LIB.SDL_SCANCODE_END
SDL_SCANCODE_PAGEDOWN = _LIB.SDL_SCANCODE_PAGEDOWN
SDL_SCANCODE_RIGHT = _LIB.SDL_SCANCODE_RIGHT
SDL_SCANCODE_LEFT = _LIB.SDL_SCANCODE_LEFT
SDL_SCANCODE_DOWN = _LIB.SDL_SCANCODE_DOWN
SDL_SCANCODE_UP = _LIB.SDL_SCANCODE_UP
SDL_SCANCODE_NUMLOCKCLEAR = _LIB.SDL_SCANCODE_NUMLOCKCLEAR
SDL_SCANCODE_KP_DIVIDE = _LIB.SDL_SCANCODE_KP_DIVIDE
SDL_SCANCODE_KP_MULTIPLY = _LIB.SDL_SCANCODE_KP_MULTIPLY
SDL_SCANCODE_KP_MINUS = _LIB.SDL_SCANCODE_KP_MINUS
SDL_SCANCODE_KP_PLUS = _LIB.SDL_SCANCODE_KP_PLUS
SDL_SCANCODE_KP_ENTER = _LIB.SDL_SCANCODE_KP_ENTER
SDL_SCANCODE_KP_1 = _LIB.SDL_SCANCODE_KP_1
SDL_SCANCODE_KP_2 = _LIB.SDL_SCANCODE_KP_2
SDL_SCANCODE_KP_3 = _LIB.SDL_SCANCODE_KP_3
SDL_SCANCODE_KP_4 = _LIB.SDL_SCANCODE_KP_4
SDL_SCANCODE_KP_5 = _LIB.SDL_SCANCODE_KP_5
SDL_SCANCODE_KP_6 = _LIB.SDL_SCANCODE_KP_6
SDL_SCANCODE_KP_7 = _LIB.SDL_SCANCODE_KP_7
SDL_SCANCODE_KP_8 = _LIB.SDL_SCANCODE_KP_8
SDL_SCANCODE_KP_9 = _LIB.SDL_SCANCODE_KP_9
SDL_SCANCODE_KP_0 = _LIB.SDL_SCANCODE_KP_0
SDL_SCANCODE_KP_PERIOD = _LIB.SDL_SCANCODE_KP_PERIOD
SDL_SCANCODE_NONUSBACKSLASH = _LIB.SDL_SCANCODE_NONUSBACKSLASH
SDL_SCANCODE_APPLICATION = _LIB.SDL_SCANCODE_APPLICATION
SDL_SCANCODE_POWER = _LIB.SDL_SCANCODE_POWER
SDL_SCANCODE_KP_EQUALS = _LIB.SDL_SCANCODE_KP_EQUALS
SDL_SCANCODE_F13 = _LIB.SDL_SCANCODE_F13
SDL_SCANCODE_F14 = _LIB.SDL_SCANCODE_F14
SDL_SCANCODE_F15 = _LIB.SDL_SCANCODE_F15
SDL_SCANCODE_F16 = _LIB.SDL_SCANCODE_F16
SDL_SCANCODE_F17 = _LIB.SDL_SCANCODE_F17
SDL_SCANCODE_F18 = _LIB.SDL_SCANCODE_F18
SDL_SCANCODE_F19 = _LIB.SDL_SCANCODE_F19
SDL_SCANCODE_F20 = _LIB.SDL_SCANCODE_F20
SDL_SCANCODE_F21 = _LIB.SDL_SCANCODE_F21
SDL_SCANCODE_F22 = _LIB.SDL_SCANCODE_F22
SDL_SCANCODE_F23 = _LIB.SDL_SCANCODE_F23
SDL_SCANCODE_F24 = _LIB.SDL_SCANCODE_F24
SDL_SCANCODE_EXECUTE = _LIB.SDL_SCANCODE_EXECUTE
SDL_SCANCODE_HELP = _LIB.SDL_SCANCODE_HELP
SDL_SCANCODE_MENU = _LIB.SDL_SCANCODE_MENU
SDL_SCANCODE_SELECT = _LIB.SDL_SCANCODE_SELECT
SDL_SCANCODE_STOP = _LIB.SDL_SCANCODE_STOP
SDL_SCANCODE_AGAIN = _LIB.SDL_SCANCODE_AGAIN
SDL_SCANCODE_UNDO = _LIB.SDL_SCANCODE_UNDO
SDL_SCANCODE_CUT = _LIB.SDL_SCANCODE_CUT
SDL_SCANCODE_COPY = _LIB.SDL_SCANCODE_COPY
SDL_SCANCODE_PASTE = _LIB.SDL_SCANCODE_PASTE
SDL_SCANCODE_FIND = _LIB.SDL_SCANCODE_FIND
SDL_SCANCODE_MUTE = _LIB.SDL_SCANCODE_MUTE
SDL_SCANCODE_VOLUMEUP = _LIB.SDL_SCANCODE_VOLUMEUP
SDL_SCANCODE_VOLUMEDOWN = _LIB.SDL_SCANCODE_VOLUMEDOWN
SDL_SCANCODE_KP_COMMA = _LIB.SDL_SCANCODE_KP_COMMA
SDL_SCANCODE_KP_EQUALSAS400 = _LIB.SDL_SCANCODE_KP_EQUALSAS400
SDL_SCANCODE_INTERNATIONAL1 = _LIB.SDL_SCANCODE_INTERNATIONAL1
SDL_SCANCODE_INTERNATIONAL2 = _LIB.SDL_SCANCODE_INTERNATIONAL2
SDL_SCANCODE_INTERNATIONAL3 = _LIB.SDL_SCANCODE_INTERNATIONAL3
SDL_SCANCODE_INTERNATIONAL4 = _LIB.SDL_SCANCODE_INTERNATIONAL4
SDL_SCANCODE_INTERNATIONAL5 = _LIB.SDL_SCANCODE_INTERNATIONAL5
SDL_SCANCODE_INTERNATIONAL6 = _LIB.SDL_SCANCODE_INTERNATIONAL6
SDL_SCANCODE_INTERNATIONAL7 = _LIB.SDL_SCANCODE_INTERNATIONAL7
SDL_SCANCODE_INTERNATIONAL8 = _LIB.SDL_SCANCODE_INTERNATIONAL8
SDL_SCANCODE_INTERNATIONAL9 = _LIB.SDL_SCANCODE_INTERNATIONAL9
SDL_SCANCODE_LANG1 = _LIB.SDL_SCANCODE_LANG1
SDL_SCANCODE_LANG2 = _LIB.SDL_SCANCODE_LANG2
SDL_SCANCODE_LANG3 = _LIB.SDL_SCANCODE_LANG3
SDL_SCANCODE_LANG4 = _LIB.SDL_SCANCODE_LANG4
SDL_SCANCODE_LANG5 = _LIB.SDL_SCANCODE_LANG5
SDL_SCANCODE_LANG6 = _LIB.SDL_SCANCODE_LANG6
SDL_SCANCODE_LANG7 = _LIB.SDL_SCANCODE_LANG7
SDL_SCANCODE_LANG8 = _LIB.SDL_SCANCODE_LANG8
SDL_SCANCODE_LANG9 = _LIB.SDL_SCANCODE_LANG9
SDL_SCANCODE_ALTERASE = _LIB.SDL_SCANCODE_ALTERASE
SDL_SCANCODE_SYSREQ = _LIB.SDL_SCANCODE_SYSREQ
SDL_SCANCODE_CANCEL = _LIB.SDL_SCANCODE_CANCEL
SDL_SCANCODE_CLEAR = _LIB.SDL_SCANCODE_CLEAR
SDL_SCANCODE_PRIOR = _LIB.SDL_SCANCODE_PRIOR
SDL_SCANCODE_RETURN2 = _LIB.SDL_SCANCODE_RETURN2
SDL_SCANCODE_SEPARATOR = _LIB.SDL_SCANCODE_SEPARATOR
SDL_SCANCODE_OUT = _LIB.SDL_SCANCODE_OUT
SDL_SCANCODE_OPER = _LIB.SDL_SCANCODE_OPER
SDL_SCANCODE_CLEARAGAIN = _LIB.SDL_SCANCODE_CLEARAGAIN
SDL_SCANCODE_CRSEL = _LIB.SDL_SCANCODE_CRSEL
SDL_SCANCODE_EXSEL = _LIB.SDL_SCANCODE_EXSEL
SDL_SCANCODE_KP_00 = _LIB.SDL_SCANCODE_KP_00
SDL_SCANCODE_KP_000 = _LIB.SDL_SCANCODE_KP_000
SDL_SCANCODE_THOUSANDSSEPARATOR = _LIB.SDL_SCANCODE_THOUSANDSSEPARATOR
SDL_SCANCODE_DECIMALSEPARATOR = _LIB.SDL_SCANCODE_DECIMALSEPARATOR
SDL_SCANCODE_CURRENCYUNIT = _LIB.SDL_SCANCODE_CURRENCYUNIT
SDL_SCANCODE_CURRENCYSUBUNIT = _LIB.SDL_SCANCODE_CURRENCYSUBUNIT
SDL_SCANCODE_KP_LEFTPAREN = _LIB.SDL_SCANCODE_KP_LEFTPAREN
SDL_SCANCODE_KP_RIGHTPAREN = _LIB.SDL_SCANCODE_KP_RIGHTPAREN
SDL_SCANCODE_KP_LEFTBRACE = _LIB.SDL_SCANCODE_KP_LEFTBRACE
SDL_SCANCODE_KP_RIGHTBRACE = _LIB.SDL_SCANCODE_KP_RIGHTBRACE
SDL_SCANCODE_KP_TAB = _LIB.SDL_SCANCODE_KP_TAB
SDL_SCANCODE_KP_BACKSPACE = _LIB.SDL_SCANCODE_KP_BACKSPACE
SDL_SCANCODE_KP_A = _LIB.SDL_SCANCODE_KP_A
SDL_SCANCODE_KP_B = _LIB.SDL_SCANCODE_KP_B
SDL_SCANCODE_KP_C = _LIB.SDL_SCANCODE_KP_C
SDL_SCANCODE_KP_D = _LIB.SDL_SCANCODE_KP_D
SDL_SCANCODE_KP_E = _LIB.SDL_SCANCODE_KP_E
SDL_SCANCODE_KP_F = _LIB.SDL_SCANCODE_KP_F
SDL_SCANCODE_KP_XOR = _LIB.SDL_SCANCODE_KP_XOR
SDL_SCANCODE_KP_POWER = _LIB.SDL_SCANCODE_KP_POWER
SDL_SCANCODE_KP_PERCENT = _LIB.SDL_SCANCODE_KP_PERCENT
SDL_SCANCODE_KP_LESS = _LIB.SDL_SCANCODE_KP_LESS
SDL_SCANCODE_KP_GREATER = _LIB.SDL_SCANCODE_KP_GREATER
SDL_SCANCODE_KP_AMPERSAND = _LIB.SDL_SCANCODE_KP_AMPERSAND
SDL_SCANCODE_KP_DBLAMPERSAND = _LIB.SDL_SCANCODE_KP_DBLAMPERSAND
SDL_SCANCODE_KP_VERTICALBAR = _LIB.SDL_SCANCODE_KP_VERTICALBAR
SDL_SCANCODE_KP_DBLVERTICALBAR = _LIB.SDL_SCANCODE_KP_DBLVERTICALBAR
SDL_SCANCODE_KP_COLON = _LIB.SDL_SCANCODE_KP_COLON
SDL_SCANCODE_KP_HASH = _LIB.SDL_SCANCODE_KP_HASH
SDL_SCANCODE_KP_SPACE = _LIB.SDL_SCANCODE_KP_SPACE
SDL_SCANCODE_KP_AT = _LIB.SDL_SCANCODE_KP_AT
SDL_SCANCODE_KP_EXCLAM = _LIB.SDL_SCANCODE_KP_EXCLAM
SDL_SCANCODE_KP_MEMSTORE = _LIB.SDL_SCANCODE_KP_MEMSTORE
SDL_SCANCODE_KP_MEMRECALL = _LIB.SDL_SCANCODE_KP_MEMRECALL
SDL_SCANCODE_KP_MEMCLEAR = _LIB.SDL_SCANCODE_KP_MEMCLEAR
SDL_SCANCODE_KP_MEMADD = _LIB.SDL_SCANCODE_KP_MEMADD
SDL_SCANCODE_KP_MEMSUBTRACT = _LIB.SDL_SCANCODE_KP_MEMSUBTRACT
SDL_SCANCODE_KP_MEMMULTIPLY = _LIB.SDL_SCANCODE_KP_MEMMULTIPLY
SDL_SCANCODE_KP_MEMDIVIDE = _LIB.SDL_SCANCODE_KP_MEMDIVIDE
SDL_SCANCODE_KP_PLUSMINUS = _LIB.SDL_SCANCODE_KP_PLUSMINUS
SDL_SCANCODE_KP_CLEAR = _LIB.SDL_SCANCODE_KP_CLEAR
SDL_SCANCODE_KP_CLEARENTRY = _LIB.SDL_SCANCODE_KP_CLEARENTRY
SDL_SCANCODE_KP_BINARY = _LIB.SDL_SCANCODE_KP_BINARY
SDL_SCANCODE_KP_OCTAL = _LIB.SDL_SCANCODE_KP_OCTAL
SDL_SCANCODE_KP_DECIMAL = _LIB.SDL_SCANCODE_KP_DECIMAL
SDL_SCANCODE_KP_HEXADECIMAL = _LIB.SDL_SCANCODE_KP_HEXADECIMAL
SDL_SCANCODE_LCTRL = _LIB.SDL_SCANCODE_LCTRL
SDL_SCANCODE_LSHIFT = _LIB.SDL_SCANCODE_LSHIFT
SDL_SCANCODE_LALT = _LIB.SDL_SCANCODE_LALT
SDL_SCANCODE_LGUI = _LIB.SDL_SCANCODE_LGUI
SDL_SCANCODE_RCTRL = _LIB.SDL_SCANCODE_RCTRL
SDL_SCANCODE_RSHIFT = _LIB.SDL_SCANCODE_RSHIFT
SDL_SCANCODE_RALT = _LIB.SDL_SCANCODE_RALT
SDL_SCANCODE_RGUI = _LIB.SDL_SCANCODE_RGUI
SDL_SCANCODE_MODE = _LIB.SDL_SCANCODE_MODE
SDL_SCANCODE_AUDIONEXT = _LIB.SDL_SCANCODE_AUDIONEXT
SDL_SCANCODE_AUDIOPREV = _LIB.SDL_SCANCODE_AUDIOPREV
SDL_SCANCODE_AUDIOSTOP = _LIB.SDL_SCANCODE_AUDIOSTOP
SDL_SCANCODE_AUDIOPLAY = _LIB.SDL_SCANCODE_AUDIOPLAY
SDL_SCANCODE_AUDIOMUTE = _LIB.SDL_SCANCODE_AUDIOMUTE
SDL_SCANCODE_MEDIASELECT = _LIB.SDL_SCANCODE_MEDIASELECT
SDL_SCANCODE_WWW = _LIB.SDL_SCANCODE_WWW
SDL_SCANCODE_MAIL = _LIB.SDL_SCANCODE_MAIL
SDL_SCANCODE_CALCULATOR = _LIB.SDL_SCANCODE_CALCULATOR
SDL_SCANCODE_COMPUTER = _LIB.SDL_SCANCODE_COMPUTER
SDL_SCANCODE_AC_SEARCH = _LIB.SDL_SCANCODE_AC_SEARCH
SDL_SCANCODE_AC_HOME = _LIB.SDL_SCANCODE_AC_HOME
SDL_SCANCODE_AC_BACK = _LIB.SDL_SCANCODE_AC_BACK
SDL_SCANCODE_AC_FORWARD = _LIB.SDL_SCANCODE_AC_FORWARD
SDL_SCANCODE_AC_STOP = _LIB.SDL_SCANCODE_AC_STOP
SDL_SCANCODE_AC_REFRESH = _LIB.SDL_SCANCODE_AC_REFRESH
SDL_SCANCODE_AC_BOOKMARKS = _LIB.SDL_SCANCODE_AC_BOOKMARKS
SDL_SCANCODE_BRIGHTNESSDOWN = _LIB.SDL_SCANCODE_BRIGHTNESSDOWN
SDL_SCANCODE_BRIGHTNESSUP = _LIB.SDL_SCANCODE_BRIGHTNESSUP
SDL_SCANCODE_DISPLAYSWITCH = _LIB.SDL_SCANCODE_DISPLAYSWITCH
SDL_SCANCODE_KBDILLUMTOGGLE = _LIB.SDL_SCANCODE_KBDILLUMTOGGLE
SDL_SCANCODE_KBDILLUMDOWN = _LIB.SDL_SCANCODE_KBDILLUMDOWN
SDL_SCANCODE_KBDILLUMUP = _LIB.SDL_SCANCODE_KBDILLUMUP
SDL_SCANCODE_EJECT = _LIB.SDL_SCANCODE_EJECT
SDL_SCANCODE_SLEEP = _LIB.SDL_SCANCODE_SLEEP
SDL_SCANCODE_APP1 = _LIB.SDL_SCANCODE_APP1
SDL_SCANCODE_APP2 = _LIB.SDL_SCANCODE_APP2
SDL_NUM_SCANCODES = _LIB.SDL_NUM_SCANCODES

SDL_SYSTEM_CURSOR_ARROW = _LIB.SDL_SYSTEM_CURSOR_ARROW
SDL_SYSTEM_CURSOR_IBEAM = _LIB.SDL_SYSTEM_CURSOR_IBEAM
SDL_SYSTEM_CURSOR_WAIT = _LIB.SDL_SYSTEM_CURSOR_WAIT
SDL_SYSTEM_CURSOR_CROSSHAIR = _LIB.SDL_SYSTEM_CURSOR_CROSSHAIR
SDL_SYSTEM_CURSOR_WAITARROW = _LIB.SDL_SYSTEM_CURSOR_WAITARROW
SDL_SYSTEM_CURSOR_SIZENWSE = _LIB.SDL_SYSTEM_CURSOR_SIZENWSE
SDL_SYSTEM_CURSOR_SIZENESW = _LIB.SDL_SYSTEM_CURSOR_SIZENESW
SDL_SYSTEM_CURSOR_SIZEWE = _LIB.SDL_SYSTEM_CURSOR_SIZEWE
SDL_SYSTEM_CURSOR_SIZENS = _LIB.SDL_SYSTEM_CURSOR_SIZENS
SDL_SYSTEM_CURSOR_SIZEALL = _LIB.SDL_SYSTEM_CURSOR_SIZEALL
SDL_SYSTEM_CURSOR_NO = _LIB.SDL_SYSTEM_CURSOR_NO
SDL_SYSTEM_CURSOR_HAND = _LIB.SDL_SYSTEM_CURSOR_HAND
SDL_NUM_SYSTEM_CURSORS = _LIB.SDL_NUM_SYSTEM_CURSORS

SDL_TEXTUREACCESS_STATIC = _LIB.SDL_TEXTUREACCESS_STATIC
SDL_TEXTUREACCESS_STREAMING = _LIB.SDL_TEXTUREACCESS_STREAMING
SDL_TEXTUREACCESS_TARGET = _LIB.SDL_TEXTUREACCESS_TARGET

SDL_TEXTUREMODULATE_NONE = _LIB.SDL_TEXTUREMODULATE_NONE
SDL_TEXTUREMODULATE_COLOR = _LIB.SDL_TEXTUREMODULATE_COLOR
SDL_TEXTUREMODULATE_ALPHA = _LIB.SDL_TEXTUREMODULATE_ALPHA

SDL_THREAD_PRIORITY_LOW = _LIB.SDL_THREAD_PRIORITY_LOW
SDL_THREAD_PRIORITY_NORMAL = _LIB.SDL_THREAD_PRIORITY_NORMAL
SDL_THREAD_PRIORITY_HIGH = _LIB.SDL_THREAD_PRIORITY_HIGH

SDL_WINDOWEVENT_NONE = _LIB.SDL_WINDOWEVENT_NONE
SDL_WINDOWEVENT_SHOWN = _LIB.SDL_WINDOWEVENT_SHOWN
SDL_WINDOWEVENT_HIDDEN = _LIB.SDL_WINDOWEVENT_HIDDEN
SDL_WINDOWEVENT_EXPOSED = _LIB.SDL_WINDOWEVENT_EXPOSED
SDL_WINDOWEVENT_MOVED = _LIB.SDL_WINDOWEVENT_MOVED
SDL_WINDOWEVENT_RESIZED = _LIB.SDL_WINDOWEVENT_RESIZED
SDL_WINDOWEVENT_SIZE_CHANGED = _LIB.SDL_WINDOWEVENT_SIZE_CHANGED
SDL_WINDOWEVENT_MINIMIZED = _LIB.SDL_WINDOWEVENT_MINIMIZED
SDL_WINDOWEVENT_MAXIMIZED = _LIB.SDL_WINDOWEVENT_MAXIMIZED
SDL_WINDOWEVENT_RESTORED = _LIB.SDL_WINDOWEVENT_RESTORED
SDL_WINDOWEVENT_ENTER = _LIB.SDL_WINDOWEVENT_ENTER
SDL_WINDOWEVENT_LEAVE = _LIB.SDL_WINDOWEVENT_LEAVE
SDL_WINDOWEVENT_FOCUS_GAINED = _LIB.SDL_WINDOWEVENT_FOCUS_GAINED
SDL_WINDOWEVENT_FOCUS_LOST = _LIB.SDL_WINDOWEVENT_FOCUS_LOST
SDL_WINDOWEVENT_CLOSE = _LIB.SDL_WINDOWEVENT_CLOSE

SDL_WINDOW_FULLSCREEN = _LIB.SDL_WINDOW_FULLSCREEN
SDL_WINDOW_OPENGL = _LIB.SDL_WINDOW_OPENGL
SDL_WINDOW_SHOWN = _LIB.SDL_WINDOW_SHOWN
SDL_WINDOW_HIDDEN = _LIB.SDL_WINDOW_HIDDEN
SDL_WINDOW_BORDERLESS = _LIB.SDL_WINDOW_BORDERLESS
SDL_WINDOW_RESIZABLE = _LIB.SDL_WINDOW_RESIZABLE
SDL_WINDOW_MINIMIZED = _LIB.SDL_WINDOW_MINIMIZED
SDL_WINDOW_MAXIMIZED = _LIB.SDL_WINDOW_MAXIMIZED
SDL_WINDOW_INPUT_GRABBED = _LIB.SDL_WINDOW_INPUT_GRABBED
SDL_WINDOW_INPUT_FOCUS = _LIB.SDL_WINDOW_INPUT_FOCUS
SDL_WINDOW_MOUSE_FOCUS = _LIB.SDL_WINDOW_MOUSE_FOCUS
SDL_WINDOW_FOREIGN = _LIB.SDL_WINDOW_FOREIGN

SDL_ASSERTION_RETRY = _LIB.SDL_ASSERTION_RETRY
SDL_ASSERTION_BREAK = _LIB.SDL_ASSERTION_BREAK
SDL_ASSERTION_ABORT = _LIB.SDL_ASSERTION_ABORT
SDL_ASSERTION_IGNORE = _LIB.SDL_ASSERTION_IGNORE
SDL_ASSERTION_ALWAYS_IGNORE = _LIB.SDL_ASSERTION_ALWAYS_IGNORE

SDL_FALSE = _LIB.SDL_FALSE
SDL_TRUE = _LIB.SDL_TRUE

SDL_ENOMEM = _LIB.SDL_ENOMEM
SDL_EFREAD = _LIB.SDL_EFREAD
SDL_EFWRITE = _LIB.SDL_EFWRITE
SDL_EFSEEK = _LIB.SDL_EFSEEK
SDL_UNSUPPORTED = _LIB.SDL_UNSUPPORTED
SDL_LASTERROR = _LIB.SDL_LASTERROR

SDL_ADDEVENT = _LIB.SDL_ADDEVENT
SDL_PEEKEVENT = _LIB.SDL_PEEKEVENT
SDL_GETEVENT = _LIB.SDL_GETEVENT

def SDL_AddEventWatch(a0, a1):
    """void SDL_AddEventWatch(int SDL_AddEventWatch(void *, SDL_Event *), void *)"""
    rc = _LIB.SDL_AddEventWatch(unbox(a0), unbox(a1))
    return rc

def SDL_AddHintCallback(a0, a1, a2):
    """void SDL_AddHintCallback(char const *, void SDL_AddHintCallback(void *, char const *, char const *, char const *), void *)"""
    rc = _LIB.SDL_AddHintCallback(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_AddTimer(a0, a1, a2):
    """int SDL_AddTimer(uint32_t, uint32_t SDL_AddTimer(uint32_t, void *), void *)"""
    rc = _LIB.SDL_AddTimer(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_AllocFormat(a0):
    """SDL_PixelFormat * SDL_AllocFormat(uint32_t)"""
    rc = _LIB.SDL_AllocFormat(unbox(a0))
    return rc

def SDL_AllocPalette(a0):
    """SDL_Palette * SDL_AllocPalette(int)"""
    rc = _LIB.SDL_AllocPalette(unbox(a0))
    return rc

def SDL_AllocRW():
    """SDL_RWops * SDL_AllocRW(void)"""
    rc = _LIB.SDL_AllocRW()
    return rc

def SDL_AtomicLock(a0):
    """void SDL_AtomicLock(int *)"""
    rc = _LIB.SDL_AtomicLock(unbox(a0))
    return rc

def SDL_AtomicTryLock(a0):
    """SDL_bool SDL_AtomicTryLock(int *)"""
    rc = _LIB.SDL_AtomicTryLock(unbox(a0))
    return rc

def SDL_AtomicUnlock(a0):
    """void SDL_AtomicUnlock(int *)"""
    rc = _LIB.SDL_AtomicUnlock(unbox(a0))
    return rc

def SDL_AudioInit(a0):
    """int SDL_AudioInit(char const *)"""
    rc = _LIB.SDL_AudioInit(unbox(a0))
    return rc

def SDL_AudioQuit():
    """void SDL_AudioQuit(void)"""
    rc = _LIB.SDL_AudioQuit()
    return rc

def SDL_BuildAudioCVT(a0, a1, a2, a3, a4, a5, a6):
    """int SDL_BuildAudioCVT(SDL_AudioCVT *, uint16_t, uint8_t, int, uint16_t, uint8_t, int)"""
    rc = _LIB.SDL_BuildAudioCVT(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5), unbox(a6))
    return rc

def SDL_CalculateGammaRamp(a0, a1):
    """void SDL_CalculateGammaRamp(float, uint16_t *)"""
    rc = _LIB.SDL_CalculateGammaRamp(unbox(a0), unbox(a1))
    return rc

def SDL_ClearError():
    """void SDL_ClearError(void)"""
    rc = _LIB.SDL_ClearError()
    return rc

def SDL_ClearHints():
    """void SDL_ClearHints(void)"""
    rc = _LIB.SDL_ClearHints()
    return rc

def SDL_CloseAudio():
    """void SDL_CloseAudio(void)"""
    rc = _LIB.SDL_CloseAudio()
    return rc

def SDL_CloseAudioDevice(a0):
    """void SDL_CloseAudioDevice(uint32_t)"""
    rc = _LIB.SDL_CloseAudioDevice(unbox(a0))
    return rc

def SDL_CondBroadcast(a0):
    """int SDL_CondBroadcast(SDL_cond *)"""
    rc = _LIB.SDL_CondBroadcast(unbox(a0))
    return rc

def SDL_CondSignal(a0):
    """int SDL_CondSignal(SDL_cond *)"""
    rc = _LIB.SDL_CondSignal(unbox(a0))
    return rc

def SDL_CondWait(a0, a1):
    """int SDL_CondWait(SDL_cond *, SDL_mutex *)"""
    rc = _LIB.SDL_CondWait(unbox(a0), unbox(a1))
    return rc

def SDL_CondWaitTimeout(a0, a1, a2):
    """int SDL_CondWaitTimeout(SDL_cond *, SDL_mutex *, uint32_t)"""
    rc = _LIB.SDL_CondWaitTimeout(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_ConvertAudio(a0):
    """int SDL_ConvertAudio(SDL_AudioCVT *)"""
    rc = _LIB.SDL_ConvertAudio(unbox(a0))
    return rc

def SDL_ConvertPixels(a0, a1, a2, a3, a4, a5, a6, a7):
    """int SDL_ConvertPixels(int, int, uint32_t, void const *, int, uint32_t, void *, int)"""
    rc = _LIB.SDL_ConvertPixels(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5), unbox(a6), unbox(a7))
    return rc

def SDL_ConvertSurface(a0, a1, a2):
    """SDL_Surface * SDL_ConvertSurface(SDL_Surface *, SDL_PixelFormat *, uint32_t)"""
    rc = _LIB.SDL_ConvertSurface(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_ConvertSurfaceFormat(a0, a1, a2):
    """SDL_Surface * SDL_ConvertSurfaceFormat(SDL_Surface *, uint32_t, uint32_t)"""
    rc = _LIB.SDL_ConvertSurfaceFormat(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_CreateColorCursor(a0, a1, a2):
    """SDL_Cursor * SDL_CreateColorCursor(SDL_Surface *, int, int)"""
    rc = _LIB.SDL_CreateColorCursor(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_CreateCond():
    """SDL_cond * SDL_CreateCond(void)"""
    rc = _LIB.SDL_CreateCond()
    return rc

def SDL_CreateCursor(a0, a1, a2, a3, a4, a5):
    """SDL_Cursor * SDL_CreateCursor(uint8_t const *, uint8_t const *, int, int, int, int)"""
    rc = _LIB.SDL_CreateCursor(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5))
    return rc

def SDL_CreateMutex():
    """SDL_mutex * SDL_CreateMutex(void)"""
    rc = _LIB.SDL_CreateMutex()
    return rc

def SDL_CreateRGBSurface(a0, a1, a2, a3, a4, a5, a6, a7):
    """SDL_Surface * SDL_CreateRGBSurface(uint32_t, int, int, int, uint32_t, uint32_t, uint32_t, uint32_t)"""
    rc = _LIB.SDL_CreateRGBSurface(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5), unbox(a6), unbox(a7))
    return rc

def SDL_CreateRGBSurfaceFrom(a0, a1, a2, a3, a4, a5, a6, a7, a8):
    """SDL_Surface * SDL_CreateRGBSurfaceFrom(void *, int, int, int, int, uint32_t, uint32_t, uint32_t, uint32_t)"""
    rc = _LIB.SDL_CreateRGBSurfaceFrom(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5), unbox(a6), unbox(a7), unbox(a8))
    return rc

def SDL_CreateRenderer(a0, a1, a2):
    """SDL_Renderer * SDL_CreateRenderer(SDL_Window *, int, uint32_t)"""
    rc = _LIB.SDL_CreateRenderer(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_CreateSemaphore(a0):
    """SDL_sem * SDL_CreateSemaphore(uint32_t)"""
    rc = _LIB.SDL_CreateSemaphore(unbox(a0))
    return rc

def SDL_CreateSoftwareRenderer(a0):
    """SDL_Renderer * SDL_CreateSoftwareRenderer(SDL_Surface *)"""
    rc = _LIB.SDL_CreateSoftwareRenderer(unbox(a0))
    return rc

def SDL_CreateSystemCursor(a0):
    """SDL_Cursor * SDL_CreateSystemCursor(SDL_SystemCursor)"""
    rc = _LIB.SDL_CreateSystemCursor(unbox(a0))
    return rc

def SDL_CreateTexture(a0, a1, a2, a3, a4):
    """SDL_Texture * SDL_CreateTexture(SDL_Renderer *, uint32_t, int, int, int)"""
    rc = _LIB.SDL_CreateTexture(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_CreateTextureFromSurface(a0, a1):
    """SDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer *, SDL_Surface *)"""
    rc = _LIB.SDL_CreateTextureFromSurface(unbox(a0), unbox(a1))
    return rc

def SDL_CreateThread(a0, a1, a2):
    """SDL_Thread * SDL_CreateThread(int SDL_CreateThread(void *), char const *, void *)"""
    rc = _LIB.SDL_CreateThread(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_CreateWindow(a0, a1, a2, a3, a4, a5):
    """SDL_Window * SDL_CreateWindow(char const *, int, int, int, int, uint32_t)"""
    rc = _LIB.SDL_CreateWindow(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5))
    return rc

def SDL_CreateWindowAndRenderer(a0, a1, a2, a3, a4):
    """int SDL_CreateWindowAndRenderer(int, int, uint32_t, SDL_Window * *, SDL_Renderer * *)"""
    rc = _LIB.SDL_CreateWindowAndRenderer(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_CreateWindowFrom(a0):
    """SDL_Window * SDL_CreateWindowFrom(void const *)"""
    rc = _LIB.SDL_CreateWindowFrom(unbox(a0))
    return rc

def SDL_DelEventWatch(a0, a1):
    """void SDL_DelEventWatch(int SDL_DelEventWatch(void *, SDL_Event *), void *)"""
    rc = _LIB.SDL_DelEventWatch(unbox(a0), unbox(a1))
    return rc

def SDL_DelHintCallback(a0, a1, a2):
    """void SDL_DelHintCallback(char const *, void SDL_DelHintCallback(void *, char const *, char const *, char const *), void *)"""
    rc = _LIB.SDL_DelHintCallback(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_Delay(a0):
    """void SDL_Delay(uint32_t)"""
    rc = _LIB.SDL_Delay(unbox(a0))
    return rc

def SDL_DestroyCond(a0):
    """void SDL_DestroyCond(SDL_cond *)"""
    rc = _LIB.SDL_DestroyCond(unbox(a0))
    return rc

def SDL_DestroyMutex(a0):
    """void SDL_DestroyMutex(SDL_mutex *)"""
    rc = _LIB.SDL_DestroyMutex(unbox(a0))
    return rc

def SDL_DestroyRenderer(a0):
    """void SDL_DestroyRenderer(SDL_Renderer *)"""
    rc = _LIB.SDL_DestroyRenderer(unbox(a0))
    return rc

def SDL_DestroySemaphore(a0):
    """void SDL_DestroySemaphore(SDL_sem *)"""
    rc = _LIB.SDL_DestroySemaphore(unbox(a0))
    return rc

def SDL_DestroyTexture(a0):
    """void SDL_DestroyTexture(SDL_Texture *)"""
    rc = _LIB.SDL_DestroyTexture(unbox(a0))
    return rc

def SDL_DestroyWindow(a0):
    """void SDL_DestroyWindow(SDL_Window *)"""
    rc = _LIB.SDL_DestroyWindow(unbox(a0))
    return rc

def SDL_DisableScreenSaver():
    """void SDL_DisableScreenSaver(void)"""
    rc = _LIB.SDL_DisableScreenSaver()
    return rc

def SDL_EnableScreenSaver():
    """void SDL_EnableScreenSaver(void)"""
    rc = _LIB.SDL_EnableScreenSaver()
    return rc

def SDL_EnclosePoints(a0, a1, a2, a3):
    """SDL_bool SDL_EnclosePoints(SDL_Point const *, int, SDL_Rect const *, SDL_Rect *)"""
    rc = _LIB.SDL_EnclosePoints(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_Error(a0):
    """int SDL_Error(SDL_errorcode)"""
    rc = _LIB.SDL_Error(unbox(a0))
    return rc

def SDL_EventState(a0, a1):
    """uint8_t SDL_EventState(uint32_t, int)"""
    rc = _LIB.SDL_EventState(unbox(a0), unbox(a1))
    return rc

def SDL_FillRect(a0, a1, a2):
    """int SDL_FillRect(SDL_Surface *, SDL_Rect const *, uint32_t)"""
    rc = _LIB.SDL_FillRect(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_FillRects(a0, a1, a2, a3):
    """int SDL_FillRects(SDL_Surface *, SDL_Rect const *, int, uint32_t)"""
    rc = _LIB.SDL_FillRects(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_FilterEvents(a0, a1):
    """void SDL_FilterEvents(int SDL_FilterEvents(void *, SDL_Event *), void *)"""
    rc = _LIB.SDL_FilterEvents(unbox(a0), unbox(a1))
    return rc

def SDL_FlushEvent(a0):
    """void SDL_FlushEvent(uint32_t)"""
    rc = _LIB.SDL_FlushEvent(unbox(a0))
    return rc

def SDL_FlushEvents(a0, a1):
    """void SDL_FlushEvents(uint32_t, uint32_t)"""
    rc = _LIB.SDL_FlushEvents(unbox(a0), unbox(a1))
    return rc

def SDL_FreeCursor(a0):
    """void SDL_FreeCursor(SDL_Cursor *)"""
    rc = _LIB.SDL_FreeCursor(unbox(a0))
    return rc

def SDL_FreeFormat(a0):
    """void SDL_FreeFormat(SDL_PixelFormat *)"""
    rc = _LIB.SDL_FreeFormat(unbox(a0))
    return rc

def SDL_FreePalette(a0):
    """void SDL_FreePalette(SDL_Palette *)"""
    rc = _LIB.SDL_FreePalette(unbox(a0))
    return rc

def SDL_FreeRW(a0):
    """void SDL_FreeRW(SDL_RWops *)"""
    rc = _LIB.SDL_FreeRW(unbox(a0))
    return rc

def SDL_FreeSurface(a0):
    """void SDL_FreeSurface(SDL_Surface *)"""
    rc = _LIB.SDL_FreeSurface(unbox(a0))
    return rc

def SDL_FreeWAV(a0):
    """void SDL_FreeWAV(uint8_t *)"""
    rc = _LIB.SDL_FreeWAV(unbox(a0))
    return rc

def SDL_GL_BindTexture(a0, a1, a2):
    """int SDL_GL_BindTexture(SDL_Texture *, float *, float *)"""
    rc = _LIB.SDL_GL_BindTexture(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GL_CreateContext(a0):
    """void * SDL_GL_CreateContext(SDL_Window *)"""
    rc = _LIB.SDL_GL_CreateContext(unbox(a0))
    return rc

def SDL_GL_DeleteContext(a0):
    """void SDL_GL_DeleteContext(void *)"""
    rc = _LIB.SDL_GL_DeleteContext(unbox(a0))
    return rc

def SDL_GL_ExtensionSupported(a0):
    """SDL_bool SDL_GL_ExtensionSupported(char const *)"""
    rc = _LIB.SDL_GL_ExtensionSupported(unbox(a0))
    return rc

def SDL_GL_GetAttribute(a0, a1):
    """int SDL_GL_GetAttribute(SDL_GLattr, int *)"""
    rc = _LIB.SDL_GL_GetAttribute(unbox(a0), unbox(a1))
    return rc

def SDL_GL_GetCurrentContext():
    """void * SDL_GL_GetCurrentContext(void)"""
    rc = _LIB.SDL_GL_GetCurrentContext()
    return rc

def SDL_GL_GetCurrentWindow():
    """SDL_Window * SDL_GL_GetCurrentWindow(void)"""
    rc = _LIB.SDL_GL_GetCurrentWindow()
    return rc

def SDL_GL_GetProcAddress(a0):
    """void * SDL_GL_GetProcAddress(char const *)"""
    rc = _LIB.SDL_GL_GetProcAddress(unbox(a0))
    return rc

def SDL_GL_GetSwapInterval():
    """int SDL_GL_GetSwapInterval(void)"""
    rc = _LIB.SDL_GL_GetSwapInterval()
    return rc

def SDL_GL_LoadLibrary(a0):
    """int SDL_GL_LoadLibrary(char const *)"""
    rc = _LIB.SDL_GL_LoadLibrary(unbox(a0))
    return rc

def SDL_GL_MakeCurrent(a0, a1):
    """int SDL_GL_MakeCurrent(SDL_Window *, void *)"""
    rc = _LIB.SDL_GL_MakeCurrent(unbox(a0), unbox(a1))
    return rc

def SDL_GL_SetAttribute(a0, a1):
    """int SDL_GL_SetAttribute(SDL_GLattr, int)"""
    rc = _LIB.SDL_GL_SetAttribute(unbox(a0), unbox(a1))
    return rc

def SDL_GL_SetSwapInterval(a0):
    """int SDL_GL_SetSwapInterval(int)"""
    rc = _LIB.SDL_GL_SetSwapInterval(unbox(a0))
    return rc

def SDL_GL_SwapWindow(a0):
    """void SDL_GL_SwapWindow(SDL_Window *)"""
    rc = _LIB.SDL_GL_SwapWindow(unbox(a0))
    return rc

def SDL_GL_UnbindTexture(a0):
    """int SDL_GL_UnbindTexture(SDL_Texture *)"""
    rc = _LIB.SDL_GL_UnbindTexture(unbox(a0))
    return rc

def SDL_GL_UnloadLibrary():
    """void SDL_GL_UnloadLibrary(void)"""
    rc = _LIB.SDL_GL_UnloadLibrary()
    return rc

def SDL_GameControllerAddMapping(a0):
    """int SDL_GameControllerAddMapping(char const *)"""
    rc = _LIB.SDL_GameControllerAddMapping(unbox(a0))
    return rc

def SDL_GameControllerClose(a0):
    """void SDL_GameControllerClose(SDL_GameController *)"""
    rc = _LIB.SDL_GameControllerClose(unbox(a0))
    return rc

def SDL_GameControllerEventState(a0):
    """int SDL_GameControllerEventState(int)"""
    rc = _LIB.SDL_GameControllerEventState(unbox(a0))
    return rc

def SDL_GameControllerGetAttached(a0):
    """SDL_bool SDL_GameControllerGetAttached(SDL_GameController *)"""
    rc = _LIB.SDL_GameControllerGetAttached(unbox(a0))
    return rc

def SDL_GameControllerGetAxis(a0, a1):
    """int16_t SDL_GameControllerGetAxis(SDL_GameController *, SDL_GameControllerAxis)"""
    rc = _LIB.SDL_GameControllerGetAxis(unbox(a0), unbox(a1))
    return rc

def SDL_GameControllerGetAxisFromString(a0):
    """SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(char const *)"""
    rc = _LIB.SDL_GameControllerGetAxisFromString(unbox(a0))
    return rc

def SDL_GameControllerGetBindForAxis(a0, a1):
    """SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(SDL_GameController *, SDL_GameControllerAxis)"""
    rc = _LIB.SDL_GameControllerGetBindForAxis(unbox(a0), unbox(a1))
    return rc

def SDL_GameControllerGetBindForButton(a0, a1):
    """SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController *, SDL_GameControllerButton)"""
    rc = _LIB.SDL_GameControllerGetBindForButton(unbox(a0), unbox(a1))
    return rc

def SDL_GameControllerGetButton(a0, a1):
    """uint8_t SDL_GameControllerGetButton(SDL_GameController *, SDL_GameControllerButton)"""
    rc = _LIB.SDL_GameControllerGetButton(unbox(a0), unbox(a1))
    return rc

def SDL_GameControllerGetButtonFromString(a0):
    """SDL_GameControllerButton SDL_GameControllerGetButtonFromString(char const *)"""
    rc = _LIB.SDL_GameControllerGetButtonFromString(unbox(a0))
    return rc

def SDL_GameControllerGetJoystick(a0):
    """SDL_Joystick * SDL_GameControllerGetJoystick(SDL_GameController *)"""
    rc = _LIB.SDL_GameControllerGetJoystick(unbox(a0))
    return rc

def SDL_GameControllerGetStringForAxis(a0):
    """char const * SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis)"""
    rc = _LIB.SDL_GameControllerGetStringForAxis(unbox(a0))
    return ffi.string(rc)

def SDL_GameControllerGetStringForButton(a0):
    """char const * SDL_GameControllerGetStringForButton(SDL_GameControllerButton)"""
    rc = _LIB.SDL_GameControllerGetStringForButton(unbox(a0))
    return ffi.string(rc)

def SDL_GameControllerMapping(a0):
    """char * SDL_GameControllerMapping(SDL_GameController *)"""
    rc = _LIB.SDL_GameControllerMapping(unbox(a0))
    return ffi.string(rc)

def SDL_GameControllerMappingForGUID(a0):
    """char * SDL_GameControllerMappingForGUID(SDL_JoystickGUID)"""
    rc = _LIB.SDL_GameControllerMappingForGUID(unbox(a0))
    return ffi.string(rc)

def SDL_GameControllerName(a0):
    """char const * SDL_GameControllerName(SDL_GameController *)"""
    rc = _LIB.SDL_GameControllerName(unbox(a0))
    return ffi.string(rc)

def SDL_GameControllerNameForIndex(a0):
    """char const * SDL_GameControllerNameForIndex(int)"""
    rc = _LIB.SDL_GameControllerNameForIndex(unbox(a0))
    return ffi.string(rc)

def SDL_GameControllerOpen(a0):
    """SDL_GameController * SDL_GameControllerOpen(int)"""
    rc = _LIB.SDL_GameControllerOpen(unbox(a0))
    return rc

def SDL_GameControllerUpdate():
    """void SDL_GameControllerUpdate(void)"""
    rc = _LIB.SDL_GameControllerUpdate()
    return rc

def SDL_GetAssertionReport():
    """SDL_assert_data const * SDL_GetAssertionReport(void)"""
    rc = _LIB.SDL_GetAssertionReport()
    return rc

def SDL_GetAudioDeviceName(a0, a1):
    """char const * SDL_GetAudioDeviceName(int, int)"""
    rc = _LIB.SDL_GetAudioDeviceName(unbox(a0), unbox(a1))
    return ffi.string(rc)

def SDL_GetAudioDeviceStatus(a0):
    """SDL_AudioStatus SDL_GetAudioDeviceStatus(uint32_t)"""
    rc = _LIB.SDL_GetAudioDeviceStatus(unbox(a0))
    return rc

def SDL_GetAudioDriver(a0):
    """char const * SDL_GetAudioDriver(int)"""
    rc = _LIB.SDL_GetAudioDriver(unbox(a0))
    return ffi.string(rc)

def SDL_GetAudioStatus():
    """SDL_AudioStatus SDL_GetAudioStatus(void)"""
    rc = _LIB.SDL_GetAudioStatus()
    return rc

def SDL_GetCPUCacheLineSize():
    """int SDL_GetCPUCacheLineSize(void)"""
    rc = _LIB.SDL_GetCPUCacheLineSize()
    return rc

def SDL_GetCPUCount():
    """int SDL_GetCPUCount(void)"""
    rc = _LIB.SDL_GetCPUCount()
    return rc

def SDL_GetClipRect(a0, a1):
    """void SDL_GetClipRect(SDL_Surface *, SDL_Rect *)"""
    rc = _LIB.SDL_GetClipRect(unbox(a0), unbox(a1))
    return rc

def SDL_GetClipboardText():
    """char * SDL_GetClipboardText(void)"""
    rc = _LIB.SDL_GetClipboardText()
    return ffi.string(rc)

def SDL_GetClosestDisplayMode(a0, a1, a2):
    """SDL_DisplayMode * SDL_GetClosestDisplayMode(int, SDL_DisplayMode const *, SDL_DisplayMode *)"""
    rc = _LIB.SDL_GetClosestDisplayMode(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GetColorKey(a0, a1):
    """int SDL_GetColorKey(SDL_Surface *, uint32_t *)"""
    rc = _LIB.SDL_GetColorKey(unbox(a0), unbox(a1))
    return rc

def SDL_GetCurrentAudioDriver():
    """char const * SDL_GetCurrentAudioDriver(void)"""
    rc = _LIB.SDL_GetCurrentAudioDriver()
    return ffi.string(rc)

def SDL_GetCurrentDisplayMode(a0, a1):
    """int SDL_GetCurrentDisplayMode(int, SDL_DisplayMode *)"""
    rc = _LIB.SDL_GetCurrentDisplayMode(unbox(a0), unbox(a1))
    return rc

def SDL_GetCurrentVideoDriver():
    """char const * SDL_GetCurrentVideoDriver(void)"""
    rc = _LIB.SDL_GetCurrentVideoDriver()
    return ffi.string(rc)

def SDL_GetCursor():
    """SDL_Cursor * SDL_GetCursor(void)"""
    rc = _LIB.SDL_GetCursor()
    return rc

def SDL_GetDefaultCursor():
    """SDL_Cursor * SDL_GetDefaultCursor(void)"""
    rc = _LIB.SDL_GetDefaultCursor()
    return rc

def SDL_GetDesktopDisplayMode(a0, a1):
    """int SDL_GetDesktopDisplayMode(int, SDL_DisplayMode *)"""
    rc = _LIB.SDL_GetDesktopDisplayMode(unbox(a0), unbox(a1))
    return rc

def SDL_GetDisplayBounds(a0, a1):
    """int SDL_GetDisplayBounds(int, SDL_Rect *)"""
    rc = _LIB.SDL_GetDisplayBounds(unbox(a0), unbox(a1))
    return rc

def SDL_GetDisplayMode(a0, a1, a2):
    """int SDL_GetDisplayMode(int, int, SDL_DisplayMode *)"""
    rc = _LIB.SDL_GetDisplayMode(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GetDisplayName(a0):
    """char const * SDL_GetDisplayName(int)"""
    rc = _LIB.SDL_GetDisplayName(unbox(a0))
    return ffi.string(rc)

def SDL_GetError():
    """char const * SDL_GetError(void)"""
    rc = _LIB.SDL_GetError()
    return ffi.string(rc)

def SDL_GetEventFilter(a0, a1):
    """SDL_bool SDL_GetEventFilter(int(* *)(void *, SDL_Event *), void * *)"""
    rc = _LIB.SDL_GetEventFilter(unbox(a0), unbox(a1))
    return rc

def SDL_GetHint(a0):
    """char const * SDL_GetHint(char const *)"""
    rc = _LIB.SDL_GetHint(unbox(a0))
    return ffi.string(rc)

def SDL_GetKeyFromName(a0):
    """int32_t SDL_GetKeyFromName(char const *)"""
    rc = _LIB.SDL_GetKeyFromName(unbox(a0))
    return rc

def SDL_GetKeyFromScancode(a0):
    """int32_t SDL_GetKeyFromScancode(SDL_Scancode)"""
    rc = _LIB.SDL_GetKeyFromScancode(unbox(a0))
    return rc

def SDL_GetKeyName(a0):
    """char const * SDL_GetKeyName(int32_t)"""
    rc = _LIB.SDL_GetKeyName(unbox(a0))
    return ffi.string(rc)

def SDL_GetKeyboardFocus():
    """SDL_Window * SDL_GetKeyboardFocus(void)"""
    rc = _LIB.SDL_GetKeyboardFocus()
    return rc

def SDL_GetKeyboardState(a0):
    """uint8_t const * SDL_GetKeyboardState(int *)"""
    rc = _LIB.SDL_GetKeyboardState(unbox(a0))
    return rc

def SDL_GetModState():
    """SDL_Keymod SDL_GetModState(void)"""
    rc = _LIB.SDL_GetModState()
    return rc

def SDL_GetMouseFocus():
    """SDL_Window * SDL_GetMouseFocus(void)"""
    rc = _LIB.SDL_GetMouseFocus()
    return rc

def SDL_GetMouseState(a0, a1):
    """uint32_t SDL_GetMouseState(int *, int *)"""
    rc = _LIB.SDL_GetMouseState(unbox(a0), unbox(a1))
    return rc

def SDL_GetNumAudioDevices(a0):
    """int SDL_GetNumAudioDevices(int)"""
    rc = _LIB.SDL_GetNumAudioDevices(unbox(a0))
    return rc

def SDL_GetNumAudioDrivers():
    """int SDL_GetNumAudioDrivers(void)"""
    rc = _LIB.SDL_GetNumAudioDrivers()
    return rc

def SDL_GetNumDisplayModes(a0):
    """int SDL_GetNumDisplayModes(int)"""
    rc = _LIB.SDL_GetNumDisplayModes(unbox(a0))
    return rc

def SDL_GetNumRenderDrivers():
    """int SDL_GetNumRenderDrivers(void)"""
    rc = _LIB.SDL_GetNumRenderDrivers()
    return rc

def SDL_GetNumTouchDevices():
    """int SDL_GetNumTouchDevices(void)"""
    rc = _LIB.SDL_GetNumTouchDevices()
    return rc

def SDL_GetNumTouchFingers(a0):
    """int SDL_GetNumTouchFingers(int64_t)"""
    rc = _LIB.SDL_GetNumTouchFingers(unbox(a0))
    return rc

def SDL_GetNumVideoDisplays():
    """int SDL_GetNumVideoDisplays(void)"""
    rc = _LIB.SDL_GetNumVideoDisplays()
    return rc

def SDL_GetNumVideoDrivers():
    """int SDL_GetNumVideoDrivers(void)"""
    rc = _LIB.SDL_GetNumVideoDrivers()
    return rc

def SDL_GetPerformanceCounter():
    """uint64_t SDL_GetPerformanceCounter(void)"""
    rc = _LIB.SDL_GetPerformanceCounter()
    return rc

def SDL_GetPerformanceFrequency():
    """uint64_t SDL_GetPerformanceFrequency(void)"""
    rc = _LIB.SDL_GetPerformanceFrequency()
    return rc

def SDL_GetPixelFormatName(a0):
    """char const * SDL_GetPixelFormatName(uint32_t)"""
    rc = _LIB.SDL_GetPixelFormatName(unbox(a0))
    return ffi.string(rc)

def SDL_GetPlatform():
    """char const * SDL_GetPlatform(void)"""
    rc = _LIB.SDL_GetPlatform()
    return ffi.string(rc)

def SDL_GetPowerInfo(a0, a1):
    """SDL_PowerState SDL_GetPowerInfo(int *, int *)"""
    rc = _LIB.SDL_GetPowerInfo(unbox(a0), unbox(a1))
    return rc

def SDL_GetRGB(a0, a1, a2, a3, a4):
    """void SDL_GetRGB(uint32_t, SDL_PixelFormat const *, uint8_t *, uint8_t *, uint8_t *)"""
    rc = _LIB.SDL_GetRGB(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_GetRGBA(a0, a1, a2, a3, a4, a5):
    """void SDL_GetRGBA(uint32_t, SDL_PixelFormat const *, uint8_t *, uint8_t *, uint8_t *, uint8_t *)"""
    rc = _LIB.SDL_GetRGBA(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5))
    return rc

def SDL_GetRelativeMouseMode():
    """SDL_bool SDL_GetRelativeMouseMode(void)"""
    rc = _LIB.SDL_GetRelativeMouseMode()
    return rc

def SDL_GetRelativeMouseState(a0, a1):
    """uint32_t SDL_GetRelativeMouseState(int *, int *)"""
    rc = _LIB.SDL_GetRelativeMouseState(unbox(a0), unbox(a1))
    return rc

def SDL_GetRenderDrawBlendMode(a0, a1):
    """int SDL_GetRenderDrawBlendMode(SDL_Renderer *, SDL_BlendMode *)"""
    rc = _LIB.SDL_GetRenderDrawBlendMode(unbox(a0), unbox(a1))
    return rc

def SDL_GetRenderDrawColor(a0, a1, a2, a3, a4):
    """int SDL_GetRenderDrawColor(SDL_Renderer *, uint8_t *, uint8_t *, uint8_t *, uint8_t *)"""
    rc = _LIB.SDL_GetRenderDrawColor(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_GetRenderDriverInfo(a0, a1):
    """int SDL_GetRenderDriverInfo(int, SDL_RendererInfo *)"""
    rc = _LIB.SDL_GetRenderDriverInfo(unbox(a0), unbox(a1))
    return rc

def SDL_GetRenderTarget(a0):
    """SDL_Texture * SDL_GetRenderTarget(SDL_Renderer *)"""
    rc = _LIB.SDL_GetRenderTarget(unbox(a0))
    return rc

def SDL_GetRenderer(a0):
    """SDL_Renderer * SDL_GetRenderer(SDL_Window *)"""
    rc = _LIB.SDL_GetRenderer(unbox(a0))
    return rc

def SDL_GetRendererInfo(a0, a1):
    """int SDL_GetRendererInfo(SDL_Renderer *, SDL_RendererInfo *)"""
    rc = _LIB.SDL_GetRendererInfo(unbox(a0), unbox(a1))
    return rc

def SDL_GetRendererOutputSize(a0, a1, a2):
    """int SDL_GetRendererOutputSize(SDL_Renderer *, int *, int *)"""
    rc = _LIB.SDL_GetRendererOutputSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GetRevision():
    """char const * SDL_GetRevision(void)"""
    rc = _LIB.SDL_GetRevision()
    return ffi.string(rc)

def SDL_GetRevisionNumber():
    """int SDL_GetRevisionNumber(void)"""
    rc = _LIB.SDL_GetRevisionNumber()
    return rc

def SDL_GetScancodeFromKey(a0):
    """SDL_Scancode SDL_GetScancodeFromKey(int32_t)"""
    rc = _LIB.SDL_GetScancodeFromKey(unbox(a0))
    return rc

def SDL_GetScancodeFromName(a0):
    """SDL_Scancode SDL_GetScancodeFromName(char const *)"""
    rc = _LIB.SDL_GetScancodeFromName(unbox(a0))
    return rc

def SDL_GetScancodeName(a0):
    """char const * SDL_GetScancodeName(SDL_Scancode)"""
    rc = _LIB.SDL_GetScancodeName(unbox(a0))
    return ffi.string(rc)

def SDL_GetSurfaceAlphaMod(a0, a1):
    """int SDL_GetSurfaceAlphaMod(SDL_Surface *, uint8_t *)"""
    rc = _LIB.SDL_GetSurfaceAlphaMod(unbox(a0), unbox(a1))
    return rc

def SDL_GetSurfaceBlendMode(a0, a1):
    """int SDL_GetSurfaceBlendMode(SDL_Surface *, SDL_BlendMode *)"""
    rc = _LIB.SDL_GetSurfaceBlendMode(unbox(a0), unbox(a1))
    return rc

def SDL_GetSurfaceColorMod(a0, a1, a2, a3):
    """int SDL_GetSurfaceColorMod(SDL_Surface *, uint8_t *, uint8_t *, uint8_t *)"""
    rc = _LIB.SDL_GetSurfaceColorMod(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_GetTextureAlphaMod(a0, a1):
    """int SDL_GetTextureAlphaMod(SDL_Texture *, uint8_t *)"""
    rc = _LIB.SDL_GetTextureAlphaMod(unbox(a0), unbox(a1))
    return rc

def SDL_GetTextureBlendMode(a0, a1):
    """int SDL_GetTextureBlendMode(SDL_Texture *, SDL_BlendMode *)"""
    rc = _LIB.SDL_GetTextureBlendMode(unbox(a0), unbox(a1))
    return rc

def SDL_GetTextureColorMod(a0, a1, a2, a3):
    """int SDL_GetTextureColorMod(SDL_Texture *, uint8_t *, uint8_t *, uint8_t *)"""
    rc = _LIB.SDL_GetTextureColorMod(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_GetThreadID(a0):
    """unsigned long SDL_GetThreadID(SDL_Thread *)"""
    rc = _LIB.SDL_GetThreadID(unbox(a0))
    return rc

def SDL_GetThreadName(a0):
    """char const * SDL_GetThreadName(SDL_Thread *)"""
    rc = _LIB.SDL_GetThreadName(unbox(a0))
    return ffi.string(rc)

def SDL_GetTicks():
    """uint32_t SDL_GetTicks(void)"""
    rc = _LIB.SDL_GetTicks()
    return rc

def SDL_GetTouchDevice(a0):
    """int64_t SDL_GetTouchDevice(int)"""
    rc = _LIB.SDL_GetTouchDevice(unbox(a0))
    return rc

def SDL_GetTouchFinger(a0, a1):
    """SDL_Finger * SDL_GetTouchFinger(int64_t, int)"""
    rc = _LIB.SDL_GetTouchFinger(unbox(a0), unbox(a1))
    return rc

def SDL_GetVersion(a0):
    """void SDL_GetVersion(SDL_version *)"""
    rc = _LIB.SDL_GetVersion(unbox(a0))
    return rc

def SDL_GetVideoDriver(a0):
    """char const * SDL_GetVideoDriver(int)"""
    rc = _LIB.SDL_GetVideoDriver(unbox(a0))
    return ffi.string(rc)

def SDL_GetWindowBrightness(a0):
    """float SDL_GetWindowBrightness(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowBrightness(unbox(a0))
    return rc

def SDL_GetWindowData(a0, a1):
    """void * SDL_GetWindowData(SDL_Window *, char const *)"""
    rc = _LIB.SDL_GetWindowData(unbox(a0), unbox(a1))
    return rc

def SDL_GetWindowDisplayIndex(a0):
    """int SDL_GetWindowDisplayIndex(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowDisplayIndex(unbox(a0))
    return rc

def SDL_GetWindowDisplayMode(a0, a1):
    """int SDL_GetWindowDisplayMode(SDL_Window *, SDL_DisplayMode *)"""
    rc = _LIB.SDL_GetWindowDisplayMode(unbox(a0), unbox(a1))
    return rc

def SDL_GetWindowFlags(a0):
    """uint32_t SDL_GetWindowFlags(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowFlags(unbox(a0))
    return rc

def SDL_GetWindowFromID(a0):
    """SDL_Window * SDL_GetWindowFromID(uint32_t)"""
    rc = _LIB.SDL_GetWindowFromID(unbox(a0))
    return rc

def SDL_GetWindowGammaRamp(a0, a1, a2, a3):
    """int SDL_GetWindowGammaRamp(SDL_Window *, uint16_t *, uint16_t *, uint16_t *)"""
    rc = _LIB.SDL_GetWindowGammaRamp(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_GetWindowGrab(a0):
    """SDL_bool SDL_GetWindowGrab(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowGrab(unbox(a0))
    return rc

def SDL_GetWindowID(a0):
    """uint32_t SDL_GetWindowID(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowID(unbox(a0))
    return rc

def SDL_GetWindowMaximumSize(a0, a1, a2):
    """void SDL_GetWindowMaximumSize(SDL_Window *, int *, int *)"""
    rc = _LIB.SDL_GetWindowMaximumSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GetWindowMinimumSize(a0, a1, a2):
    """void SDL_GetWindowMinimumSize(SDL_Window *, int *, int *)"""
    rc = _LIB.SDL_GetWindowMinimumSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GetWindowPixelFormat(a0):
    """uint32_t SDL_GetWindowPixelFormat(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowPixelFormat(unbox(a0))
    return rc

def SDL_GetWindowPosition(a0, a1, a2):
    """void SDL_GetWindowPosition(SDL_Window *, int *, int *)"""
    rc = _LIB.SDL_GetWindowPosition(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GetWindowSize(a0, a1, a2):
    """void SDL_GetWindowSize(SDL_Window *, int *, int *)"""
    rc = _LIB.SDL_GetWindowSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_GetWindowSurface(a0):
    """SDL_Surface * SDL_GetWindowSurface(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowSurface(unbox(a0))
    return rc

def SDL_GetWindowTitle(a0):
    """char const * SDL_GetWindowTitle(SDL_Window *)"""
    rc = _LIB.SDL_GetWindowTitle(unbox(a0))
    return ffi.string(rc)

def SDL_HapticClose(a0):
    """void SDL_HapticClose(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticClose(unbox(a0))
    return rc

def SDL_HapticDestroyEffect(a0, a1):
    """void SDL_HapticDestroyEffect(SDL_Haptic *, int)"""
    rc = _LIB.SDL_HapticDestroyEffect(unbox(a0), unbox(a1))
    return rc

def SDL_HapticEffectSupported(a0, a1):
    """int SDL_HapticEffectSupported(SDL_Haptic *, SDL_HapticEffect *)"""
    rc = _LIB.SDL_HapticEffectSupported(unbox(a0), unbox(a1))
    return rc

def SDL_HapticGetEffectStatus(a0, a1):
    """int SDL_HapticGetEffectStatus(SDL_Haptic *, int)"""
    rc = _LIB.SDL_HapticGetEffectStatus(unbox(a0), unbox(a1))
    return rc

def SDL_HapticIndex(a0):
    """int SDL_HapticIndex(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticIndex(unbox(a0))
    return rc

def SDL_HapticName(a0):
    """char const * SDL_HapticName(int)"""
    rc = _LIB.SDL_HapticName(unbox(a0))
    return ffi.string(rc)

def SDL_HapticNewEffect(a0, a1):
    """int SDL_HapticNewEffect(SDL_Haptic *, SDL_HapticEffect *)"""
    rc = _LIB.SDL_HapticNewEffect(unbox(a0), unbox(a1))
    return rc

def SDL_HapticNumAxes(a0):
    """int SDL_HapticNumAxes(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticNumAxes(unbox(a0))
    return rc

def SDL_HapticNumEffects(a0):
    """int SDL_HapticNumEffects(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticNumEffects(unbox(a0))
    return rc

def SDL_HapticNumEffectsPlaying(a0):
    """int SDL_HapticNumEffectsPlaying(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticNumEffectsPlaying(unbox(a0))
    return rc

def SDL_HapticOpen(a0):
    """SDL_Haptic * SDL_HapticOpen(int)"""
    rc = _LIB.SDL_HapticOpen(unbox(a0))
    return rc

def SDL_HapticOpenFromJoystick(a0):
    """SDL_Haptic * SDL_HapticOpenFromJoystick(SDL_Joystick *)"""
    rc = _LIB.SDL_HapticOpenFromJoystick(unbox(a0))
    return rc

def SDL_HapticOpenFromMouse():
    """SDL_Haptic * SDL_HapticOpenFromMouse(void)"""
    rc = _LIB.SDL_HapticOpenFromMouse()
    return rc

def SDL_HapticOpened(a0):
    """int SDL_HapticOpened(int)"""
    rc = _LIB.SDL_HapticOpened(unbox(a0))
    return rc

def SDL_HapticPause(a0):
    """int SDL_HapticPause(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticPause(unbox(a0))
    return rc

def SDL_HapticQuery(a0):
    """unsigned int SDL_HapticQuery(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticQuery(unbox(a0))
    return rc

def SDL_HapticRumbleInit(a0):
    """int SDL_HapticRumbleInit(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticRumbleInit(unbox(a0))
    return rc

def SDL_HapticRumblePlay(a0, a1, a2):
    """int SDL_HapticRumblePlay(SDL_Haptic *, float, uint32_t)"""
    rc = _LIB.SDL_HapticRumblePlay(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_HapticRumbleStop(a0):
    """int SDL_HapticRumbleStop(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticRumbleStop(unbox(a0))
    return rc

def SDL_HapticRumbleSupported(a0):
    """int SDL_HapticRumbleSupported(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticRumbleSupported(unbox(a0))
    return rc

def SDL_HapticRunEffect(a0, a1, a2):
    """int SDL_HapticRunEffect(SDL_Haptic *, int, uint32_t)"""
    rc = _LIB.SDL_HapticRunEffect(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_HapticSetAutocenter(a0, a1):
    """int SDL_HapticSetAutocenter(SDL_Haptic *, int)"""
    rc = _LIB.SDL_HapticSetAutocenter(unbox(a0), unbox(a1))
    return rc

def SDL_HapticSetGain(a0, a1):
    """int SDL_HapticSetGain(SDL_Haptic *, int)"""
    rc = _LIB.SDL_HapticSetGain(unbox(a0), unbox(a1))
    return rc

def SDL_HapticStopAll(a0):
    """int SDL_HapticStopAll(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticStopAll(unbox(a0))
    return rc

def SDL_HapticStopEffect(a0, a1):
    """int SDL_HapticStopEffect(SDL_Haptic *, int)"""
    rc = _LIB.SDL_HapticStopEffect(unbox(a0), unbox(a1))
    return rc

def SDL_HapticUnpause(a0):
    """int SDL_HapticUnpause(SDL_Haptic *)"""
    rc = _LIB.SDL_HapticUnpause(unbox(a0))
    return rc

def SDL_HapticUpdateEffect(a0, a1, a2):
    """int SDL_HapticUpdateEffect(SDL_Haptic *, int, SDL_HapticEffect *)"""
    rc = _LIB.SDL_HapticUpdateEffect(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_Has3DNow():
    """SDL_bool SDL_Has3DNow(void)"""
    rc = _LIB.SDL_Has3DNow()
    return rc

def SDL_HasAltiVec():
    """SDL_bool SDL_HasAltiVec(void)"""
    rc = _LIB.SDL_HasAltiVec()
    return rc

def SDL_HasClipboardText():
    """SDL_bool SDL_HasClipboardText(void)"""
    rc = _LIB.SDL_HasClipboardText()
    return rc

def SDL_HasEvent(a0):
    """SDL_bool SDL_HasEvent(uint32_t)"""
    rc = _LIB.SDL_HasEvent(unbox(a0))
    return rc

def SDL_HasEvents(a0, a1):
    """SDL_bool SDL_HasEvents(uint32_t, uint32_t)"""
    rc = _LIB.SDL_HasEvents(unbox(a0), unbox(a1))
    return rc

def SDL_HasIntersection(a0, a1):
    """SDL_bool SDL_HasIntersection(SDL_Rect const *, SDL_Rect const *)"""
    rc = _LIB.SDL_HasIntersection(unbox(a0), unbox(a1))
    return rc

def SDL_HasMMX():
    """SDL_bool SDL_HasMMX(void)"""
    rc = _LIB.SDL_HasMMX()
    return rc

def SDL_HasRDTSC():
    """SDL_bool SDL_HasRDTSC(void)"""
    rc = _LIB.SDL_HasRDTSC()
    return rc

def SDL_HasSSE():
    """SDL_bool SDL_HasSSE(void)"""
    rc = _LIB.SDL_HasSSE()
    return rc

def SDL_HasSSE2():
    """SDL_bool SDL_HasSSE2(void)"""
    rc = _LIB.SDL_HasSSE2()
    return rc

def SDL_HasSSE3():
    """SDL_bool SDL_HasSSE3(void)"""
    rc = _LIB.SDL_HasSSE3()
    return rc

def SDL_HasSSE41():
    """SDL_bool SDL_HasSSE41(void)"""
    rc = _LIB.SDL_HasSSE41()
    return rc

def SDL_HasSSE42():
    """SDL_bool SDL_HasSSE42(void)"""
    rc = _LIB.SDL_HasSSE42()
    return rc

def SDL_HasScreenKeyboardSupport():
    """SDL_bool SDL_HasScreenKeyboardSupport(void)"""
    rc = _LIB.SDL_HasScreenKeyboardSupport()
    return rc

def SDL_HideWindow(a0):
    """void SDL_HideWindow(SDL_Window *)"""
    rc = _LIB.SDL_HideWindow(unbox(a0))
    return rc

def SDL_Init(a0):
    """int SDL_Init(uint32_t)"""
    rc = _LIB.SDL_Init(unbox(a0))
    return rc

def SDL_InitSubSystem(a0):
    """int SDL_InitSubSystem(uint32_t)"""
    rc = _LIB.SDL_InitSubSystem(unbox(a0))
    return rc

def SDL_IntersectRect(a0, a1, a2):
    """SDL_bool SDL_IntersectRect(SDL_Rect const *, SDL_Rect const *, SDL_Rect *)"""
    rc = _LIB.SDL_IntersectRect(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_IntersectRectAndLine(a0, a1, a2, a3, a4):
    """SDL_bool SDL_IntersectRectAndLine(SDL_Rect const *, int *, int *, int *, int *)"""
    rc = _LIB.SDL_IntersectRectAndLine(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_IsGameController(a0):
    """SDL_bool SDL_IsGameController(int)"""
    rc = _LIB.SDL_IsGameController(unbox(a0))
    return rc

def SDL_IsScreenKeyboardShown(a0):
    """SDL_bool SDL_IsScreenKeyboardShown(SDL_Window *)"""
    rc = _LIB.SDL_IsScreenKeyboardShown(unbox(a0))
    return rc

def SDL_IsScreenSaverEnabled():
    """SDL_bool SDL_IsScreenSaverEnabled(void)"""
    rc = _LIB.SDL_IsScreenSaverEnabled()
    return rc

def SDL_IsTextInputActive():
    """SDL_bool SDL_IsTextInputActive(void)"""
    rc = _LIB.SDL_IsTextInputActive()
    return rc

def SDL_JoystickClose(a0):
    """void SDL_JoystickClose(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickClose(unbox(a0))
    return rc

def SDL_JoystickEventState(a0):
    """int SDL_JoystickEventState(int)"""
    rc = _LIB.SDL_JoystickEventState(unbox(a0))
    return rc

def SDL_JoystickGetAttached(a0):
    """SDL_bool SDL_JoystickGetAttached(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickGetAttached(unbox(a0))
    return rc

def SDL_JoystickGetAxis(a0, a1):
    """int16_t SDL_JoystickGetAxis(SDL_Joystick *, int)"""
    rc = _LIB.SDL_JoystickGetAxis(unbox(a0), unbox(a1))
    return rc

def SDL_JoystickGetBall(a0, a1, a2, a3):
    """int SDL_JoystickGetBall(SDL_Joystick *, int, int *, int *)"""
    rc = _LIB.SDL_JoystickGetBall(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_JoystickGetButton(a0, a1):
    """uint8_t SDL_JoystickGetButton(SDL_Joystick *, int)"""
    rc = _LIB.SDL_JoystickGetButton(unbox(a0), unbox(a1))
    return rc

def SDL_JoystickGetDeviceGUID(a0):
    """SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int)"""
    rc = _LIB.SDL_JoystickGetDeviceGUID(unbox(a0))
    return rc

def SDL_JoystickGetGUID(a0):
    """SDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickGetGUID(unbox(a0))
    return rc

def SDL_JoystickGetGUIDFromString(a0):
    """SDL_JoystickGUID SDL_JoystickGetGUIDFromString(char const *)"""
    rc = _LIB.SDL_JoystickGetGUIDFromString(unbox(a0))
    return rc

def SDL_JoystickGetGUIDString(a0, a1, a2):
    """void SDL_JoystickGetGUIDString(SDL_JoystickGUID, char *, int)"""
    rc = _LIB.SDL_JoystickGetGUIDString(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_JoystickGetHat(a0, a1):
    """uint8_t SDL_JoystickGetHat(SDL_Joystick *, int)"""
    rc = _LIB.SDL_JoystickGetHat(unbox(a0), unbox(a1))
    return rc

def SDL_JoystickInstanceID(a0):
    """int32_t SDL_JoystickInstanceID(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickInstanceID(unbox(a0))
    return rc

def SDL_JoystickIsHaptic(a0):
    """int SDL_JoystickIsHaptic(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickIsHaptic(unbox(a0))
    return rc

def SDL_JoystickName(a0):
    """char const * SDL_JoystickName(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickName(unbox(a0))
    return ffi.string(rc)

def SDL_JoystickNameForIndex(a0):
    """char const * SDL_JoystickNameForIndex(int)"""
    rc = _LIB.SDL_JoystickNameForIndex(unbox(a0))
    return ffi.string(rc)

def SDL_JoystickNumAxes(a0):
    """int SDL_JoystickNumAxes(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickNumAxes(unbox(a0))
    return rc

def SDL_JoystickNumBalls(a0):
    """int SDL_JoystickNumBalls(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickNumBalls(unbox(a0))
    return rc

def SDL_JoystickNumButtons(a0):
    """int SDL_JoystickNumButtons(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickNumButtons(unbox(a0))
    return rc

def SDL_JoystickNumHats(a0):
    """int SDL_JoystickNumHats(SDL_Joystick *)"""
    rc = _LIB.SDL_JoystickNumHats(unbox(a0))
    return rc

def SDL_JoystickOpen(a0):
    """SDL_Joystick * SDL_JoystickOpen(int)"""
    rc = _LIB.SDL_JoystickOpen(unbox(a0))
    return rc

def SDL_JoystickUpdate():
    """void SDL_JoystickUpdate(void)"""
    rc = _LIB.SDL_JoystickUpdate()
    return rc

def SDL_LoadBMP_RW(a0, a1):
    """SDL_Surface * SDL_LoadBMP_RW(SDL_RWops *, int)"""
    rc = _LIB.SDL_LoadBMP_RW(unbox(a0), unbox(a1))
    return rc

def SDL_LoadDollarTemplates(a0, a1):
    """int SDL_LoadDollarTemplates(int64_t, SDL_RWops *)"""
    rc = _LIB.SDL_LoadDollarTemplates(unbox(a0), unbox(a1))
    return rc

def SDL_LoadFunction(a0, a1):
    """void * SDL_LoadFunction(void *, char const *)"""
    rc = _LIB.SDL_LoadFunction(unbox(a0), unbox(a1))
    return rc

def SDL_LoadObject(a0):
    """void * SDL_LoadObject(char const *)"""
    rc = _LIB.SDL_LoadObject(unbox(a0))
    return rc

def SDL_LoadWAV_RW(a0, a1, a2, a3, a4):
    """SDL_AudioSpec * SDL_LoadWAV_RW(SDL_RWops *, int, SDL_AudioSpec *, uint8_t * *, uint32_t *)"""
    rc = _LIB.SDL_LoadWAV_RW(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_LockAudio():
    """void SDL_LockAudio(void)"""
    rc = _LIB.SDL_LockAudio()
    return rc

def SDL_LockAudioDevice(a0):
    """void SDL_LockAudioDevice(uint32_t)"""
    rc = _LIB.SDL_LockAudioDevice(unbox(a0))
    return rc

def SDL_LockMutex(a0):
    """int SDL_LockMutex(SDL_mutex *)"""
    rc = _LIB.SDL_LockMutex(unbox(a0))
    return rc

def SDL_LockSurface(a0):
    """int SDL_LockSurface(SDL_Surface *)"""
    rc = _LIB.SDL_LockSurface(unbox(a0))
    return rc

def SDL_LockTexture(a0, a1, a2, a3):
    """int SDL_LockTexture(SDL_Texture *, SDL_Rect const *, void * *, int *)"""
    rc = _LIB.SDL_LockTexture(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_Log(a0):
    """void SDL_Log(char const *, ...)"""
    rc = _LIB.SDL_Log(unbox(a0))
    return rc

def SDL_LogCritical(a0, a1):
    """void SDL_LogCritical(int, char const *, ...)"""
    rc = _LIB.SDL_LogCritical(unbox(a0), unbox(a1))
    return rc

def SDL_LogDebug(a0, a1):
    """void SDL_LogDebug(int, char const *, ...)"""
    rc = _LIB.SDL_LogDebug(unbox(a0), unbox(a1))
    return rc

def SDL_LogError(a0, a1):
    """void SDL_LogError(int, char const *, ...)"""
    rc = _LIB.SDL_LogError(unbox(a0), unbox(a1))
    return rc

def SDL_LogGetOutputFunction(a0, a1):
    """void SDL_LogGetOutputFunction(void(* *)(void *, int, SDL_LogPriority, char const *), void * *)"""
    rc = _LIB.SDL_LogGetOutputFunction(unbox(a0), unbox(a1))
    return rc

def SDL_LogGetPriority(a0):
    """SDL_LogPriority SDL_LogGetPriority(int)"""
    rc = _LIB.SDL_LogGetPriority(unbox(a0))
    return rc

def SDL_LogInfo(a0, a1):
    """void SDL_LogInfo(int, char const *, ...)"""
    rc = _LIB.SDL_LogInfo(unbox(a0), unbox(a1))
    return rc

def SDL_LogMessage(a0, a1, a2):
    """void SDL_LogMessage(int, SDL_LogPriority, char const *, ...)"""
    rc = _LIB.SDL_LogMessage(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_LogMessageV(a0, a1, a2, a3):
    """void SDL_LogMessageV(int, SDL_LogPriority, char const *, int32_t)"""
    rc = _LIB.SDL_LogMessageV(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_LogResetPriorities():
    """void SDL_LogResetPriorities(void)"""
    rc = _LIB.SDL_LogResetPriorities()
    return rc

def SDL_LogSetAllPriority(a0):
    """void SDL_LogSetAllPriority(SDL_LogPriority)"""
    rc = _LIB.SDL_LogSetAllPriority(unbox(a0))
    return rc

def SDL_LogSetOutputFunction(a0, a1):
    """void SDL_LogSetOutputFunction(void SDL_LogSetOutputFunction(void *, int, SDL_LogPriority, char const *), void *)"""
    rc = _LIB.SDL_LogSetOutputFunction(unbox(a0), unbox(a1))
    return rc

def SDL_LogSetPriority(a0, a1):
    """void SDL_LogSetPriority(int, SDL_LogPriority)"""
    rc = _LIB.SDL_LogSetPriority(unbox(a0), unbox(a1))
    return rc

def SDL_LogVerbose(a0, a1):
    """void SDL_LogVerbose(int, char const *, ...)"""
    rc = _LIB.SDL_LogVerbose(unbox(a0), unbox(a1))
    return rc

def SDL_LogWarn(a0, a1):
    """void SDL_LogWarn(int, char const *, ...)"""
    rc = _LIB.SDL_LogWarn(unbox(a0), unbox(a1))
    return rc

def SDL_LowerBlit(a0, a1, a2, a3):
    """int SDL_LowerBlit(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *)"""
    rc = _LIB.SDL_LowerBlit(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_LowerBlitScaled(a0, a1, a2, a3):
    """int SDL_LowerBlitScaled(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *)"""
    rc = _LIB.SDL_LowerBlitScaled(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_MapRGB(a0, a1, a2, a3):
    """uint32_t SDL_MapRGB(SDL_PixelFormat const *, uint8_t, uint8_t, uint8_t)"""
    rc = _LIB.SDL_MapRGB(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_MapRGBA(a0, a1, a2, a3, a4):
    """uint32_t SDL_MapRGBA(SDL_PixelFormat const *, uint8_t, uint8_t, uint8_t, uint8_t)"""
    rc = _LIB.SDL_MapRGBA(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_MasksToPixelFormatEnum(a0, a1, a2, a3, a4):
    """uint32_t SDL_MasksToPixelFormatEnum(int, uint32_t, uint32_t, uint32_t, uint32_t)"""
    rc = _LIB.SDL_MasksToPixelFormatEnum(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_MaximizeWindow(a0):
    """void SDL_MaximizeWindow(SDL_Window *)"""
    rc = _LIB.SDL_MaximizeWindow(unbox(a0))
    return rc

def SDL_MinimizeWindow(a0):
    """void SDL_MinimizeWindow(SDL_Window *)"""
    rc = _LIB.SDL_MinimizeWindow(unbox(a0))
    return rc

def SDL_MixAudio(a0, a1, a2, a3):
    """void SDL_MixAudio(uint8_t *, uint8_t const *, uint32_t, int)"""
    rc = _LIB.SDL_MixAudio(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_MixAudioFormat(a0, a1, a2, a3, a4):
    """void SDL_MixAudioFormat(uint8_t *, uint8_t const *, uint16_t, uint32_t, int)"""
    rc = _LIB.SDL_MixAudioFormat(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_MouseIsHaptic():
    """int SDL_MouseIsHaptic(void)"""
    rc = _LIB.SDL_MouseIsHaptic()
    return rc

def SDL_NumHaptics():
    """int SDL_NumHaptics(void)"""
    rc = _LIB.SDL_NumHaptics()
    return rc

def SDL_NumJoysticks():
    """int SDL_NumJoysticks(void)"""
    rc = _LIB.SDL_NumJoysticks()
    return rc

def SDL_OpenAudio(a0, a1):
    """int SDL_OpenAudio(SDL_AudioSpec *, SDL_AudioSpec *)"""
    rc = _LIB.SDL_OpenAudio(unbox(a0), unbox(a1))
    return rc

def SDL_OpenAudioDevice(a0, a1, a2, a3, a4):
    """uint32_t SDL_OpenAudioDevice(char const *, int, SDL_AudioSpec const *, SDL_AudioSpec *, int)"""
    rc = _LIB.SDL_OpenAudioDevice(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_PauseAudio(a0):
    """void SDL_PauseAudio(int)"""
    rc = _LIB.SDL_PauseAudio(unbox(a0))
    return rc

def SDL_PauseAudioDevice(a0, a1):
    """void SDL_PauseAudioDevice(uint32_t, int)"""
    rc = _LIB.SDL_PauseAudioDevice(unbox(a0), unbox(a1))
    return rc

def SDL_PeepEvents(a0, a1, a2, a3, a4):
    """int SDL_PeepEvents(SDL_Event *, int, SDL_eventaction, uint32_t, uint32_t)"""
    rc = _LIB.SDL_PeepEvents(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_PixelFormatEnumToMasks(a0, a1, a2, a3, a4, a5):
    """SDL_bool SDL_PixelFormatEnumToMasks(uint32_t, int *, uint32_t *, uint32_t *, uint32_t *, uint32_t *)"""
    rc = _LIB.SDL_PixelFormatEnumToMasks(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5))
    return rc

def SDL_PollEvent(a0):
    """int SDL_PollEvent(SDL_Event *)"""
    rc = _LIB.SDL_PollEvent(unbox(a0))
    return rc

def SDL_PumpEvents():
    """void SDL_PumpEvents(void)"""
    rc = _LIB.SDL_PumpEvents()
    return rc

def SDL_PushEvent(a0):
    """int SDL_PushEvent(SDL_Event *)"""
    rc = _LIB.SDL_PushEvent(unbox(a0))
    return rc

def SDL_QueryTexture(a0, a1, a2, a3, a4):
    """int SDL_QueryTexture(SDL_Texture *, uint32_t *, int *, int *, int *)"""
    rc = _LIB.SDL_QueryTexture(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_Quit():
    """void SDL_Quit(void)"""
    rc = _LIB.SDL_Quit()
    return rc

def SDL_QuitSubSystem(a0):
    """void SDL_QuitSubSystem(uint32_t)"""
    rc = _LIB.SDL_QuitSubSystem(unbox(a0))
    return rc

def SDL_RWFromConstMem(a0, a1):
    """SDL_RWops * SDL_RWFromConstMem(void const *, int)"""
    rc = _LIB.SDL_RWFromConstMem(unbox(a0), unbox(a1))
    return rc

def SDL_RWFromFP(a0, a1):
    """SDL_RWops * SDL_RWFromFP(FILE *, SDL_bool)"""
    rc = _LIB.SDL_RWFromFP(unbox(a0), unbox(a1))
    return rc

def SDL_RWFromFile(a0, a1):
    """SDL_RWops * SDL_RWFromFile(char const *, char const *)"""
    rc = _LIB.SDL_RWFromFile(unbox(a0), unbox(a1))
    return rc

def SDL_RWFromMem(a0, a1):
    """SDL_RWops * SDL_RWFromMem(void *, int)"""
    rc = _LIB.SDL_RWFromMem(unbox(a0), unbox(a1))
    return rc

def SDL_RaiseWindow(a0):
    """void SDL_RaiseWindow(SDL_Window *)"""
    rc = _LIB.SDL_RaiseWindow(unbox(a0))
    return rc

def SDL_ReadBE16(a0):
    """uint16_t SDL_ReadBE16(SDL_RWops *)"""
    rc = _LIB.SDL_ReadBE16(unbox(a0))
    return rc

def SDL_ReadBE32(a0):
    """uint32_t SDL_ReadBE32(SDL_RWops *)"""
    rc = _LIB.SDL_ReadBE32(unbox(a0))
    return rc

def SDL_ReadBE64(a0):
    """uint64_t SDL_ReadBE64(SDL_RWops *)"""
    rc = _LIB.SDL_ReadBE64(unbox(a0))
    return rc

def SDL_ReadLE16(a0):
    """uint16_t SDL_ReadLE16(SDL_RWops *)"""
    rc = _LIB.SDL_ReadLE16(unbox(a0))
    return rc

def SDL_ReadLE32(a0):
    """uint32_t SDL_ReadLE32(SDL_RWops *)"""
    rc = _LIB.SDL_ReadLE32(unbox(a0))
    return rc

def SDL_ReadLE64(a0):
    """uint64_t SDL_ReadLE64(SDL_RWops *)"""
    rc = _LIB.SDL_ReadLE64(unbox(a0))
    return rc

def SDL_ReadU8(a0):
    """uint8_t SDL_ReadU8(SDL_RWops *)"""
    rc = _LIB.SDL_ReadU8(unbox(a0))
    return rc

def SDL_RecordGesture(a0):
    """int SDL_RecordGesture(int64_t)"""
    rc = _LIB.SDL_RecordGesture(unbox(a0))
    return rc

def SDL_RegisterApp(a0, a1, a2):
    """int SDL_RegisterApp(char *, uint32_t, void *)"""
    rc = _LIB.SDL_RegisterApp(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RegisterEvents(a0):
    """uint32_t SDL_RegisterEvents(int)"""
    rc = _LIB.SDL_RegisterEvents(unbox(a0))
    return rc

def SDL_RemoveTimer(a0):
    """SDL_bool SDL_RemoveTimer(int)"""
    rc = _LIB.SDL_RemoveTimer(unbox(a0))
    return rc

def SDL_RenderClear(a0):
    """int SDL_RenderClear(SDL_Renderer *)"""
    rc = _LIB.SDL_RenderClear(unbox(a0))
    return rc

def SDL_RenderCopy(a0, a1, a2, a3):
    """int SDL_RenderCopy(SDL_Renderer *, SDL_Texture *, SDL_Rect const *, SDL_Rect const *)"""
    rc = _LIB.SDL_RenderCopy(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_RenderCopyEx(a0, a1, a2, a3, a4, a5, a6):
    """int SDL_RenderCopyEx(SDL_Renderer *, SDL_Texture *, SDL_Rect const *, SDL_Rect const *, double, SDL_Point const *, SDL_RendererFlip)"""
    rc = _LIB.SDL_RenderCopyEx(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4), unbox(a5), unbox(a6))
    return rc

def SDL_RenderDrawLine(a0, a1, a2, a3, a4):
    """int SDL_RenderDrawLine(SDL_Renderer *, int, int, int, int)"""
    rc = _LIB.SDL_RenderDrawLine(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_RenderDrawLines(a0, a1, a2):
    """int SDL_RenderDrawLines(SDL_Renderer *, SDL_Point const *, int)"""
    rc = _LIB.SDL_RenderDrawLines(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderDrawPoint(a0, a1, a2):
    """int SDL_RenderDrawPoint(SDL_Renderer *, int, int)"""
    rc = _LIB.SDL_RenderDrawPoint(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderDrawPoints(a0, a1, a2):
    """int SDL_RenderDrawPoints(SDL_Renderer *, SDL_Point const *, int)"""
    rc = _LIB.SDL_RenderDrawPoints(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderDrawRect(a0, a1):
    """int SDL_RenderDrawRect(SDL_Renderer *, SDL_Rect const *)"""
    rc = _LIB.SDL_RenderDrawRect(unbox(a0), unbox(a1))
    return rc

def SDL_RenderDrawRects(a0, a1, a2):
    """int SDL_RenderDrawRects(SDL_Renderer *, SDL_Rect const *, int)"""
    rc = _LIB.SDL_RenderDrawRects(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderFillRect(a0, a1):
    """int SDL_RenderFillRect(SDL_Renderer *, SDL_Rect const *)"""
    rc = _LIB.SDL_RenderFillRect(unbox(a0), unbox(a1))
    return rc

def SDL_RenderFillRects(a0, a1, a2):
    """int SDL_RenderFillRects(SDL_Renderer *, SDL_Rect const *, int)"""
    rc = _LIB.SDL_RenderFillRects(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderGetClipRect(a0, a1):
    """void SDL_RenderGetClipRect(SDL_Renderer *, SDL_Rect *)"""
    rc = _LIB.SDL_RenderGetClipRect(unbox(a0), unbox(a1))
    return rc

def SDL_RenderGetLogicalSize(a0, a1, a2):
    """void SDL_RenderGetLogicalSize(SDL_Renderer *, int *, int *)"""
    rc = _LIB.SDL_RenderGetLogicalSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderGetScale(a0, a1, a2):
    """void SDL_RenderGetScale(SDL_Renderer *, float *, float *)"""
    rc = _LIB.SDL_RenderGetScale(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderGetViewport(a0, a1):
    """void SDL_RenderGetViewport(SDL_Renderer *, SDL_Rect *)"""
    rc = _LIB.SDL_RenderGetViewport(unbox(a0), unbox(a1))
    return rc

def SDL_RenderPresent(a0):
    """void SDL_RenderPresent(SDL_Renderer *)"""
    rc = _LIB.SDL_RenderPresent(unbox(a0))
    return rc

def SDL_RenderReadPixels(a0, a1, a2, a3, a4):
    """int SDL_RenderReadPixels(SDL_Renderer *, SDL_Rect const *, uint32_t, void *, int)"""
    rc = _LIB.SDL_RenderReadPixels(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_RenderSetClipRect(a0, a1):
    """int SDL_RenderSetClipRect(SDL_Renderer *, SDL_Rect const *)"""
    rc = _LIB.SDL_RenderSetClipRect(unbox(a0), unbox(a1))
    return rc

def SDL_RenderSetLogicalSize(a0, a1, a2):
    """int SDL_RenderSetLogicalSize(SDL_Renderer *, int, int)"""
    rc = _LIB.SDL_RenderSetLogicalSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderSetScale(a0, a1, a2):
    """int SDL_RenderSetScale(SDL_Renderer *, float, float)"""
    rc = _LIB.SDL_RenderSetScale(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_RenderSetViewport(a0, a1):
    """int SDL_RenderSetViewport(SDL_Renderer *, SDL_Rect const *)"""
    rc = _LIB.SDL_RenderSetViewport(unbox(a0), unbox(a1))
    return rc

def SDL_RenderTargetSupported(a0):
    """SDL_bool SDL_RenderTargetSupported(SDL_Renderer *)"""
    rc = _LIB.SDL_RenderTargetSupported(unbox(a0))
    return rc

def SDL_ReportAssertion(a0, a1, a2, a3):
    """SDL_assert_state SDL_ReportAssertion(SDL_assert_data *, char const *, char const *, int)"""
    rc = _LIB.SDL_ReportAssertion(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_ResetAssertionReport():
    """void SDL_ResetAssertionReport(void)"""
    rc = _LIB.SDL_ResetAssertionReport()
    return rc

def SDL_RestoreWindow(a0):
    """void SDL_RestoreWindow(SDL_Window *)"""
    rc = _LIB.SDL_RestoreWindow(unbox(a0))
    return rc

def SDL_SaveAllDollarTemplates(a0):
    """int SDL_SaveAllDollarTemplates(SDL_RWops *)"""
    rc = _LIB.SDL_SaveAllDollarTemplates(unbox(a0))
    return rc

def SDL_SaveBMP_RW(a0, a1, a2):
    """int SDL_SaveBMP_RW(SDL_Surface *, SDL_RWops *, int)"""
    rc = _LIB.SDL_SaveBMP_RW(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SaveDollarTemplate(a0, a1):
    """int SDL_SaveDollarTemplate(int64_t, SDL_RWops *)"""
    rc = _LIB.SDL_SaveDollarTemplate(unbox(a0), unbox(a1))
    return rc

def SDL_SemPost(a0):
    """int SDL_SemPost(SDL_sem *)"""
    rc = _LIB.SDL_SemPost(unbox(a0))
    return rc

def SDL_SemTryWait(a0):
    """int SDL_SemTryWait(SDL_sem *)"""
    rc = _LIB.SDL_SemTryWait(unbox(a0))
    return rc

def SDL_SemValue(a0):
    """uint32_t SDL_SemValue(SDL_sem *)"""
    rc = _LIB.SDL_SemValue(unbox(a0))
    return rc

def SDL_SemWait(a0):
    """int SDL_SemWait(SDL_sem *)"""
    rc = _LIB.SDL_SemWait(unbox(a0))
    return rc

def SDL_SemWaitTimeout(a0, a1):
    """int SDL_SemWaitTimeout(SDL_sem *, uint32_t)"""
    rc = _LIB.SDL_SemWaitTimeout(unbox(a0), unbox(a1))
    return rc

def SDL_SetAssertionHandler(a0, a1):
    """void SDL_SetAssertionHandler(SDL_assert_state SDL_SetAssertionHandler(SDL_assert_data const *, void *), void *)"""
    rc = _LIB.SDL_SetAssertionHandler(unbox(a0), unbox(a1))
    return rc

def SDL_SetClipRect(a0, a1):
    """SDL_bool SDL_SetClipRect(SDL_Surface *, SDL_Rect const *)"""
    rc = _LIB.SDL_SetClipRect(unbox(a0), unbox(a1))
    return rc

def SDL_SetClipboardText(a0):
    """int SDL_SetClipboardText(char const *)"""
    rc = _LIB.SDL_SetClipboardText(unbox(a0))
    return rc

def SDL_SetColorKey(a0, a1, a2):
    """int SDL_SetColorKey(SDL_Surface *, int, uint32_t)"""
    rc = _LIB.SDL_SetColorKey(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SetCursor(a0):
    """void SDL_SetCursor(SDL_Cursor *)"""
    rc = _LIB.SDL_SetCursor(unbox(a0))
    return rc

def SDL_SetError(a0):
    """int SDL_SetError(char const *, ...)"""
    rc = _LIB.SDL_SetError(unbox(a0))
    return rc

def SDL_SetEventFilter(a0, a1):
    """void SDL_SetEventFilter(int SDL_SetEventFilter(void *, SDL_Event *), void *)"""
    rc = _LIB.SDL_SetEventFilter(unbox(a0), unbox(a1))
    return rc

def SDL_SetHint(a0, a1):
    """SDL_bool SDL_SetHint(char const *, char const *)"""
    rc = _LIB.SDL_SetHint(unbox(a0), unbox(a1))
    return rc

def SDL_SetHintWithPriority(a0, a1, a2):
    """SDL_bool SDL_SetHintWithPriority(char const *, char const *, SDL_HintPriority)"""
    rc = _LIB.SDL_SetHintWithPriority(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SetMainReady():
    """void SDL_SetMainReady(void)"""
    rc = _LIB.SDL_SetMainReady()
    return rc

def SDL_SetModState(a0):
    """void SDL_SetModState(SDL_Keymod)"""
    rc = _LIB.SDL_SetModState(unbox(a0))
    return rc

def SDL_SetPaletteColors(a0, a1, a2, a3):
    """int SDL_SetPaletteColors(SDL_Palette *, SDL_Color const *, int, int)"""
    rc = _LIB.SDL_SetPaletteColors(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_SetPixelFormatPalette(a0, a1):
    """int SDL_SetPixelFormatPalette(SDL_PixelFormat *, SDL_Palette *)"""
    rc = _LIB.SDL_SetPixelFormatPalette(unbox(a0), unbox(a1))
    return rc

def SDL_SetRelativeMouseMode(a0):
    """int SDL_SetRelativeMouseMode(SDL_bool)"""
    rc = _LIB.SDL_SetRelativeMouseMode(unbox(a0))
    return rc

def SDL_SetRenderDrawBlendMode(a0, a1):
    """int SDL_SetRenderDrawBlendMode(SDL_Renderer *, SDL_BlendMode)"""
    rc = _LIB.SDL_SetRenderDrawBlendMode(unbox(a0), unbox(a1))
    return rc

def SDL_SetRenderDrawColor(a0, a1, a2, a3, a4):
    """int SDL_SetRenderDrawColor(SDL_Renderer *, uint8_t, uint8_t, uint8_t, uint8_t)"""
    rc = _LIB.SDL_SetRenderDrawColor(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_SetRenderTarget(a0, a1):
    """int SDL_SetRenderTarget(SDL_Renderer *, SDL_Texture *)"""
    rc = _LIB.SDL_SetRenderTarget(unbox(a0), unbox(a1))
    return rc

def SDL_SetSurfaceAlphaMod(a0, a1):
    """int SDL_SetSurfaceAlphaMod(SDL_Surface *, uint8_t)"""
    rc = _LIB.SDL_SetSurfaceAlphaMod(unbox(a0), unbox(a1))
    return rc

def SDL_SetSurfaceBlendMode(a0, a1):
    """int SDL_SetSurfaceBlendMode(SDL_Surface *, SDL_BlendMode)"""
    rc = _LIB.SDL_SetSurfaceBlendMode(unbox(a0), unbox(a1))
    return rc

def SDL_SetSurfaceColorMod(a0, a1, a2, a3):
    """int SDL_SetSurfaceColorMod(SDL_Surface *, uint8_t, uint8_t, uint8_t)"""
    rc = _LIB.SDL_SetSurfaceColorMod(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_SetSurfacePalette(a0, a1):
    """int SDL_SetSurfacePalette(SDL_Surface *, SDL_Palette *)"""
    rc = _LIB.SDL_SetSurfacePalette(unbox(a0), unbox(a1))
    return rc

def SDL_SetSurfaceRLE(a0, a1):
    """int SDL_SetSurfaceRLE(SDL_Surface *, int)"""
    rc = _LIB.SDL_SetSurfaceRLE(unbox(a0), unbox(a1))
    return rc

def SDL_SetTextInputRect(a0):
    """void SDL_SetTextInputRect(SDL_Rect *)"""
    rc = _LIB.SDL_SetTextInputRect(unbox(a0))
    return rc

def SDL_SetTextureAlphaMod(a0, a1):
    """int SDL_SetTextureAlphaMod(SDL_Texture *, uint8_t)"""
    rc = _LIB.SDL_SetTextureAlphaMod(unbox(a0), unbox(a1))
    return rc

def SDL_SetTextureBlendMode(a0, a1):
    """int SDL_SetTextureBlendMode(SDL_Texture *, SDL_BlendMode)"""
    rc = _LIB.SDL_SetTextureBlendMode(unbox(a0), unbox(a1))
    return rc

def SDL_SetTextureColorMod(a0, a1, a2, a3):
    """int SDL_SetTextureColorMod(SDL_Texture *, uint8_t, uint8_t, uint8_t)"""
    rc = _LIB.SDL_SetTextureColorMod(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_SetThreadPriority(a0):
    """int SDL_SetThreadPriority(SDL_ThreadPriority)"""
    rc = _LIB.SDL_SetThreadPriority(unbox(a0))
    return rc

def SDL_SetWindowBordered(a0, a1):
    """void SDL_SetWindowBordered(SDL_Window *, SDL_bool)"""
    rc = _LIB.SDL_SetWindowBordered(unbox(a0), unbox(a1))
    return rc

def SDL_SetWindowBrightness(a0, a1):
    """int SDL_SetWindowBrightness(SDL_Window *, float)"""
    rc = _LIB.SDL_SetWindowBrightness(unbox(a0), unbox(a1))
    return rc

def SDL_SetWindowData(a0, a1, a2):
    """void * SDL_SetWindowData(SDL_Window *, char const *, void *)"""
    rc = _LIB.SDL_SetWindowData(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SetWindowDisplayMode(a0, a1):
    """int SDL_SetWindowDisplayMode(SDL_Window *, SDL_DisplayMode const *)"""
    rc = _LIB.SDL_SetWindowDisplayMode(unbox(a0), unbox(a1))
    return rc

def SDL_SetWindowFullscreen(a0, a1):
    """int SDL_SetWindowFullscreen(SDL_Window *, uint32_t)"""
    rc = _LIB.SDL_SetWindowFullscreen(unbox(a0), unbox(a1))
    return rc

def SDL_SetWindowGammaRamp(a0, a1, a2, a3):
    """int SDL_SetWindowGammaRamp(SDL_Window *, uint16_t const *, uint16_t const *, uint16_t const *)"""
    rc = _LIB.SDL_SetWindowGammaRamp(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_SetWindowGrab(a0, a1):
    """void SDL_SetWindowGrab(SDL_Window *, SDL_bool)"""
    rc = _LIB.SDL_SetWindowGrab(unbox(a0), unbox(a1))
    return rc

def SDL_SetWindowIcon(a0, a1):
    """void SDL_SetWindowIcon(SDL_Window *, SDL_Surface *)"""
    rc = _LIB.SDL_SetWindowIcon(unbox(a0), unbox(a1))
    return rc

def SDL_SetWindowMaximumSize(a0, a1, a2):
    """void SDL_SetWindowMaximumSize(SDL_Window *, int, int)"""
    rc = _LIB.SDL_SetWindowMaximumSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SetWindowMinimumSize(a0, a1, a2):
    """void SDL_SetWindowMinimumSize(SDL_Window *, int, int)"""
    rc = _LIB.SDL_SetWindowMinimumSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SetWindowPosition(a0, a1, a2):
    """void SDL_SetWindowPosition(SDL_Window *, int, int)"""
    rc = _LIB.SDL_SetWindowPosition(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SetWindowSize(a0, a1, a2):
    """void SDL_SetWindowSize(SDL_Window *, int, int)"""
    rc = _LIB.SDL_SetWindowSize(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_SetWindowTitle(a0, a1):
    """void SDL_SetWindowTitle(SDL_Window *, char const *)"""
    rc = _LIB.SDL_SetWindowTitle(unbox(a0), unbox(a1))
    return rc

def SDL_ShowCursor(a0):
    """int SDL_ShowCursor(int)"""
    rc = _LIB.SDL_ShowCursor(unbox(a0))
    return rc

def SDL_ShowMessageBox(a0, a1):
    """int SDL_ShowMessageBox(SDL_MessageBoxData const *, int *)"""
    rc = _LIB.SDL_ShowMessageBox(unbox(a0), unbox(a1))
    return rc

def SDL_ShowSimpleMessageBox(a0, a1, a2, a3):
    """int SDL_ShowSimpleMessageBox(uint32_t, char const *, char const *, SDL_Window *)"""
    rc = _LIB.SDL_ShowSimpleMessageBox(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_ShowWindow(a0):
    """void SDL_ShowWindow(SDL_Window *)"""
    rc = _LIB.SDL_ShowWindow(unbox(a0))
    return rc

def SDL_SoftStretch(a0, a1, a2, a3):
    """int SDL_SoftStretch(SDL_Surface *, SDL_Rect const *, SDL_Surface *, SDL_Rect const *)"""
    rc = _LIB.SDL_SoftStretch(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_StartTextInput():
    """void SDL_StartTextInput(void)"""
    rc = _LIB.SDL_StartTextInput()
    return rc

def SDL_StopTextInput():
    """void SDL_StopTextInput(void)"""
    rc = _LIB.SDL_StopTextInput()
    return rc

def SDL_TLSCreate():
    """unsigned int SDL_TLSCreate(void)"""
    rc = _LIB.SDL_TLSCreate()
    return rc

def SDL_TLSGet(a0):
    """void * SDL_TLSGet(unsigned int)"""
    rc = _LIB.SDL_TLSGet(unbox(a0))
    return rc

def SDL_TLSSet(a0, a1, a2):
    """int SDL_TLSSet(unsigned int, void const *, void SDL_TLSSet(void *))"""
    rc = _LIB.SDL_TLSSet(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_ThreadID():
    """unsigned long SDL_ThreadID(void)"""
    rc = _LIB.SDL_ThreadID()
    return rc

def SDL_TryLockMutex(a0):
    """int SDL_TryLockMutex(SDL_mutex *)"""
    rc = _LIB.SDL_TryLockMutex(unbox(a0))
    return rc

def SDL_UnionRect(a0, a1, a2):
    """void SDL_UnionRect(SDL_Rect const *, SDL_Rect const *, SDL_Rect *)"""
    rc = _LIB.SDL_UnionRect(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_UnloadObject(a0):
    """void SDL_UnloadObject(void *)"""
    rc = _LIB.SDL_UnloadObject(unbox(a0))
    return rc

def SDL_UnlockAudio():
    """void SDL_UnlockAudio(void)"""
    rc = _LIB.SDL_UnlockAudio()
    return rc

def SDL_UnlockAudioDevice(a0):
    """void SDL_UnlockAudioDevice(uint32_t)"""
    rc = _LIB.SDL_UnlockAudioDevice(unbox(a0))
    return rc

def SDL_UnlockMutex(a0):
    """int SDL_UnlockMutex(SDL_mutex *)"""
    rc = _LIB.SDL_UnlockMutex(unbox(a0))
    return rc

def SDL_UnlockSurface(a0):
    """void SDL_UnlockSurface(SDL_Surface *)"""
    rc = _LIB.SDL_UnlockSurface(unbox(a0))
    return rc

def SDL_UnlockTexture(a0):
    """void SDL_UnlockTexture(SDL_Texture *)"""
    rc = _LIB.SDL_UnlockTexture(unbox(a0))
    return rc

def SDL_UnregisterApp():
    """void SDL_UnregisterApp(void)"""
    rc = _LIB.SDL_UnregisterApp()
    return rc

def SDL_UpdateTexture(a0, a1, a2, a3):
    """int SDL_UpdateTexture(SDL_Texture *, SDL_Rect const *, void const *, int)"""
    rc = _LIB.SDL_UpdateTexture(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_UpdateWindowSurface(a0):
    """int SDL_UpdateWindowSurface(SDL_Window *)"""
    rc = _LIB.SDL_UpdateWindowSurface(unbox(a0))
    return rc

def SDL_UpdateWindowSurfaceRects(a0, a1, a2):
    """int SDL_UpdateWindowSurfaceRects(SDL_Window *, SDL_Rect const *, int)"""
    rc = _LIB.SDL_UpdateWindowSurfaceRects(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_UpperBlit(a0, a1, a2, a3):
    """int SDL_UpperBlit(SDL_Surface *, SDL_Rect const *, SDL_Surface *, SDL_Rect *)"""
    rc = _LIB.SDL_UpperBlit(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_UpperBlitScaled(a0, a1, a2, a3):
    """int SDL_UpperBlitScaled(SDL_Surface *, SDL_Rect const *, SDL_Surface *, SDL_Rect *)"""
    rc = _LIB.SDL_UpperBlitScaled(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_VideoInit(a0):
    """int SDL_VideoInit(char const *)"""
    rc = _LIB.SDL_VideoInit(unbox(a0))
    return rc

def SDL_VideoQuit():
    """void SDL_VideoQuit(void)"""
    rc = _LIB.SDL_VideoQuit()
    return rc

def SDL_WaitEvent(a0):
    """int SDL_WaitEvent(SDL_Event *)"""
    rc = _LIB.SDL_WaitEvent(unbox(a0))
    return rc

def SDL_WaitEventTimeout(a0, a1):
    """int SDL_WaitEventTimeout(SDL_Event *, int)"""
    rc = _LIB.SDL_WaitEventTimeout(unbox(a0), unbox(a1))
    return rc

def SDL_WaitThread(a0, a1):
    """void SDL_WaitThread(SDL_Thread *, int *)"""
    rc = _LIB.SDL_WaitThread(unbox(a0), unbox(a1))
    return rc

def SDL_WarpMouseInWindow(a0, a1, a2):
    """void SDL_WarpMouseInWindow(SDL_Window *, int, int)"""
    rc = _LIB.SDL_WarpMouseInWindow(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_WasInit(a0):
    """uint32_t SDL_WasInit(uint32_t)"""
    rc = _LIB.SDL_WasInit(unbox(a0))
    return rc

def SDL_WriteBE16(a0, a1):
    """size_t SDL_WriteBE16(SDL_RWops *, uint16_t)"""
    rc = _LIB.SDL_WriteBE16(unbox(a0), unbox(a1))
    return rc

def SDL_WriteBE32(a0, a1):
    """size_t SDL_WriteBE32(SDL_RWops *, uint32_t)"""
    rc = _LIB.SDL_WriteBE32(unbox(a0), unbox(a1))
    return rc

def SDL_WriteBE64(a0, a1):
    """size_t SDL_WriteBE64(SDL_RWops *, uint64_t)"""
    rc = _LIB.SDL_WriteBE64(unbox(a0), unbox(a1))
    return rc

def SDL_WriteLE16(a0, a1):
    """size_t SDL_WriteLE16(SDL_RWops *, uint16_t)"""
    rc = _LIB.SDL_WriteLE16(unbox(a0), unbox(a1))
    return rc

def SDL_WriteLE32(a0, a1):
    """size_t SDL_WriteLE32(SDL_RWops *, uint32_t)"""
    rc = _LIB.SDL_WriteLE32(unbox(a0), unbox(a1))
    return rc

def SDL_WriteLE64(a0, a1):
    """size_t SDL_WriteLE64(SDL_RWops *, uint64_t)"""
    rc = _LIB.SDL_WriteLE64(unbox(a0), unbox(a1))
    return rc

def SDL_WriteU8(a0, a1):
    """size_t SDL_WriteU8(SDL_RWops *, uint8_t)"""
    rc = _LIB.SDL_WriteU8(unbox(a0), unbox(a1))
    return rc

def SDL_abs(a0):
    """int SDL_abs(int)"""
    rc = _LIB.SDL_abs(unbox(a0))
    return rc

def SDL_atan(a0):
    """double SDL_atan(double)"""
    rc = _LIB.SDL_atan(unbox(a0))
    return rc

def SDL_atan2(a0, a1):
    """double SDL_atan2(double, double)"""
    rc = _LIB.SDL_atan2(unbox(a0), unbox(a1))
    return rc

def SDL_atof(a0):
    """double SDL_atof(char const *)"""
    rc = _LIB.SDL_atof(unbox(a0))
    return rc

def SDL_atoi(a0):
    """int SDL_atoi(char const *)"""
    rc = _LIB.SDL_atoi(unbox(a0))
    return rc

def SDL_calloc(a0, a1):
    """void * SDL_calloc(size_t, size_t)"""
    rc = _LIB.SDL_calloc(unbox(a0), unbox(a1))
    return rc

def SDL_ceil(a0):
    """double SDL_ceil(double)"""
    rc = _LIB.SDL_ceil(unbox(a0))
    return rc

def SDL_copysign(a0, a1):
    """double SDL_copysign(double, double)"""
    rc = _LIB.SDL_copysign(unbox(a0), unbox(a1))
    return rc

def SDL_cos(a0):
    """double SDL_cos(double)"""
    rc = _LIB.SDL_cos(unbox(a0))
    return rc

def SDL_cosf(a0):
    """float SDL_cosf(float)"""
    rc = _LIB.SDL_cosf(unbox(a0))
    return rc

def SDL_fabs(a0):
    """double SDL_fabs(double)"""
    rc = _LIB.SDL_fabs(unbox(a0))
    return rc

def SDL_floor(a0):
    """double SDL_floor(double)"""
    rc = _LIB.SDL_floor(unbox(a0))
    return rc

def SDL_free(a0):
    """void SDL_free(void *)"""
    rc = _LIB.SDL_free(unbox(a0))
    return rc

def SDL_getenv(a0):
    """char * SDL_getenv(char const *)"""
    rc = _LIB.SDL_getenv(unbox(a0))
    return ffi.string(rc)

def SDL_iconv(a0, a1, a2, a3, a4):
    """size_t SDL_iconv(struct _SDL_iconv_t *, char const * *, size_t *, char * *, size_t *)"""
    rc = _LIB.SDL_iconv(unbox(a0), unbox(a1), unbox(a2), unbox(a3), unbox(a4))
    return rc

def SDL_iconv_close(a0):
    """int SDL_iconv_close(struct _SDL_iconv_t *)"""
    rc = _LIB.SDL_iconv_close(unbox(a0))
    return rc

def SDL_iconv_open(a0, a1):
    """struct _SDL_iconv_t * SDL_iconv_open(char const *, char const *)"""
    rc = _LIB.SDL_iconv_open(unbox(a0), unbox(a1))
    return rc

def SDL_iconv_string(a0, a1, a2, a3):
    """char * SDL_iconv_string(char const *, char const *, char const *, size_t)"""
    rc = _LIB.SDL_iconv_string(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return ffi.string(rc)

def SDL_isdigit(a0):
    """int SDL_isdigit(int)"""
    rc = _LIB.SDL_isdigit(unbox(a0))
    return rc

def SDL_isspace(a0):
    """int SDL_isspace(int)"""
    rc = _LIB.SDL_isspace(unbox(a0))
    return rc

def SDL_itoa(a0, a1, a2):
    """char * SDL_itoa(int, char *, int)"""
    rc = _LIB.SDL_itoa(unbox(a0), unbox(a1), unbox(a2))
    return ffi.string(rc)

def SDL_lltoa(a0, a1, a2):
    """char * SDL_lltoa(int64_t, char *, int)"""
    rc = _LIB.SDL_lltoa(unbox(a0), unbox(a1), unbox(a2))
    return ffi.string(rc)

def SDL_log(a0):
    """double SDL_log(double)"""
    rc = _LIB.SDL_log(unbox(a0))
    return rc

def SDL_ltoa(a0, a1, a2):
    """char * SDL_ltoa(long, char *, int)"""
    rc = _LIB.SDL_ltoa(unbox(a0), unbox(a1), unbox(a2))
    return ffi.string(rc)

def SDL_main(a0, a1):
    """int SDL_main(int, char * *)"""
    rc = _LIB.SDL_main(unbox(a0), unbox(a1))
    return rc

def SDL_malloc(a0):
    """void * SDL_malloc(size_t)"""
    rc = _LIB.SDL_malloc(unbox(a0))
    return rc

def SDL_memcmp(a0, a1, a2):
    """int SDL_memcmp(void const *, void const *, size_t)"""
    rc = _LIB.SDL_memcmp(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_memcpy(a0, a1, a2):
    """void * SDL_memcpy(void *, void const *, size_t)"""
    rc = _LIB.SDL_memcpy(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_memmove(a0, a1, a2):
    """void * SDL_memmove(void *, void const *, size_t)"""
    rc = _LIB.SDL_memmove(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_memset(a0, a1, a2):
    """void * SDL_memset(void *, int, size_t)"""
    rc = _LIB.SDL_memset(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_pow(a0, a1):
    """double SDL_pow(double, double)"""
    rc = _LIB.SDL_pow(unbox(a0), unbox(a1))
    return rc

def SDL_qsort(a0, a1, a2, a3):
    """void SDL_qsort(void *, size_t, size_t, int SDL_qsort(void const *, void const *))"""
    rc = _LIB.SDL_qsort(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_realloc(a0, a1):
    """void * SDL_realloc(void *, size_t)"""
    rc = _LIB.SDL_realloc(unbox(a0), unbox(a1))
    return rc

def SDL_scalbn(a0, a1):
    """double SDL_scalbn(double, int)"""
    rc = _LIB.SDL_scalbn(unbox(a0), unbox(a1))
    return rc

def SDL_setenv(a0, a1, a2):
    """int SDL_setenv(char const *, char const *, int)"""
    rc = _LIB.SDL_setenv(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_sin(a0):
    """double SDL_sin(double)"""
    rc = _LIB.SDL_sin(unbox(a0))
    return rc

def SDL_sinf(a0):
    """float SDL_sinf(float)"""
    rc = _LIB.SDL_sinf(unbox(a0))
    return rc

def SDL_snprintf(a0, a1, a2):
    """int SDL_snprintf(char *, size_t, char const *, ...)"""
    rc = _LIB.SDL_snprintf(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_sqrt(a0):
    """double SDL_sqrt(double)"""
    rc = _LIB.SDL_sqrt(unbox(a0))
    return rc

def SDL_sscanf(a0, a1):
    """int SDL_sscanf(char const *, char const *, ...)"""
    rc = _LIB.SDL_sscanf(unbox(a0), unbox(a1))
    return rc

def SDL_strcasecmp(a0, a1):
    """int SDL_strcasecmp(char const *, char const *)"""
    rc = _LIB.SDL_strcasecmp(unbox(a0), unbox(a1))
    return rc

def SDL_strchr(a0, a1):
    """char * SDL_strchr(char const *, int)"""
    rc = _LIB.SDL_strchr(unbox(a0), unbox(a1))
    return ffi.string(rc)

def SDL_strcmp(a0, a1):
    """int SDL_strcmp(char const *, char const *)"""
    rc = _LIB.SDL_strcmp(unbox(a0), unbox(a1))
    return rc

def SDL_strdup(a0):
    """char * SDL_strdup(char const *)"""
    rc = _LIB.SDL_strdup(unbox(a0))
    return ffi.string(rc)

def SDL_strlcat(a0, a1, a2):
    """size_t SDL_strlcat(char *, char const *, size_t)"""
    rc = _LIB.SDL_strlcat(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strlcpy(a0, a1, a2):
    """size_t SDL_strlcpy(char *, char const *, size_t)"""
    rc = _LIB.SDL_strlcpy(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strlen(a0):
    """size_t SDL_strlen(char const *)"""
    rc = _LIB.SDL_strlen(unbox(a0))
    return rc

def SDL_strlwr(a0):
    """char * SDL_strlwr(char *)"""
    rc = _LIB.SDL_strlwr(unbox(a0))
    return ffi.string(rc)

def SDL_strncasecmp(a0, a1, a2):
    """int SDL_strncasecmp(char const *, char const *, size_t)"""
    rc = _LIB.SDL_strncasecmp(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strncmp(a0, a1, a2):
    """int SDL_strncmp(char const *, char const *, size_t)"""
    rc = _LIB.SDL_strncmp(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strrchr(a0, a1):
    """char * SDL_strrchr(char const *, int)"""
    rc = _LIB.SDL_strrchr(unbox(a0), unbox(a1))
    return ffi.string(rc)

def SDL_strrev(a0):
    """char * SDL_strrev(char *)"""
    rc = _LIB.SDL_strrev(unbox(a0))
    return ffi.string(rc)

def SDL_strstr(a0, a1):
    """char * SDL_strstr(char const *, char const *)"""
    rc = _LIB.SDL_strstr(unbox(a0), unbox(a1))
    return ffi.string(rc)

def SDL_strtod(a0, a1):
    """double SDL_strtod(char const *, char * *)"""
    rc = _LIB.SDL_strtod(unbox(a0), unbox(a1))
    return rc

def SDL_strtol(a0, a1, a2):
    """long SDL_strtol(char const *, char * *, int)"""
    rc = _LIB.SDL_strtol(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strtoll(a0, a1, a2):
    """int64_t SDL_strtoll(char const *, char * *, int)"""
    rc = _LIB.SDL_strtoll(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strtoul(a0, a1, a2):
    """unsigned long SDL_strtoul(char const *, char * *, int)"""
    rc = _LIB.SDL_strtoul(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strtoull(a0, a1, a2):
    """uint64_t SDL_strtoull(char const *, char * *, int)"""
    rc = _LIB.SDL_strtoull(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_strupr(a0):
    """char * SDL_strupr(char *)"""
    rc = _LIB.SDL_strupr(unbox(a0))
    return ffi.string(rc)

def SDL_tolower(a0):
    """int SDL_tolower(int)"""
    rc = _LIB.SDL_tolower(unbox(a0))
    return rc

def SDL_toupper(a0):
    """int SDL_toupper(int)"""
    rc = _LIB.SDL_toupper(unbox(a0))
    return rc

def SDL_uitoa(a0, a1, a2):
    """char * SDL_uitoa(unsigned int, char *, int)"""
    rc = _LIB.SDL_uitoa(unbox(a0), unbox(a1), unbox(a2))
    return ffi.string(rc)

def SDL_ulltoa(a0, a1, a2):
    """char * SDL_ulltoa(uint64_t, char *, int)"""
    rc = _LIB.SDL_ulltoa(unbox(a0), unbox(a1), unbox(a2))
    return ffi.string(rc)

def SDL_ultoa(a0, a1, a2):
    """char * SDL_ultoa(unsigned long, char *, int)"""
    rc = _LIB.SDL_ultoa(unbox(a0), unbox(a1), unbox(a2))
    return ffi.string(rc)

def SDL_utf8strlcpy(a0, a1, a2):
    """size_t SDL_utf8strlcpy(char *, char const *, size_t)"""
    rc = _LIB.SDL_utf8strlcpy(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_vsnprintf(a0, a1, a2, a3):
    """int SDL_vsnprintf(char *, size_t, char const *, int32_t)"""
    rc = _LIB.SDL_vsnprintf(unbox(a0), unbox(a1), unbox(a2), unbox(a3))
    return rc

def SDL_wcslcat(a0, a1, a2):
    """size_t SDL_wcslcat(wchar_t *, wchar_t const *, size_t)"""
    rc = _LIB.SDL_wcslcat(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_wcslcpy(a0, a1, a2):
    """size_t SDL_wcslcpy(wchar_t *, wchar_t const *, size_t)"""
    rc = _LIB.SDL_wcslcpy(unbox(a0), unbox(a1), unbox(a2))
    return rc

def SDL_wcslen(a0):
    """size_t SDL_wcslen(wchar_t const *)"""
    rc = _LIB.SDL_wcslen(unbox(a0))
    return rc

class SDL_AudioCVT(Struct): pass
class SDL_AudioSpec(Struct): pass
class SDL_BlitMap(Struct): pass
class SDL_Color(Struct): pass
class SDL_CommonEvent(Struct): pass
class SDL_ControllerAxisEvent(Struct): pass
class SDL_ControllerButtonEvent(Struct): pass
class SDL_ControllerDeviceEvent(Struct): pass
class SDL_Cursor(Struct): pass
class SDL_DollarGestureEvent(Struct): pass
class SDL_DropEvent(Struct): pass
class SDL_Finger(Struct): pass
class SDL_GameControllerButtonBind(Struct): pass
class SDL_HapticCondition(Struct): pass
class SDL_HapticConstant(Struct): pass
class SDL_HapticCustom(Struct): pass
class SDL_HapticDirection(Struct): pass
class SDL_HapticLeftRight(Struct): pass
class SDL_HapticPeriodic(Struct): pass
class SDL_HapticRamp(Struct): pass
class SDL_JoyAxisEvent(Struct): pass
class SDL_JoyBallEvent(Struct): pass
class SDL_JoyButtonEvent(Struct): pass
class SDL_JoyDeviceEvent(Struct): pass
class SDL_JoyHatEvent(Struct): pass
class SDL_KeyboardEvent(Struct): pass
class SDL_Keysym(Struct): pass
class SDL_MouseButtonEvent(Struct): pass
class SDL_MouseMotionEvent(Struct): pass
class SDL_MouseWheelEvent(Struct): pass
class SDL_MultiGestureEvent(Struct): pass
class SDL_OSEvent(Struct): pass
class SDL_Palette(Struct): pass
class SDL_PixelFormat(Struct): pass
class SDL_QuitEvent(Struct): pass
class SDL_RWops(Struct): pass
class SDL_Rect(Struct): pass
class SDL_Renderer(Struct): pass
class SDL_RendererInfo(Struct): pass
class SDL_Surface(Struct): pass
class SDL_SysWMEvent(Struct): pass
class SDL_SysWMmsg(Struct): pass
class SDL_TextEditingEvent(Struct): pass
class SDL_TextInputEvent(Struct): pass
class SDL_Texture(Struct): pass
class SDL_Thread(Struct): pass
class SDL_TouchFingerEvent(Struct): pass
class SDL_UserEvent(Struct): pass
class SDL_Window(Struct): pass
class SDL_WindowEvent(Struct): pass
class SDL_assert_data(Struct): pass
class SDL_cond(Struct): pass
class SDL_mutex(Struct): pass
class SDL_semaphore(Struct): pass
class SDL_version(Struct): pass
class _FILE(Struct): pass
class _SDL_GameController(Struct): pass
class _SDL_Haptic(Struct): pass
class _SDL_Joystick(Struct): pass
class _SDL_iconv_t(Struct): pass
class SDL_Event(Struct): pass
class SDL_HapticEffect(Struct): pass
