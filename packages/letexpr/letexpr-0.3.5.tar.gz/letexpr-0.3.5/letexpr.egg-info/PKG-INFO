Metadata-Version: 1.1
Name: letexpr
Version: 0.3.5
Summary: imitation of let expression like a Haskell.
Home-page: https://github.com/hachibeeDI/letexpr
Author: OGURA_Daiki
Author-email: 8hachibee125@gmail.com
License: The MIT License (MIT)

Copyright (c) 2014 OGURA Daiki

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
Description: [![Build Status](https://travis-ci.org/hachibeeDI/letexpr.png?branch=master)](https://travis-ci.org/hachibeeDI/letexpr)
        
        # letexpr
        
        That is python module imitate `let expression` like a Haskell.
        
        And support lazy evaluation.
        
        
        # Installation
        
        ```bash
        $ pip install https://github.com/hachibeeDI/letexpr/archive/master.zip
        ```
        
        
        # Example
        
        ```python
        from letexpr import let, expr
        
        # expr(x) = lambda x: lambda: x
        
        answer = (
            let()
                | ('x', expr(10))
                | ('y', expr(20))
                | ('size', lambda x, y: x * y)
                | ('hoge', lambda x, y: 'fooo')
            ).in_(lambda x, y, size:
                'x = {x}, y = {y}, x * y = {size}'.format(x=x, y=y, size=size))
        print answer
        #  => 'x = 10, y = 20, x * y = 200'
        
        
        # with List Comprehensions
        even_or_odd = [
            (let()
                | ('_i', expr(str(i)))
                | ('r', expr('even' if i % 2 == 0 else 'odd'))
            ).in_(lambda _i, r:
                _i + ' is an ' + r  + ' number.')
                    for i in range(1, 5)]
        print even_or_odd
        #  => ['1 is odd number.', '2 is even number.', '3 is odd number.', '4 is even number.']
        
        
        # with anonymous function
        let_ = (let()
            | ('x', expr('x'))
            | ('y', expr('y'))
        )
        @let_.in_()
        def _(x, y):
            return x + y
        print let_.end
        #  => 'xy'
        
        ```
        
        # Testing
        
        
        ```bash
        $ pip install nose
        $ nosetests --with-doctest
        ```
Keywords: let,expression
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development
