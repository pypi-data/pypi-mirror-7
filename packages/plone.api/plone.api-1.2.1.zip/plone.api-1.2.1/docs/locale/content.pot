# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Plone Foundation
# This file is distributed under the same license as the plone.api package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: plone.api 0.1a1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-08-25 18:42\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../content.rst:13
# 9c3684417518454c99fe7761c79fc790
msgid "Content"
msgstr ""

#: ../content.rst:18
# 17d54484019a44ffb67d0c59d2ffff80
msgid "Create content"
msgstr ""

#: ../content.rst:20
# 7db4ecc7a40c4fe89ea6478e5dc392aa
msgid "First get the portal object that we will use as a container for new content:"
msgstr ""

#: ../content.rst:27
# 45b4fca9ff4f420191062a1d9ce1a9ca
msgid "If you want to create a new content item, use the :meth:`api.content.create` method. The type attribute will automatically decide which content type (dexterity, archetype, ...) should be created."
msgstr ""

#: ../content.rst:39
# 028654d6a1694823bd16748df9cf07ed
msgid "The ``id`` of the object gets generated (in a safe way) from its ``title``."
msgstr ""

#: ../content.rst:49
# f569b47bdbd947c1b88758c46b5624cb
msgid "Get content object"
msgstr ""

#: ../content.rst:51
# 849f7198c8ad4839b17c6e9eff648a4c
msgid "There are several approaches of getting to your content object. Consider the following portal structure::"
msgstr ""

#: ../content.rst:79
# 6c2b2d93a72c46a399f46ca1767b67d2
msgid "You can do the following operations to get to various content objects in the stucture above, including using :meth:`api.content.get`."
msgstr ""

#: ../content.rst:116
# a5230131c1f24fc8a85489ed110bc0ef
msgid "Find content object"
msgstr ""

#: ../content.rst:118
# f3ab49e7ac084684b3f2f69c4df30a54
msgid "You can use the *catalog* to search for content. Here is a simple example:"
msgstr ""

#: ../content.rst:130
# be8e110355ef4e7a8d8145d1644f114c
msgid "More about how to use the catalog and what parameters it supports is written in the `Collective Developer Documentation <http://collective-docs.readthedocs.org/en/latest/searching_and_indexing/query.html>`_. Note that the catalog returns *brains* (metadata stored in indexes) and not objects. However, calling ``getObject()`` on brains does in fact give you the object."
msgstr ""

#: ../content.rst:146
# 93cafdef770b45f1bbf8b93b655045c6
msgid "Move content"
msgstr ""

#: ../content.rst:148
# a645dc6c09f34bd783c6a3953b281021
msgid "To move content around the portal structure defined above use :meth:`api.content.move` The code below moves the ``contact`` item (with all objects that it contains) out of folder ``about`` into the Plone portal root."
msgstr ""

#: ../content.rst:165
# 1c18a2aefe7d498db1abd9f2ae8b284e
msgid "Actually, ``move`` behaves like a filesystem move. If you pass it an ``id`` argument, you can define to what target ID the object will be moved to. Otherwise it will be moved with the same ID that it had."
msgstr ""

#: ../content.rst:173
# f7fa7b1fe56c4ba099f0dee9a1fd614c
msgid "Rename content"
msgstr ""

#: ../content.rst:175
# 88d79f67e17644049a75ad123e6619de
msgid "To rename, you still use the :meth:`api.content.move` method, just pass in a new ``id`` instead and omit ``target``."
msgstr ""

#: ../content.rst:193
# 30798118c7504fbeaabc1a018a7bd1e8
msgid "Copy content"
msgstr ""

#: ../content.rst:195
# 981e07cb9573490bb085df463711f83b
msgid "To copy a content object, use the :meth:`api.content.copy`."
msgstr ""

#: ../content.rst:205
# a7b23db3ddd64c51834072c1bcafd68b
msgid "Note that the new object will have the same id as the old object (if not stated otherwise). This is not a problem, since the new object is in a different container."
msgstr ""

#: ../content.rst:215
# 5b5b763d8b5e477e9c0da93c4e28f0a1
msgid "You can also omit ``target`` and set ``strict=False`` which will duplicate your content object in the same container and assign it a non-conflicting id."
msgstr ""

#: ../content.rst:232
# 0220c029b9bc4a5995409b30edb97244
msgid "Delete content"
msgstr ""

#: ../content.rst:234
# 96d6ffdde3b94dd18624adc9e607b2c9
msgid "Deleting content works by passing the object you want to delete to the :meth:`api.content.delete` method:"
msgstr ""

#: ../content.rst:251
# 1b5bf975185b48659523eb9ad6f0eb3e
msgid "Content manipulation with strict option"
msgstr ""

#: ../content.rst:253
# e486a81e09f84444ace8317e63b44a80
msgid "When manipulating content with :meth:`api.content.create`, :meth:`api.content.move` and :meth:`api.content.copy` the strict option is enabled by default. This means the id will be enforced, if the id is taken on the target container the API method will raise an error."
msgstr ""

#: ../content.rst:263
# 494dac7d405e468b85865f2983effaa0
msgid "If the strict option is disabled a non-conflicting id will be created."
msgstr ""

#: ../content.rst:273
# 0a50333f296d4d4e8333f83b68f1cf9a
msgid "Get workflow state"
msgstr ""

#: ../content.rst:275
# 64d2dce70fda41758826aa70cd389fc2
msgid "To find out in which workflow state your content is, use :meth:`api.content.get_state`."
msgstr ""

#: ../content.rst:292
# 198f3848fbed4f2bb0926f875da7f11f
msgid "Transition"
msgstr ""

#: ../content.rst:294
# 6fb6023eee7444d49408b42b2eef6664
msgid "To transition your content into a new state, use :meth:`api.content.transition`."
msgstr ""

#: ../content.rst:313
# b091a7a16bfe4d68a826d1a38bf914d2
msgid "Browser view"
msgstr ""

#: ../content.rst:315
# 2f11f40a7ab64e339db3a193e0eed079
msgid "To get a BrowserView for your content, use :meth:`api.content.get_view`."
msgstr ""

#: ../content.rst:333
# e5680d75d7354752a9d5644b9794207f
msgid "Further reading"
msgstr ""

#: ../content.rst:335
# 61cadf5dfc7340c4a51a242d904a6b76
msgid "For more information on possible flags and usage options please see the full :ref:`plone-api-content` specification."
msgstr ""

