"""
<Author>
  advertise_object.r2py:
    Eric Kimbrel kimbrl@cs.washington.edu
    Monzur Muhammad
  This library:
    albert.rafetseder@univie.ac.at

<Start Date>
  2014-03-25

<Purpose>
  Stores a list of (key, value) tuples and uses a single thread to 
  advertise each tuple in the list on our advertise servers. This 
  prevents a program from using multiple threads to repeatedly 
  advertise values.

  Usage:
  Call add(key, value) to add an item to the list of tuples to be 
  advertised. This call returns an advertise handle which can be 
  used to remove the advertised item from the advertise list via 
  the remove(advertise_handle) function.

"""


advertise = dy_import_module('advertise.r2py')
uniqueid = dy_import_module('uniqueid.r2py')

# Store info to be advertised. This dict is organized as 
# { key1: {
#     value1: list_of_handles_advertising_this,
#     value2: list_of_handles_advertising_that
#     },
#   key2: {
#     ...
#   }
# }
#
# This layout makes adding/removing items a little more difficult, 
# but saves lots of redundant advertising on the advertise services.
advertise_dict = {}

# Should the advertise thread be running?
advertise_thread_state = {'run': False} 
advertise_thread_state_lock = createlock()

# Time to live we set on items we announce
TTL = 240

# Re-advertise items after this many seconds
REDO_INTERVAL = 120

# Pause between checks for (re-)advertising items
CHECK_INTERVAL = 1

# Count the number of active advertisepipe threads. 
# There should be at most 1.
mycontext['advertisepipe_thread_count'] = 0


# Adding items to this list (via add_to_pipe) triggers the advertise 
# thread to announce these new items within one second.
mycontext['advertisepipe_recently_added_items_list'] = []


# Store errors that occur in the advertise_thread as tuples of 
# (getruntime(), repr(e)) where e is the exception you caught
mycontext['advertisepipe_last_error'] = None

# Pause for this long if the advertise_thread encounters errors
ERROR_RETRY_INTERVAL = 5



def advertise_thread():
  """
  The core advertise function. If the REDO_INTERVAL has passed, 
  advertise everything that's in the advertise_dict.
  If new items to be advertise were added recently, advertise those.
  Any errors that are raised here are caught in the wrapper function 
  error_safe_advertise_thread().
  """
  # If no other advertise_thread is running, start (and count in!) myself.
  assert mycontext['advertisepipe_thread_count'] <= 0, \
      str(mycontext['advertisepipe_thread_count']) + \
      " advertise_threads are already running."

  advertise_thread_state_lock.acquire(True)
  mycontext['advertisepipe_thread_count'] = 1
  advertise_thread_state_lock.release()
  # Preinitialize the start time
  start = getruntime()

  while advertise_thread_state['run']:
    # Shall we re-advertise what we have?
    redo_interval_past = getruntime() - start > REDO_INTERVAL

    if redo_interval_past:
      # We need to advertise everything (new additions and existing 
      # items), no need to special-case the new additions here!
      mycontext['advertisepipe_recently_added_items_list'] = []

      # Make sure the advertise_dict doesn't change while we loop through it
      advertise_thread_state_lock.acquire(True)

      # Remember when we started the current advertisement pass
      start = getruntime()

      # Advertise each key-value pair in the dict
      # XXX This can pretty much monopolize the vessel's link!
      for key, value_dict in advertise_dict.items():
        for value in value_dict.keys():
          advertise.advertise_announce(key, value, TTL)

      advertise_thread_state_lock.release()


    # Advertise any new additions to the advertise pipe
    for key, value in mycontext['advertisepipe_recently_added_items_list']:
      advertise.advertise_announce(key, value, TTL)
    else:
      # Finally, empty the new additions list
      mycontext['advertisepipe_recently_added_items_list'] = []


    # Now wait until either the REDO_INTERVAL expires, we are told to 
    # stop running, or a new item awaits advertisement.
    while getruntime() - start < REDO_INTERVAL and \
      advertise_thread_state['run'] and \
      len(mycontext['advertisepipe_recently_added_items_list']) == 0:
      sleep(CHECK_INTERVAL)
     
  # When we are about to exit, lower the thread count.
  advertise_thread_state_lock.acquire(True)
  mycontext['advertisepipe_thread_count'] -= 1
  advertise_thread_state_lock.release()



def error_safe_advertise_thread():
  """
  Wrapper function to catch errors that might occur in advertise_thread, 
  and retry by starting a new thread.
  No exception is considered fatal. Every exception is logged in the 
  global variable mycontext['advertisethread_last_error'].
  """
  while True:
    try:
      advertise_thread()
    except Exception, e:
      # The current thread has died. Discount it, log the error, retry.
      mycontext['advertisepipe_thread_count'] -= 1
      mycontext['advertisepipe_last_error'] = (getruntime(), repr(e))
      sleep(ERROR_RETRY_INTERVAL)
    else:
      # The thread has returned, indicating that it has detected it 
      # should stop. It has done the accounting already.
      break



def add_to_pipe(key, value):
  """
  <Purpose>
    Add the key-value pair to the advertise pipe

  <Arguments>
    key, value:
      The item to advertise. value will be advertised under key.

  <Returns>
    A handle that can be used to remove the key-value pair

  <Excpetions>
    None
  """ 
  # create a unique handle
  handle = uniqueid.uniqueid_getid()

  if key not in advertise_dict:
    # The key is new to us
    advertise_dict[key] = {}

  if value not in advertise_dict[key]:
    # We know the key (or have just generated it), but the value is new
    advertise_dict[key][value] = []

  if handle not in advertise_dict[key][value]:
    # We know (or have generated) key and value, now add our handle
    advertise_dict[key][value].append(handle)

  # Signal to the advertise thread that we want to get advertised now, 
  # and start a thread to do so.
  mycontext['advertisepipe_recently_added_items_list'].append((key, value))
  start_error_safe_advertise_thread()
    
  # return the handle
  return handle
    

def remove_from_pipe(handle):
  """
  <Purpose>
    Removes the key-value pair corresponding to the handle from
    the advertise pipe. Also clean up otherwise empty keys/values.
    Note that other handles might be still advertising the same key 
    and the same (or another) value.

  <Arguments>
    A handle returned from add_to_pipe

  <Returns>
    None

  <Excpetions>
    None.
  """
  # Make sure the advertise_dict doesn't change while we loop through it
  advertise_thread_state_lock.acquire(True)

  # Go through the advertise dict and remove handle whereever it appears
  for key, value_dict in advertise_dict.items():
    for value, handle_list in value_dict.items():
      if handle in handle_list:
        handle_list.remove(handle)

      # Additionally, remove values without handles ...
      if handle_list == []:
        del advertise_dict[key][value]

    # ... and keys without values
    if advertise_dict[key] == {}:
      del advertise_dict[key]

  # If there is nothing left to advertise, stop the advertise thread.
  if len(advertise_dict) == 0:
    advertise_thread_state['run'] = False

  advertise_thread_state_lock.release()
    


def start_error_safe_advertise_thread():
  advertise_thread_state_lock.acquire(True)

  if not advertise_thread_state['run']:
    advertise_thread_state['run'] = True
      
  createthread(error_safe_advertise_thread)

  advertise_thread_state_lock.release()


