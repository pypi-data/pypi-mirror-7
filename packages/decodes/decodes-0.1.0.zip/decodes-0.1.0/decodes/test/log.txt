

== TEST_VOXEL ==
test_bounds_and_cpt (decodes.unit_tests.test_voxel.Tests) ... FAIL
test_constructor (decodes.unit_tests.test_voxel.Tests) ... ok

======================================================================
FAIL: test_bounds_and_cpt (decodes.unit_tests.test_voxel.Tests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "G:\git\decodes\decodes\unit_tests\test_voxel.py", line 26, in test_bounds_and_cpt
    self.assertEqual(vf.dim_pixel,Vec(3,3,2))
AssertionError: vec[1.0,1.0,1.0] != vec[3,3,2]

----------------------------------------------------------------------
Ran 2 tests in 0.005s

FAILED (failures=1)


== TEST_XSECT ==
test_bad_combonations (decodes.unit_tests.test_xsect.Tests) ... ok
test_circ_circ (decodes.unit_tests.test_xsect.Tests) ... ok
test_line_line (decodes.unit_tests.test_xsect.Tests) ... ok
test_line_plane (decodes.unit_tests.test_xsect.Tests) ... ok
test_plane_plane (decodes.unit_tests.test_xsect.Tests) ... FAIL
test_ray_pgon (decodes.unit_tests.test_xsect.Tests) ... ok
test_ray_plane (decodes.unit_tests.test_xsect.Tests) ... ok
test_seg_plane (decodes.unit_tests.test_xsect.Tests) ... ok

======================================================================
FAIL: test_plane_plane (decodes.unit_tests.test_xsect.Tests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "G:\git\decodes\decodes\unit_tests\test_xsect.py", line 136, in test_plane_plane
    self.assertEqual(xsec[0].vec.is_parallel(ln.vec),True) # lines are parallel
AssertionError: False != True

----------------------------------------------------------------------
Ran 8 tests in 0.184s

FAILED (failures=1)


== TEST_CLASSICAL_SURFACE ==
test_rotational (decodes.unit_tests.test_classical_surface.Tests) ... ERROR

======================================================================
ERROR: test_rotational (decodes.unit_tests.test_classical_surface.Tests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "G:\git\decodes\decodes\unit_tests\test_classical_surface.py", line 19, in test_rotational
    iso = rot_surf.isocurve(u_val=0.25)
  File "G:\git\decodes\decodes\extensions\classical_surfaces.py", line 87, in isocurve
    pt_1 = self.axis.to_line().near_pt(pt_0)
AttributeError: 'Curve' object has no attribute 'to_line'

----------------------------------------------------------------------
Ran 1 test in 0.026s

FAILED (errors=1)


== TEST_PGON ==
test_bounds (decodes.unit_tests.test_pgon.Tests) ... ok
test_containment (decodes.unit_tests.test_pgon.Tests) ... ok
test_empty_constructor (decodes.unit_tests.test_pgon.Tests) ... ERROR
test_inflation (decodes.unit_tests.test_pgon.Tests) ... ok
test_rgon_construction (decodes.unit_tests.test_pgon.Tests) ... ok
test_rgon_to_pgon (decodes.unit_tests.test_pgon.Tests) ... ok
test_segs_and_edges (decodes.unit_tests.test_pgon.Tests) ... ok

======================================================================
ERROR: test_empty_constructor (decodes.unit_tests.test_pgon.Tests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "G:\git\decodes\decodes\unit_tests\test_pgon.py", line 9, in test_empty_constructor
    pgon = PGon()
  File "G:\git\decodes\decodes\core\dc_pgon.py", line 26, in __init__
    if basis is None and vertices is None : raise GeometricError("You must define both a basis and a list of vertices to construct a PGon")
GeometricError: You must define both a basis and a list of vertices to construct a PGon

----------------------------------------------------------------------
Ran 7 tests in 0.181s

FAILED (errors=1)


== TEST_PLINE ==
test_empty_constructor (decodes.unit_tests.test_pline.Tests) ... ok
test_segs_and_edges (decodes.unit_tests.test_pline.Tests) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.079s

OK


== TEST_MESH ==
test_empty_constructor (decodes.unit_tests.test_mesh.Tests) ... ok
test_explode (decodes.unit_tests.test_mesh.Tests) ... ok
test_face_access (decodes.unit_tests.test_mesh.Tests) ... ok
test_simple_constructor (decodes.unit_tests.test_mesh.Tests) ... ok

----------------------------------------------------------------------
Ran 4 tests in 0.029s

OK


== TEST_POINT ==
test_based_constructor (decodes.unit_tests.test_point.Tests) ... ok
test_cull_dups (decodes.unit_tests.test_point.Tests) ... ok
test_cull_dups2 (decodes.unit_tests.test_point.Tests) ... ok
test_empty_constructor (decodes.unit_tests.test_point.Tests) ... ok
test_nearest_point (decodes.unit_tests.test_point.Tests) ... ok

----------------------------------------------------------------------
Ran 5 tests in 0.030s

OK


== TEST_HAS_PTS ==
test_appending_points (decodes.unit_tests.test_has_pts.Tests) ... ok
test_basis_applied_and_stripped (decodes.unit_tests.test_has_pts.Tests) ... ok
test_centroid (decodes.unit_tests.test_has_pts.Tests) ... ok
test_item_access (decodes.unit_tests.test_has_pts.Tests) ... ok
test_manipulating_points (decodes.unit_tests.test_has_pts.Tests) ... ok
test_swap_basis (decodes.unit_tests.test_has_pts.Tests) ... ok
test_unsetting (decodes.unit_tests.test_has_pts.Tests) ... ok

----------------------------------------------------------------------
Ran 7 tests in 0.152s

OK


== TEST_CURVE ==
test_bezier (decodes.unit_tests.test_curve.Tests) ... ok
test_constructor (decodes.unit_tests.test_curve.Tests) ... ok
test_division (decodes.unit_tests.test_curve.Tests) ... ok
test_far (decodes.unit_tests.test_curve.Tests) ... ok
test_hermite (decodes.unit_tests.test_curve.Tests) ... ok
test_near (decodes.unit_tests.test_curve.Tests) ... ok
test_subdivide (decodes.unit_tests.test_curve.Tests) ... ok
test_tolerance (decodes.unit_tests.test_curve.Tests) ... ok

----------------------------------------------------------------------
Ran 8 tests in 0.885s

OK


== TEST_SURFACE ==
test_curvature (decodes.unit_tests.test_surface.Tests) ... ok
test_iso_curvature (decodes.unit_tests.test_surface.Tests) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.346s

OK


== TEST_PLANE ==
test_copy_constructors (decodes.unit_tests.test_plane.Tests) ... ok
test_dist_from_origin (decodes.unit_tests.test_plane.Tests) ... ok
test_empty_constructor (decodes.unit_tests.test_plane.Tests) ... ok
test_near (decodes.unit_tests.test_plane.Tests) ... ok
test_xform (decodes.unit_tests.test_plane.Tests) ... ok

----------------------------------------------------------------------
Ran 5 tests in 0.016s

OK


== TEST_INTERVAL ==
test_empty_constructor (decodes.unit_tests.test_interval.Tests) ... ok
test_operations (decodes.unit_tests.test_interval.Tests) ... ok
test_properties (decodes.unit_tests.test_interval.Tests) ... ok

----------------------------------------------------------------------
Ran 3 tests in 0.003s

OK


== TEST_LINE ==
test_line (decodes.unit_tests.test_line.Tests) ... ok
test_near_pt (decodes.unit_tests.test_line.Tests) ... ok
test_ray (decodes.unit_tests.test_line.Tests) ... ok
test_segment (decodes.unit_tests.test_line.Tests) ... ok

----------------------------------------------------------------------
Ran 4 tests in 0.016s

OK


== TEST_VEC ==
test_angle (decodes.unit_tests.test_vec.Tests) ... ok
test_dot_and_cross_products (decodes.unit_tests.test_vec.Tests) ... ok
test_empty_constructor (decodes.unit_tests.test_vec.Tests) ... ok
test_normalizing (decodes.unit_tests.test_vec.Tests) ... ok
test_operators (decodes.unit_tests.test_vec.Tests) ... ok
test_properties (decodes.unit_tests.test_vec.Tests) ... ok
test_static (decodes.unit_tests.test_vec.Tests) ... ok

----------------------------------------------------------------------
Ran 7 tests in 0.012s

OK


== TEST_XFORM ==
test_mirror (decodes.unit_tests.test_xform.Tests) ... ok
test_scale (decodes.unit_tests.test_xform.Tests) ... ok
test_translation (decodes.unit_tests.test_xform.Tests) ... ok
test_xform_hasbasis (decodes.unit_tests.test_xform.Tests) ... ok

----------------------------------------------------------------------
Ran 4 tests in 0.017s

OK
