Metadata-Version: 1.1
Name: poliastro
Version: 0.2.0
Summary: poliastro - Utilities and Python wrappers for Orbital Mechanics
Home-page: http://pybonacci.github.io/poliastro/
Author: Juan Luis Cano
Author-email: juanlu001@gmail.com
License: BSD
Download-URL: https://github.com/Pybonacci/poliastro
Description: =========
        poliastro
        =========
        
        Overview
        ========
        
        :Name: poliastro
        :Website: https://pybonacci.github.io/poliastro
        :Author: Juan Luis Cano <juanlu001@gmail.com>
        :Version: 0.2.0
        
        .. image:: https://travis-ci.org/Pybonacci/poliastro.svg?branch=master
           :target: https://travis-ci.org/Pybonacci/poliastro
        
        .. image:: https://coveralls.io/repos/Pybonacci/poliastro/badge.png
           :target: https://coveralls.io/r/Pybonacci/poliastro
        
        These are some Python wrappers to Fortran subroutines useful in
        Orbital Mechanics, such as orbit propagation, solution of the Lambert's
        problem, conversion between position and velocity vectors and classical
        orbital elements and orbit plotting.
        
        .. code-block:: python
        
            from poliastro.examples import molniya
            from poliastro.plotting import plot
            
            plot(molniya)
        
        .. image:: https://github.com/Pybonacci/poliastro/raw/master/examples/molniya.png
           :align: center
        
        Fortran subroutines
        -------------------
        
        The core of poliastro is possible thanks to several Fortran subroutines,
        written by David A. Vallado for his book "Fundamentals of Astrodynamics and
        Applications" and available on the Internet as the `companion software of
        the book`__.
        
        .. __: http://celestrak.com/software/vallado-sw.asp
        
        The author explicitly gave permission to redistribute these subroutines
        in this project under the current license.
        
        Some of them were slightly modified due to errors in the build process,
        the handling of relative errors in comparisons and to make them more
        suitable to use with different gravitational parameters.
        
        Requirements
        ============
        
        poliastro requires NumPy, Astropy and matplotlib and is usually tested on Linux
        on Python 2.7 and Python 3.3 (single codebase).
        
        Besides, a Fortran compiler is needed to build the extensions. poliastro
        is usually built with gfortran.
        
        There is no reason it shouldn't work under Windows or Mac OS X with
        properly configured tools (not tested).
        
        Installation
        ============
        
        To install poliastro just use pip::
        
          $ pip install poliastro
        
        To install poliastro from source, just type::
        
          $ python setup.py install
        
        It is recommended that you **never ever use sudo** with distutils, pip,
        setuptools and friends in Linux because you might seriously break your
        system [1_][2_][3_][4_]. Options are `per user directories`_, `virtualenv`_
        or `local installations`_.
        
        .. _1: http://wiki.python.org/moin/CheeseShopTutorial#Distutils_Installation
        .. _2: http://stackoverflow.com/questions/4314376/how-can-i-install-a-python-egg-file/4314446#comment4690673_4314446
        .. _3: http://workaround.org/easy-install-debian
        .. _4: http://matplotlib.1069221.n5.nabble.com/Why-is-pip-not-mentioned-in-the-Installation-Documentation-tp39779p39812.html
        
        .. _`per user directories`: http://stackoverflow.com/a/7143496/554319
        .. _`virtualenv`: http://pypi.python.org/pypi/virtualenv
        .. _`local installations`: http://stackoverflow.com/a/4325047/554319
        
        Testing
        =======
        
        If installed correctly, the tests can be run using py.test::
        
          $ python -c "import poliastro; poliastro.test()"
          Running unit tests for poliastro
          [...]
          OK
          $ 
        
        Contributing
        ============
        
        Code writing
        ------------
        
        Code contributions are welcome! Just send a pull request and we'll discuss it.
        In the `wiki`_ you can find some documents explaining the overall design of
        poliastro, and in the `issue tracker`_ you may find pending tasks waiting for
        someone to complete them.
        
        .. _`wiki`: https://github.com/Pybonacci/poliastro/wiki
        
        Bug reporting
        -------------
        
        I am one of those that writes bug-free code every single time, but if you
        think you've found one please refer to the `issue tracker`_ on GitHub.
        
        .. _`issue tracker`: https://github.com/Pybonacci/poliastro/issues
        
        Citing
        ======
        
        If you use poliastro on your project, please
        `drop me a line <mailto:juanlu001@gmail.com>`_.
        
        License
        =======
        
        poliastro is released under a 2-clause BSD license, hence allowing commercial
        use of the library. Please refer to the COPYING file. This includes the
        modified Fortran subroutines.
        
        FAQ
        ===
        
        Does it work on Windows?
        ------------------------
        
        I had some problems to find a free Fortran compiler for Windows 64-bit
        (but I am `not alone`__).
        
        .. __: http://spyder-ide.blogspot.it/2012/08/scientific-python-distribution-for.html
        
        Have you considered `choosing another operative system`__?
        
        .. __: http://www.ubuntu.com/
        
        What's up with the name?
        ------------------------
        
        poliastro comes from Polimi, which is the shortened name of the Politecnico di
        Milano, the Italian university where I was studying while writing this
        software. It's my tiny tribute to a place I came to love. *Grazie mille!*
        
Keywords: aero,aerospace,engineering,astrodynamics,orbits,kepler,orbital mechanics
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Astronomy
Requires: numpy
Requires: astropy
Requires: pytest
