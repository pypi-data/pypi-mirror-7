#!/usr/bin/python
# Copyright (c) 2010 Adam Tauno Williams <awilliam@whitemice.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# TODO: Implement

from coils.core  import *
import getopt, sys, os

def usage():
    print """
    --help       Display this helpful messages
    --objectid=  Specify the objectId of the Contact's vCard to be displayed.
    --useragent= Specify a User Agent string
    --no-cache   Disable use of iCalendar cache
    """
    return

def main(argv):

    # Process command line arguements
    if (len(argv) == 0):
        usage()
        sys.exit(2)
    try:
        opts, args = getopt.getopt(argv,
                                   "hi:u:n",
                                  ["help", "objectid=", "useragent=", "no-cache"])

    except getopt.GetoptError, e:
        print e
        usage()
        sys.exit(2)

    useragent=None
    use_cache=True
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif (opt in ('-i', '--objectid')):
            object_id = int(arg)
        elif (opt in ('-u', '--useragent')):
            useragent = arg
        elif (opt in ('-n', '--no-cache')):
            use_cache = False

    # Initialize COILs
    initialize_COILS({'log_file': '{0}/coils.log'.format(os.getenv('HOME'))})

    ctx = AdministrativeContext ( { 'connection': { 'user_agent': useragent } } )
    kind = ctx.type_manager.get_type(object_id)
    if kind == 'Contact':
        entity = ctx.run_command("contact::get", id=object_id)
    elif kind == 'Team':
        entity = ctx.run_command("team::get", id=object_id)
    else:
        print '{0} entities cannot be rendered as vCards.'.format(kind)
        sys.exit(2)
    result = ctx.run_command('object::get-as-ics', object=entity, use_cache=use_cache)

    if (result is None):
        print '{0} entity with objectId#{1} count not be retrieved.'.format(kind, object_id)
        sys.exit(1)

    print result

    sys.exit(0)


if __name__ == "__main__":
    main(sys.argv[1:])
