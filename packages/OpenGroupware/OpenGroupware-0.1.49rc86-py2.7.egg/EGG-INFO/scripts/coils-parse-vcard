#!/usr/bin/python
# Copyright (c) 2010, 2012
#  Adam Tauno Williams <awilliam@whitemice.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# TODO: Implement

from coils.core  import *
from coils.core.vcard import Parser as VCard_Parser
import getopt, sys, os, pprint

def usage():
    print """
    --file=     The file to read the vCard from
    --update    Update the corresponding Contact
    --create    Create a contact from the vCard
    --commit    Enable Commit, for persisting changes.
    --help      Display this helpful message
    """
    return

def main(argv):

    # Process command line arguements
    if (len(argv) == 0):
        usage()
        sys.exit(2)
    try:
        opts, args = getopt.getopt(argv,
                                   "hfucs",
                                  ["help", 'update', 'file=', 'create', 'commit' ] )
    except getopt.GetoptError, e:
        print e
        usage()
        sys.exit(2)
    operations = [ ]
    commit_enabled = False
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif (opt in ('-f', '--file')):
            filename = arg
        elif (opt in ('-u', '--update')):
            operations.append( 'update' )
        elif (opt in ('-c', '--create')):
            operations.append( 'create' )
        elif (opt in ('-s', '--commit')):
            commit_enabled = True

    # Initialize COILs
    initialize_COILS({'log_file': '{0}/coils.log'.format(os.getenv('HOME'))})
    context = AdministrativeContext()
    try:
        handle = open(filename, 'rb')
        payload = handle.read()
        handle.close()
    except Exception, e:
        print 'Unable to read the specified file.'
        print e
        sys.exit(1)
    values = None
    try:
        cards = VCard_Parser.ParseAll(payload, context)
    except Exception, e:
        print 'Unable to parse vCard.'
        print e
	sys.exit(1)

    if operations:
        updates = 0
        creates = 0
        discard = 0
        commit_required = False
        for card in cards:
            print('----BEGIN----')
            print( card )
            if 'update' in operations and 'objectId' in card:
                contact = context.run_command('contact::get', id=card['objectId'])
                if contact:
                    context.run_command('contact::set', object=contact, values=card)
                else:
                    raise CoilsException( 'ObjectId#{0} could not be marshalled.'.format( card['objectId'] ) )
                print( 'Updated objectId#{0} [Contact]'.format( contact.object_id ) )
                updates += 1
                commit_required = True
            elif 'create' in operations and 'objectId' not in card:
                contact = context.run_command('contact::new', values=card)
                print( 'Created objectId#{0} [Contact]'.format( contact.object_id ) )
                creates +=1
                commit_required = True
            else:
                print 'Not objectId present in input data, cannot perform update'
                discard += 1
        print( 'Updates: {0}  Created: {1}  Discarded: {2}'.format( updates, creates, discard ) )
        if commit_required and commit_enabled:                
            context.commit()
            print( 'Commit' )
            #card = context.run_command("object::get-as-ics", object=contact)
    else:
        pprint.pprint(cards)
    sys.exit( 0 )

if __name__ == "__main__":
    main(sys.argv[1:])
