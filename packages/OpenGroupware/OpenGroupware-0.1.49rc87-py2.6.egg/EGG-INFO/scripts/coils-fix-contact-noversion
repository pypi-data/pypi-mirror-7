#!/usr/bin/python2.6
#
# Copyright (c) 2011 Adam Tauno Williams <awilliam@whitemice.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
from coils.core  import *
import getopt, sys, os

def usage():
    print """
    --help      Display this helpful messages
    --execute   Execute the fix.
    --commit    Commit changes.
    """
    return

def main(argv):


    # Process command line arguements
    if (len(argv) == 0):
        usage()
        sys.exit(2)
    try:
        opts, args = getopt.getopt(argv,
                                   "hec",
                                  ["help", "execute", "commit"])
    except getopt.GetoptError, e:
        print(e)
        usage()
        sys.exit(2)

    enable_fix = False
    commit_changes = False
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif opt in ("-e", "--execute"):
            enable_fix = True
        elif opt in ("-c", "--commit"):
            commit_changes = True

    if not enable_fix:
        print('Execution of fix not requested, see the --execute option.')
        sys.exit(0)

    # Initialize COILs
    initialize_COILS({'log_file': '{0}/coils.log'.format(os.getenv('HOME'))})

    ctx = AdministrativeContext()
    db = ctx.db_session()
    counter = 0
    query = db.query(Contact).filter(Contact.version == None)

    for contact in query.all():
        contact.version = 1
        counter += 1

    print('Initialized object version value on {0} contacts.'.format(counter))

    if commit_changes:
        ctx.commit()

    ctx.close()

if __name__ == "__main__":
    main(sys.argv[1:])
