# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pymxml', [dirname(__file__)])
        except ImportError:
            import _pymxml
            return _pymxml
        if fp is not None:
            try:
                _mod = imp.load_module('_pymxml', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pymxml = swig_import_helper()
    del swig_import_helper
else:
    import _pymxml
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MXML_MAJOR_VERSION = _pymxml.MXML_MAJOR_VERSION
MXML_MINOR_VERSION = _pymxml.MXML_MINOR_VERSION
MXML_TAB = _pymxml.MXML_TAB
MXML_NO_CALLBACK = _pymxml.MXML_NO_CALLBACK
MXML_TEXT_CALLBACK = _pymxml.MXML_TEXT_CALLBACK
MXML_NO_PARENT = _pymxml.MXML_NO_PARENT
MXML_DESCEND = _pymxml.MXML_DESCEND
MXML_NO_DESCEND = _pymxml.MXML_NO_DESCEND
MXML_DESCEND_FIRST = _pymxml.MXML_DESCEND_FIRST
MXML_WS_BEFORE_OPEN = _pymxml.MXML_WS_BEFORE_OPEN
MXML_WS_AFTER_OPEN = _pymxml.MXML_WS_AFTER_OPEN
MXML_WS_BEFORE_CLOSE = _pymxml.MXML_WS_BEFORE_CLOSE
MXML_WS_AFTER_CLOSE = _pymxml.MXML_WS_AFTER_CLOSE
MXML_ADD_BEFORE = _pymxml.MXML_ADD_BEFORE
MXML_ADD_AFTER = _pymxml.MXML_ADD_AFTER
MXML_SAX_CDATA = _pymxml.MXML_SAX_CDATA
MXML_SAX_COMMENT = _pymxml.MXML_SAX_COMMENT
MXML_SAX_DATA = _pymxml.MXML_SAX_DATA
MXML_SAX_DIRECTIVE = _pymxml.MXML_SAX_DIRECTIVE
MXML_SAX_ELEMENT_CLOSE = _pymxml.MXML_SAX_ELEMENT_CLOSE
MXML_SAX_ELEMENT_OPEN = _pymxml.MXML_SAX_ELEMENT_OPEN
MXML_IGNORE = _pymxml.MXML_IGNORE
MXML_ELEMENT = _pymxml.MXML_ELEMENT
MXML_INTEGER = _pymxml.MXML_INTEGER
MXML_OPAQUE = _pymxml.MXML_OPAQUE
MXML_REAL = _pymxml.MXML_REAL
MXML_TEXT = _pymxml.MXML_TEXT
MXML_CUSTOM = _pymxml.MXML_CUSTOM
class mxml_attr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mxml_attr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mxml_attr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pymxml.mxml_attr_t_name_set
    __swig_getmethods__["name"] = _pymxml.mxml_attr_t_name_get
    if _newclass:name = _swig_property(_pymxml.mxml_attr_t_name_get, _pymxml.mxml_attr_t_name_set)
    __swig_setmethods__["value"] = _pymxml.mxml_attr_t_value_set
    __swig_getmethods__["value"] = _pymxml.mxml_attr_t_value_get
    if _newclass:value = _swig_property(_pymxml.mxml_attr_t_value_get, _pymxml.mxml_attr_t_value_set)
    def __init__(self): 
        this = _pymxml.new_mxml_attr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymxml.delete_mxml_attr_t
    __del__ = lambda self : None;
mxml_attr_t_swigregister = _pymxml.mxml_attr_t_swigregister
mxml_attr_t_swigregister(mxml_attr_t)

class mxml_element_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mxml_element_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mxml_element_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pymxml.mxml_element_t_name_set
    __swig_getmethods__["name"] = _pymxml.mxml_element_t_name_get
    if _newclass:name = _swig_property(_pymxml.mxml_element_t_name_get, _pymxml.mxml_element_t_name_set)
    __swig_setmethods__["num_attrs"] = _pymxml.mxml_element_t_num_attrs_set
    __swig_getmethods__["num_attrs"] = _pymxml.mxml_element_t_num_attrs_get
    if _newclass:num_attrs = _swig_property(_pymxml.mxml_element_t_num_attrs_get, _pymxml.mxml_element_t_num_attrs_set)
    __swig_setmethods__["attrs"] = _pymxml.mxml_element_t_attrs_set
    __swig_getmethods__["attrs"] = _pymxml.mxml_element_t_attrs_get
    if _newclass:attrs = _swig_property(_pymxml.mxml_element_t_attrs_get, _pymxml.mxml_element_t_attrs_set)
    def __init__(self): 
        this = _pymxml.new_mxml_element_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymxml.delete_mxml_element_t
    __del__ = lambda self : None;
mxml_element_t_swigregister = _pymxml.mxml_element_t_swigregister
mxml_element_t_swigregister(mxml_element_t)

class mxml_text_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mxml_text_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mxml_text_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["whitespace"] = _pymxml.mxml_text_t_whitespace_set
    __swig_getmethods__["whitespace"] = _pymxml.mxml_text_t_whitespace_get
    if _newclass:whitespace = _swig_property(_pymxml.mxml_text_t_whitespace_get, _pymxml.mxml_text_t_whitespace_set)
    __swig_setmethods__["string"] = _pymxml.mxml_text_t_string_set
    __swig_getmethods__["string"] = _pymxml.mxml_text_t_string_get
    if _newclass:string = _swig_property(_pymxml.mxml_text_t_string_get, _pymxml.mxml_text_t_string_set)
    def __init__(self): 
        this = _pymxml.new_mxml_text_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymxml.delete_mxml_text_t
    __del__ = lambda self : None;
mxml_text_t_swigregister = _pymxml.mxml_text_t_swigregister
mxml_text_t_swigregister(mxml_text_t)

class mxml_custom_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mxml_custom_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mxml_custom_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _pymxml.mxml_custom_t_data_set
    __swig_getmethods__["data"] = _pymxml.mxml_custom_t_data_get
    if _newclass:data = _swig_property(_pymxml.mxml_custom_t_data_get, _pymxml.mxml_custom_t_data_set)
    __swig_setmethods__["destroy"] = _pymxml.mxml_custom_t_destroy_set
    __swig_getmethods__["destroy"] = _pymxml.mxml_custom_t_destroy_get
    if _newclass:destroy = _swig_property(_pymxml.mxml_custom_t_destroy_get, _pymxml.mxml_custom_t_destroy_set)
    def __init__(self): 
        this = _pymxml.new_mxml_custom_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymxml.delete_mxml_custom_t
    __del__ = lambda self : None;
mxml_custom_t_swigregister = _pymxml.mxml_custom_t_swigregister
mxml_custom_t_swigregister(mxml_custom_t)

class mxml_value_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mxml_value_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mxml_value_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["element"] = _pymxml.mxml_value_t_element_set
    __swig_getmethods__["element"] = _pymxml.mxml_value_t_element_get
    if _newclass:element = _swig_property(_pymxml.mxml_value_t_element_get, _pymxml.mxml_value_t_element_set)
    __swig_setmethods__["integer"] = _pymxml.mxml_value_t_integer_set
    __swig_getmethods__["integer"] = _pymxml.mxml_value_t_integer_get
    if _newclass:integer = _swig_property(_pymxml.mxml_value_t_integer_get, _pymxml.mxml_value_t_integer_set)
    __swig_setmethods__["opaque"] = _pymxml.mxml_value_t_opaque_set
    __swig_getmethods__["opaque"] = _pymxml.mxml_value_t_opaque_get
    if _newclass:opaque = _swig_property(_pymxml.mxml_value_t_opaque_get, _pymxml.mxml_value_t_opaque_set)
    __swig_setmethods__["real"] = _pymxml.mxml_value_t_real_set
    __swig_getmethods__["real"] = _pymxml.mxml_value_t_real_get
    if _newclass:real = _swig_property(_pymxml.mxml_value_t_real_get, _pymxml.mxml_value_t_real_set)
    __swig_setmethods__["text"] = _pymxml.mxml_value_t_text_set
    __swig_getmethods__["text"] = _pymxml.mxml_value_t_text_get
    if _newclass:text = _swig_property(_pymxml.mxml_value_t_text_get, _pymxml.mxml_value_t_text_set)
    __swig_setmethods__["custom"] = _pymxml.mxml_value_t_custom_set
    __swig_getmethods__["custom"] = _pymxml.mxml_value_t_custom_get
    if _newclass:custom = _swig_property(_pymxml.mxml_value_t_custom_get, _pymxml.mxml_value_t_custom_set)
    def __init__(self): 
        this = _pymxml.new_mxml_value_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymxml.delete_mxml_value_t
    __del__ = lambda self : None;
mxml_value_t_swigregister = _pymxml.mxml_value_t_swigregister
mxml_value_t_swigregister(mxml_value_t)

class mxml_node_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mxml_node_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mxml_node_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pymxml.mxml_node_s_type_set
    __swig_getmethods__["type"] = _pymxml.mxml_node_s_type_get
    if _newclass:type = _swig_property(_pymxml.mxml_node_s_type_get, _pymxml.mxml_node_s_type_set)
    __swig_setmethods__["next"] = _pymxml.mxml_node_s_next_set
    __swig_getmethods__["next"] = _pymxml.mxml_node_s_next_get
    if _newclass:next = _swig_property(_pymxml.mxml_node_s_next_get, _pymxml.mxml_node_s_next_set)
    __swig_setmethods__["prev"] = _pymxml.mxml_node_s_prev_set
    __swig_getmethods__["prev"] = _pymxml.mxml_node_s_prev_get
    if _newclass:prev = _swig_property(_pymxml.mxml_node_s_prev_get, _pymxml.mxml_node_s_prev_set)
    __swig_setmethods__["parent"] = _pymxml.mxml_node_s_parent_set
    __swig_getmethods__["parent"] = _pymxml.mxml_node_s_parent_get
    if _newclass:parent = _swig_property(_pymxml.mxml_node_s_parent_get, _pymxml.mxml_node_s_parent_set)
    __swig_setmethods__["child"] = _pymxml.mxml_node_s_child_set
    __swig_getmethods__["child"] = _pymxml.mxml_node_s_child_get
    if _newclass:child = _swig_property(_pymxml.mxml_node_s_child_get, _pymxml.mxml_node_s_child_set)
    __swig_setmethods__["last_child"] = _pymxml.mxml_node_s_last_child_set
    __swig_getmethods__["last_child"] = _pymxml.mxml_node_s_last_child_get
    if _newclass:last_child = _swig_property(_pymxml.mxml_node_s_last_child_get, _pymxml.mxml_node_s_last_child_set)
    __swig_setmethods__["value"] = _pymxml.mxml_node_s_value_set
    __swig_getmethods__["value"] = _pymxml.mxml_node_s_value_get
    if _newclass:value = _swig_property(_pymxml.mxml_node_s_value_get, _pymxml.mxml_node_s_value_set)
    __swig_setmethods__["ref_count"] = _pymxml.mxml_node_s_ref_count_set
    __swig_getmethods__["ref_count"] = _pymxml.mxml_node_s_ref_count_get
    if _newclass:ref_count = _swig_property(_pymxml.mxml_node_s_ref_count_get, _pymxml.mxml_node_s_ref_count_set)
    __swig_setmethods__["user_data"] = _pymxml.mxml_node_s_user_data_set
    __swig_getmethods__["user_data"] = _pymxml.mxml_node_s_user_data_get
    if _newclass:user_data = _swig_property(_pymxml.mxml_node_s_user_data_get, _pymxml.mxml_node_s_user_data_set)
    def __init__(self): 
        this = _pymxml.new_mxml_node_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymxml.delete_mxml_node_s
    __del__ = lambda self : None;
mxml_node_s_swigregister = _pymxml.mxml_node_s_swigregister
mxml_node_s_swigregister(mxml_node_s)

class mxml_index_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mxml_index_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mxml_index_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _pymxml.mxml_index_s_attr_set
    __swig_getmethods__["attr"] = _pymxml.mxml_index_s_attr_get
    if _newclass:attr = _swig_property(_pymxml.mxml_index_s_attr_get, _pymxml.mxml_index_s_attr_set)
    __swig_setmethods__["num_nodes"] = _pymxml.mxml_index_s_num_nodes_set
    __swig_getmethods__["num_nodes"] = _pymxml.mxml_index_s_num_nodes_get
    if _newclass:num_nodes = _swig_property(_pymxml.mxml_index_s_num_nodes_get, _pymxml.mxml_index_s_num_nodes_set)
    __swig_setmethods__["alloc_nodes"] = _pymxml.mxml_index_s_alloc_nodes_set
    __swig_getmethods__["alloc_nodes"] = _pymxml.mxml_index_s_alloc_nodes_get
    if _newclass:alloc_nodes = _swig_property(_pymxml.mxml_index_s_alloc_nodes_get, _pymxml.mxml_index_s_alloc_nodes_set)
    __swig_setmethods__["cur_node"] = _pymxml.mxml_index_s_cur_node_set
    __swig_getmethods__["cur_node"] = _pymxml.mxml_index_s_cur_node_get
    if _newclass:cur_node = _swig_property(_pymxml.mxml_index_s_cur_node_get, _pymxml.mxml_index_s_cur_node_set)
    __swig_setmethods__["nodes"] = _pymxml.mxml_index_s_nodes_set
    __swig_getmethods__["nodes"] = _pymxml.mxml_index_s_nodes_get
    if _newclass:nodes = _swig_property(_pymxml.mxml_index_s_nodes_get, _pymxml.mxml_index_s_nodes_set)
    def __init__(self): 
        this = _pymxml.new_mxml_index_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pymxml.delete_mxml_index_s
    __del__ = lambda self : None;
mxml_index_s_swigregister = _pymxml.mxml_index_s_swigregister
mxml_index_s_swigregister(mxml_index_s)


def mxmlAdd(*args):
  return _pymxml.mxmlAdd(*args)
mxmlAdd = _pymxml.mxmlAdd

def mxmlDelete(*args):
  return _pymxml.mxmlDelete(*args)
mxmlDelete = _pymxml.mxmlDelete

def mxmlElementDeleteAttr(*args):
  return _pymxml.mxmlElementDeleteAttr(*args)
mxmlElementDeleteAttr = _pymxml.mxmlElementDeleteAttr

def mxmlElementGetAttr(*args):
  return _pymxml.mxmlElementGetAttr(*args)
mxmlElementGetAttr = _pymxml.mxmlElementGetAttr

def mxmlElementSetAttr(*args):
  return _pymxml.mxmlElementSetAttr(*args)
mxmlElementSetAttr = _pymxml.mxmlElementSetAttr

def mxmlElementSetAttrf(*args):
  return _pymxml.mxmlElementSetAttrf(*args)
mxmlElementSetAttrf = _pymxml.mxmlElementSetAttrf

def mxmlEntityAddCallback(*args):
  return _pymxml.mxmlEntityAddCallback(*args)
mxmlEntityAddCallback = _pymxml.mxmlEntityAddCallback

def mxmlEntityGetName(*args):
  return _pymxml.mxmlEntityGetName(*args)
mxmlEntityGetName = _pymxml.mxmlEntityGetName

def mxmlEntityGetValue(*args):
  return _pymxml.mxmlEntityGetValue(*args)
mxmlEntityGetValue = _pymxml.mxmlEntityGetValue

def mxmlEntityRemoveCallback(*args):
  return _pymxml.mxmlEntityRemoveCallback(*args)
mxmlEntityRemoveCallback = _pymxml.mxmlEntityRemoveCallback

def mxmlFindElement(*args):
  return _pymxml.mxmlFindElement(*args)
mxmlFindElement = _pymxml.mxmlFindElement

def mxmlFindPath(*args):
  return _pymxml.mxmlFindPath(*args)
mxmlFindPath = _pymxml.mxmlFindPath

def mxmlGetCDATA(*args):
  return _pymxml.mxmlGetCDATA(*args)
mxmlGetCDATA = _pymxml.mxmlGetCDATA

def mxmlGetCustom(*args):
  return _pymxml.mxmlGetCustom(*args)
mxmlGetCustom = _pymxml.mxmlGetCustom

def mxmlGetElement(*args):
  return _pymxml.mxmlGetElement(*args)
mxmlGetElement = _pymxml.mxmlGetElement

def mxmlGetFirstChild(*args):
  return _pymxml.mxmlGetFirstChild(*args)
mxmlGetFirstChild = _pymxml.mxmlGetFirstChild

def mxmlGetInteger(*args):
  return _pymxml.mxmlGetInteger(*args)
mxmlGetInteger = _pymxml.mxmlGetInteger

def mxmlGetLastChild(*args):
  return _pymxml.mxmlGetLastChild(*args)
mxmlGetLastChild = _pymxml.mxmlGetLastChild

def mxmlGetNextSibling(*args):
  return _pymxml.mxmlGetNextSibling(*args)
mxmlGetNextSibling = _pymxml.mxmlGetNextSibling

def mxmlGetOpaque(*args):
  return _pymxml.mxmlGetOpaque(*args)
mxmlGetOpaque = _pymxml.mxmlGetOpaque

def mxmlGetParent(*args):
  return _pymxml.mxmlGetParent(*args)
mxmlGetParent = _pymxml.mxmlGetParent

def mxmlGetPrevSibling(*args):
  return _pymxml.mxmlGetPrevSibling(*args)
mxmlGetPrevSibling = _pymxml.mxmlGetPrevSibling

def mxmlGetReal(*args):
  return _pymxml.mxmlGetReal(*args)
mxmlGetReal = _pymxml.mxmlGetReal

def mxmlGetRefCount(*args):
  return _pymxml.mxmlGetRefCount(*args)
mxmlGetRefCount = _pymxml.mxmlGetRefCount

def mxmlGetText(*args):
  return _pymxml.mxmlGetText(*args)
mxmlGetText = _pymxml.mxmlGetText

def mxmlGetType(*args):
  return _pymxml.mxmlGetType(*args)
mxmlGetType = _pymxml.mxmlGetType

def mxmlGetUserData(*args):
  return _pymxml.mxmlGetUserData(*args)
mxmlGetUserData = _pymxml.mxmlGetUserData

def mxmlIndexDelete(*args):
  return _pymxml.mxmlIndexDelete(*args)
mxmlIndexDelete = _pymxml.mxmlIndexDelete

def mxmlIndexEnum(*args):
  return _pymxml.mxmlIndexEnum(*args)
mxmlIndexEnum = _pymxml.mxmlIndexEnum

def mxmlIndexFind(*args):
  return _pymxml.mxmlIndexFind(*args)
mxmlIndexFind = _pymxml.mxmlIndexFind

def mxmlIndexGetCount(*args):
  return _pymxml.mxmlIndexGetCount(*args)
mxmlIndexGetCount = _pymxml.mxmlIndexGetCount

def mxmlIndexNew(*args):
  return _pymxml.mxmlIndexNew(*args)
mxmlIndexNew = _pymxml.mxmlIndexNew

def mxmlIndexReset(*args):
  return _pymxml.mxmlIndexReset(*args)
mxmlIndexReset = _pymxml.mxmlIndexReset

def mxmlLoadFd(*args):
  return _pymxml.mxmlLoadFd(*args)
mxmlLoadFd = _pymxml.mxmlLoadFd

def mxmlLoadFile(*args):
  return _pymxml.mxmlLoadFile(*args)
mxmlLoadFile = _pymxml.mxmlLoadFile

def mxmlLoadString(*args):
  return _pymxml.mxmlLoadString(*args)
mxmlLoadString = _pymxml.mxmlLoadString

def mxmlNewCDATA(*args):
  return _pymxml.mxmlNewCDATA(*args)
mxmlNewCDATA = _pymxml.mxmlNewCDATA

def mxmlNewCustom(*args):
  return _pymxml.mxmlNewCustom(*args)
mxmlNewCustom = _pymxml.mxmlNewCustom

def mxmlNewElement(*args):
  return _pymxml.mxmlNewElement(*args)
mxmlNewElement = _pymxml.mxmlNewElement

def mxmlNewInteger(*args):
  return _pymxml.mxmlNewInteger(*args)
mxmlNewInteger = _pymxml.mxmlNewInteger

def mxmlNewOpaque(*args):
  return _pymxml.mxmlNewOpaque(*args)
mxmlNewOpaque = _pymxml.mxmlNewOpaque

def mxmlNewReal(*args):
  return _pymxml.mxmlNewReal(*args)
mxmlNewReal = _pymxml.mxmlNewReal

def mxmlNewText(*args):
  return _pymxml.mxmlNewText(*args)
mxmlNewText = _pymxml.mxmlNewText

def mxmlNewTextf(*args):
  return _pymxml.mxmlNewTextf(*args)
mxmlNewTextf = _pymxml.mxmlNewTextf

def mxmlNewXML(*args):
  return _pymxml.mxmlNewXML(*args)
mxmlNewXML = _pymxml.mxmlNewXML

def mxmlRelease(*args):
  return _pymxml.mxmlRelease(*args)
mxmlRelease = _pymxml.mxmlRelease

def mxmlRemove(*args):
  return _pymxml.mxmlRemove(*args)
mxmlRemove = _pymxml.mxmlRemove

def mxmlRetain(*args):
  return _pymxml.mxmlRetain(*args)
mxmlRetain = _pymxml.mxmlRetain

def mxmlSaveAllocString(*args):
  return _pymxml.mxmlSaveAllocString(*args)
mxmlSaveAllocString = _pymxml.mxmlSaveAllocString

def mxmlSaveFd(*args):
  return _pymxml.mxmlSaveFd(*args)
mxmlSaveFd = _pymxml.mxmlSaveFd

def mxmlSaveFile(*args):
  return _pymxml.mxmlSaveFile(*args)
mxmlSaveFile = _pymxml.mxmlSaveFile

def mxmlSaveString(*args):
  return _pymxml.mxmlSaveString(*args)
mxmlSaveString = _pymxml.mxmlSaveString

def mxmlSAXLoadFd(*args):
  return _pymxml.mxmlSAXLoadFd(*args)
mxmlSAXLoadFd = _pymxml.mxmlSAXLoadFd

def mxmlSAXLoadFile(*args):
  return _pymxml.mxmlSAXLoadFile(*args)
mxmlSAXLoadFile = _pymxml.mxmlSAXLoadFile

def mxmlSAXLoadString(*args):
  return _pymxml.mxmlSAXLoadString(*args)
mxmlSAXLoadString = _pymxml.mxmlSAXLoadString

def mxmlSetCDATA(*args):
  return _pymxml.mxmlSetCDATA(*args)
mxmlSetCDATA = _pymxml.mxmlSetCDATA

def mxmlSetCustom(*args):
  return _pymxml.mxmlSetCustom(*args)
mxmlSetCustom = _pymxml.mxmlSetCustom

def mxmlSetCustomHandlers(*args):
  return _pymxml.mxmlSetCustomHandlers(*args)
mxmlSetCustomHandlers = _pymxml.mxmlSetCustomHandlers

def mxmlSetElement(*args):
  return _pymxml.mxmlSetElement(*args)
mxmlSetElement = _pymxml.mxmlSetElement

def mxmlSetErrorCallback(*args):
  return _pymxml.mxmlSetErrorCallback(*args)
mxmlSetErrorCallback = _pymxml.mxmlSetErrorCallback

def mxmlSetInteger(*args):
  return _pymxml.mxmlSetInteger(*args)
mxmlSetInteger = _pymxml.mxmlSetInteger

def mxmlSetOpaque(*args):
  return _pymxml.mxmlSetOpaque(*args)
mxmlSetOpaque = _pymxml.mxmlSetOpaque

def mxmlSetReal(*args):
  return _pymxml.mxmlSetReal(*args)
mxmlSetReal = _pymxml.mxmlSetReal

def mxmlSetText(*args):
  return _pymxml.mxmlSetText(*args)
mxmlSetText = _pymxml.mxmlSetText

def mxmlSetTextf(*args):
  return _pymxml.mxmlSetTextf(*args)
mxmlSetTextf = _pymxml.mxmlSetTextf

def mxmlSetUserData(*args):
  return _pymxml.mxmlSetUserData(*args)
mxmlSetUserData = _pymxml.mxmlSetUserData

def mxmlSetWrapMargin(*args):
  return _pymxml.mxmlSetWrapMargin(*args)
mxmlSetWrapMargin = _pymxml.mxmlSetWrapMargin

def mxmlWalkNext(*args):
  return _pymxml.mxmlWalkNext(*args)
mxmlWalkNext = _pymxml.mxmlWalkNext

def mxmlWalkPrev(*args):
  return _pymxml.mxmlWalkPrev(*args)
mxmlWalkPrev = _pymxml.mxmlWalkPrev

def mxml_error(*args):
  return _pymxml.mxml_error(*args)
mxml_error = _pymxml.mxml_error

def mxml_ignore_cb(*args):
  return _pymxml.mxml_ignore_cb(*args)
mxml_ignore_cb = _pymxml.mxml_ignore_cb

def mxml_integer_cb(*args):
  return _pymxml.mxml_integer_cb(*args)
mxml_integer_cb = _pymxml.mxml_integer_cb

def mxml_opaque_cb(*args):
  return _pymxml.mxml_opaque_cb(*args)
mxml_opaque_cb = _pymxml.mxml_opaque_cb

def mxml_real_cb(*args):
  return _pymxml.mxml_real_cb(*args)
mxml_real_cb = _pymxml.mxml_real_cb
# This file is compatible with both classic and new-style classes.


