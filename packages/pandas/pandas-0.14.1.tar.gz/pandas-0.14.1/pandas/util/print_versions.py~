import os
import platform
import sys
import struct
import subprocess
import codecs


def get_sys_info():
    "Returns system information as a dict"

    blob = []

    # get full commit hash
    commit = None
    if os.path.isdir(".git") and os.path.isdir("pandas"):
        try:
            pipe = subprocess.Popen('git log --format="%H" -n 1'.split(" "),
                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            so, serr = pipe.communicate()
        except:
            pass
        else:
            if pipe.returncode == 0:
                commit = so
                try:
                    commit = so.decode('utf-8')
                except ValueError:
                    pass
                commit = commit.strip().strip('"')

    blob.append(('commit', commit))

    try:
        sysname, nodename, release, version, machine, processor = platform.uname(
        )
        blob.extend([
            ("python", "%d.%d.%d.%s.%s" % sys.version_info[:]),
            ("python-bits", struct.calcsize("P") * 8),
            ("OS", "%s" % (sysname)),
            ("OS-release", "%s" % (release)),
            # ("Version", "%s" % (version)),
            ("machine", "%s" % (machine)),
            ("processor", "%s" % (processor)),
            ("byteorder", "%s" % sys.byteorder),
            ("LC_ALL", "%s" % os.environ.get('LC_ALL', "None")),
            ("LANG", "%s" % os.environ.get('LANG', "None")),

        ])
    except:
        pass

<<<<<<< HEAD
    return blob


def show_versions(as_json=False):
    import imp
    sys_info = get_sys_info()

    deps = [
        # (MODULE_NAME, f(mod) -> mod version)
        ("pandas", lambda mod: mod.__version__),
        ("Cython", lambda mod: mod.__version__),
        ("numpy", lambda mod: mod.version.version),
        ("scipy", lambda mod: mod.version.version),
        ("statsmodels", lambda mod: mod.__version__),
        ("IPython", lambda mod: mod.__version__),
        ("sphinx", lambda mod: mod.__version__),
        ("patsy", lambda mod: mod.__version__),
        ("scikits.timeseries", lambda mod: mod.__version__),
        ("dateutil", lambda mod: mod.__version__),
        ("pytz", lambda mod: mod.VERSION),
        ("bottleneck", lambda mod: mod.__version__),
        ("tables", lambda mod: mod.__version__),
        ("numexpr", lambda mod: mod.__version__),
        ("matplotlib", lambda mod: mod.__version__),
        ("openpyxl", lambda mod: mod.__version__),
        ("xlrd", lambda mod: mod.__VERSION__),
        ("xlwt", lambda mod: mod.__VERSION__),
        ("xlsxwriter", lambda mod: mod.__version__),
        ("lxml", lambda mod: mod.etree.__version__),
        ("bs4", lambda mod: mod.__version__),
        ("html5lib", lambda mod: mod.__version__),
        ("bq", lambda mod: mod._VersionNumber()),
        ("apiclient", lambda mod: mod.__version__),
        ("rpy2", lambda mod: mod.__version__),
        ("sqlalchemy", lambda mod: mod.__version__),
        ("pymysql", lambda mod: mod.__version__),
        ("psycopg2", lambda mod: mod.__version__),
    ]

    deps_blob = list()
    for (modname, ver_f) in deps:
        try:
            try:
                mod = imp.load_module(modname, *imp.find_module(modname))
            except (ImportError):
                import importlib
                mod = importlib.import_module(modname)
            ver = ver_f(mod)
            deps_blob.append((modname, ver))
        except:
            deps_blob.append((modname, None))

    if (as_json):
        # 2.6-safe
        try:
            import json
        except:
            import simplejson as json

        j = dict(system=dict(sys_info), dependencies=dict(deps_blob))

        if as_json == True:
            print(j)
        else:
            with codecs.open(as_json, "wb", encoding='utf8') as f:
                json.dump(j, f, indent=2)

    else:

        print("\nINSTALLED VERSIONS")
        print("------------------")

        for k, stat in sys_info:
            print("%s: %s" % (k, stat))

        print("")
        for k, stat in deps_blob:
            print("%s: %s" % (k, stat))


def main():
        # optparse is 2.6-safe
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("-j", "--json", metavar="FILE", nargs=1,
                      help="Save output as JSON into file, pass in '-' to output to stdout")

    (options, args) = parser.parse_args()

    if options.json == "-":
        options.json = True

    show_versions(as_json=options.json)

    return 0
=======
    print("")

    try:
        import pandas
        print("pandas: %s" % pandas.__version__)
    except:
        print("pandas: Not installed")

    try:
        import Cython
        print("Cython: %s" % Cython.__version__)
    except:
        print("Cython: Not installed")

    try:
        import numpy
        print("Numpy: %s" % numpy.version.version)
    except:
        print("Numpy: Not installed")

    try:
        import scipy
        print("Scipy: %s" % scipy.version.version)
    except:
        print("Scipy: Not installed")

    try:
        import statsmodels
        print("statsmodels: %s" % statsmodels.__version__)
    except:
        print("statsmodels: Not installed")
    try:
        import patsy
        print("    patsy: %s" % patsy.__version__)
    except:
        print("    patsy: Not installed")

    try:
        import scikits.timeseries as ts
        print("scikits.timeseries: %s" % ts.__version__)
    except:
        print("scikits.timeseries: Not installed")

    try:
        import dateutil
        print("dateutil: %s" % dateutil.__version__)
    except:
        print("dateutil: Not installed")

    try:
        import pytz
        print("pytz: %s" % pytz.VERSION)
    except:
        print("pytz: Not installed")

    try:
        import bottleneck
        print("bottleneck: %s" % bottleneck.__version__)
    except:
        print("bottleneck: Not installed")

    try:
        import joblib
        print("joblib: %s" % joblib.__version__)
    except:
        print("joblib: Not installed")

    try:
        import tables
        print("PyTables: %s" % tables.__version__)
    except:
        print("PyTables: Not Installed")

    try:
        import numexpr
        print("    numexpr: %s" % numexpr.__version__)
    except:
        print("    numexpr: Not Installed")

    try:
        import matplotlib
        print("matplotlib: %s" % matplotlib.__version__)
    except:
        print("matplotlib: Not installed")

    try:
        import openpyxl
        print("openpyxl: %s" % openpyxl.__version__)
    except:
        print("openpyxl: Not installed")

    try:
        import xlrd
        print("xlrd: %s" % xlrd.__VERSION__)
    except:
        print("xlrd: Not installed")

    try:
        import xlwt
        print("xlwt: %s" % xlwt.__VERSION__)
    except:
        print("xlwt: Not installed")

    try:
        import xlsxwriter
        print("xlsxwriter: %s" % xlsxwriter.__version__)
    except:
        print("xlsxwriter: Not installed")

    try:
        import sqlalchemy
        print("sqlalchemy: %s" % sqlalchemy.__version__)
    except:
        print("sqlalchemy: Not installed")

    try:
        import lxml
        from lxml import etree
        print("lxml: %s" % etree.__version__)
    except:
        print("lxml: Not installed")

    try:
        import bs4
        print("bs4: %s" % bs4.__version__)
    except:
        print("bs4: Not installed")

    try:
        import html5lib
        print("html5lib: %s" % html5lib.__version__)
    except:
        print("html5lib: Not installed")

    try:
        import bq
        print("bigquery: %s" % bq._VersionNumber())
    except:
        print("bigquery: Not installed")

    try:
        import apiclient
        print("apiclient: %s" % apiclient.__version__)
    except:
        print("apiclient: Not installed")


>>>>>>> ENH: initial commit for parallel support (GH5751)

if __name__ == "__main__":
    sys.exit(main())
