from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from aspen import json
from aspen.http import status_strings
from aspen.backcompat import html_escape

try:
    from pygments.lexers import PythonTracebackLexer
    from pygments.formatters import HtmlFormatter
    from StringIO import StringIO
    pygmentize = True
except ImportError:
    from aspen.logging import log
    import sys
    exc = sys.exc_info()[1]
    log("Cannot import pygments: " + str(exc))
    pygmentize = False

[----------------------------------------]
style = ''
msg = status_strings.get(response.code, 'Sorry')
msg = msg[0].upper() + msg[1:].lower()
if request.website.show_tracebacks:
    if pygmentize:
        sio = StringIO()
        formatter = HtmlFormatter()
        tokens = PythonTracebackLexer().get_tokens(response.body)
        formatter.format(tokens, sio)
        sio.seek(0)
        err = sio.read()
        style = formatter.get_style_defs()
    else:
        err = response.body
else:
    err = ''

msg_title = msg.title()
response_code = response.code  # make this available to json section
err_json = json.dumps(err)
err_html = html_escape(err)
[----------------------------------------] text/html via stdlib_format
<html>
    <head>
        <title>{response.code} {msg_title}</title>
        <style>
            {style}
            BODY {{
                margin: 0;
                padding: 200px 0 0;
                text-align: center;
                font: normal 18pt/18pt Georgia, serif;
            }}
            PRE {{
                text-align: left;
                font: normal 10pt/12pt monospace;
                margin: 50px 200px 0;
            }}
        </style>
    </head>
    <body>
        {msg}, program!
        <pre>{err_html}</pre>
    </body>
</html>
[----------------------------------------] application/json via stdlib_format
{{ "error_code": {response_code}
, "error_message_short": "{msg_title}"
, "error_message_long": {err_json}
 }}
[----------------------------------------] text/plain via stdlib_format
{msg}, program!
{err}
