Metadata-Version: 1.1
Name: Flask-Via
Version: 2014.05.06
Summary: Flask-Via adds Django style url routing configuration.
Home-page: https://github.com/thisissoon/Flask-Via
Author: SOON_
Author-email: dorks@thisissoon.com
License: UNKNOWN
Description: ``Flask-Via``
        =============
        
        Inspired by the Django URL configuration system, ``Flask-Via`` is designed to
        add similar functionality to Flask applications which have grown beyond a
        simple single file application.
        
        |travis_master| |coveralls_master| |health| |PyPi_version| |PyPi_downloads|
        
        Example
        -------
        
        .. sourcecode:: python
        
            from flask import Flask
            from flask.ext.via import Via
            from flask.ext.via.routers.default import Basic
        
            app = Flask(__name__)
        
            def foo(bar=None):
                return 'Foo View!'
        
            routes = [
                Basic('/foo', foo),
                Basic('/foo/<bar>', foo, endpoint='foo2'),
            ]
        
            via = Via()
            via.init_app(app, route_module='flask_via.examples.basic')
        
            if __name__ == "__main__":
                app.run(debug=True)
        
        Why?
        ----
        
        Growing your application can be quite difficult when it's not always clear
        where and how your routes are discovered. This can lead to a cluttered
        application factory method when all your routes are defined at application
        creation - resulting in code which is difficult to maintain, not to mention
        messy.
        
        A better solution is to define your routes in a ``routes.py`` and automatically
        load them at application start up. This is what ``Flask-Via`` helps to do.
        
        Third party Flask extensions don't always follow the same conventions for
        adding routes to an application, so ``Flask-Via`` has been designed to be easy
        for developers to write their own custom routers. For an example of this, take
        a look at the bundled ``Flask-Restful`` Resource_ router.
        
        If you do write a custom router that is useful to you, it will probably be
        useful to someone else so please do contribute back :)
        
        Links
        -----
        
        * Documentation: http://flask-via.thisissoon.com
        * CI: https://travis-ci.org/thisissoon/Flask-Via
        * Coverage: https://coveralls.io/r/thisissoon/Flask-Via?branch=master
        
        .. |PyPi_version| image:: https://badge.fury.io/py/Flask-Via.svg
            :target: https://pypi.python.org/pypi/Flask-Via
            :alt: Latest PyPI version
        
        .. |PyPi_downloads| image:: https://pypip.in/download/Flask-Via/badge.png
            :target: https://pypi.python.org/pypi/Flask-Via
            :alt: Number of PyPI downloads
        
        .. |coveralls_master| image:: https://coveralls.io/repos/thisissoon/Flask-Via/badge.png?branch=master
            :target: https://coveralls.io/r/thisissoon/Flask-Via?branch=master
            :alt: Test Coverage
        
        .. |travis_master| image:: https://travis-ci.org/thisissoon/Flask-Via.svg?branch=master
            :target: https://travis-ci.org/thisissoon/Flask-Via
            :alt: Travis build status on Master Branch
        
        .. |health| image:: https://landscape.io/github/thisissoon/Flask-Via/master/landscape.png
           :target: https://landscape.io/github/thisissoon/Flask-Via/master
           :alt: Code Health
        
        .. _Resource: http://flask-via.thisissoon.com/en/latest/api.html#flask_via.routers.restful.Resource
        
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
