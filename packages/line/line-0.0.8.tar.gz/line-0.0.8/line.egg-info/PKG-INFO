Metadata-Version: 1.1
Name: line
Version: 0.0.8
Summary: May the LINE be with you...
Home-page: http://github.com/carpedm20/line
Author: Taehoon Kim
Author-email: carpedm20@gmail.com
License: BSD License
Description: INE
        ===
        
        `|PyPi version| <https://crate.io/packages/line/>`_ `|PyPi
        downloads| <https://crate.io/packages/line/>`_
        
        -  **2014.08.06 UPDATE : Echo bot example update!!!**
        -  **2014.08.06 UPDATE : We can send a sticker!!!**
        -  **2014.08.04 ANNOUNCE : This project is not completed yet :(**
        
        May the LINE be with you...
        
        ::
        
            >>> from line import LineClient
            >>> client = LineClient("carpedm20", "xxxxxxxxxx")
            Enter PinCode '9779' to your mobile phone in 2 minutes
            >>> client = LineClient("carpedm20@gmail.com", "xxxxxxxxxx")
            Enter PinCode '7390' to your mobile phone in 2 minutes
            >>> print client.profile
        
        Installing
        ----------
        
        First, you need to install **Apache Thrift**. Install instructions are
        `here <http://thrift.apache.org/docs/install/>`_. (This might take some
        time...)
        
        Next:
        
        ::
        
            $ pip install line
        
        Or, you can use:
        
        ::
        
            $ easy_install line 
        
        Or, you can also install manually:
        
        ::
        
            $ git clone git://github.com/carpedm20/line.git
            $ cd LINE
            $ python setup.py install
        
        Using
        -----
        
        First, you need to create a ``LineClinet`` object with ``YOUR_ID`` and
        ``YOUR_PASSWORD``. ``YOUR ID`` can be ``LINE email`` address or
        ``NAVER id``.
        
        ::
        
            >>> from line import LineClient
            >>> client = LineClient(YOUR_ID, YOUR_PASSWORD)
            Enter PinCode '9779' to your mobile phone in 2 minutes
        
        After you enter ``PinCode`` to your mobile phone, you will get
        ``authToken``.
        
        ::
        
            >>> authToken = client.authToken
            >>> print authToken
        
        With ``authToken``, you don't have to enter ``PinCode`` to your phone
        anymore!
        
        ::
        
            >>> client = LineClient(authToken=authToken)
            >>> print client.profile
        
        View ``contacts`` and ``groups``
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        You can see your ``contacts`` by:
        
        ::
        
            >>> print client.contacts  # your friends
            >>> print client.groups
        
        Get ``contact`` and ``group`` from name
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        You can get ``contact`` and ``group`` from name by:
        
        ::
        
            >>> contact = client.getContactFromName('CONTACT_NAME')
            >>> group = client.getGroupFromName('GROUP_NAME')
        
        Send a ``message``
        ~~~~~~~~~~~~~~~~~~
        
        You can send a ``message`` by:
        
        ::
        
            >>> client.contacts[0].sendMessage("test")
            True
            >>> client.groups[0].sendMessage("test")
            True
        
        Send a ``sticker``
        ~~~~~~~~~~~~~~~~~~
        
        You can send a ``sticker`` by:
        
        ::
        
            >>> client.contacts[0].sendSticker() # default option
            True
            >>> client.groups[0].sendSticker() # default option
            True
            >>> client.contacts[0].sendSticker(stickerId="1",stickerPackageId="1",stickerVersion="100")
            True
            >>> client.groups[0].sendSticker(stickerId="1",stickerPackageId="1",stickerVersion="100")
            True
        
        Get a list of recent ``message``
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        You can read a recent ``message`` from ``contact`` or ``gruop`` by:
        
        ::
        
            >>> messages = client.contacts[0].getRecentMessages(count=10)
            >>> messages = client.groups[0].getRecentMessages(count=1)
        
        Refresh ``contacts`` and ``groups``
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        If there is any change of contacts. you need to update ``contacts`` by:
        
        ::
        
            >>> client.refreshContacts()
            True
            >>> client.refreshGroups()
            True
        
        Screenshot
        ----------
        
        .. figure:: http://3.bp.blogspot.com/-FX3ONLEKBBY/U9xJD8JkJbI/AAAAAAAAF2Q/1E7VXOkvYAI/s1600/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA+2014-08-02+%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB+10.47.15.png
           :align: center
           :alt: alt\_tag
        
        Todo
        ----
        
        -  Get chat ``room`` list (currently only can get ``group`` and
           ``contact``)
        -  Long poll feature
        -  Send a Image file
        -  Make a echo bot example... (this is my major goal right now)
        -  More usable methods and objects
        
        License
        -------
        
        Source codes are distributed under BSD license.
        
        Author
        ------
        
        Taehoon Kim / `@carpedm20 <http://carpedm20.github.io/about/>`_
        
        .. |PyPi version| image:: https://pypip.in/v/line/badge.png
        .. |PyPi downloads| image:: https://pypip.in/d/line/badge.png
        
Keywords: line
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.1
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Communications :: Chat
