#!/usr/bin/env python

import sys
import json
import logging
import argparse

from bibframe.reader.marcxml import bfconvert


#PREFIXES = {u'ma': 'http://www.loc.gov/MARC21/slim', u'me': 'http://www.loc.gov/METS/'}

def run(inputs=None, base=None, out=None, limit=None, rdfttl=None, config=None, verbose=False, mods=None):
    '''
    Basically takes parameters typical for command line invocation and adapts them for use in the API

    '''
    if config is None:
        config = {}
    else:
        config = json.load(config)

    logger = logging.getLogger('marc2bf')
    if verbose:
        logger.setLevel(logging.DEBUG)

    for mod in mods or []:
        __import__(mod, globals(), locals(), [])

    bfconvert(inputs=inputs, base=base, out=out, limit=limit, rdfttl=rdfttl, config=config, verbose=verbose, logger=logger)
    return


if __name__ == '__main__':
    #marc2bfrdf -v -o /tmp/lcout.json -s /tmp/lcout.stats.js scratch/unpacked/lc-sample-files-20120725.xml 2> /tmp/lcout.log
    #parser = argparse.ArgumentParser(prog="bootstrap", add_help=False)
    parser = argparse.ArgumentParser()
    parser.add_argument('inputs', type=argparse.FileType('r'), metavar='inputs', nargs='+',
                        help='One or more MARC/XML files to be parsed and converted to BIBFRAME RDF')
    parser.add_argument('-o', '--out', type=argparse.FileType('w'), default=sys.stdout,
        help='file where raw Versa JSON dump output should be written '
             '(default: write to stdout)')
    parser.add_argument('-r', '--rdfttl', type=argparse.FileType('wb'),
        help='file where RDF Turtle output should be written')
    parser.add_argument('-c', '--config', type=argparse.FileType('r'),
        help='file containing config in JSON format')
    #parser.add_argument('-s', '--stats', type=argparse.FileType('w'),
    #    help='file where statistics output should be written in JSOn format')
    parser.add_argument('-l', '--limit', metavar="NUMBER",
        help='Limit the number of records processed to this number. If omitted, all records will be processed.')
    parser.add_argument('-b', '--base', metavar="IRI", #dest="base",
        help='Base IRI to be used for creating resources.')
    parser.add_argument('--mod', metavar="PYMODULE", nargs='*',
        help='Python module to be imported in order to register plugins.')
    parser.add_argument('-v', '--verbose', action='store_true',
        help='whether to show additional messages and information')
    #
    args = parser.parse_args()

    run(inputs=args.inputs, base=args.base, out=args.out, limit=args.limit, rdfttl=args.rdfttl, config=args.config, verbose=args.verbose, mods=args.mod)
    for f in args.inputs: f.close()
    args.out.close()

