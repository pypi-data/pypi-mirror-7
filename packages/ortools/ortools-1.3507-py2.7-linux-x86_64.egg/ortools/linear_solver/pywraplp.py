# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywraplp', [dirname(__file__)])
        except ImportError:
            import _pywraplp
            return _pywraplp
        if fp is not None:
            try:
                _mod = imp.load_module('_pywraplp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywraplp = swig_import_helper()
    del swig_import_helper
else:
    import _pywraplp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywraplp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pywraplp.SwigPyIterator_value(self)
    def incr(self, n=1): return _pywraplp.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pywraplp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pywraplp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pywraplp.SwigPyIterator_equal(self, *args)
    def copy(self): return _pywraplp.SwigPyIterator_copy(self)
    def next(self): return _pywraplp.SwigPyIterator_next(self)
    def __next__(self): return _pywraplp.SwigPyIterator___next__(self)
    def previous(self): return _pywraplp.SwigPyIterator_previous(self)
    def advance(self, *args): return _pywraplp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pywraplp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pywraplp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pywraplp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pywraplp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pywraplp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pywraplp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pywraplp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import types
import sys

import ortools.linear_solver.linear_solver2_pb2





class LinearExpr(object):
  """Holds linear expressions.

  A linear expression is essentially an offset (floating-point value), and a
  dictionary mapping MPVariable objects to their coefficient (which is also a
  floating-point value).
  """

  def Visit(self, coeffs):
    """Fills the coefficient dictionary, and returns the offset."""
    return self.DoVisit(coeffs, 1.0)

  def DoVisit(self, coeffs, multiplier):
    """Like Visit, but do that with a global floating-point multiplier."""
    raise NotImplementedError

  def solution_value(self):
    """Value of this linear expr, using the solution_value of its vars."""
    coeffs = {}
    constant = self.Visit(coeffs)
    if sys.version_info[0] >= 3: # Python 3
      return constant + sum(
          [var.solution_value() * coeff for var, coeff in coeffs.items()])
    else:
      return constant + sum(
          [var.solution_value() * coeff for var, coeff in coeffs.iteritems()])


  def IsConstant(self, expr):
    if sys.version_info[0] >= 3: # Python 3
      return  isinstance(expr, (int, float))
    else:
      return  isinstance(expr, (int, long, float))

  def __add__(self, expr):
    if self.IsConstant(expr):
      return SumCst(self, expr)
    else:
      return Sum(self, expr)

  def __radd__(self, cst):
    if self.IsConstant(cst):
      return SumCst(self, cst)
    else:
      raise TypeError

  def __sub__(self, expr):
    if self.IsConstant(expr):
      return SumCst(self, -expr)
    else:
      return Sum(self, ProductCst(expr, -1))

  def __rsub__(self, cst):
    if self.IsConstant(cst):
      return SumCst(ProductCst(self, -1), cst)
    else:
      raise TypeError

  def __mul__(self, cst):
    if self.IsConstant(cst):
      return ProductCst(self, cst)
    else:
      raise TypeError

  def __rmul__(self, cst):
    if self.IsConstant(cst):
      return ProductCst(self, cst)
    else:
      raise TypeError

  def __div__(self, cst):
    if self.IsConstant(cst):
      if cst == 0.0:
        raise ZeroDivisionError
      else:
        return ProductCst(self, 1.0 / cst)
    else:
      raise TypeError

  def __truediv__(self, cst):
    if self.IsConstant(cst):
      if cst == 0.0:
        raise ZeroDivisionError
      else:
        return ProductCst(self, 1.0 / cst)
    else:
      raise TypeError

  def __neg__(self):
    return ProductCst(self, -1)

  def __eq__(self, arg):
    if self.IsConstant(arg):
      return LinearConstraint(self, arg, arg)
    else:
      return LinearConstraint(Sum(self, ProductCst(arg, -1)), 0.0, 0.0)

  def __ge__(self, arg):
    if self.IsConstant(arg):
      return LinearConstraint(self, arg, 1e308)
    else:
      return LinearConstraint(Sum(self, ProductCst(arg, -1)), 0.0, 1e308)

  def __le__(self, arg):
    if self.IsConstant(arg):
      return LinearConstraint(self, -1e308, arg)
    else:
      return LinearConstraint(Sum(self, ProductCst(arg, -1)), -1e308, 0.0)


class ProductCst(LinearExpr):
  def __init__(self, expr, coef):
    self.__expr = expr
    self.__coef = coef

  def __str__(self):
    if (self.__coef == -1):
      return '-' + str(self.__expr)
    else:
      return '(' + str(self.__coef) + ' * ' + str(self.__expr) + ')'

  def DoVisit(self, coeffs, multiplier):
    current_multiplier = multiplier * self.__coef
    if current_multiplier:
      return self.__expr.DoVisit(coeffs, current_multiplier)
    return 0.0


class Sum(LinearExpr):
  def __init__(self, left, right):
    self.__left = left
    self.__right = right

  def __str__(self):
    return '(' + str(self.__left) + ' + ' + str(self.__right) + ')'

  def DoVisit(self, coeffs, multiplier):
    constant = self.__left.DoVisit(coeffs, multiplier)
    constant += self.__right.DoVisit(coeffs, multiplier)
    return constant


class SumArray(LinearExpr):
  def __init__(self, array):
    if type(array) is types.GeneratorType:
      self.__array = [x for x in array]
    else:
      self.__array = array

  def __str__(self):
    return 'Sum(' + str(self.__array) + ')'

  def DoVisit(self, coeffs, multiplier):
    constant = 0.0
    for t in self.__array:
      if self.IsConstant(t):
        constant += t * multiplier
      else:
        constant += t.DoVisit(coeffs, multiplier)
    return constant


class SumCst(LinearExpr):
  def __init__(self, expr, cst):
    self.__expr = expr
    self.__cst = cst

  def __str__(self):
    return '(' + str(self.__expr) + ' + ' + str(self.__cst) + ')'

  def DoVisit(self, coeffs, multiplier):
    constant = self.__expr.DoVisit(coeffs, multiplier)
    return constant + self.__cst * multiplier


class LinearConstraint(object):
  def __init__(self, expr, lb, ub):
    self.__expr = expr
    self.__lb = lb
    self.__ub = ub

  def __str__(self):
    if self.__lb > -1e308 and self.__ub < 1e308:
      if self.__lb == self.__ub:
        return str(self.__expr) + ' == ' + str(self.__lb)
      else:
        return (str(self.__lb) + ' <= ' + str(self.__expr) +
                " <= " + str(self.__ub))
    elif self.__lb > -1e308:
      return str(self.__expr) + ' >= ' + str(self.__lb)
    elif self.__ub < 1e308:
      return str(self.__expr) + ' <= ' + str(self.__ub)
    else:
      return 'Trivial inequality (always true)'

  def Extract(self, solver, name=''):
    coeffs = {}
    constant = self.__expr.Visit(coeffs)
    lb = -solver.Infinity()
    ub = solver.Infinity()
    if self.__lb > -1e308:
      lb = self.__lb - constant
    if self.__ub < 1e308:
      ub = self.__ub - constant

    constraint = solver.RowConstraint(lb, ub, name)
    if sys.version_info[0] >= 3: # Python 3
      for v, c, in coeffs.items():
        constraint.SetCoefficient(v, float(c))
    else:
      for v, c, in coeffs.iteritems():
        constraint.SetCoefficient(v, float(c))
    return constraint

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr
    CLP_LINEAR_PROGRAMMING = _pywraplp.Solver_CLP_LINEAR_PROGRAMMING
    CBC_MIXED_INTEGER_PROGRAMMING = _pywraplp.Solver_CBC_MIXED_INTEGER_PROGRAMMING
    def __init__(self, *args): 
        this = _pywraplp.new_Solver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pywraplp.delete_Solver
    __del__ = lambda self : None;
    def Name(self): return _pywraplp.Solver_Name(self)
    def ProblemType(self): return _pywraplp.Solver_ProblemType(self)
    def Clear(self): return _pywraplp.Solver_Clear(self)
    def NumVariables(self): return _pywraplp.Solver_NumVariables(self)
    def variables(self): return _pywraplp.Solver_variables(self)
    def LookupVariable(self, *args): return _pywraplp.Solver_LookupVariable(self, *args)
    def MakeVar(self, *args): return _pywraplp.Solver_MakeVar(self, *args)
    def NumVar(self, *args): return _pywraplp.Solver_NumVar(self, *args)
    def IntVar(self, *args): return _pywraplp.Solver_IntVar(self, *args)
    def BoolVar(self, *args): return _pywraplp.Solver_BoolVar(self, *args)
    def NumConstraints(self): return _pywraplp.Solver_NumConstraints(self)
    def constraints(self): return _pywraplp.Solver_constraints(self)
    def LookupConstraint(self, *args): return _pywraplp.Solver_LookupConstraint(self, *args)
    def Constraint(self, *args): return _pywraplp.Solver_Constraint(self, *args)
    def Objective(self): return _pywraplp.Solver_Objective(self)
    OPTIMAL = _pywraplp.Solver_OPTIMAL
    FEASIBLE = _pywraplp.Solver_FEASIBLE
    INFEASIBLE = _pywraplp.Solver_INFEASIBLE
    UNBOUNDED = _pywraplp.Solver_UNBOUNDED
    ABNORMAL = _pywraplp.Solver_ABNORMAL
    NOT_SOLVED = _pywraplp.Solver_NOT_SOLVED
    def Solve(self, *args): return _pywraplp.Solver_Solve(self, *args)
    def VerifySolution(self, *args): return _pywraplp.Solver_VerifySolution(self, *args)
    def Reset(self): return _pywraplp.Solver_Reset(self)
    NO_ERROR = _pywraplp.Solver_NO_ERROR
    DUPLICATE_VARIABLE_ID = _pywraplp.Solver_DUPLICATE_VARIABLE_ID
    UNKNOWN_VARIABLE_ID = _pywraplp.Solver_UNKNOWN_VARIABLE_ID
    def LoadModelFromProto(self, *args): return _pywraplp.Solver_LoadModelFromProto(self, *args)
    def FillSolutionResponseProto(self, *args): return _pywraplp.Solver_FillSolutionResponseProto(self, *args)
    __swig_getmethods__["SolveWithProto"] = lambda x: _pywraplp.Solver_SolveWithProto
    if _newclass:SolveWithProto = staticmethod(_pywraplp.Solver_SolveWithProto)
    def ExportModelToNewProto(self, *args): return _pywraplp.Solver_ExportModelToNewProto(self, *args)
    def LoadSolutionFromNewProto(self, *args): return _pywraplp.Solver_LoadSolutionFromNewProto(self, *args)
    def SetSolverSpecificParametersAsString(self, *args): return _pywraplp.Solver_SetSolverSpecificParametersAsString(self, *args)
    FREE = _pywraplp.Solver_FREE
    AT_LOWER_BOUND = _pywraplp.Solver_AT_LOWER_BOUND
    AT_UPPER_BOUND = _pywraplp.Solver_AT_UPPER_BOUND
    FIXED_VALUE = _pywraplp.Solver_FIXED_VALUE
    BASIC = _pywraplp.Solver_BASIC
    __swig_getmethods__["Infinity"] = lambda x: _pywraplp.Solver_Infinity
    if _newclass:Infinity = staticmethod(_pywraplp.Solver_Infinity)
    def SuppressOutput(self): return _pywraplp.Solver_SuppressOutput(self)
    def EnableOutput(self): return _pywraplp.Solver_EnableOutput(self)
    def SetTimeLimit(self, *args): return _pywraplp.Solver_SetTimeLimit(self, *args)
    def TimeLimit(self): return _pywraplp.Solver_TimeLimit(self)
    def time_limit_in_secs(self): return _pywraplp.Solver_time_limit_in_secs(self)
    def WallTime(self): return _pywraplp.Solver_WallTime(self)
    def Iterations(self): return _pywraplp.Solver_Iterations(self)
    def Nodes(self): return _pywraplp.Solver_Nodes(self)
    def var_and_constraint_names_allow_export(self): return _pywraplp.Solver_var_and_constraint_names_allow_export(self)
    def SolverVersion(self): return _pywraplp.Solver_SolverVersion(self)
    def ComputeExactConditionNumber(self): return _pywraplp.Solver_ComputeExactConditionNumber(self)
    def OwnsVariable(self, *args): return _pywraplp.Solver_OwnsVariable(self, *args)
    def ExportModelAsLpFormat(self, *args): return _pywraplp.Solver_ExportModelAsLpFormat(self, *args)
    def ExportModelAsMpsFormat(self, *args): return _pywraplp.Solver_ExportModelAsMpsFormat(self, *args)
    def IsConstant(self, expr):
      if sys.version_info[0] >= 3: # Python 3
        return  isinstance(expr, (int, float))
      else:
        return  isinstance(expr, (int, long, float))

    def Add(self, constraint, name=''):
      if isinstance(constraint, bool):
        if constraint:
          return self.RowConstraint(0, 0, name)
        else:
          return self.RowConstraint(1, 1, name)
      else:
        return constraint.Extract(self, name)

    def Sum(self, expr_array):
      result = SumArray(expr_array)
      return result


    def RowConstraint(self, *args):
      return self.Constraint(*args)

    def Minimize(self, expr):
      self.Objective().Clear()
      self.Objective().SetMinimization()
      coeffs = {}
      offset = expr.Visit(coeffs)
      self.Objective().SetOffset(offset)
      if sys.version_info[0] >= 3: # Python 3
        for v, c, in coeffs.items():
          self.Objective().SetCoefficient(v, float(c))
      else:
        for v, c, in coeffs.iteritems():
          self.Objective().SetCoefficient(v, float(c))

    def Maximize(self, expr):
      self.Objective().Clear()
      self.Objective().SetMaximization()
      coeffs = {}
      offset = expr.Visit(coeffs)
      self.Objective().SetOffset(offset)
      if sys.version_info[0] >= 3: # Python 3
        for v, c, in coeffs.items():
          self.Objective().SetCoefficient(v, float(c))
      else:
        for v, c, in coeffs.iteritems():
          self.Objective().SetCoefficient(v, float(c))

Solver_swigregister = _pywraplp.Solver_swigregister
Solver_swigregister(Solver)

def Solver_SolveWithProto(*args):
  return _pywraplp.Solver_SolveWithProto(*args)
Solver_SolveWithProto = _pywraplp.Solver_SolveWithProto

def Solver_Infinity():
  return _pywraplp.Solver_Infinity()
Solver_Infinity = _pywraplp.Solver_Infinity

class MPObjective(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPObjective, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Clear(self): return _pywraplp.MPObjective_Clear(self)
    def SetCoefficient(self, *args): return _pywraplp.MPObjective_SetCoefficient(self, *args)
    def GetCoefficient(self, *args): return _pywraplp.MPObjective_GetCoefficient(self, *args)
    def SetOffset(self, *args): return _pywraplp.MPObjective_SetOffset(self, *args)
    def Offset(self): return _pywraplp.MPObjective_Offset(self)
    def AddOffset(self, *args): return _pywraplp.MPObjective_AddOffset(self, *args)
    def SetOptimizationDirection(self, *args): return _pywraplp.MPObjective_SetOptimizationDirection(self, *args)
    def SetMinimization(self): return _pywraplp.MPObjective_SetMinimization(self)
    def SetMaximization(self): return _pywraplp.MPObjective_SetMaximization(self)
    def maximization(self): return _pywraplp.MPObjective_maximization(self)
    def minimization(self): return _pywraplp.MPObjective_minimization(self)
    def Value(self): return _pywraplp.MPObjective_Value(self)
    def BestBound(self): return _pywraplp.MPObjective_BestBound(self)
    __swig_destroy__ = _pywraplp.delete_MPObjective
    __del__ = lambda self : None;
MPObjective_swigregister = _pywraplp.MPObjective_swigregister
MPObjective_swigregister(MPObjective)

class Variable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    def name(self): return _pywraplp.Variable_name(self)
    def SetInteger(self, *args): return _pywraplp.Variable_SetInteger(self, *args)
    def Integer(self): return _pywraplp.Variable_Integer(self)
    def SolutionValue(self): return _pywraplp.Variable_SolutionValue(self)
    def Index(self): return _pywraplp.Variable_Index(self)
    def Lb(self): return _pywraplp.Variable_Lb(self)
    def Ub(self): return _pywraplp.Variable_Ub(self)
    def SetLb(self, *args): return _pywraplp.Variable_SetLb(self, *args)
    def SetUb(self, *args): return _pywraplp.Variable_SetUb(self, *args)
    def SetBounds(self, *args): return _pywraplp.Variable_SetBounds(self, *args)
    def unrounded_solution_value(self): return _pywraplp.Variable_unrounded_solution_value(self)
    def ReducedCost(self): return _pywraplp.Variable_ReducedCost(self)
    def BasisStatus(self): return _pywraplp.Variable_BasisStatus(self)
    def __str__(self): return _pywraplp.Variable___str__(self)
    def __repr__(self): return _pywraplp.Variable___repr__(self)
    def IsConstant(self, expr):
      if sys.version_info[0] >= 3: # Python 3
        return  isinstance(expr, (int, float))
      else:
        return  isinstance(expr, (int, long, float))

    __hash__ = object.__hash__

    def __add__(self, expr):
      if self.IsConstant(expr):
        return SumCst(self, expr)
      else:
        return Sum(self, expr)

    def __radd__(self, cst):
      if self.IsConstant(cst):
        return SumCst(self, cst)
      else:
        raise TypeError

    def __sub__(self, expr):
      if self.IsConstant(expr):
        return SumCst(self, -expr)
      else:
        return Sum(self, ProductCst(expr, -1))

    def __rsub__(self, cst):
      if self.IsConstant(cst):
        return SumCst(ProductCst(self, -1), cst)
      else:
        raise TypeError

    def __mul__(self, cst):
      if self.IsConstant(cst):
        return ProductCst(self, cst)
      else:
        raise TypeError

    def __rmul__(self, cst):
      if self.IsConstant(cst):
        return ProductCst(self, cst)
      else:
        raise TypeError

    def __div__(self, cst):
      if self.IsConstant(cst):
        if cst == 0.0:
          raise ZeroDivisionError
        else:
          return ProductCst(self, 1.0 / cst)
      else:
        raise TypeError

    def __truediv__(self, cst):
      if self.IsConstant(cst):
        if cst == 0.0:
          raise ZeroDivisionError
        else:
          return ProductCst(self, 1.0 / cst)
      else:
        raise TypeError

    def __neg__(self):
      return ProductCst(self, -1)

    def __eq__(self, arg):
      if self.IsConstant(arg):
        return LinearConstraint(self, arg, arg)
      else:
        return LinearConstraint(Sum(self, ProductCst(arg, -1)), 0.0, 0.0)

    def __ge__(self, arg):
      if self.IsConstant(arg):
        return LinearConstraint(self, arg, 1e308)
      else:
        return LinearConstraint(Sum(self, ProductCst(arg, -1)), 0.0, 1e308)

    def __le__(self, arg):
      if self.IsConstant(arg):
        return LinearConstraint(self, -1e308, arg)
      else:
        return LinearConstraint(Sum(self, ProductCst(arg, -1)), -1e308, 0.0)

    def Visit(self, coeffs):
      return self.DoVisit(coeffs, 1.0)

    def DoVisit(self, coeffs, multiplier):
      if self in coeffs:
        coeffs[self] += multiplier
      else:
        coeffs[self] = multiplier
      return 0.0

    __swig_destroy__ = _pywraplp.delete_Variable
    __del__ = lambda self : None;
Variable_swigregister = _pywraplp.Variable_swigregister
Variable_swigregister(Variable)

class Constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def name(self): return _pywraplp.Constraint_name(self)
    def Clear(self): return _pywraplp.Constraint_Clear(self)
    def SetCoefficient(self, *args): return _pywraplp.Constraint_SetCoefficient(self, *args)
    def GetCoefficient(self, *args): return _pywraplp.Constraint_GetCoefficient(self, *args)
    def Lb(self): return _pywraplp.Constraint_Lb(self)
    def Ub(self): return _pywraplp.Constraint_Ub(self)
    def SetLb(self, *args): return _pywraplp.Constraint_SetLb(self, *args)
    def SetUb(self, *args): return _pywraplp.Constraint_SetUb(self, *args)
    def SetBounds(self, *args): return _pywraplp.Constraint_SetBounds(self, *args)
    def is_lazy(self): return _pywraplp.Constraint_is_lazy(self)
    def set_is_lazy(self, *args): return _pywraplp.Constraint_set_is_lazy(self, *args)
    def Activity(self): return _pywraplp.Constraint_Activity(self)
    def Index(self): return _pywraplp.Constraint_Index(self)
    def DualValue(self): return _pywraplp.Constraint_DualValue(self)
    def BasisStatus(self): return _pywraplp.Constraint_BasisStatus(self)
    __swig_destroy__ = _pywraplp.delete_Constraint
    __del__ = lambda self : None;
Constraint_swigregister = _pywraplp.Constraint_swigregister
Constraint_swigregister(Constraint)

class MPSolverParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPSolverParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPSolverParameters, name)
    __repr__ = _swig_repr
    RELATIVE_MIP_GAP = _pywraplp.MPSolverParameters_RELATIVE_MIP_GAP
    PRIMAL_TOLERANCE = _pywraplp.MPSolverParameters_PRIMAL_TOLERANCE
    DUAL_TOLERANCE = _pywraplp.MPSolverParameters_DUAL_TOLERANCE
    PRESOLVE = _pywraplp.MPSolverParameters_PRESOLVE
    LP_ALGORITHM = _pywraplp.MPSolverParameters_LP_ALGORITHM
    INCREMENTALITY = _pywraplp.MPSolverParameters_INCREMENTALITY
    SCALING = _pywraplp.MPSolverParameters_SCALING
    PRESOLVE_OFF = _pywraplp.MPSolverParameters_PRESOLVE_OFF
    PRESOLVE_ON = _pywraplp.MPSolverParameters_PRESOLVE_ON
    DUAL = _pywraplp.MPSolverParameters_DUAL
    PRIMAL = _pywraplp.MPSolverParameters_PRIMAL
    BARRIER = _pywraplp.MPSolverParameters_BARRIER
    INCREMENTALITY_OFF = _pywraplp.MPSolverParameters_INCREMENTALITY_OFF
    INCREMENTALITY_ON = _pywraplp.MPSolverParameters_INCREMENTALITY_ON
    SCALING_OFF = _pywraplp.MPSolverParameters_SCALING_OFF
    SCALING_ON = _pywraplp.MPSolverParameters_SCALING_ON
    def __init__(self): 
        this = _pywraplp.new_MPSolverParameters()
        try: self.this.append(this)
        except: self.this = this
    def SetDoubleParam(self, *args): return _pywraplp.MPSolverParameters_SetDoubleParam(self, *args)
    def SetIntegerParam(self, *args): return _pywraplp.MPSolverParameters_SetIntegerParam(self, *args)
    def ResetDoubleParam(self, *args): return _pywraplp.MPSolverParameters_ResetDoubleParam(self, *args)
    def ResetIntegerParam(self, *args): return _pywraplp.MPSolverParameters_ResetIntegerParam(self, *args)
    def Reset(self): return _pywraplp.MPSolverParameters_Reset(self)
    def GetDoubleParam(self, *args): return _pywraplp.MPSolverParameters_GetDoubleParam(self, *args)
    def GetIntegerParam(self, *args): return _pywraplp.MPSolverParameters_GetIntegerParam(self, *args)
    __swig_destroy__ = _pywraplp.delete_MPSolverParameters
    __del__ = lambda self : None;
MPSolverParameters_swigregister = _pywraplp.MPSolverParameters_swigregister
MPSolverParameters_swigregister(MPSolverParameters)
cvar = _pywraplp.cvar
MPSolverParameters.kDefaultDoubleParamValue = _pywraplp.cvar.MPSolverParameters_kDefaultDoubleParamValue
MPSolverParameters.kDefaultIntegerParamValue = _pywraplp.cvar.MPSolverParameters_kDefaultIntegerParamValue
MPSolverParameters.kUnknownDoubleParamValue = _pywraplp.cvar.MPSolverParameters_kUnknownDoubleParamValue
MPSolverParameters.kUnknownIntegerParamValue = _pywraplp.cvar.MPSolverParameters_kUnknownIntegerParamValue
MPSolverParameters.kDefaultRelativeMipGap = _pywraplp.cvar.MPSolverParameters_kDefaultRelativeMipGap
MPSolverParameters.kDefaultPrimalTolerance = _pywraplp.cvar.MPSolverParameters_kDefaultPrimalTolerance
MPSolverParameters.kDefaultDualTolerance = _pywraplp.cvar.MPSolverParameters_kDefaultDualTolerance
MPSolverParameters.kDefaultPresolve = _pywraplp.cvar.MPSolverParameters_kDefaultPresolve
MPSolverParameters.kDefaultIncrementality = _pywraplp.cvar.MPSolverParameters_kDefaultIncrementality

class MPSolverInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPSolverInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPSolverInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MUST_RELOAD = _pywraplp.MPSolverInterface_MUST_RELOAD
    MODEL_SYNCHRONIZED = _pywraplp.MPSolverInterface_MODEL_SYNCHRONIZED
    SOLUTION_SYNCHRONIZED = _pywraplp.MPSolverInterface_SOLUTION_SYNCHRONIZED
    kUnknownNumberOfIterations = _pywraplp.MPSolverInterface_kUnknownNumberOfIterations
    kUnknownNumberOfNodes = _pywraplp.MPSolverInterface_kUnknownNumberOfNodes
    kNoIndex = _pywraplp.MPSolverInterface_kNoIndex
    __swig_destroy__ = _pywraplp.delete_MPSolverInterface
    __del__ = lambda self : None;
    def Solve(self, *args): return _pywraplp.MPSolverInterface_Solve(self, *args)
    def Reset(self): return _pywraplp.MPSolverInterface_Reset(self)
    def SetOptimizationDirection(self, *args): return _pywraplp.MPSolverInterface_SetOptimizationDirection(self, *args)
    def SetVariableBounds(self, *args): return _pywraplp.MPSolverInterface_SetVariableBounds(self, *args)
    def SetVariableInteger(self, *args): return _pywraplp.MPSolverInterface_SetVariableInteger(self, *args)
    def SetConstraintBounds(self, *args): return _pywraplp.MPSolverInterface_SetConstraintBounds(self, *args)
    def AddRowConstraint(self, *args): return _pywraplp.MPSolverInterface_AddRowConstraint(self, *args)
    def AddVariable(self, *args): return _pywraplp.MPSolverInterface_AddVariable(self, *args)
    def SetCoefficient(self, *args): return _pywraplp.MPSolverInterface_SetCoefficient(self, *args)
    def ClearConstraint(self, *args): return _pywraplp.MPSolverInterface_ClearConstraint(self, *args)
    def SetObjectiveCoefficient(self, *args): return _pywraplp.MPSolverInterface_SetObjectiveCoefficient(self, *args)
    def SetObjectiveOffset(self, *args): return _pywraplp.MPSolverInterface_SetObjectiveOffset(self, *args)
    def ClearObjective(self): return _pywraplp.MPSolverInterface_ClearObjective(self)
    def Iterations(self): return _pywraplp.MPSolverInterface_Iterations(self)
    def Nodes(self): return _pywraplp.MPSolverInterface_Nodes(self)
    def BestObjectiveBound(self): return _pywraplp.MPSolverInterface_BestObjectiveBound(self)
    def trivial_worst_objective_bound(self): return _pywraplp.MPSolverInterface_trivial_worst_objective_bound(self)
    def objective_value(self): return _pywraplp.MPSolverInterface_objective_value(self)
    def row_status(self, *args): return _pywraplp.MPSolverInterface_row_status(self, *args)
    def column_status(self, *args): return _pywraplp.MPSolverInterface_column_status(self, *args)
    def CheckSolutionIsSynchronized(self): return _pywraplp.MPSolverInterface_CheckSolutionIsSynchronized(self)
    def CheckSolutionExists(self): return _pywraplp.MPSolverInterface_CheckSolutionExists(self)
    def CheckSolutionIsSynchronizedAndExists(self): return _pywraplp.MPSolverInterface_CheckSolutionIsSynchronizedAndExists(self)
    def CheckBestObjectiveBoundExists(self): return _pywraplp.MPSolverInterface_CheckBestObjectiveBoundExists(self)
    def IsContinuous(self): return _pywraplp.MPSolverInterface_IsContinuous(self)
    def IsLP(self): return _pywraplp.MPSolverInterface_IsLP(self)
    def IsMIP(self): return _pywraplp.MPSolverInterface_IsMIP(self)
    def last_variable_index(self): return _pywraplp.MPSolverInterface_last_variable_index(self)
    def quiet(self): return _pywraplp.MPSolverInterface_quiet(self)
    def set_quiet(self, *args): return _pywraplp.MPSolverInterface_set_quiet(self, *args)
    def result_status(self): return _pywraplp.MPSolverInterface_result_status(self)
    def SolverVersion(self): return _pywraplp.MPSolverInterface_SolverVersion(self)
    def ComputeExactConditionNumber(self): return _pywraplp.MPSolverInterface_ComputeExactConditionNumber(self)
MPSolverInterface_swigregister = _pywraplp.MPSolverInterface_swigregister
MPSolverInterface_swigregister(MPSolverInterface)

# This file is compatible with both classic and new-style classes.


