#ifndef _INC_DATAVIEW_H
#define _INC_DATAVIEW_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccSint asn1SccT_INTEGER;

#define asn1SccT_INTEGER_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_INTEGER_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_INTEGER_REQUIRED_BYTES_FOR_ACN_ENCODING   8 
#define asn1SccT_INTEGER_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_INTEGER_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccT_INTEGER_Initialize(asn1SccT_INTEGER* pVal);
flag asn1SccT_INTEGER_IsConstraintValid(const asn1SccT_INTEGER* val, int* pErrCode);
flag asn1SccT_INTEGER_Equal(const asn1SccT_INTEGER* val1, const asn1SccT_INTEGER* val2);

#ifndef ERR_asn1SccT_INTEGER 
#define ERR_asn1SccT_INTEGER		1001  /*(0 .. 255)*/
#endif

typedef struct {
    enum {
        T_SEQ_howareyou_NONE,
        choice_A_PRESENT,
        choice_B_PRESENT 
    } kind;
    union {
        asn1SccT_INTEGER choice_A;
        asn1SccT_INTEGER choice_B;
    } u; 
} asn1SccT_SEQ_howareyou;

#define asn1SccT_SEQ_howareyou_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_SEQ_howareyou_REQUIRED_BITS_FOR_ENCODING        10
#define asn1SccT_SEQ_howareyou_REQUIRED_BYTES_FOR_ACN_ENCODING   10 
#define asn1SccT_SEQ_howareyou_REQUIRED_BITS_FOR_ACN_ENCODING    10
#define asn1SccT_SEQ_howareyou_REQUIRED_BYTES_FOR_XER_ENCODING   76

void asn1SccT_SEQ_howareyou_Initialize(asn1SccT_SEQ_howareyou* pVal);
flag asn1SccT_SEQ_howareyou_IsConstraintValid(const asn1SccT_SEQ_howareyou* val, int* pErrCode);
flag asn1SccT_SEQ_howareyou_Equal(const asn1SccT_SEQ_howareyou* val1, const asn1SccT_SEQ_howareyou* val2);

#ifndef ERR_asn1SccT_SEQ_howareyou_unknown_choice_index 
#define ERR_asn1SccT_SEQ_howareyou_unknown_choice_index		1002  /**/
#endif

typedef enum {
    asn1Scchop = 0,
    asn1Scchips = 1
} asn1SccT_SEQ_world;

#define asn1SccT_SEQ_world_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_SEQ_world_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_SEQ_world_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_SEQ_world_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_SEQ_world_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_SEQ_world_Initialize(asn1SccT_SEQ_world* pVal);
flag asn1SccT_SEQ_world_IsConstraintValid(const asn1SccT_SEQ_world* val, int* pErrCode);
flag asn1SccT_SEQ_world_Equal(const asn1SccT_SEQ_world* val1, const asn1SccT_SEQ_world* val2);

#ifndef ERR_asn1SccT_SEQ_world_unknown_enumeration_value 
#define ERR_asn1SccT_SEQ_world_unknown_enumeration_value		1003  /**/
#endif

typedef asn1SccSint asn1SccT_SEQ_hello;

#define asn1SccT_SEQ_hello_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_SEQ_hello_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccT_SEQ_hello_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_SEQ_hello_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccT_SEQ_hello_REQUIRED_BYTES_FOR_XER_ENCODING   47

void asn1SccT_SEQ_hello_Initialize(asn1SccT_SEQ_hello* pVal);
flag asn1SccT_SEQ_hello_IsConstraintValid(const asn1SccT_SEQ_hello* val, int* pErrCode);
flag asn1SccT_SEQ_hello_Equal(const asn1SccT_SEQ_hello* val1, const asn1SccT_SEQ_hello* val2);

#ifndef ERR_asn1SccT_SEQ_hello 
#define ERR_asn1SccT_SEQ_hello		1004  /*(0 .. 10)*/
#endif

typedef struct {
    asn1SccT_SEQ_hello hello;
    asn1SccT_SEQ_world world;
    asn1SccT_SEQ_howareyou howareyou;
} asn1SccT_SEQ;

#define asn1SccT_SEQ_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_SEQ_REQUIRED_BITS_FOR_ENCODING        15
#define asn1SccT_SEQ_REQUIRED_BYTES_FOR_ACN_ENCODING   15 
#define asn1SccT_SEQ_REQUIRED_BITS_FOR_ACN_ENCODING    15
#define asn1SccT_SEQ_REQUIRED_BYTES_FOR_XER_ENCODING   138

void asn1SccT_SEQ_Initialize(asn1SccT_SEQ* pVal);
flag asn1SccT_SEQ_IsConstraintValid(const asn1SccT_SEQ* val, int* pErrCode);
flag asn1SccT_SEQ_Equal(const asn1SccT_SEQ* val1, const asn1SccT_SEQ* val2);



typedef struct {    
    flag arr[3];
} asn1SccT_POS_y_b;

#define asn1SccT_POS_y_b_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_POS_y_b_REQUIRED_BITS_FOR_ENCODING        3
#define asn1SccT_POS_y_b_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define asn1SccT_POS_y_b_REQUIRED_BITS_FOR_ACN_ENCODING    3
#define asn1SccT_POS_y_b_REQUIRED_BYTES_FOR_XER_ENCODING   77

void asn1SccT_POS_y_b_Initialize(asn1SccT_POS_y_b* pVal);
flag asn1SccT_POS_y_b_IsConstraintValid(const asn1SccT_POS_y_b* val, int* pErrCode);
flag asn1SccT_POS_y_b_Equal(const asn1SccT_POS_y_b* val1, const asn1SccT_POS_y_b* val2);

#ifndef ERR_asn1SccT_POS_y_b 
#define ERR_asn1SccT_POS_y_b		1005  /*(SIZE(3))*/
#endif

typedef struct {
    flag a;
    asn1SccT_POS_y_b b;
} asn1SccT_POS_y;

#define asn1SccT_POS_y_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_POS_y_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccT_POS_y_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_POS_y_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccT_POS_y_REQUIRED_BYTES_FOR_XER_ENCODING   100

void asn1SccT_POS_y_Initialize(asn1SccT_POS_y* pVal);
flag asn1SccT_POS_y_IsConstraintValid(const asn1SccT_POS_y* val, int* pErrCode);
flag asn1SccT_POS_y_Equal(const asn1SccT_POS_y* val1, const asn1SccT_POS_y* val2);



typedef struct {
    asn1SccT_INTEGER x;
    asn1SccT_POS_y y;
    asn1SccT_SEQ z;
} asn1SccT_POS;

#define asn1SccT_POS_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_POS_REQUIRED_BITS_FOR_ENCODING        27
#define asn1SccT_POS_REQUIRED_BYTES_FOR_ACN_ENCODING   27 
#define asn1SccT_POS_REQUIRED_BITS_FOR_ACN_ENCODING    27
#define asn1SccT_POS_REQUIRED_BYTES_FOR_XER_ENCODING   260

void asn1SccT_POS_Initialize(asn1SccT_POS* pVal);
flag asn1SccT_POS_IsConstraintValid(const asn1SccT_POS* val, int* pErrCode);
flag asn1SccT_POS_Equal(const asn1SccT_POS* val1, const asn1SccT_POS* val2);



extern asn1SccT_SEQ myVar; 


#ifdef  __cplusplus
}
#define ENUM_asn1Scchop	asn1Scchop
#define ENUM_asn1Scchips	asn1Scchips
#define CHOICE_choice_A_PRESENT	asn1SccT_SEQ_howareyou::choice_A_PRESENT
#define CHOICE_choice_B_PRESENT	asn1SccT_SEQ_howareyou::choice_B_PRESENT

#endif

#endif
