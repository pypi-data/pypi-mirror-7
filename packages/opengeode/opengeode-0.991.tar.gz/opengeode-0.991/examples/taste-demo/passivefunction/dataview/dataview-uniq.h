#ifndef _INC_DATAVIEW_UNIQ_H
#define _INC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccSint asn1SccMyInteger;

#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_XER_ENCODING   43

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* val, int* pErrCode);
flag asn1SccMyInteger_Encode(const asn1SccMyInteger* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyInteger 
#define ERR_asn1SccMyInteger		1001  /*(0 .. 255)*/
#endif

typedef double asn1SccMyReal;

#define asn1SccMyReal_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccMyReal_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccMyReal_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccMyReal_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccMyReal_REQUIRED_BYTES_FOR_XER_ENCODING   67

void asn1SccMyReal_Initialize(asn1SccMyReal* pVal);
flag asn1SccMyReal_IsConstraintValid(const asn1SccMyReal* val, int* pErrCode);
flag asn1SccMyReal_Encode(const asn1SccMyReal* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyReal_Decode(asn1SccMyReal* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyReal 
#define ERR_asn1SccMyReal		1002  /*(0.000000E+000 .. 1.000000E+003)*/
#endif

typedef enum {
    asn1Scchello = 0,
    asn1Sccworld = 1,
    asn1Scchowareyou = 2
} asn1SccMyEnum;

#define asn1SccMyEnum_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyEnum_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccMyEnum_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyEnum_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccMyEnum_REQUIRED_BYTES_FOR_XER_ENCODING   30

void asn1SccMyEnum_Initialize(asn1SccMyEnum* pVal);
flag asn1SccMyEnum_IsConstraintValid(const asn1SccMyEnum* val, int* pErrCode);
flag asn1SccMyEnum_Encode(const asn1SccMyEnum* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyEnum_Decode(asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyEnum_unknown_enumeration_value 
#define ERR_asn1SccMyEnum_unknown_enumeration_value		1003  /**/
#endif

typedef struct {    
    asn1SccMyEnum arr[2];
} asn1SccMySeqOf;

#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMySeqOf_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMySeqOf_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccMySeqOf_REQUIRED_BYTES_FOR_XER_ENCODING   55

void asn1SccMySeqOf_Initialize(asn1SccMySeqOf* pVal);
flag asn1SccMySeqOf_IsConstraintValid(const asn1SccMySeqOf* val, int* pErrCode);
flag asn1SccMySeqOf_Encode(const asn1SccMySeqOf* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeqOf_Decode(asn1SccMySeqOf* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMySeqOf 
#define ERR_asn1SccMySeqOf		1004  /*(SIZE(2))*/
#endif

typedef struct {
    asn1SccMySeqOf seqof;
} asn1SccMyRefSeqOf;

#define asn1SccMyRefSeqOf_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyRefSeqOf_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccMyRefSeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyRefSeqOf_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccMyRefSeqOf_REQUIRED_BYTES_FOR_XER_ENCODING   76

void asn1SccMyRefSeqOf_Initialize(asn1SccMyRefSeqOf* pVal);
flag asn1SccMyRefSeqOf_IsConstraintValid(const asn1SccMyRefSeqOf* val, int* pErrCode);
flag asn1SccMyRefSeqOf_Encode(const asn1SccMyRefSeqOf* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyRefSeqOf_Decode(asn1SccMyRefSeqOf* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {    
    byte arr[3];
} asn1SccMyOctStr;

#define asn1SccMyOctStr_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccMyOctStr_REQUIRED_BITS_FOR_ENCODING        24
#define asn1SccMyOctStr_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define asn1SccMyOctStr_REQUIRED_BITS_FOR_ACN_ENCODING    24
#define asn1SccMyOctStr_REQUIRED_BYTES_FOR_XER_ENCODING   27

void asn1SccMyOctStr_Initialize(asn1SccMyOctStr* pVal);
flag asn1SccMyOctStr_IsConstraintValid(const asn1SccMyOctStr* val, int* pErrCode);
flag asn1SccMyOctStr_Encode(const asn1SccMyOctStr* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyOctStr_Decode(asn1SccMyOctStr* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyOctStr 
#define ERR_asn1SccMyOctStr		1005  /*(SIZE(3))*/
#endif

typedef struct {    long nCount; 
    
    flag arr[2];
} asn1SccMySeqWithEmbeddedSeqOf_a;

#define asn1SccMySeqWithEmbeddedSeqOf_a_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMySeqWithEmbeddedSeqOf_a_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccMySeqWithEmbeddedSeqOf_a_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMySeqWithEmbeddedSeqOf_a_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccMySeqWithEmbeddedSeqOf_a_REQUIRED_BYTES_FOR_XER_ENCODING   89

void asn1SccMySeqWithEmbeddedSeqOf_a_Initialize(asn1SccMySeqWithEmbeddedSeqOf_a* pVal);
flag asn1SccMySeqWithEmbeddedSeqOf_a_IsConstraintValid(const asn1SccMySeqWithEmbeddedSeqOf_a* val, int* pErrCode);
flag asn1SccMySeqWithEmbeddedSeqOf_a_Encode(const asn1SccMySeqWithEmbeddedSeqOf_a* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeqWithEmbeddedSeqOf_a_Decode(asn1SccMySeqWithEmbeddedSeqOf_a* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMySeqWithEmbeddedSeqOf_a 
#define ERR_asn1SccMySeqWithEmbeddedSeqOf_a		1006  /*(SIZE(0 .. 2))*/
#endif

typedef struct {
    asn1SccMySeqWithEmbeddedSeqOf_a a;
} asn1SccMySeqWithEmbeddedSeqOf;

#define asn1SccMySeqWithEmbeddedSeqOf_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMySeqWithEmbeddedSeqOf_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccMySeqWithEmbeddedSeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMySeqWithEmbeddedSeqOf_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccMySeqWithEmbeddedSeqOf_REQUIRED_BYTES_FOR_XER_ENCODING   92

void asn1SccMySeqWithEmbeddedSeqOf_Initialize(asn1SccMySeqWithEmbeddedSeqOf* pVal);
flag asn1SccMySeqWithEmbeddedSeqOf_IsConstraintValid(const asn1SccMySeqWithEmbeddedSeqOf* val, int* pErrCode);
flag asn1SccMySeqWithEmbeddedSeqOf_Encode(const asn1SccMySeqWithEmbeddedSeqOf* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeqWithEmbeddedSeqOf_Decode(asn1SccMySeqWithEmbeddedSeqOf* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint asn1SccMyPossiblyEmptySeqOf_elm;

#define asn1SccMyPossiblyEmptySeqOf_elm_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyPossiblyEmptySeqOf_elm_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccMyPossiblyEmptySeqOf_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyPossiblyEmptySeqOf_elm_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccMyPossiblyEmptySeqOf_elm_REQUIRED_BYTES_FOR_XER_ENCODING   73

void asn1SccMyPossiblyEmptySeqOf_elm_Initialize(asn1SccMyPossiblyEmptySeqOf_elm* pVal);
flag asn1SccMyPossiblyEmptySeqOf_elm_IsConstraintValid(const asn1SccMyPossiblyEmptySeqOf_elm* val, int* pErrCode);
flag asn1SccMyPossiblyEmptySeqOf_elm_Encode(const asn1SccMyPossiblyEmptySeqOf_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyPossiblyEmptySeqOf_elm_Decode(asn1SccMyPossiblyEmptySeqOf_elm* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyPossiblyEmptySeqOf_elm 
#define ERR_asn1SccMyPossiblyEmptySeqOf_elm		1007  /*(1 .. 2)*/
#endif

typedef struct {    long nCount; 
    
    asn1SccMyPossiblyEmptySeqOf_elm arr[2];
} asn1SccMyPossiblyEmptySeqOf;

#define asn1SccMyPossiblyEmptySeqOf_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyPossiblyEmptySeqOf_REQUIRED_BITS_FOR_ENCODING        4
#define asn1SccMyPossiblyEmptySeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyPossiblyEmptySeqOf_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define asn1SccMyPossiblyEmptySeqOf_REQUIRED_BYTES_FOR_XER_ENCODING   123

void asn1SccMyPossiblyEmptySeqOf_Initialize(asn1SccMyPossiblyEmptySeqOf* pVal);
flag asn1SccMyPossiblyEmptySeqOf_IsConstraintValid(const asn1SccMyPossiblyEmptySeqOf* val, int* pErrCode);
flag asn1SccMyPossiblyEmptySeqOf_Encode(const asn1SccMyPossiblyEmptySeqOf* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyPossiblyEmptySeqOf_Decode(asn1SccMyPossiblyEmptySeqOf* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyPossiblyEmptySeqOf 
#define ERR_asn1SccMyPossiblyEmptySeqOf		1008  /*(SIZE(0 .. 2))*/
#endif

typedef enum {
    asn1Scctaste = 1,
    asn1Sccwelcomes = 2,
    asn1Sccyou = 3
} asn1SccMySeq_b;

#define asn1SccMySeq_b_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMySeq_b_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccMySeq_b_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMySeq_b_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccMySeq_b_REQUIRED_BYTES_FOR_XER_ENCODING   28

void asn1SccMySeq_b_Initialize(asn1SccMySeq_b* pVal);
flag asn1SccMySeq_b_IsConstraintValid(const asn1SccMySeq_b* val, int* pErrCode);
flag asn1SccMySeq_b_Encode(const asn1SccMySeq_b* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeq_b_Decode(asn1SccMySeq_b* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMySeq_b_unknown_enumeration_value 
#define ERR_asn1SccMySeq_b_unknown_enumeration_value		1009  /**/
#endif

typedef struct {
    asn1SccMyInteger a;
    asn1SccMySeq_b b;
} asn1SccMySeq;

#define asn1SccMySeq_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMySeq_REQUIRED_BITS_FOR_ENCODING        10
#define asn1SccMySeq_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccMySeq_REQUIRED_BITS_FOR_ACN_ENCODING    10
#define asn1SccMySeq_REQUIRED_BYTES_FOR_XER_ENCODING   58

void asn1SccMySeq_Initialize(asn1SccMySeq* pVal);
flag asn1SccMySeq_IsConstraintValid(const asn1SccMySeq* val, int* pErrCode);
flag asn1SccMySeq_Encode(const asn1SccMySeq* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMySeq_Decode(asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    enum {
        MyChoice_NONE,
        MyChoice_a_PRESENT,
        b_PRESENT 
    } kind;
    union {
        flag a;
        asn1SccMySeq b;
    } u; 
} asn1SccMyChoice;

#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ENCODING        12
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccMyChoice_REQUIRED_BITS_FOR_ACN_ENCODING    12
#define asn1SccMyChoice_REQUIRED_BYTES_FOR_XER_ENCODING   71

void asn1SccMyChoice_Initialize(asn1SccMyChoice* pVal);
flag asn1SccMyChoice_IsConstraintValid(const asn1SccMyChoice* val, int* pErrCode);
flag asn1SccMyChoice_Encode(const asn1SccMyChoice* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyChoice_Decode(asn1SccMyChoice* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyChoice_unknown_choice_index 
#define ERR_asn1SccMyChoice_unknown_choice_index		1010  /**/
#endif

typedef asn1SccSint asn1SccMyComplexType_a_x;

#define asn1SccMyComplexType_a_x_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyComplexType_a_x_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyComplexType_a_x_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyComplexType_a_x_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyComplexType_a_x_REQUIRED_BYTES_FOR_XER_ENCODING   59

void asn1SccMyComplexType_a_x_Initialize(asn1SccMyComplexType_a_x* pVal);
flag asn1SccMyComplexType_a_x_IsConstraintValid(const asn1SccMyComplexType_a_x* val, int* pErrCode);
flag asn1SccMyComplexType_a_x_Encode(const asn1SccMyComplexType_a_x* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexType_a_x_Decode(asn1SccMyComplexType_a_x* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyComplexType_a_x 
#define ERR_asn1SccMyComplexType_a_x		1011  /*(0 .. 255)*/
#endif

typedef struct {
    asn1SccMyComplexType_a_x x;
    asn1SccMyInteger y;
} asn1SccMyComplexType_a;

#define asn1SccMyComplexType_a_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMyComplexType_a_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccMyComplexType_a_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccMyComplexType_a_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccMyComplexType_a_REQUIRED_BYTES_FOR_XER_ENCODING   89

void asn1SccMyComplexType_a_Initialize(asn1SccMyComplexType_a* pVal);
flag asn1SccMyComplexType_a_IsConstraintValid(const asn1SccMyComplexType_a* val, int* pErrCode);
flag asn1SccMyComplexType_a_Encode(const asn1SccMyComplexType_a* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexType_a_Decode(asn1SccMyComplexType_a* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1SccMyComplexType_a a;
} asn1SccMyComplexType;

#define asn1SccMyComplexType_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMyComplexType_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccMyComplexType_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccMyComplexType_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccMyComplexType_REQUIRED_BYTES_FOR_XER_ENCODING   92

void asn1SccMyComplexType_Initialize(asn1SccMyComplexType* pVal);
flag asn1SccMyComplexType_IsConstraintValid(const asn1SccMyComplexType* val, int* pErrCode);
flag asn1SccMyComplexType_Encode(const asn1SccMyComplexType* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexType_Decode(asn1SccMyComplexType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint asn1SccMyComplexSeqOf_elm_x;

#define asn1SccMyComplexSeqOf_elm_x_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyComplexSeqOf_elm_x_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyComplexSeqOf_elm_x_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyComplexSeqOf_elm_x_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyComplexSeqOf_elm_x_REQUIRED_BYTES_FOR_XER_ENCODING   65

void asn1SccMyComplexSeqOf_elm_x_Initialize(asn1SccMyComplexSeqOf_elm_x* pVal);
flag asn1SccMyComplexSeqOf_elm_x_IsConstraintValid(const asn1SccMyComplexSeqOf_elm_x* val, int* pErrCode);
flag asn1SccMyComplexSeqOf_elm_x_Encode(const asn1SccMyComplexSeqOf_elm_x* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexSeqOf_elm_x_Decode(asn1SccMyComplexSeqOf_elm_x* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyComplexSeqOf_elm_x 
#define ERR_asn1SccMyComplexSeqOf_elm_x		1012  /*(0 .. 255)*/
#endif

typedef struct {
    asn1SccMyComplexSeqOf_elm_x x;
} asn1SccMyComplexSeqOf_elm;

#define asn1SccMyComplexSeqOf_elm_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyComplexSeqOf_elm_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyComplexSeqOf_elm_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyComplexSeqOf_elm_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyComplexSeqOf_elm_REQUIRED_BYTES_FOR_XER_ENCODING   68

void asn1SccMyComplexSeqOf_elm_Initialize(asn1SccMyComplexSeqOf_elm* pVal);
flag asn1SccMyComplexSeqOf_elm_IsConstraintValid(const asn1SccMyComplexSeqOf_elm* val, int* pErrCode);
flag asn1SccMyComplexSeqOf_elm_Encode(const asn1SccMyComplexSeqOf_elm* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexSeqOf_elm_Decode(asn1SccMyComplexSeqOf_elm* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {    
    asn1SccMyComplexSeqOf_elm arr[2];
} asn1SccMyComplexSeqOf;

#define asn1SccMyComplexSeqOf_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMyComplexSeqOf_REQUIRED_BITS_FOR_ENCODING        16
#define asn1SccMyComplexSeqOf_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccMyComplexSeqOf_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define asn1SccMyComplexSeqOf_REQUIRED_BYTES_FOR_XER_ENCODING   129

void asn1SccMyComplexSeqOf_Initialize(asn1SccMyComplexSeqOf* pVal);
flag asn1SccMyComplexSeqOf_IsConstraintValid(const asn1SccMyComplexSeqOf* val, int* pErrCode);
flag asn1SccMyComplexSeqOf_Encode(const asn1SccMyComplexSeqOf* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexSeqOf_Decode(asn1SccMyComplexSeqOf* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyComplexSeqOf 
#define ERR_asn1SccMyComplexSeqOf		1013  /*(SIZE(2))*/
#endif

typedef asn1SccSint asn1SccMyComplexChoice_a_x;

#define asn1SccMyComplexChoice_a_x_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyComplexChoice_a_x_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyComplexChoice_a_x_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyComplexChoice_a_x_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyComplexChoice_a_x_REQUIRED_BYTES_FOR_XER_ENCODING   63

void asn1SccMyComplexChoice_a_x_Initialize(asn1SccMyComplexChoice_a_x* pVal);
flag asn1SccMyComplexChoice_a_x_IsConstraintValid(const asn1SccMyComplexChoice_a_x* val, int* pErrCode);
flag asn1SccMyComplexChoice_a_x_Encode(const asn1SccMyComplexChoice_a_x* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexChoice_a_x_Decode(asn1SccMyComplexChoice_a_x* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyComplexChoice_a_x 
#define ERR_asn1SccMyComplexChoice_a_x		1014  /*(0 .. 255)*/
#endif

typedef struct {
    asn1SccMyComplexChoice_a_x x;
} asn1SccMyComplexChoice_a;

#define asn1SccMyComplexChoice_a_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccMyComplexChoice_a_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccMyComplexChoice_a_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccMyComplexChoice_a_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccMyComplexChoice_a_REQUIRED_BYTES_FOR_XER_ENCODING   66

void asn1SccMyComplexChoice_a_Initialize(asn1SccMyComplexChoice_a* pVal);
flag asn1SccMyComplexChoice_a_IsConstraintValid(const asn1SccMyComplexChoice_a* val, int* pErrCode);
flag asn1SccMyComplexChoice_a_Encode(const asn1SccMyComplexChoice_a* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexChoice_a_Decode(asn1SccMyComplexChoice_a* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    enum {
        MyComplexChoice_NONE,
        MyComplexChoice_a_PRESENT 
    } kind;
    union {
        asn1SccMyComplexChoice_a a;
    } u; 
} asn1SccMyComplexChoice;

#define asn1SccMyComplexChoice_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMyComplexChoice_REQUIRED_BITS_FOR_ENCODING        9
#define asn1SccMyComplexChoice_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccMyComplexChoice_REQUIRED_BITS_FOR_ACN_ENCODING    9
#define asn1SccMyComplexChoice_REQUIRED_BYTES_FOR_XER_ENCODING   69

void asn1SccMyComplexChoice_Initialize(asn1SccMyComplexChoice* pVal);
flag asn1SccMyComplexChoice_IsConstraintValid(const asn1SccMyComplexChoice* val, int* pErrCode);
flag asn1SccMyComplexChoice_Encode(const asn1SccMyComplexChoice* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccMyComplexChoice_Decode(asn1SccMyComplexChoice* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccMyComplexChoice_unknown_choice_index 
#define ERR_asn1SccMyComplexChoice_unknown_choice_index		1015  /**/
#endif

typedef struct {
    enum {
        DeepSeq_a_b_d_NONE,
        e_PRESENT 
    } kind;
    union {
        flag e;
    } u; 
} asn1SccDeepSeq_a_b_d;

#define asn1SccDeepSeq_a_b_d_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccDeepSeq_a_b_d_REQUIRED_BITS_FOR_ENCODING        2
#define asn1SccDeepSeq_a_b_d_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccDeepSeq_a_b_d_REQUIRED_BITS_FOR_ACN_ENCODING    2
#define asn1SccDeepSeq_a_b_d_REQUIRED_BYTES_FOR_XER_ENCODING   51

void asn1SccDeepSeq_a_b_d_Initialize(asn1SccDeepSeq_a_b_d* pVal);
flag asn1SccDeepSeq_a_b_d_IsConstraintValid(const asn1SccDeepSeq_a_b_d* val, int* pErrCode);
flag asn1SccDeepSeq_a_b_d_Encode(const asn1SccDeepSeq_a_b_d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDeepSeq_a_b_d_Decode(asn1SccDeepSeq_a_b_d* pVal, BitStream* pBitStrm, int* pErrCode);
#ifndef ERR_asn1SccDeepSeq_a_b_d_unknown_choice_index 
#define ERR_asn1SccDeepSeq_a_b_d_unknown_choice_index		1016  /**/
#endif

typedef struct {
    asn1SccMyInteger c;
    asn1SccDeepSeq_a_b_d d;
} asn1SccDeepSeq_a_b;

#define asn1SccDeepSeq_a_b_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccDeepSeq_a_b_REQUIRED_BITS_FOR_ENCODING        10
#define asn1SccDeepSeq_a_b_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccDeepSeq_a_b_REQUIRED_BITS_FOR_ACN_ENCODING    10
#define asn1SccDeepSeq_a_b_REQUIRED_BYTES_FOR_XER_ENCODING   81

void asn1SccDeepSeq_a_b_Initialize(asn1SccDeepSeq_a_b* pVal);
flag asn1SccDeepSeq_a_b_IsConstraintValid(const asn1SccDeepSeq_a_b* val, int* pErrCode);
flag asn1SccDeepSeq_a_b_Encode(const asn1SccDeepSeq_a_b* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDeepSeq_a_b_Decode(asn1SccDeepSeq_a_b* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1SccDeepSeq_a_b b;
} asn1SccDeepSeq_a;

#define asn1SccDeepSeq_a_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccDeepSeq_a_REQUIRED_BITS_FOR_ENCODING        10
#define asn1SccDeepSeq_a_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccDeepSeq_a_REQUIRED_BITS_FOR_ACN_ENCODING    10
#define asn1SccDeepSeq_a_REQUIRED_BYTES_FOR_XER_ENCODING   84

void asn1SccDeepSeq_a_Initialize(asn1SccDeepSeq_a* pVal);
flag asn1SccDeepSeq_a_IsConstraintValid(const asn1SccDeepSeq_a* val, int* pErrCode);
flag asn1SccDeepSeq_a_Encode(const asn1SccDeepSeq_a* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDeepSeq_a_Decode(asn1SccDeepSeq_a* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1SccDeepSeq_a a;
} asn1SccDeepSeq;

#define asn1SccDeepSeq_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccDeepSeq_REQUIRED_BITS_FOR_ENCODING        10
#define asn1SccDeepSeq_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define asn1SccDeepSeq_REQUIRED_BITS_FOR_ACN_ENCODING    10
#define asn1SccDeepSeq_REQUIRED_BYTES_FOR_XER_ENCODING   87

void asn1SccDeepSeq_Initialize(asn1SccDeepSeq* pVal);
flag asn1SccDeepSeq_IsConstraintValid(const asn1SccDeepSeq* val, int* pErrCode);
flag asn1SccDeepSeq_Encode(const asn1SccDeepSeq* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccDeepSeq_Decode(asn1SccDeepSeq* pVal, BitStream* pBitStrm, int* pErrCode);


 


#ifdef  __cplusplus
}
#define ENUM_asn1Scchello	asn1Scchello
#define ENUM_asn1Sccworld	asn1Sccworld
#define ENUM_asn1Scchowareyou	asn1Scchowareyou
#define ENUM_asn1Scctaste	asn1Scctaste
#define ENUM_asn1Sccwelcomes	asn1Sccwelcomes
#define ENUM_asn1Sccyou	asn1Sccyou
#define CHOICE_MyChoice_a_PRESENT	asn1SccMyChoice::MyChoice_a_PRESENT
#define CHOICE_b_PRESENT	asn1SccMyChoice::b_PRESENT
#define CHOICE_MyComplexChoice_a_PRESENT	asn1SccMyComplexChoice::MyComplexChoice_a_PRESENT
#define CHOICE_e_PRESENT	asn1SccDeepSeq_a_b_d::e_PRESENT

#endif

#endif
