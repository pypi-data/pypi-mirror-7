/* CIF PROCESS (150, 150), (150, 75) */
PROCESS challenge;
STATE on;
SUBSTRUCTURE
in (via_toto);
out (ret0);
/* CIF TEXT (242, 251), (334, 95) */
dcl myresult T_UInt8 := 4;
-- Use a variable with the same name as a variable
-- in the outer scope, to check that code generators
-- use the proper one
dcl result T_UInt32 := 9;
/* CIF ENDTEXT */
/* CIF PROCEDURE (558, 143), (70, 35) */
PROCEDURE exit
/* CIF COMMENT (648, 119), (157, 93) */
COMMENT 'Special exit
procedure - called
automatically when
leaving the nested
state';
/* CIF START (163, 119), (70, 35) */
START;
/* CIF PROCEDURECALL (68, 169), (259, 35) */
CALL writeln('LEAVING the nested state');
/* CIF RETURN (180, 219), (35, 35) */
RETURN ;
ENDPROCEDURE;
/* CIF PROCEDURE (239, 522), (102, 35) */
PROCEDURE inner_proc;
/* CIF TEXT (31, 41), (364, 93) */
fpar in toto T_UInt8;

-- Redefine a variable declared in outer scope
dcl result t_Boolean := true;
/* CIF ENDTEXT */
/* CIF START (479, 97), (70, 35) */
START;
/* CIF LABEL (471, 147), (86, 35) */
hey_joe:
/* CIF PROCEDURECALL (369, 197), (289, 35) */
CALL writeln('Procedure call with toto=', toto);
/* CIF TASK (453, 247), (121, 35) */
TASK result := false;
/* CIF LABEL (473, 297), (82, 35) */
leaving:
/* CIF RETURN (496, 347), (35, 35) */
RETURN ;
ENDPROCEDURE;
/* CIF PROCEDURE (554, 54), (73, 35) */
PROCEDURE entry
/* CIF COMMENT (643, 31), (190, 83) */
COMMENT 'Special Entry
procedure - called
automatically upon
entrance to the nested
state';
/* CIF START (191, 78), (70, 35) */
START;
/* CIF PROCEDURECALL (100, 128), (251, 35) */
CALL writeln('ENTERING NESTED STATE');
/* CIF RETURN (208, 178), (35, 35) */
RETURN ;
ENDPROCEDURE;
/* CIF START (1188, 7), (89, 35) */
START via_toto ;
/* CIF PROCEDURECALL (1097, 57), (271, 35) */
CALL writeln('start via toto, returning ret0');
/* CIF RETURN (1215, 107), (35, 35) */
RETURN ret0;
/* CIF START (938, 8), (70, 35) */
START;
/* CIF PROCEDURECALL (873, 58), (199, 35) */
CALL writeln('start without via');
/* CIF LABEL (917, 108), (111, 35) */
inside_label:
/* CIF PROCEDURECALL (904, 158), (137, 35) */
CALL pow(3,3, result);
/* CIF DECISION (936, 208), (74, 50) */
DECISION result;
/* CIF ANSWER (861, 278), (92, 23) */
(myresult):
/* CIF ANSWER (985, 278), (70, 23) */
ELSE:
/* CIF TASK (962, 316), (115, 35) */
TASK myresult := 5;
ENDDECISION;
/* CIF PROCEDURECALL (837, 366), (272, 35) */
CALL writeln('going to internal hello state');
/* CIF LABEL (929, 416), (88, 35) */
nslabel:
/* CIF NEXTSTATE (938, 466), (70, 35) */
NEXTSTATE hello;
/* CIF LABEL (132, 324), (90, 35) */
CONNECTION to_label:
/* CIF JOIN (159, 374), (35, 35) */
JOIN another_floating;
/* CIF End Label */
ENDCONNECTION;
/* CIF LABEL (512, 472), (141, 35) */
CONNECTION another_floating:
/* CIF TASK (525, 522), (115, 35) */
TASK myresult := 1;
/* CIF PROCEDURECALL (500, 572), (164, 35) */
CALL inner_proc(myresult);
/* CIF RETURN (565, 622), (35, 35) */
RETURN ;
/* CIF End Label */
ENDCONNECTION;
/* CIF STATE (0, 0), (70, 35) */
STATE hello;
/* CIF INPUT (0, 61), (70, 35) */
INPUT run;
/* CIF PROCEDURECALL (-162, 111), (395, 35) */
CALL writeln('Bye substate, leaving with no return value', result);
/* CIF TASK (-27, 161), (125, 53) */
TASK myresult := 88,
result := 33;
/* CIF JOIN (17, 229), (35, 35) */
JOIN to_label;
ENDSTATE;

ENDSUBSTRUCTURE;
/* CIF TEXT (506, 0), (298, 56) */
-- This system tests nested states

dcl result T_uint32 :=0;
/* CIF ENDTEXT */
/* CIF PROCEDURE (0, 254), (66, 35) */
PROCEDURE toto;
/* CIF TEXT (371, 134), (298, 140) */
-- Declare your variables

-- Syntax: DCL <variable name> <type name>;

dcl i T_Int8  := 1;
/* CIF ENDTEXT */
/* CIF START (178, 86), (70, 35) */
START;
/* CIF DECISION (178, 136), (70, 50) */
DECISION i;
/* CIF ANSWER (131, 206), (73, 23) */
(1):
/* CIF TASK (127, 244), (80, 35) */
TASK i := i + 1;
/* CIF RETURN (150, 294), (35, 35) */
RETURN ;
/* CIF ANSWER (223, 206), (70, 23) */
ELSE:
/* CIF RETURN (240, 244), (35, 35) */
RETURN ;
ENDDECISION;
ENDPROCEDURE;
/* CIF START (135, 99), (68, 37) */
START;
/* CIF PROCEDURECALL (56, 151), (225, 35) */
CALL writeln('[STARTUP] Going OFF');
/* CIF NEXTSTATE (134, 201), (70, 35) */
NEXTSTATE OFF;


/* CIF STATE (549, 278), (73, 35) */
STATE Safe;
/* CIF INPUT (505, 333), (70, 35) */
INPUT *;
/* CIF PROCEDURECALL (475, 383), (130, 35) */
CALL pow(2,2, result);
/* CIF PROCEDURECALL (409, 433), (262, 35) */
CALL writeln('Result of pow(2,2) = ', result);
/* CIF NEXTSTATE (505, 483), (70, 35) */
NEXTSTATE -;
/* CIF INPUT (679, 333), (88, 35) */
INPUT any_one;
/* CIF NEXTSTATE (688, 383), (70, 35) */
NEXTSTATE on;
ENDSTATE;




/* CIF STATE (851, 72), (65, 35) */
STATE ON;
/* CIF INPUT (1043, 127), (88, 35) */
INPUT any_one;
/* CIF NEXTSTATE (1030, 177), (113, 35) */
NEXTSTATE -;
/* CIF INPUT (1153, 127), (78, 35) */
INPUT go_off;
/* CIF NEXTSTATE (1161, 177), (62, 35) */
NEXTSTATE OFF;
/* CIF CONNECT (884, 127), (0, 35) */
CONNECT ret0;
/* CIF PROCEDURECALL (748, 177), (272, 35) */
CALL writeln('Received ret0, going to Safe');
/* CIF NEXTSTATE (851, 227), (67, 35) */
NEXTSTATE Safe;
/* CIF CONNECT (568, 127), (0, 35) */
CONNECT ;
/* CIF PROCEDURECALL (398, 177), (340, 35) */
CALL writeln('Exit from nested state (no return value)');
/* CIF NEXTSTATE (533, 227), (70, 35) */
NEXTSTATE off;
ENDSTATE;

/* CIF STATE (134, 201), (70, 35) */
STATE OFF;
/* CIF INPUT (134, 256), (70, 35) */
INPUT run;
/* CIF PROCEDURECALL (60, 306), (217, 35) */
CALL writeln('Going ON VIA TOTO');
/* CIF NEXTSTATE (102, 357), (132, 35) */
NEXTSTATE ON via via_toto
/* CIF COMMENT (254, 357), (219, 35) */
COMMENT 'Enter substate via entry point';
ENDSTATE;
ENDPROCESS challenge;