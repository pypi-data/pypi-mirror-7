--------------------------------------------------------
--! File generated by asn2aadl v1.2359: DO NOT EDIT !
--------------------------------------------------------

package DataView

public

  with Data_Model;
  with Taste;
  with Base_Types;
  with Deployment;
-- No more private heap required (we use the space certified compiler)
-- Memory_Required: 0


DATA Simulink_Tunable_Parameter
PROPERTIES
   TASTE::Ada_Package_Name => "TASTE-Directives";
   Type_Source_Name => "Simulink-Tunable-Parameter";
   Deployment::ASN1_Module_Name => "TASTE-Directives";
END Simulink_Tunable_Parameter;

DATA TASTE_Directive
PROPERTIES
   TASTE::Ada_Package_Name => "TASTE-Directives";
   Type_Source_Name => "Taste-directive";
   Deployment::ASN1_Module_Name => "TASTE-Directives";
END TASTE_Directive;


data Stream_Element_Buffer
    -- Root type for buffer elements
properties
    Data_Model::Data_Representation => Character;
end Stream_Element_Buffer;
DATA My_OctStr
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataView.asn");
    TASTE::Ada_Package_Name => "TASTE_Dataview";
    Deployment::ASN1_Module_Name => "TASTE-Dataview";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 24; suggested aligned message buffer is...
    Source_Data_Size => 24 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "My-OctStr";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aSTRING;
END My_OctStr;

DATA My_OctStr_Buffer_Max
END My_OctStr_Buffer_Max;

DATA IMPLEMENTATION My_OctStr_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type My_OctStr
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (24); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END My_OctStr_Buffer_Max.impl;

DATA My_OctStr_Buffer
END My_OctStr_Buffer;

DATA IMPLEMENTATION My_OctStr_Buffer.impl
    -- Buffer to hold a marshalled data of type My_OctStr
SUBCOMPONENTS
    Buffer : data My_OctStr_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END My_OctStr_Buffer.impl;

DATA SeqOf
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataView.asn");
    TASTE::Ada_Package_Name => "TASTE_Dataview";
    Deployment::ASN1_Module_Name => "TASTE-Dataview";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 804; suggested aligned message buffer is...
    Source_Data_Size => 808 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "SeqOf";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aSEQUENCEOF;
END SeqOf;

DATA SeqOf_Buffer_Max
END SeqOf_Buffer_Max;

DATA IMPLEMENTATION SeqOf_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type SeqOf
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (808); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END SeqOf_Buffer_Max.impl;

DATA SeqOf_Buffer
END SeqOf_Buffer;

DATA IMPLEMENTATION SeqOf_Buffer.impl
    -- Buffer to hold a marshalled data of type SeqOf
SUBCOMPONENTS
    Buffer : data SeqOf_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END SeqOf_Buffer.impl;

DATA Some_Thing
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataView.asn");
    TASTE::Ada_Package_Name => "TASTE_Dataview";
    Deployment::ASN1_Module_Name => "TASTE-Dataview";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 8; suggested aligned message buffer is...
    Source_Data_Size => 8 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "Some-Thing";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aINTEGER;
END Some_Thing;

DATA Some_Thing_Buffer_Max
END Some_Thing_Buffer_Max;

DATA IMPLEMENTATION Some_Thing_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type Some_Thing
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END Some_Thing_Buffer_Max.impl;

DATA Some_Thing_Buffer
END Some_Thing_Buffer;

DATA IMPLEMENTATION Some_Thing_Buffer.impl
    -- Buffer to hold a marshalled data of type Some_Thing
SUBCOMPONENTS
    Buffer : data Some_Thing_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END Some_Thing_Buffer.impl;

DATA MyInteger
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataView.asn");
    TASTE::Ada_Package_Name => "TASTE_Dataview";
    Deployment::ASN1_Module_Name => "TASTE-Dataview";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 8; suggested aligned message buffer is...
    Source_Data_Size => 8 Bytes;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "MyInteger";
    -- what kind of type is this?
    TASTE::ASN1_Basic_Type =>aINTEGER;
END MyInteger;

DATA MyInteger_Buffer_Max
END MyInteger_Buffer_Max;

DATA IMPLEMENTATION MyInteger_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type MyInteger
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (classifier (DataView::Stream_Element_Buffer));
END MyInteger_Buffer_Max.impl;

DATA MyInteger_Buffer
END MyInteger_Buffer;

DATA IMPLEMENTATION MyInteger_Buffer.impl
    -- Buffer to hold a marshalled data of type MyInteger
SUBCOMPONENTS
    Buffer : data MyInteger_Buffer_Max.impl;
    Length : data Base_Types::Unsigned_16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END MyInteger_Buffer.impl;

end DataView;
