/* CIF PROCESS (150, 150), (150, 75) */
PROCESS basic;
/* CIF TEXT (272, -226), (303, 140) */
DCL i Int;
DCL f Float;
DCL b Bool;
/* CIF ENDTEXT */
/* CIF START (-86, -394), (100, 50) */
START;
/* CIF TASK (-71, -329), (70, 35) */
TASK i := 3;
/* CIF TASK (-75, -279), (78, 35) */
TASK f := 3.0;
/* CIF TASK (-81, -229), (90, 35) */
TASK b := true;
/* CIF NEXTSTATE (-86, -179), (100, 50) */
NEXTSTATE Wait;

/* CIF STATE (-86, -179), (100, 50) */
STATE Wait;
/* CIF INPUT (-85, -109), (100, 50) */
INPUT run;
/* CIF PROCEDURECALL (-102, -44), (134, 35) */
CALL writeln(1 + i)
/* CIF COMMENT (51, -44), (70, 35) */
COMMENT '4';
/* CIF PROCEDURECALL (-94, 6), (118, 35) */
CALL writeln(6 - i)
/* CIF COMMENT (44, 6), (70, 35) */
COMMENT '3';
/* CIF PROCEDURECALL (-95, 56), (120, 35) */
CALL writeln(2 * i)
/* CIF COMMENT (45, 56), (70, 35) */
COMMENT '6';
/* CIF PROCEDURECALL (-98, 107), (127, 35) */
CALL writeln(6 / i)
/* CIF COMMENT (48, 107), (70, 35) */
COMMENT '2';
/* CIF PROCEDURECALL (-94, 157), (119, 35) */
CALL writeln(7 / i)
/* CIF COMMENT (44, 157), (70, 35) */
COMMENT '2';
/* CIF PROCEDURECALL (-108, 207), (146, 35) */
CALL writeln(8 mod i)
/* CIF COMMENT (58, 207), (70, 35) */
COMMENT '2';
/* CIF PROCEDURECALL (-105, 257), (141, 35) */
CALL writeln(8 rem i)
/* CIF COMMENT (55, 257), (70, 35) */
COMMENT '2';
/* CIF PROCEDURECALL (-119, 307), (169, 35) */
CALL writeln((-8) mod i)
/* CIF COMMENT (69, 307), (70, 35) */
COMMENT '1';
/* CIF PROCEDURECALL (-112, 357), (154, 35) */
CALL writeln((-8) rem i)
/* CIF COMMENT (62, 357), (70, 35) */
COMMENT '-2';
/* CIF PROCEDURECALL (-107, 408), (145, 34) */
CALL writeln(1.0 + f)
/* CIF COMMENT (57, 407), (70, 35) */
COMMENT '4.0';
/* CIF PROCEDURECALL (-108, 457), (147, 35) */
CALL writeln(6.0 - f)
/* CIF COMMENT (58, 457), (70, 35) */
COMMENT '3.0';
/* CIF PROCEDURECALL (-106, 507), (142, 35) */
CALL writeln(2.0 * f)
/* CIF COMMENT (56, 507), (70, 35) */
COMMENT '6.0';
/* CIF PROCEDURECALL (-105, 557), (141, 35) */
CALL writeln(6.0 / f)
/* CIF COMMENT (55, 557), (70, 35) */
COMMENT '2.0';
/* CIF PROCEDURECALL (-108, 607), (146, 35) */
CALL writeln(6.0 / f)
/* CIF COMMENT (58, 607), (78, 35) */
COMMENT '2.0';
/* CIF PROCEDURECALL (-94, 657), (118, 35) */
CALL writeln(true)
/* CIF COMMENT (44, 657), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-96, 707), (122, 35) */
CALL writeln(false)
/* CIF COMMENT (46, 707), (70, 35) */
COMMENT 'false';
/* CIF PROCEDURECALL (-123, 757), (176, 35) */
CALL writeln(true and b)
/* CIF COMMENT (73, 757), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-120, 807), (170, 35) */
CALL writeln(false or b)
/* CIF COMMENT (70, 807), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-123, 857), (177, 35) */
CALL writeln(false xor b)
/* CIF COMMENT (73, 857), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-95, 907), (121, 35) */
CALL writeln(1 < i)
/* CIF COMMENT (45, 907), (71, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-99, 957), (129, 35) */
CALL writeln(1 <= i)
/* CIF COMMENT (49, 957), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-95, 1007), (121, 35) */
CALL writeln(i > 1)
/* CIF COMMENT (45, 1007), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-99, 1058), (129, 35) */
CALL writeln(i >= 1)
/* CIF COMMENT (49, 1058), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-95, 1108), (121, 35) */
CALL writeln(3 = i)
/* CIF COMMENT (45, 1108), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-106, 1158), (143, 35) */
CALL writeln(1.0 < f)
/* CIF COMMENT (56, 1158), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-112, 1208), (155, 35) */
CALL writeln(1.0 <= f)
/* CIF COMMENT (62, 1208), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-106, 1258), (143, 35) */
CALL writeln(f > 1.0)
/* CIF COMMENT (56, 1258), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-110, 1308), (151, 35) */
CALL writeln(f >= 1.0)
/* CIF COMMENT (60, 1308), (70, 35) */
COMMENT 'true';
/* CIF PROCEDURECALL (-110, 1358), (151, 35) */
CALL writeln(3.0 = f)
/* CIF COMMENT (60, 1358), (70, 35) */
COMMENT 'true';
/* CIF NEXTSTATE (-85, 1408), (100, 50) */
NEXTSTATE Wait;
ENDSTATE;
ENDPROCESS basic;