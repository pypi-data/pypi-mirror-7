#This file is part of "pysbf".
#Copyright (c) 2013, Jashandeep Sohi (jashandeep.s.sohi@gmail.com)
#
#"pysbf" is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#"pysbf" is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

from distutils.core import setup, Extension

def Main(cythonize=False):
 
 try:
  from Cython.Distutils import build_ext
 except:
  cythonize = False
 
 if cythonize == True:
  ext_modules = [
   Extension('pysbf.sbf', ['pysbf/sbf.pyx'], include_dirs=['pysbf', '.']),
   Extension('pysbf.blocks', ['pysbf/blocks.py'], include_dirs=['pysbf', '.']),
   Extension('pysbf.parsers', ['pysbf/parsers.pyx'], include_dirs=['pysbf', '.']),
   Extension('pysbf.crc', ['pysbf/crc.pyx'], include_dirs=['pysbf', '.']),
  ]
  cmdclass = {'build_ext': build_ext}
 else:
  ext_modules = [
   Extension('pysbf.sbf', ['pysbf/sbf.c'], include_dirs=['pysbf', '.']),
   Extension('pysbf.blocks', ['pysbf/blocks.c'], include_dirs=['pysbf', '.']),
   Extension('pysbf.parsers', ['pysbf/parsers.c'], include_dirs=['pysbf', '.']),
   Extension('pysbf.crc', ['pysbf/crc.c'], include_dirs=['pysbf', '.']),
  ]
  cmdclass = {}

 setup(name='pysbf',
       version='0.4',
       description='A Python moudle (in C) to parse "Septentrio Binary Format" (SBF) files generated by Septentrio receivers.',
       author='Jashandeep Sohi',
       author_email='jashandeep.s.sohi@gmail.com',
       url='https://github.com/jashandeep-sohi/pysbf',
       license='GPLv3',
       packages = ['pysbf'],
       cmdclass = cmdclass,
       ext_modules = ext_modules
      )
      
if __name__ == '__main__':
 Main()
