Metadata-Version: 1.1
Name: fastcache
Version: 0.3.2
Summary: C implementation of Python 3 functools.lru_cache
Home-page: https://github.com/pbrady/fastcache
Author: Peter Brady
Author-email: petertbrady@gmail.com
License: MIT
Description: 
        C implementation of Python 3 functools.lru_cache.  Provides speedup of 10-30x
        over standard library.  Passes test suite from standard library for lru_cache.
        
        Provides 2 Least Recently Used caching function decorators:
            
            clru_cache - built-in (faster)
                       >>> from fastcache import clru_cache
                       >>> @clru_cache(maxsize=128,typed=False,state=None)
                       ... def f(a, b):
                       ...     return (a, )+(b, )
                       ...
                       >>> type(f)
                       >>> <class '_lrucache.cache'>
            
            lru_cache  - python wrapper around clru_cache (slower)
                       >>> from fastcache import lru_cache
                       >>> @lru_cache(maxsize=128,typed=False,state=None)
                       ... def f(a, b):
                       ...     return (a, )+(b, )
                       ...
                       >>> type(f)
                       >>> <class 'function'>
        
        
            (c)lru_cache(maxsize=128, typed=False, state=None)
                
                Least-recently-used cache decorator.
                
                If *maxsize* is set to None, the LRU features are disabled and the cache
                can grow without bound.
                
                If *typed* is True, arguments of different types will be cached separately.
                For example, f(3.0) and f(3) will be treated as distinct calls with
                distinct results.
                
                If *state* is a list, the items in the list will be incorporated into
                argument hash.
                
                Arguments to the cached function must be hashable.
                
                View the cache statistics named tuple (hits, misses, maxsize, currsize)
                with f.cache_info().  Clear the cache and statistics with f.cache_clear().
                Access the underlying function with f.__wrapped__.
                
                See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used
        
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: C
