// Generated by CoffeeScript 1.7.1
(function() {
  angular.module("fetchActivesSrvc", ['appConfigSrvc', 'appUtilSrvc', 'saltApiSrvc', 'jobSrvc']).factory("FetchActives", [
    'AppData', 'Itemizer', 'SaltApiSrvc', '$q', 'JobDelegate', function(AppData, Itemizer, SaltApiSrvc, $q, JobDelegate) {
      var servicer;
      servicer = {
        setActives: function(activeMinions) {
          var inactiveMinions, mid, minion, _i, _j, _len, _len1;
          inactiveMinions = _.difference(AppData.getMinions().keys(), activeMinions);
          for (_i = 0, _len = activeMinions.length; _i < _len; _i++) {
            mid = activeMinions[_i];
            minion = JobDelegate.snagMinion(mid);
            minion.activize();
          }
          for (_j = 0, _len1 = inactiveMinions.length; _j < _len1; _j++) {
            mid = inactiveMinions[_j];
            minion = JobDelegate.snagMinion(mid);
            minion.unlinkJobs();
            minion.deactivize();
          }
        },
        assignActives: function(job) {
          var mid, result, _i, _len, _ref, _ref1;
          _ref = job.results.items();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], mid = _ref1.key, result = _ref1.val;
            if (!result.fail) {
              this.setActives(result["return"]);
            }
          }
        },
        fetchActives: function($scope, salt) {
          var cmd, defer;
          defer = $q.defer();
          cmd = {
            mode: "async",
            fun: "runner.manage.present"
          };
          SaltApiSrvc.run($scope, [cmd]).success((function(_this) {
            return function(data, status, headers, config) {
              var job, result, _ref;
              result = (_ref = data["return"]) != null ? _ref[0] : void 0;
              if (result) {
                job = JobDelegate.startRun(result, cmd);
                if (job.done) {
                  _this.assignActives(job);
                  defer.resolve({
                    'success': true
                  });
                  return;
                }
                job.commit($q).then(function(donejob) {
                  _this.assignActives(donejob);
                  defer.resolve({
                    'success': true
                  });
                });
              }
            };
          })(this)).error(function(error) {
            salt.fetchActivesFailed();
            defer.reject({
              'success': false
            });
          });
          return defer.promise;
        }
      };
      return servicer;
    }
  ]);

}).call(this);
