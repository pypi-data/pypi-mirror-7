// Generated by CoffeeScript 1.7.1

/*
Service used to facilitate checking for Highstate consistency.
This service defines logic needed to make the call equivalent to
salt \* state.highstate test=True
It also defines methods to parse and process the event data returned in response
to the highstate test call.
There are methods that are used to query the configuration and check if
automatic polling for highstate checks is enabled and ones that get the timeout
value and convert it to milliseconds.
This service is intended to be called from a controller.
 */

(function() {
  angular.module("highstateCheckSrvc", ['appConfigSrvc', 'appUtilSrvc', 'saltApiSrvc', 'appPrefSrvc', 'jobSrvc', 'errorReportingSrvc']).factory("HighstateCheck", [
    'ErrorReporter', 'AppData', 'Itemizer', 'SaltApiSrvc', 'AppPref', '$q', 'JobDelegate', function(ErrorReporter, AppData, Itemizer, SaltApiSrvc, AppPref, $q, JobDelegate) {
      var HighStateStatus, isCheckingHighstateConsistency, jobs, minions, servicer;
      if (AppData.get('minions') == null) {
        AppData.set('minions', new Itemizer());
      }
      minions = AppData.get('minions');
      if (AppData.get('jobs') == null) {
        AppData.set('jobs', new Itemizer());
      }
      jobs = AppData.get('jobs');
      HighStateStatus = (function() {
        function HighStateStatus(dirty, messages) {
          this.dirty = dirty != null ? dirty : false;
          this.messages = messages != null ? messages : [];
        }

        return HighStateStatus;

      })();
      isCheckingHighstateConsistency = false;
      servicer = {
        clearOldHighstateStatuses: function() {
          var minion, _i, _len, _ref;
          _ref = AppData.getMinions().values();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            minion = _ref[_i];
            minion.highstateStatus = new HighStateStatus();
          }
        },
        highstateDirtyComments: function(stateData) {
          var comment, mangledName, result, retVal, val;
          retVal = [];
          for (mangledName in stateData) {
            val = stateData[mangledName];
            comment = val.comment, result = val.result;
            if (result !== true) {
              retVal.push(comment);
            }
          }
          return retVal;
        },
        processHighstateCheckReturns: function(items) {
          var i, item, key, result, val, _ref;
          this.clearOldHighstateStatuses();
          for (i in items) {
            item = items[i];
            key = item.key, val = item.val;
            result = this.highstateDirtyComments(val["return"]);
            if (result.length > 0) {
              if ((_ref = AppData.getMinions().get(key)) != null) {
                _ref.highstateStatus = new HighStateStatus(true, result);
              }
            }
          }
        },
        isHighstateCheckEnabled: function() {
          var highStateCheck;
          highStateCheck = AppPref.get('highStateCheck');
          return highStateCheck.performCheck;
        },
        getTimeoutMilliSeconds: function() {
          var highStateCheck;
          highStateCheck = AppPref.get('highStateCheck');
          return highStateCheck.intervalSeconds * 1000;
        },
        isChecking: function() {
          return isCheckingHighstateConsistency;
        },
        makeHighStateCall: function($scope) {
          var cmd, tgt;
          isCheckingHighstateConsistency = true;
          tgt = AppData.getMinions().keys().join(',');
          cmd = {
            fun: 'state.highstate',
            tgt: tgt,
            expr_form: 'list',
            mode: 'async',
            arg: [true]
          };
          return SaltApiSrvc.run($scope, [cmd]).success((function(_this) {
            return function(data, status, headers, config) {
              var job, result, _ref;
              result = (_ref = data["return"]) != null ? _ref[0] : void 0;
              if (result.jid != null) {
                job = JobDelegate.startJob(result, cmd);
                job.commit($q).then(function(donejob) {
                  _this.processHighstateCheckReturns(donejob.results.items());
                  isCheckingHighstateConsistency = false;
                }, function(error) {
                  ErrorReporter.addAlert('danger', 'Failed to determine highstate status. Invalid value returned.');
                });
              }
              return true;
            };
          })(this)).error(function(data, status, headers, config) {
            isCheckingHighstateConsistency = false;
            ErrorReporter.addAlert('danger', 'Failed to determine highstate status. HTTP error.');
          });
        }
      };
      return servicer;
    }
  ]);

}).call(this);
