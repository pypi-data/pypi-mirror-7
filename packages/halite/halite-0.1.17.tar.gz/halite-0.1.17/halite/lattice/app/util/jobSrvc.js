// Generated by CoffeeScript 1.7.1

/*
Service to handle Jobs, Minions and Wheel interaction.
Exposes functions that create a new Job / Wheel / Minioner
that can listen for events and update in memory data accordingly.
 */

(function() {
  var jobSrvc;

  jobSrvc = angular.module("jobSrvc", ['appUtilSrvc']);

  jobSrvc.factory("JobDelegate", [
    'AppData', 'Itemizer', 'Wheeler', 'Jobber', 'Minioner', 'Runner', function(AppData, Itemizer, Wheeler, Jobber, Minioner, Runner) {
      var events, servicer;
      if (AppData.get('events') == null) {
        AppData.set('events', new Itemizer());
      }
      events = AppData.get('events');
      servicer = {
        startWheel: function(data, cmd) {
          var jid, job, parts;
          parts = data.tag.split("/");
          jid = parts[2];
          job = this.snagWheel(jid, cmd);
          return job;
        },
        startRun: function(data, cmd) {
          var jid, job, parts;
          parts = data.tag.split("/");
          jid = parts[2];
          job = this.snagRunner(jid, cmd);
          return job;
        },
        startJob: function(result, cmd) {
          var jid, job;
          jid = result.jid;
          job = this.snagJob(jid, cmd);
          job.initResults(result.minions);
          return job;
        },
        snagWheel: function(jid, cmd) {
          var job;
          if (AppData.getJobs().get(jid) == null) {
            job = new Wheeler(jid, cmd);
            AppData.getJobs().set(jid, job);
          }
          return AppData.getJobs().get(jid);
        },
        snagRunner: function(jid, cmd) {
          var job;
          if (AppData.getJobs().get(jid) == null) {
            job = new Runner(jid, cmd);
            AppData.getJobs().set(jid, job);
          }
          return AppData.getJobs().get(jid);
        },
        snagMinion: function(mid) {
          if (AppData.getMinions().get(mid) == null) {
            AppData.getMinions().set(mid, new Minioner(mid));
          }
          return AppData.getMinions().get(mid);
        },
        snagJob: function(jid, cmd) {
          var job;
          if (AppData.getJobs().get(jid) == null) {
            job = new Jobber(jid, cmd);
            AppData.getJobs().set(jid, job);
          }
          return AppData.getJobs().get(jid);
        }
      };
      return servicer;
    }
  ]);

}).call(this);
