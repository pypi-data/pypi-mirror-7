// Generated by CoffeeScript 1.7.1

/*
Service to handle event processing.
 */

(function() {
  angular.module("eventSrvc", ['appConfigSrvc', 'appUtilSrvc', 'errorReportingSrvc', 'appPrefSrvc', 'jobSrvc']).factory("EventDelegate", [
    'AppData', 'Itemizer', 'AppPref', '$q', 'ErrorReporter', 'JobDelegate', function(AppData, Itemizer, AppPref, $q, ErrorReporter, JobDelegate) {
      var servicer;
      servicer = {
        processKeyEvent: function(edata) {
          var data, mid, minion;
          data = edata.data;
          mid = data.id;
          minion = JobDelegate.snagMinion(mid);
          if (data.result === true) {
            if (data.act === 'delete') {
              minion.unlinkJobs();
              AppData.getMinions().del(mid);
            }
          }
          return minion;
        },
        processMinionEvent: function($scope, mid, edata) {
          var minion;
          minion = JobDelegate.snagMinion(mid);
          minion.processEvent(edata);
          minion.activize();
          if (AppPref.get('fetchGrains', false)) {
            $scope.fetchGrains(mid);
          }
          return minion;
        },
        processWheelEvent: function(jid, kind, edata) {
          var data, job;
          job = AppData.getJobs().get(jid);
          job.processEvent(edata);
          data = edata.data;
          if (kind === 'new') {
            job.processNewEvent(data);
          } else if (kind === 'ret') {
            job.processRetEvent(data);
          }
          return job;
        },
        processRunEvent: function($scope, jid, kind, edata) {
          var data, job;
          job = AppData.getJobs().get(jid);
          job.processEvent(edata);
          data = edata.data;
          if (kind === 'new') {
            job.processNewEvent(data);
          } else if (kind === 'ret') {
            if (data.fun === 'runner.jobs.lookup_jid') {
              $scope.processLookupJID(data);
            }
            job.processRetEvent(data);
          }
          return job;
        },
        processJobEvent: function(jid, kind, edata) {
          var data, job, minion;
          job = AppData.getJobs().get(jid);
          job.processEvent(edata);
          data = edata.data;
          if (kind === 'new') {
            job.processNewEvent(data);
          } else if (kind === 'ret') {
            minion = JobDelegate.snagMinion(data.id);
            minion.activize();
            job.linkMinion(minion);
            job.processRetEvent(data);
            job.checkDone();
          } else if (kind === 'prog') {
            minion = JobDelegate.snagMinion(data.id);
            job.linkMinion(minion);
            job.processProgEvent(edata);
          }
          return job;
        },
        stamp: function() {
          var date, stamp;
          date = new Date();
          stamp = ["/" + (date.getUTCFullYear()), "-" + (('00' + date.getUTCMonth()).slice(-2)), "-" + (('00' + date.getUTCDate()).slice(-2)), "T" + (('00' + date.getUTCHours()).slice(-2)), ":" + (('00' + date.getUTCMinutes()).slice(-2)), ":" + (('00' + date.getUTCSeconds()).slice(-2)), "." + (('000' + date.getUTCMilliseconds()).slice(-3))].join("");
          return stamp;
        },
        processSaltEvent: function($scope, edata) {
          var jid, kind, mid, parts;
          if (edata.data._stamp == null) {
            edata.data._stamp = this.stamp();
          }
          edata.utag = [edata.tag, edata.data._stamp].join("/");
          edata.data.stamp = edata.data._stamp;
          AppData.getEvents().set(edata.utag, edata);
          parts = edata.tag.split("/");
          if (parts[0] === 'salt') {
            if (parts[1] === 'job') {
              jid = parts[2];
              if (jid !== edata.data.jid) {
                ErrorReporter.addAlert("danger", "Bad job event");
                return false;
              }
              JobDelegate.snagJob(jid, edata.data);
              kind = parts[3];
              this.processJobEvent(jid, kind, edata);
            } else if (parts[1] === 'run') {
              jid = parts[2];
              if (jid !== edata.data.jid) {
                ErrorReporter.addAlert("danger", "Bad run event");
                return false;
              }
              JobDelegate.snagRunner(jid, edata.data);
              kind = parts[3];
              this.processRunEvent($scope, jid, kind, edata);
            } else if (parts[1] === 'wheel') {
              jid = parts[2];
              if (jid !== edata.data.jid) {
                ErrorReporter.addAlert("danger", "Bad wheel event");
                return false;
              }
              JobDelegate.snagWheel(jid, edata.data);
              kind = parts[3];
              this.processWheelEvent(jid, kind, edata);
            } else if (parts[1] === 'minion' || parts[1] === 'syndic') {
              mid = parts[2];
              if (mid !== edata.data.id) {
                ErrorReporter.addAlert("warning", "Bad minion event");
                return false;
              }
              this.processMinionEvent($scope, mid, edata);
            } else if (parts[1] === 'key') {
              this.processKeyEvent(edata);
            }
          }
          return edata;
        }
      };
      return servicer;
    }
  ]);

}).call(this);
