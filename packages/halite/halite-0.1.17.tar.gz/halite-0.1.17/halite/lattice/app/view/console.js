// Generated by CoffeeScript 1.7.1
(function() {
  var mainApp;

  mainApp = angular.module("MainApp");

  mainApp.controller('ConsoleCtlr', [
    '$scope', '$location', '$route', '$q', '$filter', '$templateCache', 'Configuration', 'AppData', 'AppPref', 'Item', 'Itemizer', 'Minioner', 'Resulter', 'Jobber', 'ArgInfo', 'Runner', 'Wheeler', 'Commander', 'Pagerage', 'SaltApiSrvc', 'SaltApiEvtSrvc', 'SessionStore', 'ErrorReporter', 'JobDelegate', '$filter', function($scope, $location, $route, $q, $filter, $templateCache, Configuration, AppData, AppPref, Item, Itemizer, Minioner, Resulter, Jobber, ArgInfo, Runner, Wheeler, Commander, Pagerage, SaltApiSrvc, SaltApiEvtSrvc, SessionStore, ErrorReporter, JobDelegate) {
      $scope.location = $location;
      $scope.route = $route;
      $scope.winLoc = window.location;
      $scope.monitorMode = null;
      $scope.graining = false;
      $scope.pinging = false;
      $scope.statusing = false;
      $scope.eventing = false;
      $scope.commanding = false;
      $scope.docSearch = false;
      $scope.newPagerage = function(itemCount) {
        return new Pagerage(itemCount);
      };
      $scope.grainsSortBy = ["id"];
      if (AppPref.get('fetchGrains', false)) {
        $scope.grainsSortBy = ["any", "id", "host", "domain", "server_id"];
      }
      $scope.grainsFilterBy = "id";
      if (AppPref.get('fetchGrains', false)) {
        $scope.grainsFilterBy = "any";
      }
      $scope.filterage = {
        grains: $scope.grainsSortBy,
        grain: $scope.grainsFilterBy,
        target: "",
        express: ""
      };
      $scope.setFilterGrain = function(index) {
        $scope.filterage.grain = $scope.filterage.grains[index];
        $scope.setFilterExpress();
        return true;
      };
      $scope.setFilterTarget = function(target) {
        $scope.filterage.target = target;
        $scope.setFilterExpress();
        return true;
      };
      $scope.setFilterExpress = function() {
        var name, regex;
        if ($scope.filterage.grain === "any") {
          regex = RegExp($scope.filterage.target, "i");
          $scope.filterage.express = function(minion) {
            var grain, _i, _len, _ref;
            _ref = minion.grains.values();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              grain = _ref[_i];
              if (angular.isString(grain) && grain.match(regex)) {
                return true;
              }
            }
            return false;
          };
        } else {
          regex = RegExp($scope.filterage.target, "i");
          name = $scope.filterage.grain;
          $scope.filterage.express = function(minion) {
            if (AppPref.get('fetchGrains', false)) {
              return minion.grains.get(name).toString().match(regex);
            } else {
              return minion.id.match(regex);
            }
          };
        }
        return true;
      };
      $scope.eventReverse = true;
      $scope.jobReverse = true;
      $scope.commandReverse = false;
      $scope.minionSortageTargets = ["id"];
      if (AppPref.get('fetchGrains', false)) {
        $scope.minionSortageTargets = ["id", "grains", "ping", "active"];
      }
      $scope.sortage = {
        targets: $scope.minionSortageTargets,
        target: "id",
        reverse: false
      };
      $scope.setSortTarget = function(index) {
        $scope.sortage.target = $scope.sortage.targets[index];
        return true;
      };
      $scope.sortMinions = function(minion) {
        var result;
        if ($scope.sortage.target === "id") {
          if (AppPref.get('fetchGrains', false)) {
            result = minion.grains.get("id");
          } else {
            result = minion.id;
          }
        } else if ($scope.sortage.target === "grains") {
          result = minion.grains.get($scope.sortage.target) != null;
        } else {
          result = minion[$scope.sortage.target];
        }
        result = result != null ? result : false;
        return result;
      };
      $scope.sortJobs = function(job) {
        var result;
        result = job.jid;
        result = result != null ? result : false;
        return result;
      };
      $scope.sortEvents = function(event) {
        var result;
        result = event.utag;
        result = result != null ? result : false;
        return result;
      };
      $scope.sortCommands = function(command) {
        var result;
        result = command.name;
        result = result != null ? result : false;
        return result;
      };
      $scope.resultKeys = ["retcode", "fail", "success", "done"];
      $scope.expandMode = function(ensual) {
        var x, _i, _len;
        if (angular.isArray(ensual)) {
          for (_i = 0, _len = ensual.length; _i < _len; _i++) {
            x = ensual[_i];
            if (angular.isObject(x)) {
              return 'list';
            }
          }
          return 'vect';
        } else if (angular.isObject(ensual)) {
          return 'dict';
        }
        return 'lone';
      };
      $scope.ensuals = function(ensual) {
        return [ensual];
      };
      $scope.actions = {
        State: {
          highstate: {
            mode: 'async',
            tgt: '*',
            fun: 'state.highstate'
          },
          show_highstate: {
            mode: 'async',
            tgt: '*',
            fun: 'state.show_highstate'
          },
          show_lowstate: {
            mode: 'async',
            tgt: '*',
            fun: 'state.running'
          },
          running: {
            mode: 'async',
            tgt: '*',
            fun: 'state.running'
          }
        },
        Test: {
          ping: {
            mode: 'async',
            tgt: '*',
            fun: 'test.ping'
          },
          echo: {
            mode: 'async',
            tgt: '*',
            fun: 'test.echo',
            arg: ['Hello World']
          },
          conf_test: {
            mode: 'async',
            tgt: '*',
            fun: 'test.conf_test'
          },
          fib: {
            mode: 'async',
            tgt: '*',
            fun: 'test.fib',
            arg: [8]
          },
          collatz: {
            mode: 'async',
            tgt: '*',
            fun: 'test.collatz',
            arg: [8]
          },
          sleep: {
            mode: 'async',
            tgt: '*',
            fun: 'test.sleep',
            arg: ['5']
          },
          rand_sleep: {
            mode: 'async',
            tgt: '*',
            fun: 'test.rand_sleep',
            arg: ['max=10']
          },
          get_opts: {
            mode: 'async',
            tgt: '*',
            fun: 'test.get_opts'
          },
          providers: {
            mode: 'async',
            tgt: '*',
            fun: 'test.providers'
          },
          version: {
            mode: 'async',
            tgt: '*',
            fun: 'test.version'
          },
          versions_information: {
            mode: 'async',
            tgt: '*'
          }
        }
      };
      $scope.ply = function(cmds) {
        var cmd, target, _i, _len;
        target = $scope.command.cmd.tgt !== "" ? $scope.command.cmd.tgt : "*";
        if (!angular.isArray(cmds)) {
          cmds = [cmds];
        }
        for (_i = 0, _len = cmds.length; _i < _len; _i++) {
          cmd = cmds[_i];
          cmd.tgt = target;
        }
        return $scope.action(cmds);
      };
      $scope.command = {
        result: {},
        history: {},
        lastCmds: null,
        parameters: null,
        cmd: {
          mode: 'async',
          fun: '',
          tgt: '*',
          arg: [""],
          expr_form: 'glob'
        },
        size: function(obj) {
          return _.size(obj);
        },
        addArg: function() {
          var _ref;
          this.cmd.arg.push('');
          return (_ref = this.parameters) != null ? _ref.push('Enter Input') : void 0;
        },
        delArg: function() {
          var _ref;
          if (this.cmd.arg.length > 1) {
            this.cmd.arg = this.cmd.arg.slice(0, -1);
          }
          if (((_ref = this.parameters) != null ? _ref.length : void 0) > 0) {
            return this.parameters.pop();
          }
        },
        buildArgs: function() {

          /*
          Build the arg array to be consumed by the server
           */
          var arg, i, item, j, offset, reqArgsLen, ret, _i, _j, _len, _len1, _ref, _ref1;
          ret = [];
          reqArgsLen = 0;
          if ($scope.command.requiredArgs != null) {
            reqArgsLen = $scope.command.requiredArgs.length;
            _ref = $scope.command.requiredArgs;
            for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
              item = _ref[j];
              ret.push(this.cmd.arg[j]);
            }
          }
          if ($scope.defaultVals != null) {
            _ref1 = $scope.defaultVals;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              arg = _ref1[i];
              offset = reqArgsLen + i;
              if (this.cmd.arg[offset] != null) {
                ret.push(this.cmd.arg[offset]);
              } else {
                ret.push(arg);
              }
            }
          }
          return ret;
        },
        getArgs: function() {
          var arg;
          return (function() {
            var _i, _len, _ref, _results;
            _ref = this.cmd.arg;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              arg = _ref[_i];
              if (arg !== '') {
                _results.push(arg);
              }
            }
            return _results;
          }).call(this);
        },
        getCmds: function() {
          var cmds;
          if (this.cmd.fun.split(".").length === 3) {
            cmds = [
              {
                fun: this.cmd.fun,
                mode: this.cmd.mode,
                arg: this.buildArgs()
              }
            ];
          } else {
            cmds = [
              {
                fun: this.cmd.fun,
                mode: this.cmd.mode,
                tgt: this.cmd.tgt !== "" ? this.cmd.tgt : "",
                arg: this.buildArgs(),
                expr_form: this.cmd.expr_form
              }
            ];
          }
          return cmds;
        },
        humanize: function(cmds) {
          var cmd, part;
          if (!cmds) {
            cmds = this.getCmds();
          }
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = cmds.length; _i < _len; _i++) {
              cmd = cmds[_i];
              _results.push(((function() {
                var _j, _len1, _ref, _results1;
                _ref = [cmd.fun, cmd.tgt].concat(cmd.arg);
                _results1 = [];
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  part = _ref[_j];
                  if ((part != null) && part !== '') {
                    _results1.push(part);
                  }
                }
                return _results1;
              })()).join(' '));
            }
            return _results;
          })()).join(',').trim();
        }
      };
      $scope.command.cmd.tgt = "";
      $scope.expressionFormats = {
        Glob: 'glob',
        'Perl Regex': 'pcre',
        List: 'list',
        Grain: 'grain',
        'Grain Perl Regex': 'grain_pcre',
        Pillar: 'pillar',
        'Node Group': 'nodegroup',
        Range: 'range',
        Compound: 'compound'
      };
      $scope.$watch("command.cmd.expr_form", function(newVal, oldVal, scope) {
        if (newVal === oldVal) {
          return;
        }
        if (newVal === 'glob') {
          return $scope.command.cmd.tgt = "*";
        } else {
          return $scope.command.cmd.tgt = "";
        }
      });
      $scope.fixTarget = function() {
        if (($scope.command.cmd.tgt != null) && $scope.command.cmd.expr_form === 'list') {
          return $scope.command.cmd.tgt = $scope.command.cmd.tgt.replace(/,\s+/g, ',');
        }
      };
      $scope.humanize = function(cmds) {
        var cmd, part;
        if (!angular.isArray(cmds)) {
          cmds = [cmds];
        }
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = cmds.length; _i < _len; _i++) {
            cmd = cmds[_i];
            _results.push(((function() {
              var _j, _len1, _ref, _results1;
              _ref = [cmd.fun, cmd.tgt].concat(cmd.arg);
              _results1 = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                part = _ref[_j];
                if ((part != null) && part !== '') {
                  _results1.push(part);
                }
              }
              return _results1;
            })()).join(' '));
          }
          return _results;
        })()).join(',').trim();
      };
      $scope.action = function(cmds) {
        var command;
        $scope.commanding = true;
        if (!cmds) {
          cmds = $scope.command.getCmds();
        }
        command = $scope.snagCommand($scope.humanize(cmds), cmds);
        return SaltApiSrvc.action($scope, cmds).success(function(data, status, headers, config) {
          var index, job, parts, result, results, _i, _len;
          results = data["return"];
          for (index = _i = 0, _len = results.length; _i < _len; index = ++_i) {
            result = results[index];
            if (!_.isEmpty(result)) {
              parts = cmds[index].fun.split(".");
              if (parts.length === 3) {
                if (parts[0] === 'runner') {
                  job = JobDelegate.startRun(result, cmds[index]);
                  command.jobs.set(job.jid, job);
                } else if (parts[0] === 'wheel') {
                  job = JobDelegate.startWheel(result, cmds[index]);
                  command.jobs.set(job.jid, job);
                }
              } else {
                job = JobDelegate.startJob(result, cmds[index]);
                command.jobs.set(job.jid, job);
              }
            }
            $scope.commanding = false;
          }
          return true;
        }).error(function(data, status, headers, config) {
          ErrorReporter.addAlert('warning', data.error);
          return $scope.commanding = false;
        });
      };
      $scope.fetchPings = function(target) {
        var cmd;
        target = target ? target : "*";
        cmd = {
          mode: "async",
          fun: "test.ping",
          tgt: target
        };
        $scope.pinging = true;
        SaltApiSrvc.run($scope, [cmd]).success(function(data, status, headers, config) {
          var job, result, _ref;
          result = (_ref = data["return"]) != null ? _ref[0] : void 0;
          if (result) {
            job = JobDelegate.startJob(result, cmd);
          }
          $scope.pinging = false;
          return true;
        }).error(function(data, status, headers, config) {
          ErrorReporter.addAlert("warning", "Failed to detect pings from " + target);
          return $scope.pinging = false;
        });
        return true;
      };
      $scope.searchDocs = function() {
        var key, matching, matchingDocs;
        if (($scope.command.cmd.fun == null) || !$scope.docSearch || $scope.command.cmd.fun === '') {
          $scope.docSearchResults = '';
          return true;
        }
        matching = _.filter($scope.docKeys, function(key) {
          return key.indexOf($scope.command.cmd.fun.toLowerCase()) !== -1;
        });
        matchingDocs = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = matching.length; _i < _len; _i++) {
            key = matching[_i];
            _results.push(key + "\n" + $scope.docs[key] + "\n");
          }
          return _results;
        })();
        $scope.docSearchResults = matchingDocs.join('');
        return true;
      };
      $scope.isSearchable = function() {
        return $scope.docsLoaded;
      };
      $scope.testClick = function(name) {
        return console.log("click " + name);
      };
      $scope.testFocus = function(name) {
        return console.log("focus " + name);
      };
      $scope.removeLookupJidJobs = function(job) {
        return job.name !== 'runner.jobs.lookup_jid';
      };
      $scope.removeArgspecJobs = function(job) {
        return job.name.toLowerCase().indexOf('sys.argspec') !== 0;
      };
      $scope.jobPresentationFilter = function(job) {
        return $scope.removeArgspecJobs(job) && $scope.removeLookupJidJobs(job);
      };
      $scope.defaultVals = null;
      $scope.setParameters = function(requiredArgs, optionalArgs, defaultvals) {
        $scope.command.requiredArgs = requiredArgs;
        $scope.command.optionalArgs = optionalArgs;
        $scope.defaultVals = defaultvals;
        $scope.fillCommandArgs();
        return true;
      };
      $scope.commandArgs = [];
      $scope.fillCommandArgs = function() {
        $scope.commandArgs = [];
        $scope.command.cmd.arg = [null];
        _.each($scope.command.requiredArgs, function(arg) {
          return $scope.commandArgs.push(new ArgInfo(arg, true));
        });
        _.each($scope.command.optionalArgs, function(arg, index) {
          return $scope.commandArgs.push(new ArgInfo(arg, false, $scope.defaultVals[index]));
        });
        return true;
      };
      $scope.extractArgSpec = function(returnFrom) {
        var arg, argspec, cmdData, defaults, defaults_vals, fun, info, keyData, required, x, _ref;
        required = [];
        defaults = [];
        defaults_vals = null;
        argspec = null;
        cmdData = (_ref = $scope.command.cmd.fun) != null ? _ref.split('.') : void 0;
        if (!cmdData) {
          return;
        }
        fun = $scope.command.cmd.fun;
        if (cmdData.length > 2) {
          keyData = [cmdData[1], cmdData[2]];
          fun = keyData.join('.');
          argspec = _.find(returnFrom, function(commandKey) {
            return commandKey[fun] != null;
          });
        } else {
          argspec = _.find(returnFrom, function(minion) {
            return minion[fun] != null;
          });
        }
        if (argspec != null) {
          info = argspec[fun];
          if (info.args != null) {
            required = (function() {
              var _i, _len, _ref1, _results;
              _ref1 = info.args;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                x = _ref1[_i];
                _results.push(String(x));
              }
              return _results;
            })();
            if (info.defaults != null) {
              defaults = (function() {
                var _i, _len, _ref1, _results;
                _ref1 = info.defaults;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  arg = _ref1[_i];
                  _results.push(required.pop());
                }
                return _results;
              })();
              defaults.reverse();
              defaults_vals = (function() {
                var _i, _len, _ref1, _results;
                _ref1 = info.defaults;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  x = _ref1[_i];
                  _results.push(String(x));
                }
                return _results;
              })();
            } else {
              defaults = null;
            }
          } else {
            defaults = null;
          }
        } else {
          defaults = null;
          required = null;
        }
        return {
          required: required,
          defaults: defaults,
          defaults_vals: defaults_vals
        };
      };
      $scope.argSpec = function() {
        var cmd, _ref, _ref1;
        if (!(((_ref = $scope.getMinions()) != null ? (_ref1 = _ref.keys()) != null ? _ref1.length : void 0 : void 0) > 0)) {
          return;
        }
        cmd = {
          module: $scope.command.cmd.fun,
          client: 'minion',
          mode: 'sync',
          tgt: $scope.getMinions().keys()[0]
        };
        SaltApiSrvc.signature($scope, cmd).success(function(data, status, headers, config) {
          var argSpec, _ref2;
          argSpec = $scope.extractArgSpec((_ref2 = data["return"]) != null ? _ref2[0] : void 0);
          $scope.setParameters(argSpec['required'], argSpec['defaults'], argSpec['defaults_vals']);
          return true;
        }).error(function(data, status, headers, config) {
          $scope.setParameters(null, null, null);
          return true;
        });
        return true;
      };
      $scope.handleCommandChange = function() {
        $scope.searchDocs();
        return $scope.argSpec();
      };
      $scope.canExecuteCommands = function() {
        return !$scope.commandForm.$invalid && ($scope.command.requiredArgs != null);
      };
      $scope.getGrainsIfRequired = function(mid) {
        if (AppPref.get("fetchGrains", false)) {
          return;
        }
        $scope.fetchGrains(mid, false);
        return true;
      };
      $scope.clearSaltData = function() {
        $scope.command.history = {};
      };
      $scope.$on("ClearSaltData", $scope.clearSaltData);
      return true;
    }
  ]);

}).call(this);
