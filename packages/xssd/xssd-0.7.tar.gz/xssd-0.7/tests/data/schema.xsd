<?xml version='1.0'?>
<!DOCTYPE xs:schema PUBLIC "-//W3C//DTD XMLSCHEMA 200102//EN" "XMLSchema.dtd">

<schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <annotation>
    <documentation source="filename">Schema which can validate our full expected data validation schema, i.e. itself.</documentation>
  </annotation>

  <element name="schema" type="schema"/>

  <complexType name="schema">
    <element name="element" type="element" />
    <element name="complexType" type="complexType" minOccurs="0" maxOccurs="unbounded"/>
    <element name="simpleType" type="simpleType" minOccurs="0" maxOccurs="unbounded"/>

    <element name="annotation" type="annotation" minOccurs="0"/>
  </complexType>

  <complexType name="element">
    <!--The name of the element, dictionary key equivilent-->
    <attribute name="name" type="string" />

    <!--Typescan be defined by their type or by an internal complexType-->
    <or>
      <attribute name="type" type="string" />
      <element name="complexType" type="complexType" />
    </or>

    <attribute name="minOccurs" type="occurs" default="1" />
    <attribute name="maxOccurs" type="occurs" default="1" />

    <attribute name="fixed" type="string" minOccurs="0" />
    <attribute name="default" type="string" minOccurs="0" />
    <attribute name="match" type="string" minOccurs="0" />
    <attribute name="notMatch" type="string" minOccurs="0" />

    <!--These options override the simple type this element uses as it's type-->
    <attribute name='minLength' type='integer' minOccurs="0" />
    <attribute name='maxLength' type='integer' minOccurs="0" />
  </complexType>

  <complexType name="simpleType">
    <!--The name of the simpleType (#ref or id equiv)-->
    <attribute name="name" type="string" minOccurs="0"/>

    <!--Inheritable definitions-->
    <attribute name='base' type="string" default="string" />

    <!--String controls -->
    <attribute name='pattern' type='string' minOccurs="0" />
    <attribute name='minLength' type='integer' minOccurs="0" />
    <attribute name='maxLength' type='integer' minOccurs="0" />
    <attribute name='enumeration' type='string' minOccurs="0" maxOccurs="unbounded" />

    <!--Number Control of Simple Types-->
    <attribute name='minInclusive'   type='integer' minOccurs="0" />
    <attribute name='maxInclusive'   type='integer' minOccurs="0" />
    <attribute name='minExclusive'   type='integer' minOccurs="0" />
    <attribute name='maxExclusive'   type='integer' minOccurs="0" />
    <attribute name='fractionDigits' type='integer' minOccurs="0" />
  </complexType>

  <!--A complexType that explains itself-->
  <complexType name="complexType">
    <!--The name of the complexType (#ref or id equiv)-->
    <attribute name="name" type="string" minOccurs="0"/>

    <element name='element'   type='element' minOccurs="0" maxOccurs="unbounded"/>
    <element name='attribute' type='element' minOccurs="0" maxOccurs="unbounded"/>

    <element name='or'        type='complexType' minOccurs="0" maxOccurs="unbounded"/>
  </complexType>

  <!--Special simple type to check Occurs values-->
  <simpleType name="occurs" base="string" pattern="\d+|unbounded"/>

  <complexType name="annotation">
    <element name="documentation">
      <complexType>
        <attribute name="source" type="string" minOccurs="0"/>
        <element name="+data" type="string"/>
      </complexType>
    </element>
  </complexType>

</schema>
