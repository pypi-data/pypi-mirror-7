{"version":3,"file":"plugin.min.js","sources":["templates.js","../../../../../../plugins/oauth/web_client/js/ConfigView.js","../../../../../../plugins/oauth/web_client/js/LoginView.js","../../../../../../plugins/oauth/web_client/js/setup.js"],"names":["this","locals","jade_interp","buf","locals_","google","push","jade","escape","jsOrigin","redirectUri","join","buttons","$$obj","length","$index","$$l","button","attr","cls","text","provider","call","girder","views","oauth_ConfigView","View","extend","events","submit #g-oauth-provider-google-form","event","preventDefault","$","empty","_saveSettings","key","value","val","trim","initialize","restRequest","type","path","data","list","JSON","stringify","done","_","bind","resp","render","origin","window","location","protocol","host","$el","html","templates","oauth_config","apiRoot","breadcrumb","PluginConfigBreadcrumbWidget","pluginName","el","settings","error","trigger","icon","timeout","responseJSON","message","router","route","oauth_LoginView","click .g-oauth-button","currentTarget","providers","redirect","dialogs","splitRoute","href","base","each","url","btn","_buttons","console","warn","append","oauth_login","Google","class","wrap","LoginView","exposePluginConfig"],"mappings":"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","sourcesContent":["this[\"jade\"] = this[\"jade\"] || {};\nthis[\"jade\"][\"templates\"] = this[\"jade\"][\"templates\"] || {};\n\nthis[\"jade\"][\"templates\"][\"oauth_config\"] = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\nvar locals_ = (locals || {}),google = locals_.google;\nbuf.push(\"<div class=\\\"g-config-breadcrumb-container\\\"></div><div class=\\\"g-oauth-provider-list-title\\\">Configure supported providers below</div><div id=\\\"g-oauth-provider-accordion\\\" class=\\\"panel-group\\\"><div class=\\\"panel panel-default\\\"><div class=\\\"panel-heading\\\"><div class=\\\"panel-title\\\"><a data-toggle=\\\"collapse\\\" data-parent=\\\"#g-oauth-provider-accordion\\\" href=\\\"#g-oauth-provider-google\\\"><i class=\\\"icon-gplus\\\"></i> Google</a></div></div><div id=\\\"g-oauth-provider-google\\\" class=\\\"panel-collapse collapse in\\\"><div class=\\\"panel-body\\\"><p>Client IDs and secret keys are managed in the Google Developer Console. When\\ncreating your client ID there, use the following values:</p><div class=\\\"g-oauth-value-container\\\"><b>Authorized javascript origins:</b><span class=\\\"g-oauth-value\\\">\" + (jade.escape((jade_interp = google.jsOrigin) == null ? '' : jade_interp)) + \"</span></div><div class=\\\"g-oauth-value-container\\\"><b>Authorized redirect URI:</b><span class=\\\"g-oauth-value\\\">\" + (jade.escape((jade_interp = google.redirectUri) == null ? '' : jade_interp)) + \"</span></div><form id=\\\"g-oauth-provider-google-form\\\" role=\\\"form\\\"><div class=\\\"form-group\\\"><label for=\\\"g-oauth-provider-google-client-id\\\" class=\\\"control-label\\\">Google client ID</label><input id=\\\"g-oauth-provider-google-client-id\\\" type=\\\"text\\\" placeholder=\\\"Client ID\\\" class=\\\"input-sm form-control\\\"/></div><div class=\\\"form-group\\\"><label for=\\\"g-oauth-provider-google-client-secret\\\" class=\\\"control-label\\\">Google client secret</label><input id=\\\"g-oauth-provider-google-client-secret\\\" type=\\\"text\\\" placeholder=\\\"Client secret\\\" class=\\\"input-sm form-control\\\"/></div><p id=\\\"g-oauth-provider-google-error-message\\\" class=\\\"g-validation-failed-message\\\"></p><input type=\\\"submit\\\" value=\\\"Save\\\" class=\\\"btn btn-sm btn-primary\\\"/></form></div></div></div></div>\");;return buf.join(\"\");\n};\n\nthis[\"jade\"][\"templates\"][\"oauth_login\"] = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\nvar jade_interp;\nvar locals_ = (locals || {}),buttons = locals_.buttons;\nbuf.push(\"<div class=\\\"g-oauth-container\\\"><div class=\\\"g-oauth-section-header\\\"><div class=\\\"g-oauth-section-header-text\\\">Or log in with</div></div>\");\n// iterate buttons\n;(function(){\n  var $$obj = buttons;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var button = $$obj[$index];\n\nbuf.push(\"<div\" + (jade.attr(\"g-provider\", \"\" + (button.provider) + \"\", true, false)) + (jade.cls(['g-oauth-button',\"\" + (button.class) + \"\"], [null,true])) + \"><div class=\\\"g-oauth-button-icon\\\"><i\" + (jade.cls([\"icon-\" + (button.icon) + \"\"], [true])) + \"></i></div><div class=\\\"g-oauth-button-text\\\">\" + (jade.escape((jade_interp = button.text || button.provider) == null ? '' : jade_interp)) + \"</div></div>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var button = $$obj[$index];\n\nbuf.push(\"<div\" + (jade.attr(\"g-provider\", \"\" + (button.provider) + \"\", true, false)) + (jade.cls(['g-oauth-button',\"\" + (button.class) + \"\"], [null,true])) + \"><div class=\\\"g-oauth-button-icon\\\"><i\" + (jade.cls([\"icon-\" + (button.icon) + \"\"], [true])) + \"></i></div><div class=\\\"g-oauth-button-text\\\">\" + (jade.escape((jade_interp = button.text || button.provider) == null ? '' : jade_interp)) + \"</div></div>\");\n    }\n\n  }\n}).call(this);\n\nbuf.push(\"</div>\");;return buf.join(\"\");\n};","/**\n * Administrative configuration view. Shows the global-level settings for this\n * plugin for all of the supported oauth providers.\n */\ngirder.views.oauth_ConfigView = girder.View.extend({\n    events: {\n        'submit #g-oauth-provider-google-form': function (event) {\n            event.preventDefault();\n            this.$('#g-oauth-provider-google-error-message').empty();\n\n            this._saveSettings([{\n                key: 'oauth.google_client_id',\n                value: this.$('#g-oauth-provider-google-client-id').val().trim()\n            }, {\n                key: 'oauth.google_client_secret',\n                value: this.$('#g-oauth-provider-google-client-secret').val().trim()\n            }]);\n        }\n    },\n    initialize: function () {\n        girder.restRequest({\n            type: 'GET',\n            path: 'system/setting',\n            data: {\n              list: JSON.stringify(['oauth.google_client_id',\n                                    'oauth.google_client_secret'])\n            }\n        }).done(_.bind(function (resp) {\n            this.render();\n            this.$('#g-oauth-provider-google-client-id').val(\n                resp['oauth.google_client_id']\n            );\n            this.$('#g-oauth-provider-google-client-secret').val(\n                resp['oauth.google_client_secret']\n            );\n        }, this));\n    },\n\n    render: function () {\n        var origin = window.location.protocol + '//' + window.location.host;\n        this.$el.html(jade.templates.oauth_config({\n            google: {\n                jsOrigin: origin,\n                redirectUri: origin + girder.apiRoot + '/oauth/google/callback'\n            }\n        }));\n\n        if (!this.breadcrumb) {\n            this.breadcrumb = new girder.views.PluginConfigBreadcrumbWidget({\n                pluginName: 'OAuth login',\n                el: this.$('.g-config-breadcrumb-container')\n            }).render();\n        }\n\n        return this;\n    },\n\n    _saveSettings: function (settings) {\n        girder.restRequest({\n            type: 'PUT',\n            path: 'system/setting',\n            data: {\n                list: JSON.stringify(settings)\n            },\n            error: null\n        }).done(_.bind(function (resp) {\n            girder.events.trigger('g:alert', {\n                icon: 'ok',\n                text: 'Settings saved.',\n                type: 'success',\n                timeout: 4000\n            });\n        }, this)).error(_.bind(function (resp) {\n            this.$('#g-oauth-provider-google-error-message').text(\n                resp.responseJSON.message);\n        }, this));\n    }\n});\n\ngirder.router.route('plugins/oauth/config', 'oauthConfig', function () {\n    girder.events.trigger('g:navigateTo', girder.views.oauth_ConfigView);\n});\n","girder.views.oauth_LoginView = girder.View.extend({\n    events: {\n        'click .g-oauth-button': function (event) {\n            var provider = $(event.currentTarget).attr('g-provider');\n            window.location = this.providers[provider];\n        }\n    },\n\n    initialize: function () {\n        var redirect = girder.dialogs.splitRoute(window.location.href).base;\n\n        girder.restRequest({\n            path: 'oauth/provider',\n            data: {\n                redirect: redirect\n            }\n        }).done(_.bind(function (resp) {\n            this.providers = resp;\n            this.render();\n        }, this));\n    },\n\n    render: function () {\n        var buttons = [];\n        _.each(this.providers, function (url, provider) {\n            var btn = this._buttons[provider];\n\n            if (btn) {\n                btn.provider = provider;\n                buttons.push(btn);\n            }\n            else {\n                console.warn('Unsupported OAuth provider: ' + provider);\n            }\n        }, this);\n\n        this.$el.append(jade.templates.oauth_login({\n            buttons: buttons\n        }));\n    },\n\n    _buttons: {\n        Google: {\n            'icon': 'gplus',\n            'class': 'g-oauth-button-google'\n        }\n    }\n});\n","/**\n * We want to add some additional stuff to the login view when it is shown.\n */\ngirder.wrap(girder.views.LoginView, 'render', function (render) {\n    render.call(this);\n    new girder.views.oauth_LoginView({\n        el: this.$('.modal-body')\n    });\n    return this;\n});\n\ngirder.exposePluginConfig('oauth', 'plugins/oauth/config');\n"]}