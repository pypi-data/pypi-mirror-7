Version 14.7.0
--------------
** Released 2014 August 1**

- Added support for downloading many additional datatypes (strings, datetimes, nullable attributes, empty cells)
- Schema introspection and lazy evaluation of AFL expressions. Arrays can be constructed and examined before database storage is actually allocated to them.
- Along with this, the AFL binding functions now return SciDBArrays, making it easier to mix AFL calls with SciDB-Py-specific methods
- Shortcut AFL syntax: x.operator(a, ...) maps to sdb.afl.operator(x, a, ...)
  if `operator` isn't a pre-existing method name. Allows for chaining
  of afl calls (x.apply().project().redimension(), e.g.)
- Inequality syntax and filtering (x['a'] > 5, x[x['a'] < 5])
- Additional element-wise operators: sqrt, floor, ceil, isnan
- Cumulative aggregation
- Groupby aggregation

Version 14.3.0
--------------
**Released 2014 April 25**

- Changing version number scheme to match SciDB. Major and minor release numbers indicate year and month of SciDB release, respectively.

- 2014-04-17 Update SciDB-py to reflect changes to SciDB 14.3 (Chris Beaumont)

- 2014-04-14 Early detection of invalid SciDB connections (Chris Beaumont)

- 2014-04-12 Add histogram function (Chris Beaumont)

- 2014-04-06 Add connect() function for establishing a connection with a SciDBShimInterface (Chris Beaumont)

- 2014-03-28 Overhaul how temporary arrays are deleted. Add reap() method (Chris Beaumont)

- 2014-03 New afl module with direct bindings to AFL operators in SciDB (Chris Beaumont)

Version 0.2
-----------
**Released 2013 October 25**

- 2013-10-25 add from_dataframe() function (Jake Vanderplas)

  + from_dataframe() builds a scidb array from a pandas DataFrame object,
    preserving the correct index value and label.

- 2013-10-24 add from_sparse() function (Jake Vanderplas)

  + from_sparse() builds a scidb array from a scipy.sparse matrix.

- 2013-10-24 from_array() multi-dtype support (Jake Vanderplas)

  + upgraded from_array() code to allow any numpy array type, including
    compound types and record arrays (previously only float64 was supported).

- 2013-09-03 Python 3 compatibility (Jake Vanderplas)

  + upgraded to single-codebase compatibility with Python 2.7 and Python 3.3;
    all tests pass for these Python versions.  No API change.

Version 0.1
-----------
**Released 2013 August 21**
