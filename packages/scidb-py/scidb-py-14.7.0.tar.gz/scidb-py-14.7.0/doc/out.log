rm -rf _build/*
sphinx-build -b html -d _build/doctrees   . _build/html
Making output directory...
Running Sphinx v1.2.2
loading pickled environment... not yet created
[autosummary] generating autosummary for: _templates/class.rst, _templates/class_with_call.rst, _templates/function.rst, access.rst, afl.rst, afldb.rst, api.rst, classes.rst, comparison_and_filtering.rst, connection.rst, correlation.rst, creation.rst, demos.rst, index.rst, install.rst, operations.rst, query.rst, tutorial.rst
building [html]: targets for 18 source files that are out of date
updating environment: 18 added, 0 changed, 0 removed
reading sources... [  5%] _templates/class
reading sources... [ 11%] _templates/class_with_call
reading sources... [ 16%] _templates/function
reading sources... [ 22%] access
reading sources... [ 27%] afl
reading sources... [ 33%] afldb
reading sources... [ 38%] api
reading sources... [ 44%] classes
/Users/beaumont/anaconda/lib/python2.7/site-packages/numpydoc/docscrape.py:117: UserWarning: Unknown section Details
  warn("Unknown section %s" % key)
reading sources... [ 50%] comparison_and_filtering
reading sources... [ 55%] connection
reading sources... [ 61%] correlation
reading sources... [ 66%] creation
reading sources... [ 72%] demos
reading sources... [ 77%] index
reading sources... [ 83%] install
reading sources... [ 88%] operations
reading sources... [ 94%] query
reading sources... [100%] tutorial

/Users/beaumont/scidbpy/doc/_templates/class.rst:4: ERROR: Error in "currentmodule" directive:
maximum 1 argument(s) allowed, 3 supplied.

.. currentmodule:: {{ module }}
/Users/beaumont/scidbpy/doc/_templates/class.rst:6: WARNING: invalid signature for autoclass (u'{{ objname }}')
/Users/beaumont/scidbpy/doc/_templates/class.rst:6: WARNING: don't know which module to import for autodocumenting u'{{ objname }}' (try placing a "module" or "currentmodule" directive in the document, or giving an explicit module name)
/Users/beaumont/scidbpy/doc/_templates/class_with_call.rst:4: ERROR: Error in "currentmodule" directive:
maximum 1 argument(s) allowed, 3 supplied.

.. currentmodule:: {{ module }}
/Users/beaumont/scidbpy/doc/_templates/class_with_call.rst:6: WARNING: invalid signature for autoclass (u'{{ objname }}')
/Users/beaumont/scidbpy/doc/_templates/class_with_call.rst:6: WARNING: don't know which module to import for autodocumenting u'{{ objname }}' (try placing a "module" or "currentmodule" directive in the document, or giving an explicit module name)
/Users/beaumont/scidbpy/doc/_templates/function.rst:4: ERROR: Error in "currentmodule" directive:
maximum 1 argument(s) allowed, 3 supplied.

.. currentmodule:: {{ module }}
/Users/beaumont/scidbpy/doc/_templates/function.rst:6: WARNING: invalid signature for autofunction (u'{{ objname }}')
/Users/beaumont/scidbpy/doc/_templates/function.rst:6: WARNING: don't know which module to import for autodocumenting u'{{ objname }}' (try placing a "module" or "currentmodule" directive in the document, or giving an explicit module name)
/Users/beaumont/scidbpy/doc/access.rst:35: WARNING: Literal block ends without a blank line; unexpected unindent.
afldb.rst:670: WARNING: Bullet list ends without a blank line; unexpected unindent.
[u'consume', u'', u"Causes array parameter to be materialized if not already. numAttrsToScanAtOnce determines the number of attributes to scan as a group. Setting this value to '1' will result in a 'vertical' scan---all chunks of the current attribute will be scanned before moving on to the next attribute. Setting this value to the number of attributes will result in a 'horizontal' scan---chunk i of every attribute will be scanned before moving on to chunk i+1", u'', u'::', u'', u'    consume( array [, numAttrsToScanAtOnce] )', u'', u'', u':parameters:', u'', u'    - array: the array to consume', u"    - numAttrsToScanAtOnce: optional 'stride' of the scan, default is 1", u'       Output array (an empty array):', u'    <', u'     >', u'     [', u'     ]']:16: SEVERE: Unexpected section title.

>
[
afldb.rst:867: WARNING: Block quote ends without a blank line; unexpected unindent.
afldb.rst:881: WARNING: Block quote ends without a blank line; unexpected unindent.
[u'insert', u'', u'Inserts all data from left array into the persistent targetArray. targetArray must exist with matching dimensions and attributes. targetArray must also be mutable. The operator shall create a new version of targetArray that contains all data of the array that would have been received by merge(sourceArray, targetArrayName). In other words, new data is inserted between old data and overwrites any overlapping old values. The resulting array is then returned.', u'', u'::', u'', u'    insert( sourceArray, targetArrayName )', u'', u'', u':parameters:', u'', u'    - sourceArray the array or query that provides inserted data', u'    - targetArrayName: the name of the persistent array inserted into', u'', u'', u':notes:', u'', u'    Some might wonder - if this returns the same result as', u'    merge(sourceArray, targetArrayName), then why not use', u'    store(merge())? The answer is that', u'    1.  this runs a lot faster - it does not perform a full scan of', u'        targetArray', u'    2.  this also generates less chunk headers']:20: ERROR: Unexpected indentation.
afldb.rst:945: WARNING: Block quote ends without a blank line; unexpected unindent.
afldb.rst:1457: WARNING: Definition list ends without a blank line; unexpected unindent.
afldb.rst:1462: WARNING: Definition list ends without a blank line; unexpected unindent.
afldb.rst:1465: WARNING: Definition list ends without a blank line; unexpected unindent.
afldb.rst:1481: WARNING: Bullet list ends without a blank line; unexpected unindent.
afldb.rst:1669: WARNING: Block quote ends without a blank line; unexpected unindent.
afldb.rst:1669: WARNING: Inline emphasis start-string without end-string.
/Users/beaumont/scidbpy/doc/afldb.rst:670: WARNING: Bullet list ends without a blank line; unexpected unindent.
[u'consume', u'', u"Causes array parameter to be materialized if not already. numAttrsToScanAtOnce determines the number of attributes to scan as a group. Setting this value to '1' will result in a 'vertical' scan---all chunks of the current attribute will be scanned before moving on to the next attribute. Setting this value to the number of attributes will result in a 'horizontal' scan---chunk i of every attribute will be scanned before moving on to chunk i+1", u'', u'::', u'', u'    consume( array [, numAttrsToScanAtOnce] )', u'', u'', u':parameters:', u'', u'    - array: the array to consume', u"    - numAttrsToScanAtOnce: optional 'stride' of the scan, default is 1", u'       Output array (an empty array):', u'    <', u'     >', u'     [', u'     ]']:16: SEVERE: Unexpected section title.

>
[
/Users/beaumont/scidbpy/doc/afldb.rst:867: WARNING: Block quote ends without a blank line; unexpected unindent.
/Users/beaumont/scidbpy/doc/afldb.rst:881: WARNING: Block quote ends without a blank line; unexpected unindent.
[u'insert', u'', u'Inserts all data from left array into the persistent targetArray. targetArray must exist with matching dimensions and attributes. targetArray must also be mutable. The operator shall create a new version of targetArray that contains all data of the array that would have been received by merge(sourceArray, targetArrayName). In other words, new data is inserted between old data and overwrites any overlapping old values. The resulting array is then returned.', u'', u'::', u'', u'    insert( sourceArray, targetArrayName )', u'', u'', u':parameters:', u'', u'    - sourceArray the array or query that provides inserted data', u'    - targetArrayName: the name of the persistent array inserted into', u'', u'', u':notes:', u'', u'    Some might wonder - if this returns the same result as', u'    merge(sourceArray, targetArrayName), then why not use', u'    store(merge())? The answer is that', u'    1.  this runs a lot faster - it does not perform a full scan of', u'        targetArray', u'    2.  this also generates less chunk headers']:20: ERROR: Unexpected indentation.
/Users/beaumont/scidbpy/doc/afldb.rst:945: WARNING: Block quote ends without a blank line; unexpected unindent.
/Users/beaumont/scidbpy/doc/afldb.rst:1457: WARNING: Definition list ends without a blank line; unexpected unindent.
/Users/beaumont/scidbpy/doc/afldb.rst:1462: WARNING: Definition list ends without a blank line; unexpected unindent.
/Users/beaumont/scidbpy/doc/afldb.rst:1465: WARNING: Definition list ends without a blank line; unexpected unindent.
/Users/beaumont/scidbpy/doc/afldb.rst:1481: WARNING: Bullet list ends without a blank line; unexpected unindent.
/Users/beaumont/scidbpy/doc/afldb.rst:1669: WARNING: Block quote ends without a blank line; unexpected unindent.
/Users/beaumont/scidbpy/doc/afldb.rst:1669: WARNING: Inline emphasis start-string without end-string.
[u"SciDBArray.tosparse(sparse_fmt='recarray', transfer_bytes=True)", u':module: scidbpy', u'', u'Transfer array from database and store in a local sparse array.', u'', u':Parameters:', u'', u'    **transfer_bytes** : boolean', u'', u'        if True (default), then transfer data as bytes rather than as', u'        ASCII.  This is more accurate, but requires two passes over', u'        the data (one for indices, one for values).', u'', u'    **sparse_format** : string or None', u'', u'        Specify the sparse format to use.  Available formats are:', u"        - 'recarray' : a record array containing the indices and", u'          values for each data point.  This is valid for arrays of', u'          any dimension and with any number of attributes.', u"        - ['coo'|'csc'|'csr'|'dok'|'lil'] : a scipy sparse matrix.", u'          These are valid only for 2-dimensional arrays with a single', u'          attribute.', u'', u':Returns:', u'', u'    **arr** : ndarray or sparse matrix', u'', u'        The sparse representation of the data']:17: ERROR: Unexpected indentation.
/Users/beaumont/scidbpy/scidbpy/scidbarray.py:docstring of scidbpy.SciDBArray.std:4: WARNING: Block quote ends without a blank line; unexpected unindent.
[u'SciDBShimInterface(hostname)', u':module: scidbpy.interface', u'', u'', u'', u'HTTP interface to SciDB via shim [1]_', u'', u'', u':Parameters:', u'', u'    **hostname** : string', u'', u'        A URL pointing to a running shim/SciDB session', u'        ', u'', u'    **[1] https://github.com/Paradigm4/shim** : ', u'', u'        ', u'', u'', u'.. py:method:: SciDBShimInterface.acos(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise trigonometric inverse cosine', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.approxdc(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis unique element estimate.', u'   ', u'   see :meth:`SciDBArray.approxdc` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.arange([start,] stop[, step,], dtype=None, **kwargs)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Return evenly spaced values within a given interval.', u'   ', u'   Values are generated within the half-open interval ``[start, stop)``', u'   (in other words, the interval including `start` but excluding `stop`).', u'   For integer arguments the behavior is equivalent to the Python', u'   `range <http://docs.python.org/lib/built-in-funcs.html>`_ function,', u'   but returns an ndarray rather than a list.', u'   ', u'   When using a non-integer step, such as 0.1, the results will often not', u'   be consistent.  It is better to use ``linspace`` for these cases.', u'   ', u'   :Parameters:', u'   ', u'       **start** : number, optional', u'   ', u'           Start of interval.  The interval includes this value.  The default', u'           start value is 0.', u'   ', u'       **stop** : number', u'   ', u'           End of interval.  The interval does not include this value, except', u'           in some cases where `step` is not an integer and floating point', u'           round-off affects the length of `out`.', u'   ', u'       **step** : number, optional', u'   ', u'           Spacing between values.  For any output `out`, this is the distance', u'           between two adjacent values, ``out[i+1] - out[i]``.  The default', u'           step size is 1.  If `step` is specified, `start` must also be', u'           given.', u'   ', u'       **dtype** : dtype', u'   ', u'           The type of the output array.  If `dtype` is not given, it is', u'           inferred from the type of the input arguments.', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional arguments are passed to SciDBDatashape when creating', u'           the output array.', u'   ', u'   :Returns:', u'   ', u'       **arange** : SciDBArray', u'   ', u'           Array of evenly spaced values.', u'           ', u'           For floating point arguments, the length of the result is', u'           ``ceil((stop - start)/step)``.  Because of floating point overflow,', u'           this rule may result in the last element of `out` being greater', u'           than `stop`.', u'   ', u'', u'.. py:method:: SciDBShimInterface.asin(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise trigonometric inverse sine', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.atan(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise trigonometric inverse tangent', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.avg(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis average.', u'   ', u'   see :meth:`SciDBArray.avg` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.ceil(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise ceiling function', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.cos(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise trigonometric cosine', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.count(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis count.', u'   ', u'   see :meth:`SciDBArray.count` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.cross_join(A, B, *dims)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Perform a cross-join on arrays A and B.', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **A, B** : SciDBArray', u'   ', u'           ', u'   ', u'       ***dims** : tuples', u'   ', u'           The remaining arguments are tuples of dimension indices which', u'           should be joined.', u'   ', u'', u'.. py:method:: SciDBShimInterface.dot(A, B)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Compute the matrix product of A and B', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **A** : SciDBArray', u'   ', u'           A must be a two-dimensional matrix of shape (n, p)', u'   ', u'       **B** : SciDBArray', u'   ', u'           B must be a two-dimensional matrix of shape (p, m)', u'   ', u'   :Returns:', u'   ', u'       **C** : SciDBArray', u'   ', u'           The wrapper of the SciDB Array, of shape (n, m), consisting of the', u'           matrix product of A and B', u'   ', u'', u'.. py:method:: SciDBShimInterface.exp(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise natural exponent', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.floor(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise floor function', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.from_array(A, instance_id=0, **kwargs)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Initialize a scidb array from a numpy array', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **A** : array_like (numpy array or sparse array)', u'   ', u'           input array from which the scidb array will be created', u'   ', u'       **instance_id** : integer', u'   ', u'           the instance ID used in loading', u'           (default=0; see SciDB documentation)', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to new_array()', u'   ', u'   :Returns:', u'   ', u'       **arr** : SciDBArray', u'   ', u'           SciDB Array object built from the input array', u'   ', u'', u'.. py:method:: SciDBShimInterface.from_dataframe(A, instance_id=0, **kwargs)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Initialize a scidb array from a pandas dataframe', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **A** : pandas dataframe', u'   ', u'           data from which the scidb array will be created.', u'   ', u'       **instance_id** : integer', u'   ', u'           the instance ID used in loading', u'           (default=0; see SciDB documentation)', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to new_array()', u'   ', u'   :Returns:', u'   ', u'       **arr** : SciDBArray', u'   ', u'           SciDB Array object built from the input array', u'   ', u'', u'.. py:method:: SciDBShimInterface.from_sparse(A, instance_id=0, **kwargs)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Initialize a scidb array from a sparse array', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **A** : sparse array', u'   ', u'           sparse input array from which the scidb array will be created.', u'           Note that this array will internally be converted to COO format.', u'   ', u'       **instance_id** : integer', u'   ', u'           the instance ID used in loading', u'           (default=0; see SciDB documentation)', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to new_array()', u'   ', u'   :Returns:', u'   ', u'       **arr** : SciDBArray', u'   ', u'           SciDB Array object built from the input array', u'   ', u'', u".. py:method:: SciDBShimInterface.identity(n, dtype='double', sparse=False, **kwargs)", u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Return a 2-dimensional square identity matrix of size n', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **n** : integer', u'   ', u'           the number of rows and columns in the matrix', u'   ', u'       **dtype** : string or list', u'   ', u'           The data type of the array', u'   ', u'       **sparse** : boolean', u'   ', u'           specify whether to create a sparse array (default=False)', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to SciDBDataShape.', u'   ', u'   :Returns:', u'   ', u'       **arr** : SciDBArray', u'   ', u'           A SciDBArray containint an [n x n] identity matrix', u'   ', u'', u'.. py:method:: SciDBShimInterface.isnan(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise nan test function', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.join(*args)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Perform a series of array joins on the arguments', u'   and return the result.', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.linspace(start, stop, num=50, endpoint=True, retstep=False, **kwargs)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Return evenly spaced numbers over a specified interval.', u'   ', u'   Returns `num` evenly spaced samples, calculated over the', u'   interval [`start`, `stop` ].', u'   ', u'   The endpoint of the interval can optionally be excluded.', u'   ', u'   :Parameters:', u'   ', u'       **start** : scalar', u'   ', u'           The starting value of the sequence.', u'   ', u'       **stop** : scalar', u'   ', u'           The end value of the sequence, unless `endpoint` is set to False.', u'           In that case, the sequence consists of all but the last of', u'           ``num + 1`` evenly spaced samples, so that `stop` is excluded.', u'           Note that the step size changes when `endpoint` is False.', u'   ', u'       **num** : int, optional', u'   ', u'           Number of samples to generate. Default is 50.', u'   ', u'       **endpoint** : bool, optional', u'   ', u'           If True, `stop` is the last sample. Otherwise, it is not included.', u'           Default is True.', u'   ', u'       **retstep** : bool, optional', u'   ', u'           If True, return (`samples`, `step`), where `step` is the spacing', u'           between samples.', u'   ', u'       ****kwargs :** : ', u'   ', u'           additional keyword arguments are passed to SciDBDataShape', u'   ', u'   :Returns:', u'   ', u'       **samples** : SciDBArray', u'   ', u'           There are `num` equally spaced samples in the closed interval', u'           ``[start, stop]`` or the half-open interval ``[start, stop)``', u'           (depending on whether `endpoint` is True or False).', u'   ', u'       **step** : float (only if `retstep` is True)', u'   ', u'           Size of spacing between samples.', u'   ', u'', u'.. py:method:: SciDBShimInterface.list_arrays(parsed=True, n=0)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   List the arrays currently in the database', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **parsed** : boolean', u'   ', u'           If True (default), then parse the results into a dictionary of', u'           array names as keys, schema as values', u'   ', u'       **n** : integer', u'   ', u'           the maximum number of arrays to list.  If n=0, then list all', u'   ', u'   :Returns:', u'   ', u'       **array_list** : string or dictionary', u'   ', u'           The list of arrays.  If parsed=True, then the result is returned', u'           as a dictionary.', u'   ', u'', u'.. py:method:: SciDBShimInterface.log(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise natural logarithm', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.log10(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise base-10 logarithm', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.max(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis maximum.', u'   ', u'   see :meth:`SciDBArray.max` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.mean(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis mean.', u'   ', u'   see :meth:`SciDBArray.mean` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.merge(A, B)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Merge two arrays', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.min(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis minimum.', u'   ', u'   see :meth:`SciDBArray.min` ', u'   ', u'', u".. py:method:: SciDBShimInterface.new_array(shape=None, dtype='double', persistent=False, **kwargs)", u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Create a new array, either instantiating it in SciDB or simply', u'   reserving the name for use in a later query.', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **shape** : int or tuple (optional)', u'   ', u'           The shape of the array to create.  If not specified, no array', u'           will be created and a name will simply be reserved for later use.', u'           WARNING: if shape=None and persistent=False, an error will result', u'           when the array goes out of scope, unless the name is used to', u'           create an array on the server.', u'   ', u'       **dtype** : string (optional)', u'   ', u'           the datatype of the array.  This is only referenced if `shape`', u"           is specified.  Default is 'double'.", u'   ', u'       **persistent** : boolean (optional)', u'   ', u'           whether the created array should be persistent, i.e. survive', u'           in SciDB past when the object wrapper goes out of scope.  Default', u'           is False.', u'   ', u'       ****kwargs** : (optional)', u'   ', u'           If `shape` is specified, additional keyword arguments are passed', u'           to SciDBDataShape.  Otherwise, these will not be referenced.', u'   ', u'       **Returns** : ', u'   ', u'           ', u'   ', u'       **-------** : ', u'   ', u'           ', u'   ', u'       **arr** : SciDBArray', u'   ', u'           wrapper of the new SciDB array instance.', u'   ', u'', u".. py:method:: SciDBShimInterface.ones(shape, dtype='double', **kwargs)", u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Return an array of ones', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **shape** : tuple or int', u'   ', u'           The shape of the array', u'   ', u'       **dtype** : string or list', u'   ', u'           The data type of the array', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to SciDBDataShape.', u'   ', u'   :Returns:', u'   ', u'       **arr: SciDBArray** : ', u'   ', u'           A SciDBArray consisting of all ones.', u'   ', u'', u'.. py:method:: SciDBShimInterface.query(query, *args, **kwargs)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Perform a query on the database.', u'   ', u'   This wraps a query constructor which allows the creation of', u'   sophisticated SciDB queries which act on arrays wrapped by SciDBArray', u'   objects.  See Notes below for details.', u'   ', u'   :Parameters:', u'   ', u'       **query** : string', u'   ', u'           The query string, with curly-braces to indicate insertions', u'   ', u'       ***args, **kwargs :** : ', u'   ', u'           Values to be inserted (see below).', u'   ', u'', u".. py:method:: SciDBShimInterface.randint(shape, dtype='uint32', lower=0, upper=2147483647, persistent=False, **kwargs)", u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Return an array of random integers between lower and upper', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **shape** : tuple or int', u'   ', u'           The shape of the array', u'   ', u'       **dtype** : string or list', u'   ', u'           The data type of the array', u'   ', u'       **lower** : float', u'   ', u'           The lower bound of the random sample (default=0)', u'   ', u'       **upper** : float', u'   ', u'           The upper bound of the random sample (default=2147483647)', u'   ', u'       **persistent** : bool', u'   ', u'           Whether the array is persistent (default=False)', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to SciDBDataShape.', u'   ', u'   :Returns:', u'   ', u'       **arr: SciDBArray** : ', u'   ', u'           A SciDBArray consisting of random integers, uniformly distributed', u'           between `lower` and `upper`.', u'   ', u'', u".. py:method:: SciDBShimInterface.random(shape, dtype='double', lower=0, upper=1, persistent=False, **kwargs)", u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Return an array of random floats between lower and upper', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **shape** : tuple or int', u'   ', u'           The shape of the array', u'   ', u'       **dtype** : string or list', u'   ', u'           The data type of the array', u'   ', u'       **lower** : float', u'   ', u'           The lower bound of the random sample (default=0)', u'   ', u'       **upper** : float', u'   ', u'           The upper bound of the random sample (default=1)', u'   ', u'       **persistent** : bool', u'   ', u'           Whether the new array is persistent (default=False)', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to SciDBDataShape.', u'   ', u'   :Returns:', u'   ', u'       **arr: SciDBArray** : ', u'   ', u'           A SciDBArray consisting of random floating point numbers,', u'           uniformly distributed between `lower` and `upper`.', u'   ', u'', u'.. py:method:: SciDBShimInterface.reap()', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Reap all arrays created via new_array', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.sin(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise trigonometric sine', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.sqrt(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise square root', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.std(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis standard deviation.', u'   ', u'   see :meth:`SciDBArray.std` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.stdev(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis standard deviation.', u'   ', u'   see :meth:`SciDBArray.stdev` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.substitute(A, value)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Replace null values in an array', u'   ', u'   See :meth:`SciDBArray.substitute`', u'   ', u'', u'.. py:method:: SciDBShimInterface.sum(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis sum.', u'   ', u'   see :meth:`SciDBArray.sum` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.svd(A, return_U=True, return_S=True, return_VT=True)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Compute the Singular Value Decomposition of the array A:', u'   ', u'   A = U.S.V^T', u'   ', u'   :Parameters:', u'   ', u'       **A** : SciDBArray', u'   ', u'           The array for which the SVD will be computed.  It should be a', u'           2-dimensional array with a single value per cell.  Currently, the', u'           svd routine requires non-overlapping chunks of size 32.', u'   ', u'       **return_U, return_S, return_VT** : boolean', u'   ', u'           if any is True, then return the associated array.  All are True', u'           by default', u'   ', u'   :Returns:', u'   ', u'       **[U], [S], [VT]** : SciDBArrays', u'   ', u'           Arrays storing the singular values and vectors of A.', u'   ', u'', u'.. py:method:: SciDBShimInterface.tan(A)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Element-wise trigonometric tangent', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.toarray(A, transfer_bytes=True)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Convert a SciDB array to a numpy array', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.todataframe(A, transfer_bytes=True)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Convert a SciDB array to a pandas dataframe', u'   ', u'   ', u'', u".. py:method:: SciDBShimInterface.tosparse(A, sparse_fmt='recarray', transfer_bytes=True)", u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Convert a SciDB array to a sparse representation', u'   ', u'   ', u'', u'.. py:method:: SciDBShimInterface.var(A, index=None, scidb_syntax=False)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Array or axis variance.', u'   ', u'   see :meth:`SciDBArray.var` ', u'   ', u'', u'.. py:method:: SciDBShimInterface.wrap_array(scidbname, persistent=True)', u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Create a new SciDBArray object that references an existing SciDB', u'   array', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **scidbname** : string', u'   ', u'           Wrap an existing scidb array referred to by `scidbname`. The', u'           SciDB array object persistent value will be set to True, and', u'           the object shape, datashape and data type values will be', u'           determined by the SciDB array.', u'   ', u'       **persistent** : boolean', u'   ', u'           If True (default) then array will not be deleted when this', u'           variable goes out of scope. Warning: if persistent is set to', u'           False, data could be lost!', u'   ', u'', u".. py:method:: SciDBShimInterface.zeros(shape, dtype='double', **kwargs)", u'   :module: scidbpy.interface', u'', u'   ', u'   ', u'   Return an array of zeros', u'   ', u'   ', u'   :Parameters:', u'   ', u'       **shape** : tuple or int', u'   ', u'           The shape of the array', u'   ', u'       **dtype** : string or list', u'   ', u'           The data type of the array', u'   ', u'       ****kwargs :** : ', u'   ', u'           Additional keyword arguments are passed to SciDBDataShape.', u'   ', u'   :Returns:', u'   ', u'       **arr: SciDBArray** : ', u'   ', u'           A SciDBArray consisting of all zeros.']:3: ERROR: Unknown target name: "1".
looking for now-outdated files... none found
pickling environment... done
checking consistency... /Users/beaumont/scidbpy/doc/_templates/class.rst:: WARNING: document isn't included in any toctree
/Users/beaumont/scidbpy/doc/_templates/class_with_call.rst:: WARNING: document isn't included in any toctree
/Users/beaumont/scidbpy/doc/_templates/function.rst:: WARNING: document isn't included in any toctree
/Users/beaumont/scidbpy/doc/afldb.rst:: WARNING: document isn't included in any toctree
done
preparing documents... done
writing output... [  5%] _templates/class
writing output... [ 11%] _templates/class_with_call
writing output... [ 16%] _templates/function
writing output... [ 22%] access
writing output... [ 27%] afl
writing output... [ 33%] afldb
writing output... [ 38%] api
writing output... [ 44%] classes
writing output... [ 50%] comparison_and_filtering
writing output... [ 55%] connection
writing output... [ 61%] correlation
writing output... [ 66%] creation
writing output... [ 72%] demos
writing output... [ 77%] index
writing output... [ 83%] install
writing output... [ 88%] operations
writing output... [ 94%] query
writing output... [100%] tutorial

writing additional files... genindex py-modindex np-modindex search
copying downloadable files... [100%] /Users/beaumont/scidbpy/doc/correlation.py

copying static files... done
copying extra files... done
dumping search index... done
dumping object inventory... done
build succeeded, 41 warnings.
touch _build/html/.nojekyll

Build finished. The HTML pages are in _build/html.
