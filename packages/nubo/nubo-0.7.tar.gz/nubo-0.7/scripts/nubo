#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""     
    nubo
    ====

    CLI interface to multiple cloud providers.

    :copyright: (C) 2013 by Emanuele Rocca.
"""

import os
import sys
import argparse
import readline

from nubo.config import write_config, read_config
from nubo.clouds.base import supported_clouds, get_cloud, CLOUDS_MAPPING

from texttable import Texttable

def rlinput(prompt, prefill=''):
    readline.set_startup_hook(lambda: readline.insert_text(prefill))
    try:
        return raw_input(prompt)
    except (KeyboardInterrupt, EOFError):
        print
        sys.exit(0)
    finally:
        readline.set_startup_hook()

def print_table(rows):
    table = Texttable()
    table.set_deco(Texttable.HEADER)
    table.add_rows(rows)
    print table.draw()

def config(args):
    sclouds = supported_clouds()
    sclouds.sort()

    for idx, cloud in enumerate(sclouds):
        print "% 2s" % (1 + idx), cloud

    try:
        cloudidx = int(rlinput(
          "Please choose the cloud provider you want to setup [1-%d] " % 
            len(sclouds)))

        Cloud = get_cloud(sclouds[cloudidx - 1])
    except (IndexError, ValueError):
        return config(args)

    values = {}
    for what in Cloud.NEEDED_PARAMS:
        try:
            oldval = read_config()[CLOUDS_MAPPING[Cloud.PROVIDER_NAME]][what]
        except (IndexError, KeyError):
            oldval = ''
        values[what] = rlinput('Please provide your API %s: ' % what, oldval)

    if Cloud.test_conn(**values):
        write_config({ CLOUDS_MAPPING[Cloud.PROVIDER_NAME]: values })
        print Cloud.PROVIDER_NAME, "cloud configured properly" 
        return
    else:
        print "\nE: Invalid Credentials\n"
        return config(args)

def clouds(args):
    for cl in supported_clouds():
        print cl

def images(args):
    Cloud = get_cloud()

    images = Cloud().list_images(keyword=args.keyword, limit=args.limit)

    print len(images), "images available on", Cloud.PROVIDER_NAME

    if not images:
        return

    rows = [ [ 'id', 'name', ] ]
    for img in images:
        rows.append([ img.id, img.name ])

    print_table(rows)

def sizes(args):
    Cloud = get_cloud()

    rows = [ [ 'id', 'name', ] ]

    for idx, name in enumerate(Cloud().list_sizes()):
        rows.append([ idx, name ])

    print_table(rows)

def list_(args):
    Cloud = get_cloud()

    nodes = Cloud().list_nodes()
    print len(nodes), "VMs running on", Cloud.PROVIDER_NAME

    if not nodes:
        return

    rows = [ [ 'id', 'name', 'state', 'ip' ] ]
    for node in nodes:
        rows.append([ node['id'], 
                      node['name'], 
                      node['state'], 
                      ', '.join(node['public_ips']) ])

    print_table(rows)

def start(args):
    CloudClass = get_cloud()
    
    cloud = CloudClass(ssh_private_key=args.privkey, login_as=args.user)

    vm = cloud.deploy(image_id=args.imageid, size_idx=args.sizeid, 
        name=args.name)

    print "Instance %s available on %s. Login as %s@%s" % (
        vm['id'], os.getenv('NUBO_CLOUD'), args.user, ', '.join(vm['public_ips']))

def reboot(args):
    if get_cloud()().reboot(args.vmid):
        print args.vmid, "rebooted"

def delete(args):
    if get_cloud()().shutdown(args.vmid):
        print args.vmid, "deleted"

def main():
    arger = argparse.ArgumentParser(
        #usage='%(prog)s [options]',
        description='Start Virtual Machines on multiple clouds')

    subparsers = arger.add_subparsers()
    
    # config
    parser_config = subparsers.add_parser("config", 
        help="set your cloud credentials")
    parser_config.set_defaults(func=config)

    # clouds
    parser_clouds = subparsers.add_parser("clouds", 
        help="list available clouds")
    parser_clouds.set_defaults(func=clouds)

    # list
    parser_list = subparsers.add_parser("list", help="list running VMs")
    parser_list.set_defaults(func=list_)

    # images
    parser_images = subparsers.add_parser("images", 
        help="list available images")
    parser_images.add_argument("--keyword", default='')
    parser_images.add_argument("--limit", default=0, type=int,
        help='the number of images to display')
    parser_images.set_defaults(func=images)

    # sizes
    parser_sizes = subparsers.add_parser("sizes", 
        help="list available instance sizes")
    parser_sizes.set_defaults(func=sizes)
    
    # start
    parser_start = subparsers.add_parser("start", help="start a new VM")
    parser_start.add_argument("imageid")
    parser_start.add_argument("--user", default='root')
    parser_start.add_argument("--privkey", default=None)
    parser_start.add_argument("--sizeid", default=0, type=int)
    parser_start.add_argument("--name", default='new-instance')
    parser_start.set_defaults(func=start)

    # reboot
    parser_reboot = subparsers.add_parser("reboot", help="reboot a given VM")
    parser_reboot.add_argument("vmid")
    parser_reboot.set_defaults(func=reboot)

    # delete
    parser_delete = subparsers.add_parser("delete", help="delete a given VM")
    parser_delete.add_argument("vmid")
    parser_delete.set_defaults(func=delete)

    if len(sys.argv) == 1:
        # At least one argument is expected
        arger.print_help()
        return

    # We got (at least) one argument
    opts = arger.parse_args()
    opts.func(opts)

if __name__ == "__main__":
    main()
