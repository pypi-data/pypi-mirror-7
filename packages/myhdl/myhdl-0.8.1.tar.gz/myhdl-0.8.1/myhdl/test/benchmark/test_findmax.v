// File: test_findmax.v
// Generated by MyHDL 0.8.1
// Date: Fri Apr 11 14:53:52 2014


`timescale 1ns/10ps

module test_findmax (

);



reg stopped;
reg [15:0] z;
reg clock;
reg [15:0] dut_zhi;
reg [15:0] dut_zlo;
reg [15:0] dut_comphi_zhi;
reg [15:0] dut_comphi_zlo;
reg [15:0] dut_comphi_comphi_zhi;
reg [15:0] dut_comphi_comphi_zlo;
reg [15:0] dut_comphi_comphi_comphi_zhi;
reg [15:0] dut_comphi_comphi_comphi_zlo;
reg [15:0] dut_comphi_comphi_complo_zhi;
reg [15:0] dut_comphi_comphi_complo_zlo;
reg [15:0] dut_comphi_complo_zhi;
reg [15:0] dut_comphi_complo_zlo;
reg [15:0] dut_comphi_complo_comphi_zhi;
reg [15:0] dut_comphi_complo_comphi_zlo;
reg [15:0] dut_comphi_complo_complo_zhi;
reg [15:0] dut_comphi_complo_complo_zlo;
reg [15:0] dut_complo_zhi;
reg [15:0] dut_complo_zlo;
reg [15:0] dut_complo_comphi_zhi;
reg [15:0] dut_complo_comphi_zlo;
reg [15:0] dut_complo_comphi_comphi_zhi;
reg [15:0] dut_complo_comphi_comphi_zlo;
reg [15:0] dut_complo_comphi_complo_zhi;
reg [15:0] dut_complo_comphi_complo_zlo;
reg [15:0] dut_complo_complo_zhi;
reg [15:0] dut_complo_complo_zlo;
reg [15:0] dut_complo_complo_comphi_zhi;
reg [15:0] dut_complo_complo_comphi_zlo;
reg [15:0] dut_complo_complo_complo_zhi;
reg [15:0] dut_complo_complo_complo_zlo;

reg [15:0] a [0:32-1];



function [32-1:0] MYHDL108_glibc_random;
    input [32-1:0] seed;
    reg [64-1:0] random_word;
begin: MYHDL109_RETURN
    random_word = 64'h0;
    random_word = ((seed * 32'h41c64e6d) + 12345);
    MYHDL108_glibc_random = random_word[32-1:0];
    disable MYHDL109_RETURN;
end
endfunction


always @(dut_zhi, dut_zlo) begin: TEST_FINDMAX_DUT_COMP2_LOGIC
    if ((dut_zhi > dut_zlo)) begin
        z = dut_zhi;
    end
    else begin
        z = dut_zlo;
    end
end


always @(dut_complo_zhi, dut_complo_zlo) begin: TEST_FINDMAX_DUT_COMPLO_COMP2_LOGIC
    if ((dut_complo_zhi > dut_complo_zlo)) begin
        dut_zlo = dut_complo_zhi;
    end
    else begin
        dut_zlo = dut_complo_zlo;
    end
end


always @(dut_complo_complo_zhi, dut_complo_complo_zlo) begin: TEST_FINDMAX_DUT_COMPLO_COMPLO_COMP2_LOGIC
    if ((dut_complo_complo_zhi > dut_complo_complo_zlo)) begin
        dut_complo_zlo = dut_complo_complo_zhi;
    end
    else begin
        dut_complo_zlo = dut_complo_complo_zlo;
    end
end


always @(dut_complo_complo_complo_zhi, dut_complo_complo_complo_zlo) begin: TEST_FINDMAX_DUT_COMPLO_COMPLO_COMPLO_COMP2_LOGIC
    if ((dut_complo_complo_complo_zhi > dut_complo_complo_complo_zlo)) begin
        dut_complo_complo_zlo = dut_complo_complo_complo_zhi;
    end
    else begin
        dut_complo_complo_zlo = dut_complo_complo_complo_zlo;
    end
end


always @(a[31], a[30]) begin: TEST_FINDMAX_DUT_COMPLO_COMPLO_COMPLO_COMPLO_COMP2_LOGIC
    if ((a[31] > a[30])) begin
        dut_complo_complo_complo_zlo = a[31];
    end
    else begin
        dut_complo_complo_complo_zlo = a[30];
    end
end


always @(a[29], a[28]) begin: TEST_FINDMAX_DUT_COMPLO_COMPLO_COMPLO_COMPHI_COMP2_LOGIC
    if ((a[29] > a[28])) begin
        dut_complo_complo_complo_zhi = a[29];
    end
    else begin
        dut_complo_complo_complo_zhi = a[28];
    end
end


always @(dut_complo_complo_comphi_zhi, dut_complo_complo_comphi_zlo) begin: TEST_FINDMAX_DUT_COMPLO_COMPLO_COMPHI_COMP2_LOGIC
    if ((dut_complo_complo_comphi_zhi > dut_complo_complo_comphi_zlo)) begin
        dut_complo_complo_zhi = dut_complo_complo_comphi_zhi;
    end
    else begin
        dut_complo_complo_zhi = dut_complo_complo_comphi_zlo;
    end
end


always @(a[27], a[26]) begin: TEST_FINDMAX_DUT_COMPLO_COMPLO_COMPHI_COMPLO_COMP2_LOGIC
    if ((a[27] > a[26])) begin
        dut_complo_complo_comphi_zlo = a[27];
    end
    else begin
        dut_complo_complo_comphi_zlo = a[26];
    end
end


always @(a[25], a[24]) begin: TEST_FINDMAX_DUT_COMPLO_COMPLO_COMPHI_COMPHI_COMP2_LOGIC
    if ((a[25] > a[24])) begin
        dut_complo_complo_comphi_zhi = a[25];
    end
    else begin
        dut_complo_complo_comphi_zhi = a[24];
    end
end


always @(dut_complo_comphi_zhi, dut_complo_comphi_zlo) begin: TEST_FINDMAX_DUT_COMPLO_COMPHI_COMP2_LOGIC
    if ((dut_complo_comphi_zhi > dut_complo_comphi_zlo)) begin
        dut_complo_zhi = dut_complo_comphi_zhi;
    end
    else begin
        dut_complo_zhi = dut_complo_comphi_zlo;
    end
end


always @(dut_complo_comphi_complo_zhi, dut_complo_comphi_complo_zlo) begin: TEST_FINDMAX_DUT_COMPLO_COMPHI_COMPLO_COMP2_LOGIC
    if ((dut_complo_comphi_complo_zhi > dut_complo_comphi_complo_zlo)) begin
        dut_complo_comphi_zlo = dut_complo_comphi_complo_zhi;
    end
    else begin
        dut_complo_comphi_zlo = dut_complo_comphi_complo_zlo;
    end
end


always @(a[23], a[22]) begin: TEST_FINDMAX_DUT_COMPLO_COMPHI_COMPLO_COMPLO_COMP2_LOGIC
    if ((a[23] > a[22])) begin
        dut_complo_comphi_complo_zlo = a[23];
    end
    else begin
        dut_complo_comphi_complo_zlo = a[22];
    end
end


always @(a[21], a[20]) begin: TEST_FINDMAX_DUT_COMPLO_COMPHI_COMPLO_COMPHI_COMP2_LOGIC
    if ((a[21] > a[20])) begin
        dut_complo_comphi_complo_zhi = a[21];
    end
    else begin
        dut_complo_comphi_complo_zhi = a[20];
    end
end


always @(dut_complo_comphi_comphi_zhi, dut_complo_comphi_comphi_zlo) begin: TEST_FINDMAX_DUT_COMPLO_COMPHI_COMPHI_COMP2_LOGIC
    if ((dut_complo_comphi_comphi_zhi > dut_complo_comphi_comphi_zlo)) begin
        dut_complo_comphi_zhi = dut_complo_comphi_comphi_zhi;
    end
    else begin
        dut_complo_comphi_zhi = dut_complo_comphi_comphi_zlo;
    end
end


always @(a[19], a[18]) begin: TEST_FINDMAX_DUT_COMPLO_COMPHI_COMPHI_COMPLO_COMP2_LOGIC
    if ((a[19] > a[18])) begin
        dut_complo_comphi_comphi_zlo = a[19];
    end
    else begin
        dut_complo_comphi_comphi_zlo = a[18];
    end
end


always @(a[17], a[16]) begin: TEST_FINDMAX_DUT_COMPLO_COMPHI_COMPHI_COMPHI_COMP2_LOGIC
    if ((a[17] > a[16])) begin
        dut_complo_comphi_comphi_zhi = a[17];
    end
    else begin
        dut_complo_comphi_comphi_zhi = a[16];
    end
end


always @(dut_comphi_zhi, dut_comphi_zlo) begin: TEST_FINDMAX_DUT_COMPHI_COMP2_LOGIC
    if ((dut_comphi_zhi > dut_comphi_zlo)) begin
        dut_zhi = dut_comphi_zhi;
    end
    else begin
        dut_zhi = dut_comphi_zlo;
    end
end


always @(dut_comphi_complo_zhi, dut_comphi_complo_zlo) begin: TEST_FINDMAX_DUT_COMPHI_COMPLO_COMP2_LOGIC
    if ((dut_comphi_complo_zhi > dut_comphi_complo_zlo)) begin
        dut_comphi_zlo = dut_comphi_complo_zhi;
    end
    else begin
        dut_comphi_zlo = dut_comphi_complo_zlo;
    end
end


always @(dut_comphi_complo_complo_zhi, dut_comphi_complo_complo_zlo) begin: TEST_FINDMAX_DUT_COMPHI_COMPLO_COMPLO_COMP2_LOGIC
    if ((dut_comphi_complo_complo_zhi > dut_comphi_complo_complo_zlo)) begin
        dut_comphi_complo_zlo = dut_comphi_complo_complo_zhi;
    end
    else begin
        dut_comphi_complo_zlo = dut_comphi_complo_complo_zlo;
    end
end


always @(a[15], a[14]) begin: TEST_FINDMAX_DUT_COMPHI_COMPLO_COMPLO_COMPLO_COMP2_LOGIC
    if ((a[15] > a[14])) begin
        dut_comphi_complo_complo_zlo = a[15];
    end
    else begin
        dut_comphi_complo_complo_zlo = a[14];
    end
end


always @(a[13], a[12]) begin: TEST_FINDMAX_DUT_COMPHI_COMPLO_COMPLO_COMPHI_COMP2_LOGIC
    if ((a[13] > a[12])) begin
        dut_comphi_complo_complo_zhi = a[13];
    end
    else begin
        dut_comphi_complo_complo_zhi = a[12];
    end
end


always @(dut_comphi_complo_comphi_zhi, dut_comphi_complo_comphi_zlo) begin: TEST_FINDMAX_DUT_COMPHI_COMPLO_COMPHI_COMP2_LOGIC
    if ((dut_comphi_complo_comphi_zhi > dut_comphi_complo_comphi_zlo)) begin
        dut_comphi_complo_zhi = dut_comphi_complo_comphi_zhi;
    end
    else begin
        dut_comphi_complo_zhi = dut_comphi_complo_comphi_zlo;
    end
end


always @(a[11], a[10]) begin: TEST_FINDMAX_DUT_COMPHI_COMPLO_COMPHI_COMPLO_COMP2_LOGIC
    if ((a[11] > a[10])) begin
        dut_comphi_complo_comphi_zlo = a[11];
    end
    else begin
        dut_comphi_complo_comphi_zlo = a[10];
    end
end


always @(a[9], a[8]) begin: TEST_FINDMAX_DUT_COMPHI_COMPLO_COMPHI_COMPHI_COMP2_LOGIC
    if ((a[9] > a[8])) begin
        dut_comphi_complo_comphi_zhi = a[9];
    end
    else begin
        dut_comphi_complo_comphi_zhi = a[8];
    end
end


always @(dut_comphi_comphi_zhi, dut_comphi_comphi_zlo) begin: TEST_FINDMAX_DUT_COMPHI_COMPHI_COMP2_LOGIC
    if ((dut_comphi_comphi_zhi > dut_comphi_comphi_zlo)) begin
        dut_comphi_zhi = dut_comphi_comphi_zhi;
    end
    else begin
        dut_comphi_zhi = dut_comphi_comphi_zlo;
    end
end


always @(dut_comphi_comphi_complo_zhi, dut_comphi_comphi_complo_zlo) begin: TEST_FINDMAX_DUT_COMPHI_COMPHI_COMPLO_COMP2_LOGIC
    if ((dut_comphi_comphi_complo_zhi > dut_comphi_comphi_complo_zlo)) begin
        dut_comphi_comphi_zlo = dut_comphi_comphi_complo_zhi;
    end
    else begin
        dut_comphi_comphi_zlo = dut_comphi_comphi_complo_zlo;
    end
end


always @(a[7], a[6]) begin: TEST_FINDMAX_DUT_COMPHI_COMPHI_COMPLO_COMPLO_COMP2_LOGIC
    if ((a[7] > a[6])) begin
        dut_comphi_comphi_complo_zlo = a[7];
    end
    else begin
        dut_comphi_comphi_complo_zlo = a[6];
    end
end


always @(a[5], a[4]) begin: TEST_FINDMAX_DUT_COMPHI_COMPHI_COMPLO_COMPHI_COMP2_LOGIC
    if ((a[5] > a[4])) begin
        dut_comphi_comphi_complo_zhi = a[5];
    end
    else begin
        dut_comphi_comphi_complo_zhi = a[4];
    end
end


always @(dut_comphi_comphi_comphi_zhi, dut_comphi_comphi_comphi_zlo) begin: TEST_FINDMAX_DUT_COMPHI_COMPHI_COMPHI_COMP2_LOGIC
    if ((dut_comphi_comphi_comphi_zhi > dut_comphi_comphi_comphi_zlo)) begin
        dut_comphi_comphi_zhi = dut_comphi_comphi_comphi_zhi;
    end
    else begin
        dut_comphi_comphi_zhi = dut_comphi_comphi_comphi_zlo;
    end
end


always @(a[3], a[2]) begin: TEST_FINDMAX_DUT_COMPHI_COMPHI_COMPHI_COMPLO_COMP2_LOGIC
    if ((a[3] > a[2])) begin
        dut_comphi_comphi_comphi_zlo = a[3];
    end
    else begin
        dut_comphi_comphi_comphi_zlo = a[2];
    end
end


always @(a[1], a[0]) begin: TEST_FINDMAX_DUT_COMPHI_COMPHI_COMPHI_COMPHI_COMP2_LOGIC
    if ((a[1] > a[0])) begin
        dut_comphi_comphi_comphi_zhi = a[1];
    end
    else begin
        dut_comphi_comphi_comphi_zhi = a[0];
    end
end


initial begin: TEST_FINDMAX_CLOCKGEN
    clock <= 0;
    # 10;
    while ((!stopped)) begin
        clock <= (!clock);
        # 10;
    end
end


initial begin: TEST_FINDMAX_STIMULUS
    integer i;
    integer s;
    reg [32-1:0] random_word;
    reg [16-1:0] val;
    reg [16-1:0] exp;
    stopped <= 0;
    # 10;
    exp = 16'h0;
    val = 16'h0;
    random_word = 32'h0;
    random_word = 93;
    for (i=0; i<(2 ** 18); i=i+1) begin
        exp = 0;
        for (s=0; s<32; s=s+1) begin
            random_word = MYHDL108_glibc_random(random_word);
            val = random_word[16-1:0];
            if ((exp < val)) begin
                exp = val;
            end
            a[s] <= val;
        end
        @(negedge clock);
        if ((z == exp) !== 1) begin
            $display("*** AssertionError ***");
        end
    end
    stopped <= 1;
    # 10;
end

endmodule
