docs = 'eyJfaWQiOiAiX2Rlc2lnbi9kb2NzIiwgInZpZXdzIjogeyJnZXQiOiB7Im1hcCI6ICJmdW5jdGlvbihkb2MpIHtcbiAgICBpZiAoZG9jLnUxZGJfcmV2KSB7XG4gICAgICAgIHZhciBpc190b21ic3RvbmUgPSB0cnVlO1xuICAgICAgICB2YXIgaGFzX2NvbmZsaWN0cyA9IGZhbHNlO1xuICAgICAgICBpZiAoZG9jLl9hdHRhY2htZW50cykge1xuICAgICAgICAgICAgaWYgKGRvYy5fYXR0YWNobWVudHMudTFkYl9jb250ZW50KVxuICAgICAgICAgICAgICAgIGlzX3RvbWJzdG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGRvYy5fYXR0YWNobWVudHMudTFkYl9jb25mbGljdHMpXG4gICAgICAgICAgICAgICAgaGFzX2NvbmZsaWN0cyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZW1pdChkb2MuX2lkLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY291Y2hfcmV2XCI6IGRvYy5fcmV2LFxuICAgICAgICAgICAgICAgIFwidTFkYl9yZXZcIjogZG9jLnUxZGJfcmV2LFxuICAgICAgICAgICAgICAgIFwiaXNfdG9tYnN0b25lXCI6IGlzX3RvbWJzdG9uZSxcbiAgICAgICAgICAgICAgICBcImhhc19jb25mbGljdHNcIjogaGFzX2NvbmZsaWN0cyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG59XG4ifX19'
syncs = ''
transactions = 'eyJfaWQiOiAiX2Rlc2lnbi90cmFuc2FjdGlvbnMiLCAibGlzdHMiOiB7ImdlbmVyYXRpb24iOiAiZnVuY3Rpb24oaGVhZCwgcmVxKSB7XG4gICAgdmFyIHJvdztcbiAgICB2YXIgcm93cz1bXTtcbiAgICAvLyBmZXRjaCBhbGwgcm93c1xuICAgIHdoaWxlKHJvdyA9IGdldFJvdygpKSB7XG4gICAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cbiAgICBpZiAocm93cy5sZW5ndGggPiAwKVxuICAgICAgICBzZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIFwiZ2VuZXJhdGlvblwiOiByb3dzLmxlbmd0aCxcbiAgICAgICAgICAgIFwiZG9jX2lkXCI6IHJvd3Nbcm93cy5sZW5ndGgtMV1bJ2lkJ10sXG4gICAgICAgICAgICBcInRyYW5zYWN0aW9uX2lkXCI6IHJvd3Nbcm93cy5sZW5ndGgtMV1bJ3ZhbHVlJ11cbiAgICAgICAgfSkpO1xuICAgIGVsc2VcbiAgICAgICAgc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBcImdlbmVyYXRpb25cIjogMCxcbiAgICAgICAgICAgIFwiZG9jX2lkXCI6IFwiXCIsXG4gICAgICAgICAgICBcInRyYW5zYWN0aW9uX2lkXCI6IFwiXCIsXG4gICAgICAgIH0pKTtcbn1cbiIsICJ0cmFuc19pZF9mb3JfZ2VuIjogImZ1bmN0aW9uKGhlYWQsIHJlcSkge1xuICAgIHZhciByb3c7XG4gICAgdmFyIHJvd3M9W107XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciBnZW4gPSAxO1xuICAgIGlmIChyZXEucXVlcnkuZ2VuKVxuICAgICAgICBnZW4gPSBwYXJzZUludChyZXEucXVlcnlbJ2dlbiddKTtcbiAgICAvLyBmZXRjaCBhbGwgcm93c1xuICAgIHdoaWxlKHJvdyA9IGdldFJvdygpKVxuICAgICAgICByb3dzLnB1c2gocm93KTtcbiAgICBpZiAoZ2VuIDw9IHJvd3MubGVuZ3RoKVxuICAgICAgICBzZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIFwiZ2VuZXJhdGlvblwiOiBnZW4sXG4gICAgICAgICAgICBcImRvY19pZFwiOiByb3dzW2dlbi0xXVsnaWQnXSxcbiAgICAgICAgICAgIFwidHJhbnNhY3Rpb25faWRcIjogcm93c1tnZW4tMV1bJ3ZhbHVlJ10sXG4gICAgICAgIH0pKTtcbiAgICBlbHNlXG4gICAgICAgIHNlbmQoJ3t9Jyk7XG59XG4iLCAid2hhdHNfY2hhbmdlZCI6ICJmdW5jdGlvbihoZWFkLCByZXEpIHtcbiAgICB2YXIgcm93O1xuICAgIHZhciBnZW4gPSAxO1xuICAgIHZhciBvbGRfZ2VuID0gMDtcbiAgICBpZiAocmVxLnF1ZXJ5Lm9sZF9nZW4pXG4gICAgICAgIG9sZF9nZW4gPSBwYXJzZUludChyZXEucXVlcnlbJ29sZF9nZW4nXSk7XG4gICAgc2VuZCgne1widHJhbnNhY3Rpb25zXCI6W1xcbicpO1xuICAgIC8vIGZldGNoIGFsbCByb3dzXG4gICAgd2hpbGUocm93ID0gZ2V0Um93KCkpIHtcbiAgICAgICAgaWYgKGdlbiA+IG9sZF9nZW4pIHtcbiAgICAgICAgICAgIGlmIChnZW4gPiBvbGRfZ2VuKzEpXG4gICAgICAgICAgICAgICAgc2VuZCgnLFxcbicpO1xuICAgICAgICAgICAgc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgXCJnZW5lcmF0aW9uXCI6IGdlbixcbiAgICAgICAgICAgICAgICBcImRvY19pZFwiOiByb3dbXCJpZFwiXSxcbiAgICAgICAgICAgICAgICBcInRyYW5zYWN0aW9uX2lkXCI6IHJvd1tcInZhbHVlXCJdXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2VuKys7XG4gICAgfVxuICAgIHNlbmQoJ1xcbl19Jyk7XG59XG4ifSwgInZpZXdzIjogeyJsb2ciOiB7Im1hcCI6ICJmdW5jdGlvbihkb2MpIHtcbiAgICBpZiAoZG9jLnUxZGJfdHJhbnNhY3Rpb25zKVxuICAgICAgICBkb2MudTFkYl90cmFuc2FjdGlvbnMuZm9yRWFjaChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBlbWl0KHRbMF0sICAvLyB1c2UgdGltZXN0YW1wIGFzIGtleSBzbyB0aGUgcmVzdWx0cyBhcmUgb3JkZXJlZFxuICAgICAgICAgICAgICAgICB0WzFdKTsgLy8gdmFsdWUgaXMgdGhlIHRyYW5zYWN0aW9uX2lkXG4gICAgICAgIH0pO1xufVxuIn19fQ=='
