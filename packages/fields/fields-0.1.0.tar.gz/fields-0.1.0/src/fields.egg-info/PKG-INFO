Metadata-Version: 1.1
Name: fields
Version: 0.1.0
Summary: An example package. Replace this with a proper project description. Generated with https://github.com/ionelmc/cookiecutter-pylibrary
Home-page: https://github.com/ionelmc/python-fields
Author: Ionel Cristian Mărieș
Author-email: contact@ionelmc.ro
License: BSD
Description: ===============================
        python-fields
        ===============================
        
        .. image:: http://img.shields.io/travis/ionelmc/python-fields/master.png
            :alt: Travis-CI Build Status
            :target: https://travis-ci.org/ionelmc/python-fields
        
        .. image:: https://ci.appveyor.com/api/projects/status/hrpb3ksl0sf1qyi8/branch/master
            :alt: AppVeyor Build Status
            :target: https://ci.appveyor.com/project/ionelmc/python-fields
        
        .. image:: http://img.shields.io/coveralls/ionelmc/python-fields/master.png
            :alt: Coverage Status
            :target: https://coveralls.io/r/ionelmc/python-fields
        
        .. image:: http://img.shields.io/pypi/v/fields.png
            :alt: PYPI Package
            :target: https://pypi.python.org/pypi/fields
        
        .. image:: http://img.shields.io/pypi/dm/fields.png
            :alt: PYPI Package
            :target: https://pypi.python.org/pypi/fields
        
        Container class boilerplate killer.
        
        Features:
        
        * Human-readable ``__repr__``
        * Complete set of comparison methods
        * Keyword and positional argument support. Works like a normal class - you can override just about anything in the
          subclass (eg: a custom ``__init__``). In contrast, `hynek/characteristic <https://github.com/hynek/characteristic>`_
          forces different call schematics and calls your ``__init__`` with different arguments.
        
        
        Installation
        ============
        
        ::
        
            pip install fields
        
        Usage
        =====
        
        ::
        
            >>> from fields import Fields
            >>>
            >>> class Pair(Fields.a.b):
            ...     pass
            ...
            >>> p = Pair(1, 2)
            >>> p.a
            1
            >>> p.b
            2
            >>> class Node(Fields.value.left(None).right(None)):
            ...     pass
            ...
            >>> p = Node(1, left=Node(2), right=Node(3, left=Node(4)))
            >>> p
            <Node(left=<Node(left=None, right=None, value=2)>, right=<Node(left=<Node(left=None, right=None, value=4)>, right=None, value=3)>, value=1)>
        
        Documentation
        =============
        
        https://python-fields.readthedocs.org/
        
        Development
        ===========
        
        To run the all tests run::
        
            tox
        
        
        Changelog
        =========
        
        0.1.0 (2014-06-08)
        -----------------------------------------
        
        * First release on PyPI.
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: Unix
Classifier: Operating System :: POSIX
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Utilities
