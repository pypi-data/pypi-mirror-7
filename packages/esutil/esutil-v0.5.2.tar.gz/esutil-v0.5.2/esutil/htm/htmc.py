# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _htmc
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class HTMC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTMC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTMC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _htmc.new_HTMC(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(*args): return _htmc.HTMC_init(*args)
    __swig_destroy__ = _htmc.delete_HTMC
    __del__ = lambda self : None;
    def lookup_id(*args):
        """
        Class:
            HTM

        Method Name:
            lookup_id

        Purpose:

            Return the index of the input ra/dec at the current htm depth.   ra/dec may
            be arrays.

        Calling Sequence:

            import esutil
            h=esutil.htm.HTM(depth)
            htmid = h.lookup_id(ra, dec)

        Inputs:
            ra,dec:  Scalars or arrays of equal length.

        Outputs:
            htmid:  An array with the htm id.

        Example:

            >>> import esutil
            >>> h=esutil.htm.HTM(depth)
            >>> htmid = h.lookup_id(ra, dec)

        Revision History:
            2010-03-03:  SWIG wrapper completed.  Erin Sheldon, BNL.

        """
        return _htmc.HTMC_lookup_id(*args)

    def cmatch(*args):
        """
        Class:
            HTM

        Method Name:
            lookup_id

        Purpose:

            Return the index of the input ra/dec at the current htm depth.   ra/dec may
            be arrays.

        Calling Sequence:

            import esutil
            h=esutil.htm.HTM(depth)
            htmid = h.lookup_id(ra, dec)

        Inputs:
            ra,dec:  Scalars or arrays of equal length.

        Outputs:
            htmid:  An array with the htm id.

        Example:

            >>> import esutil
            >>> h=esutil.htm.HTM(depth)
            >>> htmid = h.lookup_id(ra, dec)

        Revision History:
            2010-03-03:  SWIG wrapper completed.  Erin Sheldon, BNL.

        """
        return _htmc.HTMC_cmatch(*args)

    def cbincount(*args):
        """
        Class:
            HTM

        Method Name:
            lookup_id

        Purpose:

            Return the index of the input ra/dec at the current htm depth.   ra/dec may
            be arrays.

        Calling Sequence:

            import esutil
            h=esutil.htm.HTM(depth)
            htmid = h.lookup_id(ra, dec)

        Inputs:
            ra,dec:  Scalars or arrays of equal length.

        Outputs:
            htmid:  An array with the htm id.

        Example:

            >>> import esutil
            >>> h=esutil.htm.HTM(depth)
            >>> htmid = h.lookup_id(ra, dec)

        Revision History:
            2010-03-03:  SWIG wrapper completed.  Erin Sheldon, BNL.

        """
        return _htmc.HTMC_cbincount(*args)

    def depth(*args):
        """
        Class:
            HTM

        Method Name:
            lookup_id

        Purpose:

            Return the index of the input ra/dec at the current htm depth.   ra/dec may
            be arrays.

        Calling Sequence:

            import esutil
            h=esutil.htm.HTM(depth)
            htmid = h.lookup_id(ra, dec)

        Inputs:
            ra,dec:  Scalars or arrays of equal length.

        Outputs:
            htmid:  An array with the htm id.

        Example:

            >>> import esutil
            >>> h=esutil.htm.HTM(depth)
            >>> htmid = h.lookup_id(ra, dec)

        Revision History:
            2010-03-03:  SWIG wrapper completed.  Erin Sheldon, BNL.

        """
        return _htmc.HTMC_depth(*args)

HTMC_swigregister = _htmc.HTMC_swigregister
HTMC_swigregister(HTMC)



