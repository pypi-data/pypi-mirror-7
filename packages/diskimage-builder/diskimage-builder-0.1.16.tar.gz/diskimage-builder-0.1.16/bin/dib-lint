#!/bin/bash

# Copyright 2014 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script checks all files in the "elements" directory for some
# common mistakes and exits with a non-zero status if it finds any.

set -eu
set -o pipefail

parse_exclusions() {
    # Exclusions are currently only read on a per-file basis
    local filename=$1
    local disable_pattern="# dib-lint: disable="
    local exclusions=$(grep "^$disable_pattern.*$" $filename | sed "s/$disable_pattern//g")
    echo $exclusions
}

excluded() {
    local test_name=$1
    for e in $exclusions; do
        if [ "$e" = "$test_name" ]; then
            return 0
        fi
    done
    return 1
}

rc=0
TMPDIR=$(mktemp -d)
trap "rm -rf $TMPDIR" EXIT
for i in $(find elements -type f); do
    exclusions=("$(parse_exclusions $i)")
    # Check that files starting with a shebang are +x
    if ! excluded executable; then
        firstline=$(head -n 1 "$i")
        if [ ! -x "$i" ] && [ "${firstline:0:2}" = "#!" ]; then
            echo "ERROR: $i is not executable"
            rc=1
        fi
    fi

    # Check alphabetical ordering of element-deps
    if [ $(basename $i) = "element-deps" ]; then
        UNSORTED=${TMPDIR}/element-deps.unsorted
        SORTED=${TMPDIR}/element-deps.sorted
        grep -v '^#' $i > ${UNSORTED}
        sort ${UNSORTED} > ${SORTED}
        diff -c ${UNSORTED} ${SORTED}
        if [ $? -ne 0 ]; then
            echo "ERROR: $i is not sorted alphabetically"
            rc=1
        fi
    fi

    # Check that all scripts are set -e
    # NOTE(bnemec): This doesn't verify that the set call occurs high
    # enough in the file to be useful, but hopefully nobody will be
    # sticking set calls at the end of their file to trick us.  And if
    # they are, that's easy enough to catch in reviews.
    # Also, this is only going to check bash scripts - we've decided to
    # explicitly require bash for any scripts that don't have a specific
    # need to run under other shells, and any exceptions to that rule
    # may not want these checks either.
    if [ -n "$(echo $firstline | grep '#!/bin/bash')" ]; then
        if ! excluded sete; then
            if [ -z "$(grep "^set -[^ ]*e" $i)" ]; then
                echo "ERROR: $i is not set -e"
                rc=1
            fi
        fi
    fi
done

for i in $(find elements -type f -and -name '*.md' -or -type f -executable); do
    # Check for tab indentation
    if grep -q $'^ *\t' ${i}; then
        echo "ERROR: $i contains tab characters"
        rc=1
    fi
done
exit $rc
