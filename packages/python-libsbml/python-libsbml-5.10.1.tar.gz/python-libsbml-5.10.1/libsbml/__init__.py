# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsbml', [dirname(__file__)])
        except ImportError:
            import _libsbml
            return _libsbml
        if fp is not None:
            try:
                _mod = imp.load_module('_libsbml', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsbml = swig_import_helper()
    del swig_import_helper
else:
    import _libsbml
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class ModelCreatorList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelCreatorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelCreatorList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbml.new_ModelCreatorList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ModelCreatorList
    __del__ = lambda self : None;
    def add(self, *args): return _libsbml.ModelCreatorList_add(self, *args)
    def get(self, *args): return _libsbml.ModelCreatorList_get(self, *args)
    def prepend(self, *args): return _libsbml.ModelCreatorList_prepend(self, *args)
    def remove(self, *args): return _libsbml.ModelCreatorList_remove(self, *args)
    def getSize(self): return _libsbml.ModelCreatorList_getSize(self)
ModelCreatorList_swigregister = _libsbml.ModelCreatorList_swigregister
ModelCreatorList_swigregister(ModelCreatorList)

class DateList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbml.new_DateList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_DateList
    __del__ = lambda self : None;
    def add(self, *args): return _libsbml.DateList_add(self, *args)
    def get(self, *args): return _libsbml.DateList_get(self, *args)
    def prepend(self, *args): return _libsbml.DateList_prepend(self, *args)
    def remove(self, *args): return _libsbml.DateList_remove(self, *args)
    def getSize(self): return _libsbml.DateList_getSize(self)
DateList_swigregister = _libsbml.DateList_swigregister
DateList_swigregister(DateList)

class CVTermList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVTermList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CVTermList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbml.new_CVTermList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_CVTermList
    __del__ = lambda self : None;
    def add(self, *args): return _libsbml.CVTermList_add(self, *args)
    def get(self, *args): return _libsbml.CVTermList_get(self, *args)
    def prepend(self, *args): return _libsbml.CVTermList_prepend(self, *args)
    def remove(self, *args): return _libsbml.CVTermList_remove(self, *args)
    def getSize(self): return _libsbml.CVTermList_getSize(self)
CVTermList_swigregister = _libsbml.CVTermList_swigregister
CVTermList_swigregister(CVTermList)

class ASTNodeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASTNodeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASTNodeList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbml.new_ASTNodeList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ASTNodeList
    __del__ = lambda self : None;
    def add(self, *args): return _libsbml.ASTNodeList_add(self, *args)
    def get(self, *args): return _libsbml.ASTNodeList_get(self, *args)
    def prepend(self, *args): return _libsbml.ASTNodeList_prepend(self, *args)
    def remove(self, *args): return _libsbml.ASTNodeList_remove(self, *args)
    def getSize(self): return _libsbml.ASTNodeList_getSize(self)
ASTNodeList_swigregister = _libsbml.ASTNodeList_swigregister
ASTNodeList_swigregister(ASTNodeList)

class SBMLNamespacesList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLNamespacesList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLNamespacesList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbml.new_SBMLNamespacesList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLNamespacesList
    __del__ = lambda self : None;
    def add(self, *args): return _libsbml.SBMLNamespacesList_add(self, *args)
    def get(self, *args): return _libsbml.SBMLNamespacesList_get(self, *args)
    def prepend(self, *args): return _libsbml.SBMLNamespacesList_prepend(self, *args)
    def remove(self, *args): return _libsbml.SBMLNamespacesList_remove(self, *args)
    def getSize(self): return _libsbml.SBMLNamespacesList_getSize(self)
SBMLNamespacesList_swigregister = _libsbml.SBMLNamespacesList_swigregister
SBMLNamespacesList_swigregister(SBMLNamespacesList)

class SBaseList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBaseList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBaseList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbml.new_SBaseList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBaseList
    __del__ = lambda self : None;
    def add(self, *args): return _libsbml.SBaseList_add(self, *args)
    def get(self, *args): return _libsbml.SBaseList_get(self, *args)
    def prepend(self, *args): return _libsbml.SBaseList_prepend(self, *args)
    def remove(self, *args): return _libsbml.SBaseList_remove(self, *args)
    def getSize(self): return _libsbml.SBaseList_getSize(self)
SBaseList_swigregister = _libsbml.SBaseList_swigregister
SBaseList_swigregister(SBaseList)

class AutoProperty(type):
    """
    Metaclass for automatically detecting getX/setX methods and adding
    properties to the class dictionary.

    This class is attached to SBase and automatically applies for all classes
    which inherit from it.  Its purpose is to make libSBML more convenient to
    use from Python.  It works by analyzing classes at class creation time
    (not at instantiation) and adding corresponding properties (directly
    calling C methods where possible) to the class dictionary.

    @note Currently this class only works for Python 2.x, but should not break
    in Python 3.
    """
    def __new__(cls, classname, bases, classdict):
        """
        Iterate over the items in the classdict looking for get/set pairs
        and declaring them as properties.
        """

        import re
        import keyword

        re_mangle = re.compile(r'[A-Za-z][a-z]+|[A-Z]+(?=$|[A-Z0-9])|\d+')
        re_id = re.compile(r'^[A-Za-z_][A-Za-z0-9_]*$')
        re_getdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self\)')
        re_setdoc = re.compile(r'^\s*[A-Za-z_][A-Za-z0-9_]*\(self,[^,)]+\)')

        #convert ACapitalCasedStringXYZ123 -> a_capital_cased_string_xyz_123
        mangle_name = lambda x: ('_'.join(re_mangle.findall(x))).lower()

        get_methods = set()
        set_methods = set()
        swig_setter = classdict.get('__swig_setmethods__', {})

        #only search for get/set methods
        #we assume that any unset method also has either get or set
        #a small number of set without get cases exist so we can't only
        #search for get methods
        for k, v in classdict.items():
            name = k[3:]
            prefix = k[:3]
            mangled = mangle_name(name)
            if name:
                if callable(v):
                    if re_id.match(mangled) and mangled not in keyword.kwlist:
                        if prefix == 'get':
                            get_methods.add(name)
                        elif prefix == 'set':
                            set_methods.add(name)

        for name in get_methods | set_methods:

            mangled = mangle_name(name)

            #ListOfFoobars -> foobars
            if mangled.startswith('list_of_'):
                mangled = mangled[8:]

            getter = setter = deleter = None
            if name in get_methods:
                getter = classdict['get'+name]
            
                #this is a very dirty way of checking if the get method
                #requires extra arguments (and hence cannot be a property)
                #it should be possible to do this properly in SWIG?
                if getter.__doc__:
                    if not re_getdoc.match(getter.__doc__):
                        continue

                #use the c-level get function if the python function
                #only consists of a call to it
                cname = classname + '_get' + name
                #test if function is "return _libsbml.CLASS_getNAME(__args__)"
                if getter.func_code.co_names == ('_libsbml', cname):
                    getter = getattr(_libsbml, cname)
    
            if name in set_methods:
                setter = classdict['set'+name]
                if setter.__doc__:
                    if not re_setdoc.match(setter.__doc__):
                        continue

                cname = classname + '_set' + name
                if setter.func_code.co_names == ('_libsbml', cname):
                    setter = getattr(_libsbml, cname)
                #property fget does not get intercepted by __getattr__
                #but fset does, so we implement property setting via
                #the __swig_setmethods__ dict
                swig_setter[mangled] = setter
            
            if 'unset' + name in classdict:
                deleter = classdict['unset'+name]
                if deleter.__doc__:
                    #like a get method, a delete method should
                    #only require a self argument
                    if not re_getdoc.match(deleter.__doc__):
                        continue
                
                cname = classname + '_unset' + name
                if deleter.func_code.co_names == ('_libsbml', cname):
                    deleter = getattr(_libsbml, cname)

            if getter or setter or deleter:
                #fset is technically redundant since the method is dispatched
                #via _swig_setattr rather than through the property due to that
                #function not delegating to object.__setattr__ which properly
                #handles properties
                classdict[mangled] = property(fget=getter, fset=setter, fdel=deleter)

            def __repr__(self):
                desc = self.__class__.__name__
                if hasattr(self, '__len__'):
                    desc += '[%s]' % self.__len__()
                if hasattr(self, 'id') and self.id:
                    desc += ' %s' % self.id
                if hasattr(self, 'name') and self.name:
                    desc += ' "%s"' % self.name
                return '<' + desc + '>'
                
            if classdict.get('__repr__', None) in (_swig_repr, None):
                classdict['__repr__'] = __repr__


        return type.__new__(cls, classname, bases, classdict)


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _libsbml.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _libsbml.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _libsbml.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _libsbml.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _libsbml.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _libsbml.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _libsbml.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _libsbml.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _libsbml.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _libsbml.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _libsbml.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _libsbml.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _libsbml.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _libsbml.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _libsbml.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _libsbml.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _libsbml.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class string(_object):
    """Proxy of C++ std::basic_string<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr
    def length(self):
        """length(self) -> size_type"""
        return _libsbml.string_length(self)

    def max_size(self):
        """max_size(self) -> size_type"""
        return _libsbml.string_max_size(self)

    def copy(self, *args):
        """
        copy(self, char __s, size_type __n, size_type __pos = 0) -> size_type
        copy(self, char __s, size_type __n) -> size_type
        """
        return _libsbml.string_copy(self, *args)

    def c_str(self):
        """c_str(self) -> char"""
        return _libsbml.string_c_str(self)

    def find(self, *args):
        """
        find(self, char __s, size_type __pos, size_type __n) -> size_type
        find(self, string __str, size_type __pos = 0) -> size_type
        find(self, string __str) -> size_type
        find(self, char __c, size_type __pos = 0) -> size_type
        find(self, char __c) -> size_type
        """
        return _libsbml.string_find(self, *args)

    def rfind(self, *args):
        """
        rfind(self, string __str, size_type __pos = std::basic_string< char >::npos) -> size_type
        rfind(self, string __str) -> size_type
        rfind(self, char __s, size_type __pos, size_type __n) -> size_type
        rfind(self, char __c, size_type __pos = std::basic_string< char >::npos) -> size_type
        rfind(self, char __c) -> size_type
        """
        return _libsbml.string_rfind(self, *args)

    def find_first_of(self, *args):
        """
        find_first_of(self, string __str, size_type __pos = 0) -> size_type
        find_first_of(self, string __str) -> size_type
        find_first_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_first_of(self, char __c, size_type __pos = 0) -> size_type
        find_first_of(self, char __c) -> size_type
        """
        return _libsbml.string_find_first_of(self, *args)

    def find_last_of(self, *args):
        """
        find_last_of(self, string __str, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_of(self, string __str) -> size_type
        find_last_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_last_of(self, char __c, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_of(self, char __c) -> size_type
        """
        return _libsbml.string_find_last_of(self, *args)

    def find_first_not_of(self, *args):
        """
        find_first_not_of(self, string __str, size_type __pos = 0) -> size_type
        find_first_not_of(self, string __str) -> size_type
        find_first_not_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_first_not_of(self, char __c, size_type __pos = 0) -> size_type
        find_first_not_of(self, char __c) -> size_type
        """
        return _libsbml.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args):
        """
        find_last_not_of(self, string __str, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_not_of(self, string __str) -> size_type
        find_last_not_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_last_not_of(self, char __c, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_not_of(self, char __c) -> size_type
        """
        return _libsbml.string_find_last_not_of(self, *args)

    def substr(self, *args):
        """
        substr(self, size_type __pos = 0, size_type __n = std::basic_string< char >::npos) -> string
        substr(self, size_type __pos = 0) -> string
        substr(self) -> string
        """
        return _libsbml.string_substr(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _libsbml.string_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _libsbml.string_size(self)

    def swap(self, *args):
        """swap(self, string v)"""
        return _libsbml.string_swap(self, *args)

    def erase(self, *args):
        """
        erase(self, size_type __pos = 0, size_type __n = std::basic_string< char >::npos) -> string
        erase(self, size_type __pos = 0) -> string
        erase(self) -> string
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _libsbml.string_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, char __s, size_type __n) -> string
        __init__(self) -> string
        __init__(self, string arg0) -> string
        __init__(self, size_type size, value_type value) -> string
        """
        this = _libsbml.new_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args):
        """
        assign(self, string __str) -> string
        assign(self, string __str, size_type __pos, size_type __n) -> string
        assign(self, char __s, size_type __n) -> string
        assign(self, size_type n, value_type x)
        """
        return _libsbml.string_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _libsbml.string_resize(self, *args)

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _libsbml.string_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _libsbml.string___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _libsbml.string___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _libsbml.string___len__(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> string"""
        return _libsbml.string___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, string v = std::basic_string< char,std::char_traits< char >,std::allocator< char > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _libsbml.string___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _libsbml.string___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _libsbml.string___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> string
        __getitem__(self, difference_type i) -> value_type
        """
        return _libsbml.string___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, string v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _libsbml.string___setitem__(self, *args)

    def insert(self, *args):
        """
        insert(self, size_type __pos1, string __str) -> string
        insert(self, size_type __pos1, string __str, size_type __pos2, size_type __n) -> string
        insert(self, size_type __pos, char __s, size_type __n) -> string
        insert(self, size_type __pos, size_type __n, char __c) -> string
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        insert(self, iterator __p, size_type __n, char __c)
        """
        return _libsbml.string_insert(self, *args)

    def replace(self, *args):
        """
        replace(self, size_type __pos, size_type __n, string __str) -> string
        replace(self, size_type __pos1, size_type __n1, string __str, size_type __pos2, 
            size_type __n2) -> string
        replace(self, size_type __pos, size_type __n1, char __s, size_type __n2) -> string
        replace(self, size_type __pos, size_type __n1, size_type __n2, char __c) -> string
        replace(self, iterator __i1, iterator __i2, string __str) -> string
        replace(self, iterator __i1, iterator __i2, char __s, size_type __n) -> string
        replace(self, iterator __i1, iterator __i2, size_type __n, char __c) -> string
        replace(self, iterator __i1, iterator __i2, char __k1, char __k2) -> string
        replace(self, iterator __i1, iterator __i2, const_iterator __k1, 
            const_iterator __k2) -> string
        """
        return _libsbml.string_replace(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, string v) -> string"""
        return _libsbml.string___iadd__(self, *args)

    def __add__(self, *args):
        """__add__(self, string v) -> string"""
        return _libsbml.string___add__(self, *args)

    def __radd__(self, *args):
        """__radd__(self, string v) -> string"""
        return _libsbml.string___radd__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _libsbml.string___str__(self)

    def __rlshift__(self, *args):
        """__rlshift__(self, ostream out) -> ostream"""
        return _libsbml.string___rlshift__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, string v) -> bool"""
        return _libsbml.string___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, string v) -> bool"""
        return _libsbml.string___ne__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, string v) -> bool"""
        return _libsbml.string___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, string v) -> bool"""
        return _libsbml.string___lt__(self, *args)

    def __ge__(self, *args):
        """__ge__(self, string v) -> bool"""
        return _libsbml.string___ge__(self, *args)

    def __le__(self, *args):
        """__le__(self, string v) -> bool"""
        return _libsbml.string___le__(self, *args)

    __swig_destroy__ = _libsbml.delete_string
    __del__ = lambda self : None;
string_swigregister = _libsbml.string_swigregister
string_swigregister(string)
cvar = _libsbml.cvar
string.npos = _libsbml.cvar.string_npos

class ostream(_object):
    """Proxy of C++ std::basic_ostream<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _libsbml.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ostream
    __del__ = lambda self : None;
ostream_swigregister = _libsbml.ostream_swigregister
ostream_swigregister(ostream)

class ostringstream(ostream):
    """Proxy of C++ std::basic_ostringstream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostringstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, std::ios_base::openmode __mode = std::ios_base::out) -> ostringstream
        __init__(self) -> ostringstream
        """
        this = _libsbml.new_ostringstream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ostringstream
    __del__ = lambda self : None;
    def str(self, *args):
        """
        str(self) -> string
        str(self, string __s)
        """
        return _libsbml.ostringstream_str(self, *args)

ostringstream_swigregister = _libsbml.ostringstream_swigregister
ostringstream_swigregister(ostringstream)


def endl(*args):
  """endl(ostream arg0) -> ostream"""
  return _libsbml.endl(*args)

def flush(*args):
  """flush(ostream arg0) -> ostream"""
  return _libsbml.flush(*args)
import sys
import os.path

# @cond doxygenLibsbmlInternal

def conditional_abspath (filename):
  """conditional_abspath (filename) -> filename

  Returns filename with an absolute path prepended, if necessary.
  Some combinations of platforms and underlying XML parsers *require*
  an absolute path to a filename while others do not.  This function
  encapsulates the appropriate logic.  It is used by readSBML() and
  SBMLReader.readSBML().
  """
  if sys.platform.find('cygwin') != -1:
    return filename
  else:
    return os.path.abspath(filename)

# @endcond

def readSBML(*args):
  """
  readSBML(self, string filename) -> SBMLDocument

  Reads an SBML document from a file.

  This method is identical to readSBMLFromFile().

  If the file named 'filename' does not exist or its content is not
  valid SBML, one or more errors will be logged with the SBMLDocument
  object returned by this method.  Callers can use the methods on
  SBMLDocument such as SBMLDocument.getNumErrors() and
  SBMLDocument.getError() to get the errors.  The object returned by
  SBMLDocument.getError() is an SBMLError object, and it has methods to
  get the error code, category, and severity level of the problem, as
  well as a textual description of the problem.  The possible severity
  levels range from informational messages to fatal errors; see the
  documentation for SBMLError for more information.

  If the file 'filename' could not be read, the file-reading error will
  appear first.  The error code can provide a clue about what happened.
  For example, a file might be unreadable (either because it does not
  actually exist or because the user does not have the necessary access
  priviledges to read it) or some sort of file operation error may have
  been reported by the underlying operating system.  Callers can check
  for these situations using a program fragment such as the following:

   reader = SBMLReader()
   doc    = reader.readSBML(filename)

   if doc.getNumErrors() > 0:
     if doc.getError(0).getErrorId() == libsbml.XMLFileUnreadable:
       # Handle case of unreadable file here.
     elif doc.getError(0).getErrorId() == libsbml.XMLFileOperationError:
       # Handle case of other file error here.
     else:
       # Handle other error cases here.

  If the given filename ends with the suffix \".gz\" (for example,
  \"myfile.xml.gz\"), the file is assumed to be compressed in gzip format
  and will be automatically decompressed upon reading.  Similarly, if the
  given filename ends with \".zip\" or \".bz2\", the file is assumed to be
  compressed in zip or bzip2 format (respectively).  Files whose names
  lack these suffixes will be read uncompressed.  Note that if the file
  is in zip format but the archive contains more than one file, only the
  first file in the archive will be read and the rest ignored.

  To read a gzip/zip file, libSBML needs to be configured and linked with
  the zlib library at compile time.  It also needs to be linked with the
  bzip2 library to read files in bzip2 format.  (Both of these are the
  default configurations for libSBML.)  Errors about unreadable files
  will be logged if a compressed filename is given and libSBML was not
  linked with the corresponding required library.

  Parameter 'filename is the name or full pathname of the file to be
  read.

  Returns a pointer to the SBMLDocument created from the SBML content.

  See also SBMLError.

  Note:

  LibSBML versions 2.x and later versions behave differently in
  error handling in several respects.  One difference is how early some
  errors are caught and whether libSBML continues processing a file in
  the face of some early errors.  In general, libSBML versions after 2.x
  stop parsing SBML inputs sooner than libSBML version 2.x in the face
  of XML errors, because the errors may invalidate any further SBML
  content.  For example, a missing XML declaration at the beginning of
  the file was ignored by libSBML 2.x but in version 3.x and later, it
  will cause libSBML to stop parsing the rest of the input altogether.
  While this behavior may seem more severe and intolerant, it was
  necessary in order to provide uniform behavior regardless of which
  underlying XML parser (Expat, Xerces, libxml2) is being used by
  libSBML.  The XML parsers themselves behave differently in their error
  reporting, and sometimes libSBML has to resort to the lowest common
  denominator.
  """
  reader = SBMLReader()
  return reader.readSBML(args[0])

LIBSBML_DOTTED_VERSION = _libsbml.LIBSBML_DOTTED_VERSION
LIBSBML_VERSION = _libsbml.LIBSBML_VERSION
LIBSBML_VERSION_STRING = _libsbml.LIBSBML_VERSION_STRING

def getLibSBMLVersion():
  """
    getLibSBMLVersion() -> int

    Returns the version number of this copy of libSBML as an integer.

    Returns the libSBML version as an integer; version 1.2.3 becomes
    10203.

    """
  return _libsbml.getLibSBMLVersion()

def getLibSBMLDottedVersion():
  """
    getLibSBMLDottedVersion() -> char

    Returns the version number of this copy of libSBML as a string.

    Returns the libSBML version as a string; version 1.2.3 becomes
    '1.2.3'.

    See also getLibSBMLVersionString().

    """
  return _libsbml.getLibSBMLDottedVersion()

def getLibSBMLVersionString():
  """
    getLibSBMLVersionString() -> char

    Returns the version number of this copy of libSBML as a string without
    periods.

    Returns the libSBML version as a string: version 1.2.3 becomes
    '10203'.

    See also getLibSBMLDottedVersion().

    """
  return _libsbml.getLibSBMLVersionString()

def isLibSBMLCompiledWith(*args):
  """
    isLibSBMLCompiledWith(char option) -> int

    Returns an indication whether libSBML has been compiled with against a
    specific library.

    Parameter 'option' is the library to test against, this can be one of
    'expat', 'libxml', 'xerces-c', 'bzip2', 'zip'

    Returns 0 in case the libSBML has not been compiled against  that
    library and non-zero otherwise (for libraries  that define an integer
    version number that number will  be returned).

    See also getLibSBMLDependencyVersionOf().

    """
  return _libsbml.isLibSBMLCompiledWith(*args)

def getLibSBMLDependencyVersionOf(*args):
  """
    getLibSBMLDependencyVersionOf(char option) -> char

    Returns the version string for the dependency library used.

    Parameter 'option' is the library for which the version should be
    retrieved, this can be one of 'expat', 'libxml', 'xerces-c', 'bzip2',
    'zip'

    Returns None in case libSBML has not been compiled against  that
    library and a version string otherwise.

    See also isLibSBMLCompiledWith().

    """
  return _libsbml.getLibSBMLDependencyVersionOf(*args)
LIBSBML_OPERATION_SUCCESS = _libsbml.LIBSBML_OPERATION_SUCCESS
LIBSBML_INDEX_EXCEEDS_SIZE = _libsbml.LIBSBML_INDEX_EXCEEDS_SIZE
LIBSBML_UNEXPECTED_ATTRIBUTE = _libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE
LIBSBML_OPERATION_FAILED = _libsbml.LIBSBML_OPERATION_FAILED
LIBSBML_INVALID_ATTRIBUTE_VALUE = _libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE
LIBSBML_INVALID_OBJECT = _libsbml.LIBSBML_INVALID_OBJECT
LIBSBML_DUPLICATE_OBJECT_ID = _libsbml.LIBSBML_DUPLICATE_OBJECT_ID
LIBSBML_LEVEL_MISMATCH = _libsbml.LIBSBML_LEVEL_MISMATCH
LIBSBML_VERSION_MISMATCH = _libsbml.LIBSBML_VERSION_MISMATCH
LIBSBML_INVALID_XML_OPERATION = _libsbml.LIBSBML_INVALID_XML_OPERATION
LIBSBML_NAMESPACES_MISMATCH = _libsbml.LIBSBML_NAMESPACES_MISMATCH
LIBSBML_DUPLICATE_ANNOTATION_NS = _libsbml.LIBSBML_DUPLICATE_ANNOTATION_NS
LIBSBML_ANNOTATION_NAME_NOT_FOUND = _libsbml.LIBSBML_ANNOTATION_NAME_NOT_FOUND
LIBSBML_ANNOTATION_NS_NOT_FOUND = _libsbml.LIBSBML_ANNOTATION_NS_NOT_FOUND
LIBSBML_PKG_VERSION_MISMATCH = _libsbml.LIBSBML_PKG_VERSION_MISMATCH
LIBSBML_PKG_UNKNOWN = _libsbml.LIBSBML_PKG_UNKNOWN
LIBSBML_PKG_UNKNOWN_VERSION = _libsbml.LIBSBML_PKG_UNKNOWN_VERSION
LIBSBML_PKG_DISABLED = _libsbml.LIBSBML_PKG_DISABLED
LIBSBML_PKG_CONFLICTED_VERSION = _libsbml.LIBSBML_PKG_CONFLICTED_VERSION
LIBSBML_PKG_CONFLICT = _libsbml.LIBSBML_PKG_CONFLICT
LIBSBML_CONV_INVALID_TARGET_NAMESPACE = _libsbml.LIBSBML_CONV_INVALID_TARGET_NAMESPACE
LIBSBML_CONV_PKG_CONVERSION_NOT_AVAILABLE = _libsbml.LIBSBML_CONV_PKG_CONVERSION_NOT_AVAILABLE
LIBSBML_CONV_INVALID_SRC_DOCUMENT = _libsbml.LIBSBML_CONV_INVALID_SRC_DOCUMENT
LIBSBML_CONV_CONVERSION_NOT_AVAILABLE = _libsbml.LIBSBML_CONV_CONVERSION_NOT_AVAILABLE
LIBSBML_CONV_PKG_CONSIDERED_UNKNOWN = _libsbml.LIBSBML_CONV_PKG_CONSIDERED_UNKNOWN

def OperationReturnValue_toString(*args):
  """
    OperationReturnValue_toString(int returnValue) -> char

    This method takes an SBML operation return value and returns a string
    representing the code.

    Parameter 'returnValue' is the operation return value to convert to a
    string

    Returns a human readable name for the given operation return value .

    Note:

    The caller does not own the returned string and is therefore not
    allowed to modify it.

    """
  return _libsbml.OperationReturnValue_toString(*args)
class IdList(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IdList
        __init__(self, string commaSeparated) -> IdList

        Internal implementation method.

        """
        this = _libsbml.new_IdList(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(self, *args):
        """
        append(self, string id)

        Internal implementation method.

        """
        return _libsbml.IdList_append(self, *args)

    def contains(self, *args):
        """
        contains(self, string id) -> bool

        Internal implementation method.

        """
        return _libsbml.IdList_contains(self, *args)

    def removeIdsBefore(self, *args):
        """
        removeIdsBefore(self, string id)

        Internal implementation method.

        """
        return _libsbml.IdList_removeIdsBefore(self, *args)

    def size(self):
        """
        size(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.IdList_size(self)

    def clear(self):
        """clear(self)"""
        return _libsbml.IdList_clear(self)

    def at(self, *args):
        """at(self, int n) -> string"""
        return _libsbml.IdList_at(self, *args)

    __swig_destroy__ = _libsbml.delete_IdList
    __del__ = lambda self : None;
IdList_swigregister = _libsbml.IdList_swigregister
IdList_swigregister(IdList)
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class IdentifierTransformer(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentifierTransformer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdentifierTransformer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> IdentifierTransformer

        Internal implementation method.

        """
        if self.__class__ == IdentifierTransformer:
            _self = None
        else:
            _self = self
        this = _libsbml.new_IdentifierTransformer(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_IdentifierTransformer
    __del__ = lambda self : None;
    def transform(self, *args):
        """transform(self, SBase element) -> int"""
        return _libsbml.IdentifierTransformer_transform(self, *args)

    def __disown__(self):
        self.this.disown()
        _libsbml.disown_IdentifierTransformer(self)
        return weakref_proxy(self)
IdentifierTransformer_swigregister = _libsbml.IdentifierTransformer_swigregister
IdentifierTransformer_swigregister(IdentifierTransformer)

class ElementFilter(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> ElementFilter

        Creates a new ElementFilter object.

        """
        if self.__class__ == ElementFilter:
            _self = None
        else:
            _self = self
        this = _libsbml.new_ElementFilter(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ElementFilter
    __del__ = lambda self : None;
    def filter(self, *args):
        """
        filter(self, SBase element) -> bool

        Predicate to test elements.

        This is the central predicate of the ElementFilter class.  In
        subclasses of ElementFilter, callers should implement this method such
        that it returns True for 'element' arguments that are 'desirable' and
        false for those that are 'undesirable' in whatever filtering context
        the ElementFilter subclass is designed to be used.

        Parameter 'element' is the element to be tested.

        Returns True if the 'element' is desirable or should be kept, False
        otherwise.

        """
        return _libsbml.ElementFilter_filter(self, *args)

    def __disown__(self):
        self.this.disown()
        _libsbml.disown_ElementFilter(self)
        return weakref_proxy(self)
ElementFilter_swigregister = _libsbml.ElementFilter_swigregister
ElementFilter_swigregister(ElementFilter)

class SBMLReader(_object):
    """
    Methods for reading SBML from files and text strings.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The SBMLReader class provides the main interface for reading SBML
    content from files and strings.  The methods for reading SBML all
    return an SBMLDocument object representing the results.

    In the case of failures (such as if the SBML contains errors or a file
    cannot be read), the errors will be recorded with the SBMLErrorLog
    object kept in the SBMLDocument returned by SBMLReader.  Consequently,
    immediately after calling a method on SBMLReader, callers should
    always check for errors and warnings using the methods for this
    purpose provided by SBMLDocument.

    For convenience as well as easy access from other languages besides
    C++, this file also defines two global functions, libsbml.readSBML()
    and libsbml.readSBMLFromString(). They are equivalent to creating an
    SBMLReader object and then calling the SBMLReader.readSBML() or
    SBMLReader.readSBMLFromString() methods, respectively.

    Support for reading compressed files
    ======================================================================

    LibSBML provides support for reading (as well as writing) compressed
    SBML files.  The process is transparent to the calling application --
    the application does not need to do anything deliberate to invoke the
    functionality.  If a given SBML filename ends with an extension for
    the gzip, zip or bzip2 compression formats (respectively, .gz, .zip,
    or .bz2), then the methods SBMLReader.readSBML() and
    SBMLWriter.writeSBML() will automatically decompress and compress the
    file while writing and reading it.  If the filename has no such
    extension, it will be read and written uncompressed as normal.

    The compression feature requires that the zlib (for gzip and zip
    formats) and/or bzip2 (for bzip2 format) be available on the system
    running libSBML, and that libSBML was configured with their support
    compiled-in.  Please see the libSBML installation instructions  for
    more information about this.  The methods hasZlib() and hasBzip2() can
    be used by an application to query at run-time whether support for the
    compression libraries is available in the present copy of libSBML.

    Support for compression is not mandated by the SBML standard, but
    applications may find it helpful, particularly when large SBML models
    are being communicated across data links of limited bandwidth.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLReader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> SBMLReader

        Creates a new SBMLReader and returns it.

        The libSBML SBMLReader objects offer methods for reading SBML in XML
        form from files and text strings.

        """
        this = _libsbml.new_SBMLReader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLReader
    __del__ = lambda self : None;
    def readSBML(*args):
      """
      readSBML(self, string filename) -> SBMLDocument

      Reads an SBML document from a file.

      This method is identical to readSBMLFromFile().

      If the file named 'filename' does not exist or its content is not
      valid SBML, one or more errors will be logged with the SBMLDocument
      object returned by this method.  Callers can use the methods on
      SBMLDocument such as SBMLDocument.getNumErrors() and
      SBMLDocument.getError() to get the errors.  The object returned by
      SBMLDocument.getError() is an SBMLError object, and it has methods to
      get the error code, category, and severity level of the problem, as
      well as a textual description of the problem.  The possible severity
      levels range from informational messages to fatal errors; see the
      documentation for SBMLError for more information.

      If the file 'filename' could not be read, the file-reading error will
      appear first.  The error code can provide a clue about what happened.
      For example, a file might be unreadable (either because it does not
      actually exist or because the user does not have the necessary access
      priviledges to read it) or some sort of file operation error may have
      been reported by the underlying operating system.  Callers can check
      for these situations using a program fragment such as the following:

       reader = SBMLReader()
       doc    = reader.readSBML(filename)

       if doc.getNumErrors() > 0:
         if doc.getError(0).getErrorId() == libsbml.XMLFileUnreadable:
           # Handle case of unreadable file here.
         elif doc.getError(0).getErrorId() == libsbml.XMLFileOperationError:
           # Handle case of other file error here.
         else:
           # Handle other error cases here.

      If the given filename ends with the suffix \".gz\" (for example,
      \"myfile.xml.gz\"), the file is assumed to be compressed in gzip format
      and will be automatically decompressed upon reading.  Similarly, if the
      given filename ends with \".zip\" or \".bz2\", the file is assumed to be
      compressed in zip or bzip2 format (respectively).  Files whose names
      lack these suffixes will be read uncompressed.  Note that if the file
      is in zip format but the archive contains more than one file, only the
      first file in the archive will be read and the rest ignored.

      To read a gzip/zip file, libSBML needs to be configured and linked with
      the zlib library at compile time.  It also needs to be linked with the
      bzip2 library to read files in bzip2 format.  (Both of these are the
      default configurations for libSBML.)  Errors about unreadable files
      will be logged if a compressed filename is given and libSBML was not
      linked with the corresponding required library.

      Parameter 'filename is the name or full pathname of the file to be
      read.

      Returns a pointer to the SBMLDocument created from the SBML content.

      See also SBMLError.

      Note:

      LibSBML versions 2.x and later versions behave differently in
      error handling in several respects.  One difference is how early some
      errors are caught and whether libSBML continues processing a file in
      the face of some early errors.  In general, libSBML versions after 2.x
      stop parsing SBML inputs sooner than libSBML version 2.x in the face
      of XML errors, because the errors may invalidate any further SBML
      content.  For example, a missing XML declaration at the beginning of
      the file was ignored by libSBML 2.x but in version 3.x and later, it
      will cause libSBML to stop parsing the rest of the input altogether.
      While this behavior may seem more severe and intolerant, it was
      necessary in order to provide uniform behavior regardless of which
      underlying XML parser (Expat, Xerces, libxml2) is being used by
      libSBML.  The XML parsers themselves behave differently in their error
      reporting, and sometimes libSBML has to resort to the lowest common
      denominator.
      """
      args_copy    = list(args)
      args_copy[1] = conditional_abspath(args[1])
      return _libsbml.SBMLReader_readSBML(*args_copy)


    def readSBMLFromFile(*args):
      """
      readSBMLFromFile(self, string filename) -> SBMLDocument

      Reads an SBML document from a file.

      This method is identical to readSBMLFromFile().

      If the file named 'filename' does not exist or its content is not
      valid SBML, one or more errors will be logged with the SBMLDocument
      object returned by this method.  Callers can use the methods on
      SBMLDocument such as SBMLDocument.getNumErrors() and
      SBMLDocument.getError() to get the errors.  The object returned by
      SBMLDocument.getError() is an SBMLError object, and it has methods to
      get the error code, category, and severity level of the problem, as
      well as a textual description of the problem.  The possible severity
      levels range from informational messages to fatal errors; see the
      documentation for SBMLError for more information.

      If the file 'filename' could not be read, the file-reading error will
      appear first.  The error code can provide a clue about what happened.
      For example, a file might be unreadable (either because it does not
      actually exist or because the user does not have the necessary access
      priviledges to read it) or some sort of file operation error may have
      been reported by the underlying operating system.  Callers can check
      for these situations using a program fragment such as the following:

       reader = SBMLReader()
       doc    = reader.readSBML(filename)

       if doc.getNumErrors() > 0:
         if doc.getError(0).getErrorId() == libsbml.XMLFileUnreadable:
           # Handle case of unreadable file here.
         elif doc.getError(0).getErrorId() == libsbml.XMLFileOperationError:
           # Handle case of other file error here.
         else:
           # Handle other error cases here.

      If the given filename ends with the suffix \".gz\" (for example,
      \"myfile.xml.gz\"), the file is assumed to be compressed in gzip format
      and will be automatically decompressed upon reading.  Similarly, if the
      given filename ends with \".zip\" or \".bz2\", the file is assumed to be
      compressed in zip or bzip2 format (respectively).  Files whose names
      lack these suffixes will be read uncompressed.  Note that if the file
      is in zip format but the archive contains more than one file, only the
      first file in the archive will be read and the rest ignored.

      To read a gzip/zip file, libSBML needs to be configured and linked with
      the zlib library at compile time.  It also needs to be linked with the
      bzip2 library to read files in bzip2 format.  (Both of these are the
      default configurations for libSBML.)  Errors about unreadable files
      will be logged if a compressed filename is given and libSBML was not
      linked with the corresponding required library.

      Parameter 'filename is the name or full pathname of the file to be
      read.

      Returns a pointer to the SBMLDocument created from the SBML content.

      See also SBMLError.

      Note:

      LibSBML versions 2.x and later versions behave differently in
      error handling in several respects.  One difference is how early some
      errors are caught and whether libSBML continues processing a file in
      the face of some early errors.  In general, libSBML versions after 2.x
      stop parsing SBML inputs sooner than libSBML version 2.x in the face
      of XML errors, because the errors may invalidate any further SBML
      content.  For example, a missing XML declaration at the beginning of
      the file was ignored by libSBML 2.x but in version 3.x and later, it
      will cause libSBML to stop parsing the rest of the input altogether.
      While this behavior may seem more severe and intolerant, it was
      necessary in order to provide uniform behavior regardless of which
      underlying XML parser (Expat, Xerces, libxml2) is being used by
      libSBML.  The XML parsers themselves behave differently in their error
      reporting, and sometimes libSBML has to resort to the lowest common
      denominator.
      """
      args_copy    = list(args)
      args_copy[1] = conditional_abspath(args[1])
      return _libsbml.SBMLReader_readSBML(*args_copy)


    def readSBMLFromString(self, *args):
        """
        readSBMLFromString(self, string xml) -> SBMLDocument

        Reads an SBML document from the given XML string.

        This method is flexible with respect to the presence of an XML
        declaration at the beginning of the string.  In particular, if the
        string in 'xml' does not begin with the XML declaration <?xml
        version='1.0' encoding='UTF-8'?>, then this method will automatically
        prepend the declaration to 'xml'.

        This method will log a fatal error if the content given in the
        parameter 'xml' is not SBML.  See the method documentation for
        SBMLReader.readSBML() for an example of code for testing the returned
        error code.

        Parameter 'xml' is a string containing a full SBML model

        Returns a pointer to the SBMLDocument created from the SBML content.

        Note:

        When using this method to read an SBMLDocument that uses  the SBML L3
        Hierarchical Model Composition package (comp) the document location
        cannot be set automatically. Thus, if the model contains references to
        ExternalModelDefinitions, it will be necessary to manually set the
        document URI location (setLocationURI) in order  to facilitate
        resolving these models.

        See also SBMLReader.readSBML().

        """
        return _libsbml.SBMLReader_readSBMLFromString(self, *args)

    def hasZlib():
        """
        hasZlib() -> bool

        Static method; returns True if this copy of libSBML supports gzip and
        zip format compression.

        Returns True if libSBML has been linked with the zlib library, False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SBMLReader.hasBzip2()

        """
        return _libsbml.SBMLReader_hasZlib()

    if _newclass:hasZlib = staticmethod(hasZlib)
    __swig_getmethods__["hasZlib"] = lambda x: hasZlib
    def hasBzip2():
        """
        hasBzip2() -> bool

        Static method; returns True if this copy of libSBML supports bzip2
        format compression.

        Returns True if libSBML is linked with the bzip2 libraries, False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SBMLReader.hasZlib()

        """
        return _libsbml.SBMLReader_hasBzip2()

    if _newclass:hasBzip2 = staticmethod(hasBzip2)
    __swig_getmethods__["hasBzip2"] = lambda x: hasBzip2
    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

SBMLReader_swigregister = _libsbml.SBMLReader_swigregister
SBMLReader_swigregister(SBMLReader)

def SBMLReader_hasZlib():
  """
    SBMLReader_hasZlib() -> bool

    Static method; returns True if this copy of libSBML supports gzip and
    zip format compression.

    Returns True if libSBML has been linked with the zlib library, False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SBMLReader.hasBzip2()

    """
  return _libsbml.SBMLReader_hasZlib()

def SBMLReader_hasBzip2():
  """
    SBMLReader_hasBzip2() -> bool

    Static method; returns True if this copy of libSBML supports bzip2
    format compression.

    Returns True if libSBML is linked with the bzip2 libraries, False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SBMLReader.hasZlib()

    """
  return _libsbml.SBMLReader_hasBzip2()


def readSBMLFromFile(*args):
  """
    readSBMLFromFile(char filename) -> SBMLDocument_t

    Reads an SBML document from the given file 'filename'.

    If 'filename' does not exist, or it is not an SBML file, an error will
    be logged in the error log of the SBMLDocument object returned by this
    method.  Calling programs can inspect this error log to determine the
    nature of the problem.  Please refer to the definition of
    SBMLDocument_t for more information about the error reporting
    mechanism.

     SBMLReader_t   *sr;
     SBMLDocument_t *d;

    sr = SBMLReader_create();

    d = SBMLReader_readSBML(reader, filename);

    if (SBMLDocument_getNumErrors(d) > 0)
     {
     if
    (XMLError_getId(SBMLDocument_getError(d, 0)) ==
    SBML_READ_ERROR_FILE_NOT_FOUND)
     if
    (XMLError_getId(SBMLDocument_getError(d, 0)) ==
    SBML_READ_ERROR_NOT_SBML)
     }


    If the filename ends with .gz, the file will be read as a gzip file.
    Similary, if the filename ends with .zip or .bz2, the file will be
    read as a zip or bzip2 file, respectively. Otherwise, the fill will be
    read as an uncompressed file. If the filename ends with .zip, only the
    first file in the archive will be read if the zip archive contains two
    or more files.

    To read a gzip/zip file, underlying libSBML needs to be linked with
    zlib at compile time. Also, underlying libSBML needs to be linked with
    bzip2  to read a bzip2 file. File unreadable error will be logged if a
    compressed  file name is given and underlying libSBML is not linked
    with the corresponding  required library. SBMLReader_hasZlib() and
    SBMLReader_hasBzip2() can be used to check  whether libSBML is linked
    with each library.

    Returns a pointer to the SBMLDocument read.

    """
  return _libsbml.readSBMLFromFile(*args)

def readSBMLFromString(*args):
  """
    readSBMLFromString(char xml) -> SBMLDocument_t

    Reads an SBML document from the given XML string 'xml'.

    If the string does not begin with XML declaration,

      <?xml version='1.0' encoding='UTF-8'?>

    an XML declaration string will be prepended.

    This method will report an error if the given string 'xml' is not
    SBML. The error will be logged in the error log of the SBMLDocument_t
    structure returned by this method.  Calling programs can inspect this
    error log to determine the nature of the problem.  Please refer to the
    definition of SBMLDocument for more information about the error
    reporting mechanism.

    Returns a pointer to the SBMLDocument_t read.

    Note:

    When using this method to read an SBMLDocument that uses  the SBML L3
    Hierarchical Model Composition package (comp) the document location
    cannot be set automatically. Thus, if the model contains references to
    ExternalModelDefinitions, it will be necessary to manually set the
    document URI location (setLocationURI) in order  to facilitate
    resolving these models.

    """
  return _libsbml.readSBMLFromString(*args)
class SBMLWriter(_object):
    """
    Methods for writing SBML to files and text strings.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The SBMLWriter class is the converse of SBMLReader, and provides the
    main interface for serializing SBML models into XML and writing the
    result to an output stream or to files and text strings.  The methods
    for writing SBML all take an SBMLDocument object and a destination.
    They return a boolean or integer value to indicate success or failure.

    Support for writing compressed files
    ======================================================================

    LibSBML provides support for writing (as well as reading) compressed
    SBML files.  The process is transparent to the calling application --
    the application does not need to do anything deliberate to invoke the
    functionality.  If a given SBML filename ends with an extension for
    the gzip, zip or bzip2 compression formats (respectively, ".gz",
    ".zip", or ".bz2"), then the methods SBMLWriter.writeSBML() and
    SBMLReader.readSBML() will automatically compress and decompress the
    file while writing and reading it.  If the filename has no such
    extension, it will be written and read uncompressed as normal.

    The compression feature requires that the zlib (for gzip and zip
    formats) and/or bzip2 (for bzip2 format) be available on the system
    running libSBML, and that libSBML was configured with their support
    compiled-in.  Please see the libSBML installation instructions for
    more information about this.  The methods SBMLWriter.hasZlib() and
    SBMLWriter.hasBzip2() can be used by an application to query at run-
    time whether support for the compression libraries is available in the
    present copy of libSBML.

    Support for compression is not mandated by the SBML standard, but
    applications may find it helpful, particularly when large SBML models
    are being communicated across data links of limited bandwidth.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> SBMLWriter

        Creates a new SBMLWriter.

        The libSBML SBMLWriter objects offer methods for writing SBML in XML
        form to files and text strings.

        """
        this = _libsbml.new_SBMLWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLWriter
    __del__ = lambda self : None;
    def setProgramName(self, *args):
        """
        setProgramName(self, string name) -> int

        Sets the name of this program, i.e., the program that is about to
        write out the SBMLDocument.

        If the program name and version are set (see
        SBMLWriter.setProgramVersion()), the following XML comment, intended
        for human consumption, will be written at the beginning of the XML
        document:

           <!-- Created by <program name> version <program version>
           on yyyy-MM-dd HH:mm with libSBML version <libsbml version>. -->

        If the program name and version are not set at some point before
        calling the writeSBML() methods, no such comment is written out.

        Parameter 'name' is the name of this program (where 'this program'
        refers to program in which libSBML is embedded, not libSBML itself!)

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also setProgramVersion().

        """
        return _libsbml.SBMLWriter_setProgramName(self, *args)

    def setProgramVersion(self, *args):
        """
        setProgramVersion(self, string version) -> int

        Sets the version of this program, i.e., the program that is about to
        write out the SBMLDocument.

        If the program version and name are set (see
        SBMLWriter.setProgramName()), the following XML comment, intended for
        human consumption, will be written at the beginning of the document:

           <!-- Created by <program name> version <program version>
           on yyyy-MM-dd HH:mm with libSBML version <libsbml version>. -->

        If the program version and name are not set at some point before
        calling the writeSBML() methods, no such comment is written out.

        Parameter 'version' is the version of this program (where 'this
        program' refers to program in which libSBML is embedded, not libSBML
        itself!)

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also setProgramName().

        """
        return _libsbml.SBMLWriter_setProgramVersion(self, *args)

    def writeSBML(self, *args):
        """
        writeSBML(self, SBMLDocument d, string filename) -> bool
        writeSBML(self, SBMLDocument d, ostream stream) -> bool

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            writeSBML(SBMLDocument d, string filename)

        Writes the given SBML document to filename.

        If the given filename ends with the suffix ".gz" (for example,
        "myfile.xml.gz"), libSBML assumes the caller wants the file to be
        written compressed in gzip format. Similarly, if the given filename
        ends with ".zip" or ".bz2", libSBML assumes the caller wants the
        file to be compressed in zip or bzip2 format (respectively). Files
        whose names lack these suffixes will be written uncompressed. Special
        considerations for the zip format: If the given filename ends with
        ".zip", the file placed in the zip archive will have the suffix
        ".xml" or ".sbml". For example, the file in the zip archive will
        be named "test.xml" if the given filename is "test.xml.zip" or
        "test.zip". Similarly, the filename in the archive will be
        "test.sbml" if the given filename is "test.sbml.zip".

        Parameter 'd' is the SBML document to be written

        Parameter 'filename' is the name or full pathname of the file where
        the SBML is to be written.

        Returns True on success and False if the filename could not be opened
        for writing.

        Note:

        To write a gzip/zip file, libSBML needs to be configured and linked
        with the zlib library at compile time. It also needs to be linked with
        the bzip2 library to write files in bzip2 format. (Both of these are
        the default configurations for libSBML.) Errors about unreadable files
        will be logged and this method will return false if a compressed
        filename is given and libSBML was not linked with the corresponding
        required library.

        See also setProgramName(), setProgramName().

        """
        return _libsbml.SBMLWriter_writeSBML(self, *args)

    def writeToString(self, *args):
        """
        writeToString(self, SBMLDocument d) -> char

        Internal implementation method.

        """
        return _libsbml.SBMLWriter_writeToString(self, *args)

    def writeSBMLToFile(self, *args):
        """
        writeSBMLToFile(self, SBMLDocument d, string filename) -> bool

        Writes the given SBML document to filename.

        If the given filename ends with the suffix ".gz" (for example,
        "myfile.xml.gz"), libSBML assumes the caller wants the file to be
        written compressed in gzip format. Similarly, if the given filename
        ends with ".zip" or ".bz2", libSBML assumes the caller wants the
        file to be compressed in zip or bzip2 format (respectively). Files
        whose names lack these suffixes will be written uncompressed. Special
        considerations for the zip format: If the given filename ends with
        ".zip", the file placed in the zip archive will have the suffix
        ".xml" or ".sbml". For example, the file in the zip archive will
        be named "test.xml" if the given filename is "test.xml.zip" or
        "test.zip". Similarly, the filename in the archive will be
        "test.sbml" if the given filename is "test.sbml.zip".

        Parameter 'd' is the SBML document to be written

        Parameter 'filename' is the name or full pathname of the file where
        the SBML is to be written.

        Returns True on success and False if the filename could not be opened
        for writing.

        Note:

        To write a gzip/zip file, libSBML needs to be configured and linked
        with the zlib library at compile time. It also needs to be linked with
        the bzip2 library to write files in bzip2 format. (Both of these are
        the default configurations for libSBML.) Errors about unreadable files
        will be logged and this method will return false if a compressed
        filename is given and libSBML was not linked with the corresponding
        required library.

        See also setProgramName().

        """
        return _libsbml.SBMLWriter_writeSBMLToFile(self, *args)

    def writeSBMLToString(self, *args):
        """
        writeSBMLToString(self, SBMLDocument d) -> char

        Writes the given SBML document to an in-memory string and returns a
        pointer to it.

        The string is owned by the caller and should be freed (with free())
        when no longer needed.

        Parameter 'd' is the SBML document to be written

        Returns the string on success and 0 if one of the underlying parser
        components fail.

        See also setProgramName().

        """
        return _libsbml.SBMLWriter_writeSBMLToString(self, *args)

    def hasZlib():
        """
        hasZlib() -> bool

        Predicate returning True if this copy of libSBML has been linked with
        the zlib library.

        LibSBML supports reading and writing files compressed with either
        bzip2 or zip/gzip compression.  The facility depends on libSBML having
        been compiled with the necessary support libraries.  This method
        allows a calling program to inquire whether that is the case for the
        copy of libSBML it is using.

        Returns True if libSBML is linked with zlib, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SBMLWriter.hasBzip2()

        """
        return _libsbml.SBMLWriter_hasZlib()

    if _newclass:hasZlib = staticmethod(hasZlib)
    __swig_getmethods__["hasZlib"] = lambda x: hasZlib
    def hasBzip2():
        """
        hasBzip2() -> bool

        Predicate returning True if this copy of libSBML has been linked with
        the bzip2 library.

        LibSBML supports reading and writing files compressed with either
        bzip2 or zip/gzip compression.  The facility depends on libSBML having
        been compiled with the necessary support libraries.  This method
        allows a calling program to inquire whether that is the case for the
        copy of libSBML it is using.

        Returns True if libSBML is linked with bzip2, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SBMLWriter.hasZlib()

        """
        return _libsbml.SBMLWriter_hasBzip2()

    if _newclass:hasBzip2 = staticmethod(hasBzip2)
    __swig_getmethods__["hasBzip2"] = lambda x: hasBzip2
    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

SBMLWriter_swigregister = _libsbml.SBMLWriter_swigregister
SBMLWriter_swigregister(SBMLWriter)

def SBMLWriter_hasZlib():
  """
    SBMLWriter_hasZlib() -> bool

    Predicate returning True if this copy of libSBML has been linked with
    the zlib library.

    LibSBML supports reading and writing files compressed with either
    bzip2 or zip/gzip compression.  The facility depends on libSBML having
    been compiled with the necessary support libraries.  This method
    allows a calling program to inquire whether that is the case for the
    copy of libSBML it is using.

    Returns True if libSBML is linked with zlib, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SBMLWriter.hasBzip2()

    """
  return _libsbml.SBMLWriter_hasZlib()

def SBMLWriter_hasBzip2():
  """
    SBMLWriter_hasBzip2() -> bool

    Predicate returning True if this copy of libSBML has been linked with
    the bzip2 library.

    LibSBML supports reading and writing files compressed with either
    bzip2 or zip/gzip compression.  The facility depends on libSBML having
    been compiled with the necessary support libraries.  This method
    allows a calling program to inquire whether that is the case for the
    copy of libSBML it is using.

    Returns True if libSBML is linked with bzip2, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SBMLWriter.hasZlib()

    """
  return _libsbml.SBMLWriter_hasBzip2()


def writeSBML(*args):
  """
    writeSBML(SBMLDocument_t d, char filename) -> int

    Writes the given SBML document 'd' to the file named by 'filename'.
    This convenience function is functionally equivalent to:

    SBMLWriter_writeSBML(SBMLWriter_create(), d, filename);

    If the given filename ends with the suffix ".gz" (for example,
    "myfile.xml.gz"), libSBML assumes the caller wants the file to be
    written compressed in gzip format. Similarly, if the given filename
    ends with ".zip" or ".bz2", libSBML assumes the caller wants the
    file to be compressed in zip or bzip2 format (respectively). Files
    whose names lack these suffixes will be written uncompressed. Special
    considerations for the zip format: If the given filename ends with
    ".zip", the file placed in the zip archive will have the suffix
    ".xml" or ".sbml". For example, the file in the zip archive will
    be named "test.xml" if the given filename is "test.xml.zip" or
    "test.zip". Similarly, the filename in the archive will be
    "test.sbml" if the given filename is "test.sbml.zip".

    Parameter 'd' is the SBMLDocument object to be written out in XML
    format

    Parameter 'filename' is a string giving the path to a file where the
    XML content is to be written.

    Returns 1 on success and 0 (zero) if 'filename' could not be written.
    Some possible reasons for failure include (a) being unable to open the
    file, and (b) using a filename that indicates a compressed SBML file
    (i.e., a filename ending in ".zip" or similar) when the compression
    functionality has not been enabled in the underlying copy of libSBML.

    See also SBMLWriter.hasBzip2().

    """
  return _libsbml.writeSBML(*args)

def writeSBMLToString(*args):
  """
    writeSBMLToString(SBMLDocument_t d) -> char

    Writes the given SBML document 'd' to an in-memory string and returns
    a pointer to it.  The string is owned by the caller and should be
    freed (with free()) when no longer needed.  This convenience function
    is functionally equivalent to:

    SBMLWriter_writeSBMLToString(SBMLWriter_create(), d);

    but does not require the caller to create an SBMLWriter object first.

    Parameter 'd' is an SBMLDocument object to be written out in XML
    format

    Returns the string on success and None if one of the underlying parser
    components fail.

    """
  return _libsbml.writeSBMLToString(*args)

def writeSBMLToFile(*args):
  """
    writeSBMLToFile(SBMLDocument_t d, char filename) -> int

    Writes the given SBML document 'd' to the file 'filename'. This
    convenience function is functionally equivalent to:

    SBMLWriter_writeSBMLToFile(SBMLWriter_create(), d, filename);

    but that does not require the caller to create an SBMLWriter object
    first.

    If the given filename ends with the suffix ".gz" (for example,
    "myfile.xml.gz"), libSBML assumes the caller wants the file to be
    written compressed in gzip format. Similarly, if the given filename
    ends with ".zip" or ".bz2", libSBML assumes the caller wants the
    file to be compressed in zip or bzip2 format (respectively). Files
    whose names lack these suffixes will be written uncompressed. Special
    considerations for the zip format: If the given filename ends with
    ".zip", the file placed in the zip archive will have the suffix
    ".xml" or ".sbml". For example, the file in the zip archive will
    be named "test.xml" if the given filename is "test.xml.zip" or
    "test.zip". Similarly, the filename in the archive will be
    "test.sbml" if the given filename is "test.sbml.zip".

    Parameter 'd' is an SBMLDocument object to be written out in XML
    format

    Parameter 'filename' is a string giving the path to a file where the
    XML content is to be written.

    Returns 1 on success and 0 (zero) if 'filename' could not be written.
    Some possible reasons for failure include (a) being unable to open the
    file, and (b) using a filename that indicates a compressed SBML file
    (i.e., a filename ending in ".zip" or similar) when the compression
    functionality has not been enabled in the underlying copy of libSBML.

      See also SBMLWriter.hasBzip2().

    """
  return _libsbml.writeSBMLToFile(*args)
SBML_UNKNOWN = _libsbml.SBML_UNKNOWN
SBML_COMPARTMENT = _libsbml.SBML_COMPARTMENT
SBML_COMPARTMENT_TYPE = _libsbml.SBML_COMPARTMENT_TYPE
SBML_CONSTRAINT = _libsbml.SBML_CONSTRAINT
SBML_DOCUMENT = _libsbml.SBML_DOCUMENT
SBML_EVENT = _libsbml.SBML_EVENT
SBML_EVENT_ASSIGNMENT = _libsbml.SBML_EVENT_ASSIGNMENT
SBML_FUNCTION_DEFINITION = _libsbml.SBML_FUNCTION_DEFINITION
SBML_INITIAL_ASSIGNMENT = _libsbml.SBML_INITIAL_ASSIGNMENT
SBML_KINETIC_LAW = _libsbml.SBML_KINETIC_LAW
SBML_LIST_OF = _libsbml.SBML_LIST_OF
SBML_MODEL = _libsbml.SBML_MODEL
SBML_PARAMETER = _libsbml.SBML_PARAMETER
SBML_REACTION = _libsbml.SBML_REACTION
SBML_RULE = _libsbml.SBML_RULE
SBML_SPECIES = _libsbml.SBML_SPECIES
SBML_SPECIES_REFERENCE = _libsbml.SBML_SPECIES_REFERENCE
SBML_SPECIES_TYPE = _libsbml.SBML_SPECIES_TYPE
SBML_MODIFIER_SPECIES_REFERENCE = _libsbml.SBML_MODIFIER_SPECIES_REFERENCE
SBML_UNIT_DEFINITION = _libsbml.SBML_UNIT_DEFINITION
SBML_UNIT = _libsbml.SBML_UNIT
SBML_ALGEBRAIC_RULE = _libsbml.SBML_ALGEBRAIC_RULE
SBML_ASSIGNMENT_RULE = _libsbml.SBML_ASSIGNMENT_RULE
SBML_RATE_RULE = _libsbml.SBML_RATE_RULE
SBML_SPECIES_CONCENTRATION_RULE = _libsbml.SBML_SPECIES_CONCENTRATION_RULE
SBML_COMPARTMENT_VOLUME_RULE = _libsbml.SBML_COMPARTMENT_VOLUME_RULE
SBML_PARAMETER_RULE = _libsbml.SBML_PARAMETER_RULE
SBML_TRIGGER = _libsbml.SBML_TRIGGER
SBML_DELAY = _libsbml.SBML_DELAY
SBML_STOICHIOMETRY_MATH = _libsbml.SBML_STOICHIOMETRY_MATH
SBML_LOCAL_PARAMETER = _libsbml.SBML_LOCAL_PARAMETER
SBML_PRIORITY = _libsbml.SBML_PRIORITY
SBML_GENERIC_SBASE = _libsbml.SBML_GENERIC_SBASE

def SBMLTypeCode_toString(*args):
  """
    SBMLTypeCode_toString(int tc, char pkgName) -> char

    This method takes an SBML type code and returns a string representing
    the code.

    LibSBML attaches an identifying code to every kind of SBML object.
    These are known as SBML type codes.  In the Python language interface
    for libSBML, the type codes are defined as static integer constants in
    the interface class libsbml.  The names of the type codes all begin
    with the characters SBML_.

    Returns a human readable name for the given SBML type code.

    Note:

    The caller does not own the returned string and is therefore not
    allowed to modify it.

    """
  return _libsbml.SBMLTypeCode_toString(*args)
class SBase(_object):
    """
    Implementation of SBase, the base class of most SBML objects.

    Most components in SBML are derived from a single abstract base type,
    SBase.  In addition to serving as the parent class for most other
    classes of objects in SBML, this base type is designed to allow a
    modeler or a software package to attach arbitrary information to each
    major element or list in an SBML model.

    SBase has an optional subelement called 'notes'.  It is intended to
    serve as a place for storing optional information intended to be seen
    by humans.  An example use of the 'notes' element would be to contain
    formatted user comments about the model element in which the 'notes'
    element is enclosed.  There are certain conditions on the XHTML
    content permitted inside the 'notes' element; please consult the SBML
    specification document corresponding to the SBML Level and Version of
    your model for more information about the requirements for 'notes'
    content.

    SBase has another optional subelement called 'annotation'.  Whereas
    the 'notes' element described above is a container for content to be
    shown directly to humans, the 'annotation' element is a container for
    optional software-generated content not meant to be shown to humans.
    The element's content type is XML type 'any', allowing essentially
    arbitrary data content.  SBML places only a few restrictions on the
    organization of the content; these are intended to help software tools
    read and write the data as well as help reduce conflicts between
    annotations added by different tools.  As is the case with 'notes', it
    is important to refer to the SBML specification document corresponding
    to the SBML Level and Version of your model for more information about
    the requirements for 'annotation' content.

    It is worth pointing out that the 'annotation' element in the
    definition of SBase exists in order that software developers may
    attach optional application-specific data to the elements in an SBML
    model.  However, it is important that this facility not be misused.
    In particular, it is critical that data essential to a model
    definition or that can be encoded in existing SBML elements is not
    stored in 'annotation'. Parameter values, functional dependencies
    between model elements, etc., should not be recorded as annotations.
    It is crucial to keep in mind the fact that data placed in annotations
    can be freely ignored by software applications.  If such data affects
    the interpretation of a model, then software interoperability is
    greatly impeded.

    SBML Level 2 introduced an optional SBase attribute named 'metaid' for
    supporting metadata annotations using RDF (Resource Description
    Format). The attribute value has the data type XML ID, the XML
    identifier type, which means each 'metaid' value must be globally
    unique within an SBML file.  (Importantly, this uniqueness criterion
    applies across any attribute with type XML ID, not just the 'metaid'
    attribute used by SBML -- something to be aware of if your
    application-specific XML content inside the 'annotation' subelement
    happens to use XML ID.)  The 'metaid' value serves to identify a model
    component for purposes such as referencing that component from
    metadata placed within 'annotation' subelements.

    Beginning with SBML Level 2 Version 3, SBase also has an optional
    attribute named 'sboTerm' for supporting the use of the Systems
    Biology Ontology.  In SBML proper, the data type of the attribute is a
    string of the form 'SBO:NNNNNNN', where 'NNNNNNN' is a seven digit
    integer number; libSBML simplifies the representation by only storing
    the 'NNNNNNN' integer portion.  Thus, in libSBML, the 'sboTerm'
    attribute on SBase has data type int, and SBO identifiers are stored
    simply as integers. (For convenience, SBase offers methods for
    returning both the integer form and a text-string form of the SBO
    identifier.)  SBO terms are a type of optional annotation, and each
    different class of SBML object derived from SBase imposes its own
    requirements about the values permitted for 'sboTerm'.  Please consult
    the SBML Level 2 Version 4 specification for more information about
    the use of SBO and the 'sboTerm' attribute.

    Finally, note that, in the list of methods on SBase, there is no
    public constructor because SBase is an abstract class.  The
    constructors reside in the subclasses derived from SBase.

    Standard format for annotations linking data resources
    ======================================================================

    SBML Level 2 Versions 2, 3 and 4, and Level 3, define a proposed
    regular format for encoding two particular categories of annotations:
    (a) references to controlled vocabulary terms and database identifiers
    which define and describe biological and biochemical entities in a
    model; and (b) descriptions of the provenance of a model, including
    its author(s) and modification history.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SBase
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBase

        Creates and returns a deep copy of this SBase object.

        Returns a (deep) copy of this SBase object.

        """
        return _libsbml.SBase_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the 'id' attribute value of the
        object to find.

        Returns pointer to the first element found with the given identifier.

        """
        return _libsbml.SBase_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with a specific 'metaid'
        attribute value, or None if no such object is found.

        @par The optional attribute named 'metaid', present on every major
        SBML component type, is for supporting metadata annotations using RDF
        (Resource Description Format).  The attribute value has the data type
        XML ID, the XML identifier type, which means each 'metaid' value must
        be globally unique within an SBML file.  The latter point is
        important, because the uniqueness criterion applies across any
        attribute with type ID anywhere in the file, not just the 'metaid'
        attribute used by SBML -- something to be aware of if your
        application-specific XML content inside the 'annotation' subelement
        happens to use the XML ID type.  Although SBML itself specifies the
        use of XML ID only for the 'metaid' attribute, SBML-compatible
        applications should be careful if they use XML ID's in XML portions of
        a model that are not defined by SBML, such as in the application-
        specific content of the 'annotation' subelement.  Finally, note that
        LibSBML does not provide an explicit XML ID data type; it uses
        ordinary character strings, which is easier for applications to
        support.

        Parameter 'metaid' is string representing the 'metaid' attribute value
        of the object to find.

        Returns pointer to the first element found with the given meta-
        identifier.

        """
        return _libsbml.SBase_getElementByMetaId(self, *args)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.SBase_renameSIdRefs(self, *args)

    def renameMetaIdRefs(self, *args):
        """
        renameMetaIdRefs(self, string oldid, string newid)

        Replaces all uses of a given meta identifier attribute value with
        another value.

        @par In SBML, object 'meta' identifiers are of the XML data type ID;
        the SBML object attribute itself is typically named metaid.  All
        attributes that hold values referring to values of type ID are of the
        XML data type IDREF.  They are also sometimes informally referred to
        as 'metaid refs', in analogy to the SBML-defined type SIdRef.

        This method works by looking at all meta-identifier attribute values,
        comparing the identifiers to the value of 'oldid'.  If any matches are
        found, the matching identifiers are replaced with 'newid'.  The method
        does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.SBase_renameMetaIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.SBase_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.SBase_replaceSIDWithFunction(self, *args)

    def divideAssignmentsToSIdByFunction(self, *args):
        """
        divideAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.SBase_divideAssignmentsToSIdByFunction(self, *args)

    def multiplyAssignmentsToSIdByFunction(self, *args):
        """
        multiplyAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.SBase_multiplyAssignmentsToSIdByFunction(self, *args)

    def getElementFromPluginsBySId(self, *args):
        """
        getElementFromPluginsBySId(self, string id) -> SBase

        Internal implementation method.

        """
        return _libsbml.SBase_getElementFromPluginsBySId(self, *args)

    def getElementFromPluginsByMetaId(self, *args):
        """
        getElementFromPluginsByMetaId(self, string metaid) -> SBase

        Internal implementation method.

        """
        return _libsbml.SBase_getElementFromPluginsByMetaId(self, *args)

    def hasNonstandardIdentifierBeginningWith(self, *args):
        """
        hasNonstandardIdentifierBeginningWith(self, string prefix) -> bool

        Internal implementation method.

        """
        return _libsbml.SBase_hasNonstandardIdentifierBeginningWith(self, *args)

    def prependStringToAllIdentifiers(self, *args):
        """
        prependStringToAllIdentifiers(self, string prefix) -> int

        Internal implementation method.

        """
        return _libsbml.SBase_prependStringToAllIdentifiers(self, *args)

    def transformIdentifiers(self, *args):
        """
        transformIdentifiers(self, IdentifierTransformer idTransformer) -> int

        Internal implementation method.

        """
        return _libsbml.SBase_transformIdentifiers(self, *args)

    def getMetaId(self):
        """
        getMetaId(self) -> string

        Returns the value of the 'metaid' attribute of this object.

        @par The optional attribute named 'metaid', present on every major
        SBML component type, is for supporting metadata annotations using RDF
        (Resource Description Format).  The attribute value has the data type
        XML ID, the XML identifier type, which means each 'metaid' value must
        be globally unique within an SBML file.  The latter point is
        important, because the uniqueness criterion applies across any
        attribute with type ID anywhere in the file, not just the 'metaid'
        attribute used by SBML -- something to be aware of if your
        application-specific XML content inside the 'annotation' subelement
        happens to use the XML ID type.  Although SBML itself specifies the
        use of XML ID only for the 'metaid' attribute, SBML-compatible
        applications should be careful if they use XML ID's in XML portions of
        a model that are not defined by SBML, such as in the application-
        specific content of the 'annotation' subelement.  Finally, note that
        LibSBML does not provide an explicit XML ID data type; it uses
        ordinary character strings, which is easier for applications to
        support.

        Returns the meta-identifier of this SBML object.

        See also setMetaId().

        """
        return _libsbml.SBase_getMetaId(self)

    def getId(self):
        """
        getId(self) -> string

        Internal implementation method.

        """
        return _libsbml.SBase_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Internal implementation method.

        """
        return _libsbml.SBase_getName(self)

    def getNotes(self, *args):
        """
        getNotes(self) -> XMLNode
        getNotes(self) -> XMLNode

        Returns the content of the 'notes' subelement of this object as a tree
        of XMLNode objects.

        @par The optional SBML element named 'notes', present on every major
        SBML component type (and in SBML Level 3, the 'message' subelement of
        Constraint), is intended as a place for storing optional information
        intended to be seen by humans.  An example use of the 'notes' element
        would be to contain formatted user comments about the model element in
        which the 'notes' element is enclosed.  Every object derived directly
        or indirectly from type SBase can have a separate value for 'notes',
        allowing users considerable freedom when adding comments to their
        models.

        The format of 'notes' elements conform to the definition of XHTML 1.0.
        However, the content cannot be entirely free-form; it must satisfy
        certain requirements defined in the SBML specifications for specific
        SBML Levels.  To help verify the formatting of 'notes' content,
        libSBML provides the static utility method
        SyntaxChecker.hasExpectedXHTMLSyntax(); The method implements a
        verification process that lets callers check whether the content of a
        given XMLNode object conforms to the SBML requirements for 'notes' and
        'message' structure.  Developers are urged to consult the appropriate
        SBML specification document for the Level and Version of their model
        for more in-depth explanations of using 'notes' in SBML.  The SBML
        Level 2 and  3 specifications have considerable detail about how
        'notes' element content must be structured.

        The 'notes' element content returned by this method will be in XML
        form, but libSBML does not provide an object model specifically for
        the content of notes.  Callers will need to traverse the XML tree
        structure using the facilities available on XMLNode and related
        objects.  For an alternative method of accessing the notes, see
        getNotesString().

        Returns the content of the 'notes' subelement of this SBML object as a
        tree structure composed of XMLNode objects.

        See also SyntaxChecker.hasExpectedXHTMLSyntax().

        """
        return _libsbml.SBase_getNotes(self, *args)

    def getNotesString(self, *args):
        """
        getNotesString(self) -> string
        getNotesString(self) -> string

        Returns the content of the 'notes' subelement of this object as a
        string.

        @par The optional SBML element named 'notes', present on every major
        SBML component type (and in SBML Level 3, the 'message' subelement of
        Constraint), is intended as a place for storing optional information
        intended to be seen by humans.  An example use of the 'notes' element
        would be to contain formatted user comments about the model element in
        which the 'notes' element is enclosed.  Every object derived directly
        or indirectly from type SBase can have a separate value for 'notes',
        allowing users considerable freedom when adding comments to their
        models.

        The format of 'notes' elements conform to the definition of XHTML 1.0.
        However, the content cannot be entirely free-form; it must satisfy
        certain requirements defined in the SBML specifications for specific
        SBML Levels.  To help verify the formatting of 'notes' content,
        libSBML provides the static utility method
        SyntaxChecker.hasExpectedXHTMLSyntax(); The method implements a
        verification process that lets callers check whether the content of a
        given XMLNode object conforms to the SBML requirements for 'notes' and
        'message' structure.  Developers are urged to consult the appropriate
        SBML specification document for the Level and Version of their model
        for more in-depth explanations of using 'notes' in SBML.  The SBML
        Level 2 and  3 specifications have considerable detail about how
        'notes' element content must be structured.

        For an alternative method of accessing the notes, see getNotes(),
        which returns the content as an XMLNode tree structure.  Depending on
        an application's needs, one or the other method may be more
        convenient.

        Returns the content of the 'notes' subelement of this SBML object as a
        string.

        See also SyntaxChecker.hasExpectedXHTMLSyntax().

        """
        return _libsbml.SBase_getNotesString(self, *args)

    def getAnnotation(self, *args):
        """
        getAnnotation(self) -> XMLNode
        getAnnotation(self) -> XMLNode

        Returns the content of the 'annotation' subelement of this object as a
        tree of XMLNode objects.

        @par Whereas the SBML 'notes' subelement is a container for content to
        be shown directly to humans, the 'annotation' element is a container
        for optional software-generated content not meant to be shown to
        humans.  Every object derived from SBase can have its own value for
        'annotation'.  The element's content type is XML type 'any', allowing
        essentially arbitrary well-formed XML data content.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        The annotations returned by this method will be in XML form.  LibSBML
        provides an object model and related interfaces for certain specific
        kinds of annotations, namely model history information and RDF
        content.  See the ModelHistory, CVTerm and RDFAnnotationParser classes
        for more information about the facilities available.

        Returns the annotation of this SBML object as a tree of XMLNode
        objects.

        See also unsetAnnotation().

        """
        return _libsbml.SBase_getAnnotation(self, *args)

    def getAnnotationString(self, *args):
        """
        getAnnotationString(self) -> string
        getAnnotationString(self) -> string

        Returns the content of the 'annotation' subelement of this object as a
        character string.

        @par Whereas the SBML 'notes' subelement is a container for content to
        be shown directly to humans, the 'annotation' element is a container
        for optional software-generated content not meant to be shown to
        humans.  Every object derived from SBase can have its own value for
        'annotation'.  The element's content type is XML type 'any', allowing
        essentially arbitrary well-formed XML data content.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        The annotations returned by this method will be in string form.  See
        the method getAnnotation() for a version that returns annotations in
        XML form.

        Returns the annotation of this SBML object as a character string.

        See also unsetAnnotation().

        """
        return _libsbml.SBase_getAnnotationString(self, *args)

    def getNamespaces(self):
        """
        getNamespaces(self) -> XMLNamespaces

        Returns a list of the XML Namespaces declared on this SBML document.

        The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
        information.  It is used to communicate the SBML Level, Version, and
        (in Level 3) packages used in addition to SBML Level 3 Core.

        Returns the XML Namespaces associated with this SBML object, or None
        in certain very usual circumstances where a namespace is not set.

        See also getVersion().

        """
        return _libsbml.SBase_getNamespaces(self)

    def getSBMLDocument(self, *args):
        """
        getSBMLDocument(self) -> SBMLDocument
        getSBMLDocument(self) -> SBMLDocument

        Returns the SBMLDocument object containing this object instance.

        @par LibSBML uses the class SBMLDocument as a top-level container for
        storing SBML content and data associated with it (such as warnings and
        error messages).  An SBML model in libSBML is contained inside an
        SBMLDocument object.  SBMLDocument corresponds roughly to the class
        SBML defined in the SBML Level 3 and Level 2 specifications, but it
        does not have a direct correspondence in SBML Level 1.  (But, it is
        created by libSBML no matter whether the model is Level 1, Level 2 or
        Level 3.)

        This method allows the caller to obtain the SBMLDocument for the
        current object.

        Returns the parent SBMLDocument object of this SBML object.

        See also getModel().

        """
        return _libsbml.SBase_getSBMLDocument(self, *args)

    def getParentSBMLObject(self, *args):
        """
        getParentSBMLObject(self) -> SBase
        getParentSBMLObject(self) -> SBase

        Returns the parent SBML object containing this object.

        This returns the immediately-containing object.  This method is
        convenient when holding an object nested inside other objects in an
        SBML model.

        Returns the parent SBML object of this SBML object.

        See also getModel().

        """
        return _libsbml.SBase_getParentSBMLObject(self, *args)

    def getAncestorOfType(self, *args):
        """
        getAncestorOfType(self, int type, string pkgName = "core") -> SBase
        getAncestorOfType(self, int type) -> SBase
        getAncestorOfType(self, int type, string pkgName = "core") -> SBase
        getAncestorOfType(self, int type) -> SBase

        Returns the first ancestor object that has the given SBML type code
        from the given package.

        LibSBML attaches an identifying code to every kind of SBML object.
        These are known as SBML type codes.  In the Python language interface
        for libSBML, the type codes are defined as static integer constants in
        the interface class libsbml.  The names of the type codes all begin
        with the characters SBML_.

        This method searches the tree of objects that are parents of this
        object, and returns the first one that has the given SBML type code
        from  the given 'pkgName'.

        Parameter 'type' is the SBML type code of the object sought

        Parameter 'pkgName' is (optional) the short name of an SBML Level 3
        package to which the sought-after object must belong

        Returns the ancestor SBML object of this SBML object that corresponds
        to the given SBML object type code, or None if no ancestor exists.

        WARNING:

        The optional argument 'pkgName' must be used for all type codes from
        SBML Level 3 packages.  Otherwise, the function will search the
        'core' namespace alone, not find any corresponding elements, and
        return  None.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.SBase_getAncestorOfType(self, *args)

    def getSBOTerm(self):
        """
        getSBOTerm(self) -> int

        Returns the integer portion of the value of the 'sboTerm' attribute of
        this object.

        Beginning with SBML Level 2 Version 3, objects derived from SBase have
        an optional attribute named 'sboTerm' for supporting the use of the
        Systems Biology Ontology.  In SBML proper, the data type of the
        attribute is a string of the form 'SBO:NNNNNNN', where 'NNNNNNN' is a
        seven digit integer number; libSBML simplifies the representation by
        only storing the 'NNNNNNN' integer portion.  Thus, in libSBML, the
        'sboTerm' attribute on SBase has data type int, and SBO identifiers
        are stored simply as integers.  (For convenience, libSBML offers
        methods for returning both the integer form and a text-string form of
        the SBO identifier.)

        SBO terms are a type of optional annotation, and each different class
        of SBML object derived from SBase imposes its own requirements about
        the values permitted for 'sboTerm'.  Please consult the SBML Level 2
        Version 4 specification for more information about the use of SBO and
        the 'sboTerm' attribute.

        Returns the value of the 'sboTerm' attribute as an integer, or -1 if
        the value is not set.

        """
        return _libsbml.SBase_getSBOTerm(self)

    def getSBOTermID(self):
        """
        getSBOTermID(self) -> string

        Returns the string representation of the 'sboTerm' attribute of this
        object.

        Beginning with SBML Level 2 Version 3, objects derived from SBase have
        an optional attribute named 'sboTerm' for supporting the use of the
        Systems Biology Ontology.  In SBML proper, the data type of the
        attribute is a string of the form 'SBO:NNNNNNN', where 'NNNNNNN' is a
        seven digit integer number; libSBML simplifies the representation by
        only storing the 'NNNNNNN' integer portion.  Thus, in libSBML, the
        'sboTerm' attribute on SBase has data type int, and SBO identifiers
        are stored simply as integers.  This method returns the entire SBO
        identifier as a text string in the form 'SBO:NNNNNNN'.

        SBO terms are a type of optional annotation, and each different class
        of SBML object derived from SBase imposes its own requirements about
        the values permitted for 'sboTerm'.  Please consult the SBML Level 2
        Version 4 specification for more information about the use of SBO and
        the 'sboTerm' attribute.

        Returns the value of the 'sboTerm' attribute as a string (its value
        will be of the form 'SBO:NNNNNNN'), or an empty string if the value is
        not set.

        """
        return _libsbml.SBase_getSBOTermID(self)

    def getSBOTermAsURL(self):
        """
        getSBOTermAsURL(self) -> string

        Returns the identifiers.org URL representation of the 'sboTerm'
        attribute of this object.

        This method returns the entire SBO identifier as a text string in the
        form  'http://identifiers.org/biomodels.sbo/SBO:NNNNNNN'.

        SBO terms are a type of optional annotation, and each different class
        of SBML object derived from SBase imposes its own requirements about
        the values permitted for 'sboTerm'.  Please consult the SBML Level 2
        Version 4 specification for more information about the use of SBO and
        the 'sboTerm' attribute.

        Returns the value of the 'sboTerm' attribute as an identifiers.org URL
        (its value will be of the form
        'http://identifiers.org/biomodels.sbo/SBO:NNNNNNN'), or an empty
        string if the value is not set.

        """
        return _libsbml.SBase_getSBOTermAsURL(self)

    def getLine(self):
        """
        getLine(self) -> unsigned int

        Returns the line number on which this object first appears in the XML
        representation of the SBML document.

        Returns the line number of this SBML object.

        Note:

        The line number for each construct in an SBML model is set upon
        reading the model.  The accuracy of the line number depends on the
        correctness of the XML representation of the model, and on the
        particular XML parser library being used.  The former limitation
        relates to the following problem: if the model is actually invalid
        XML, then the parser may not be able to interpret the data correctly
        and consequently may not be able to establish the real line number.
        The latter limitation is simply that different parsers seem to have
        their own accuracy limitations, and out of all the parsers supported
        by libSBML, none have been 100 accurate in all situations. (At this
        time, libSBML supports the use of libxml2, Expat and Xerces.)

        See also getColumn().

        """
        return _libsbml.SBase_getLine(self)

    def getColumn(self):
        """
        getColumn(self) -> unsigned int

        Returns the column number on which this object first appears in the
        XML representation of the SBML document.

        Returns the column number of this SBML object.

        Note:

        The column number for each construct in an SBML model is set upon
        reading the model.  The accuracy of the column number depends on the
        correctness of the XML representation of the model, and on the
        particular XML parser library being used.  The former limitation
        relates to the following problem: if the model is actually invalid
        XML, then the parser may not be able to interpret the data correctly
        and consequently may not be able to establish the real column number.
        The latter limitation is simply that different parsers seem to have
        their own accuracy limitations, and out of all the parsers supported
        by libSBML, none have been 100 accurate in all situations. (At this
        time, libSBML supports the use of libxml2, Expat and Xerces.)

        See also getLine().

        """
        return _libsbml.SBase_getColumn(self)

    def getModelHistory(self, *args):
        """
        getModelHistory(self) -> ModelHistory
        getModelHistory(self) -> ModelHistory

        Returns the ModelHistory object, if any, attached to this object.

        Returns the ModelHistory object attached to this object, or None if
        none exist.

        Note:

        In SBML Level 2, model history annotations were only permitted on the
        Model element.  In SBML Level 3, they are permitted on all SBML
        components derived from SBase.

        """
        return _libsbml.SBase_getModelHistory(self, *args)

    def isSetMetaId(self):
        """
        isSetMetaId(self) -> bool

        Predicate returning True if this object's 'metaid' attribute is set.

        @par The optional attribute named 'metaid', present on every major
        SBML component type, is for supporting metadata annotations using RDF
        (Resource Description Format).  The attribute value has the data type
        XML ID, the XML identifier type, which means each 'metaid' value must
        be globally unique within an SBML file.  The latter point is
        important, because the uniqueness criterion applies across any
        attribute with type ID anywhere in the file, not just the 'metaid'
        attribute used by SBML -- something to be aware of if your
        application-specific XML content inside the 'annotation' subelement
        happens to use the XML ID type.  Although SBML itself specifies the
        use of XML ID only for the 'metaid' attribute, SBML-compatible
        applications should be careful if they use XML ID's in XML portions of
        a model that are not defined by SBML, such as in the application-
        specific content of the 'annotation' subelement.  Finally, note that
        LibSBML does not provide an explicit XML ID data type; it uses
        ordinary character strings, which is easier for applications to
        support.

        Returns True if the 'metaid' attribute of this SBML object is set,
        False otherwise.

        See also setMetaId().

        """
        return _libsbml.SBase_isSetMetaId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Internal implementation method.

        """
        return _libsbml.SBase_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Internal implementation method.

        """
        return _libsbml.SBase_isSetName(self)

    def isSetNotes(self):
        """
        isSetNotes(self) -> bool

        Predicate returning True if this object's 'notes' subelement exists
        and has content.

        The optional SBML element named 'notes', present on every major SBML
        component type, is intended as a place for storing optional
        information intended to be seen by humans.  An example use of the
        'notes' element would be to contain formatted user comments about the
        model element in which the 'notes' element is enclosed.  Every object
        derived directly or indirectly from type SBase can have a separate
        value for 'notes', allowing users considerable freedom when adding
        comments to their models.

        The format of 'notes' elements must be XHTML 1.0.  To help verify the
        formatting of 'notes' content, libSBML provides the static utility
        method SyntaxChecker.hasExpectedXHTMLSyntax(); however, readers are
        urged to consult the appropriate SBML specification document for the
        Level and Version of their model for more in-depth explanations.  The
        SBML Level 2 and  3 specifications have considerable detail about how
        'notes' element content must be structured.

        Returns True if a 'notes' subelement exists, False otherwise.

        See also SyntaxChecker.hasExpectedXHTMLSyntax().

        """
        return _libsbml.SBase_isSetNotes(self)

    def isSetAnnotation(self):
        """
        isSetAnnotation(self) -> bool

        Predicate returning True if this object's 'annotation' subelement
        exists and has content.

        Whereas the SBase 'notes' subelement is a container for content to be
        shown directly to humans, the 'annotation' element is a container for
        optional software-generated content not meant to be shown to humans.
        Every object derived from SBase can have its own value for
        'annotation'.  The element's content type is XML type 'any', allowing
        essentially arbitrary well-formed XML data content.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        Returns True if a 'annotation' subelement exists, False otherwise.

        See also unsetAnnotation().

        """
        return _libsbml.SBase_isSetAnnotation(self)

    def isSetSBOTerm(self):
        """
        isSetSBOTerm(self) -> bool

        Predicate returning True if this object's 'sboTerm' attribute is set.

        Returns True if the 'sboTerm' attribute of this SBML object is set,
        False otherwise.

        """
        return _libsbml.SBase_isSetSBOTerm(self)

    def setMetaId(self, *args):
        """
        setMetaId(self, string metaid) -> int

        Sets the value of the meta-identifier attribute of this object.

        @par The optional attribute named 'metaid', present on every major
        SBML component type, is for supporting metadata annotations using RDF
        (Resource Description Format).  The attribute value has the data type
        XML ID, the XML identifier type, which means each 'metaid' value must
        be globally unique within an SBML file.  The latter point is
        important, because the uniqueness criterion applies across any
        attribute with type ID anywhere in the file, not just the 'metaid'
        attribute used by SBML -- something to be aware of if your
        application-specific XML content inside the 'annotation' subelement
        happens to use the XML ID type.  Although SBML itself specifies the
        use of XML ID only for the 'metaid' attribute, SBML-compatible
        applications should be careful if they use XML ID's in XML portions of
        a model that are not defined by SBML, such as in the application-
        specific content of the 'annotation' subelement.  Finally, note that
        LibSBML does not provide an explicit XML ID data type; it uses
        ordinary character strings, which is easier for applications to
        support.

        The string 'metaid' is copied.

        Parameter 'metaid' is the identifier string to use as the value of the
        'metaid' attribute

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        See also isSetMetaId().

        """
        return _libsbml.SBase_setMetaId(self, *args)

    def isSetModelHistory(self):
        """
        isSetModelHistory(self) -> bool

        Predicate returning True if this object has a ModelHistory object
        attached to it.

        Returns True if the ModelHistory of this object is set, false
        otherwise.

        Note:

        In SBML Level 2, model history annotations were only permitted on the
        Model element.  In SBML Level 3, they are permitted on all SBML
        components derived from SBase.

        """
        return _libsbml.SBase_isSetModelHistory(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Internal implementation method.

        """
        return _libsbml.SBase_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Internal implementation method.

        """
        return _libsbml.SBase_setName(self, *args)

    def setAnnotation(self, *args):
        """
        setAnnotation(self, XMLNode annotation) -> int
        setAnnotation(self, string annotation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setAnnotation(XMLNode annotation)

        Sets the value of the 'annotation' subelement of this SBML object.

        The content of 'annotation' is copied, and any previous content of
        this object's 'annotation' subelement is deleted.

        Whereas the SBase 'notes' subelement is a container for content to be
        shown directly to humans, the 'annotation' element is a container for
        optional software-generated content not meant to be shown to humans.
        Every object derived from SBase can have its own value for
        'annotation'.  The element's content type is XML type 'any', allowing
        essentially arbitrary well-formed XML data content.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        Call this method will result in any existing content of the
        'annotation' subelement to be discarded.  Unless you have taken steps
        to first copy and reconstitute any existing annotations into the
        'annotation' that is about to be assigned, it is likely that
        performing such wholesale replacement is unfriendly towards other
        software applications whose annotations are discarded.  An alternative
        may be to use SBase.appendAnnotation() or SBase.appendAnnotation().

        Parameter 'annotation' is an XML structure that is to be used as the
        new content of the 'annotation' subelement of this object

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also unsetAnnotation(), unsetAnnotation().

        """
        return _libsbml.SBase_setAnnotation(self, *args)

    def appendAnnotation(self, *args):
        """
        appendAnnotation(self, XMLNode annotation) -> int
        appendAnnotation(self, string annotation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            appendAnnotation(XMLNode annotation)

        Appends the given 'annotation' to the 'annotation' subelement of this
        object.

        Whereas the SBase 'notes' subelement is a container for content to be
        shown directly to humans, the 'annotation' element is a container for
        optional software-generated content not meant to be shown to humans.
        Every object derived from SBase can have its own value for
        'annotation'.  The element's content type is XML type 'any', allowing
        essentially arbitrary well-formed XML data content.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        Unlike SBase.setAnnotation() or SBase.setAnnotation(), this method
        allows other annotations to be preserved when an application adds its
        own data.

        Parameter 'annotation' is an XML structure that is to be copied and
        appended to the content of the 'annotation' subelement of this object

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also unsetAnnotation(), unsetAnnotation().

        """
        return _libsbml.SBase_appendAnnotation(self, *args)

    def removeTopLevelAnnotationElement(self, *args):
        """
        removeTopLevelAnnotationElement(self, string elementName, string elementURI = "", bool removeEmpty = True) -> int
        removeTopLevelAnnotationElement(self, string elementName, string elementURI = "") -> int
        removeTopLevelAnnotationElement(self, string elementName) -> int

        Removes the top-level element within the 'annotation' subelement of
        this SBML object with the given name and optional URI.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        Calling this method allows a particular annotation element to be
        removed whilst the remaining annotations remain intact.

        Parameter 'elementName' is a string representing the name of the top
        level annotation element that is to be removed Parameter 'elementURI'
        is an optional string that is used to check both the name and URI of
        the top level element to be removed Parameter 'removeEmpty' is if
        after removing of the element, the annotation is  empty, and the
        removeEmpty argument is true, the annotation node will be  deleted
        (default).

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_ANNOTATION_NAME_NOT_FOUND

           * libsbml.LIBSBML_ANNOTATION_NS_NOT_FOUND

        See also replaceTopLevelAnnotationElement().

        """
        return _libsbml.SBase_removeTopLevelAnnotationElement(self, *args)

    def replaceTopLevelAnnotationElement(self, *args):
        """
        replaceTopLevelAnnotationElement(self, XMLNode annotation) -> int
        replaceTopLevelAnnotationElement(self, string annotation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            replaceTopLevelAnnotationElement(XMLNode annotation)

        Replaces the given top-level element within the 'annotation'
        subelement of this SBML object and with the annotation element
        supplied.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        This method determines the name of the element to be replaced from the
        annotation argument. Functionally it is equivalent to calling
        removeTopLevelAnnotationElement(name) followed by calling
        appendAnnotation(annotation_with_name), with the exception that the
        placement of the annotation element remains the same.

        Parameter 'annotation' is XMLNode representing the replacement top
        level annotation

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

        See also replaceTopLevelAnnotationElement(),
        replaceTopLevelAnnotationElement().

        """
        return _libsbml.SBase_replaceTopLevelAnnotationElement(self, *args)

    def setNotes(self, *args):
        """
        setNotes(self, XMLNode notes) -> int
        setNotes(self, string notes, bool addXHTMLMarkup = False) -> int
        setNotes(self, string notes) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setNotes(string notes, bool addXHTMLMarkup = false)

        Sets the value of the 'notes' subelement of this SBML object to a copy
        of the string 'notes'.

        The content of 'notes' is copied, and any existing content of this
        object's 'notes' subelement is deleted.

        The optional SBML element named 'notes', present on every major SBML
        component type, is intended as a place for storing optional
        information intended to be seen by humans.  An example use of the
        'notes' element would be to contain formatted user comments about the
        model element in which the 'notes' element is enclosed.  Every object
        derived directly or indirectly from type SBase can have a separate
        value for 'notes', allowing users considerable freedom when adding
        comments to their models.

        The format of 'notes' elements must be XHTML 1.0.  To help verify the
        formatting of 'notes' content, libSBML provides the static utility
        method SyntaxChecker.hasExpectedXHTMLSyntax(); however, readers are
        urged to consult the appropriate SBML specification document for the
        Level and Version of their model for more in-depth explanations.  The
        SBML Level 2 and  3 specifications have considerable detail about how
        'notes' element content must be structured.

        The following code illustrates a very simple way of setting the notes
        using this method.  Here, the object being annotated is the whole SBML
        document, but that is for illustration purposes only; you could of
        course use this same approach to annotate any other SBML component.

         Parameter 'notes' is an XML string that is to be used as the content
        of the 'notes' subelement of this object

        Parameter 'addXHTMLMarkup' is a boolean indicating whether to wrap the
        contents of the 'notes' argument with XHTML paragraph ( ) tags.  This
        is appropriate when the string in 'notes' does not already containg
        the appropriate XHTML markup.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        See also SyntaxChecker.hasExpectedXHTMLSyntax(),
        SyntaxChecker.hasExpectedXHTMLSyntax().

        """
        return _libsbml.SBase_setNotes(self, *args)

    def appendNotes(self, *args):
        """
        appendNotes(self, XMLNode notes) -> int
        appendNotes(self, string notes) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            appendNotes(string notes)

        Appends the given 'notes' to the 'notes' subelement of this object.

        The content of the parameter 'notes' is copied.

        The optional SBML element named 'notes', present on every major SBML
        component type, is intended as a place for storing optional
        information intended to be seen by humans.  An example use of the
        'notes' element would be to contain formatted user comments about the
        model element in which the 'notes' element is enclosed.  Every object
        derived directly or indirectly from type SBase can have a separate
        value for 'notes', allowing users considerable freedom when adding
        comments to their models.

        The format of 'notes' elements must be XHTML 1.0.  To help verify the
        formatting of 'notes' content, libSBML provides the static utility
        method SyntaxChecker.hasExpectedXHTMLSyntax(); however, readers are
        urged to consult the appropriate SBML specification document for the
        Level and Version of their model for more in-depth explanations.  The
        SBML Level 2 and  3 specifications have considerable detail about how
        'notes' element content must be structured.

        Parameter 'notes' is an XML string that is to appended to the content
        of the 'notes' subelement of this object

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        See also SyntaxChecker.hasExpectedXHTMLSyntax(),
        SyntaxChecker.hasExpectedXHTMLSyntax().

        """
        return _libsbml.SBase_appendNotes(self, *args)

    def setModelHistory(self, *args):
        """
        setModelHistory(self, ModelHistory history) -> int

        Sets the ModelHistory of this object.

        The content of 'history' is copied, and this object's existing model
        history content is deleted.

        Parameter 'history' is ModelHistory of this object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        In SBML Level 2, model history annotations were only permitted on the
        Model element.  In SBML Level 3, they are permitted on all SBML
        components derived from SBase.

        """
        return _libsbml.SBase_setModelHistory(self, *args)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase parent)

        Internal implementation method.

        """
        return _libsbml.SBase_connectToParent(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.SBase_connectToChild(self)

    def setSBOTerm(self, *args):
        """
        setSBOTerm(self, int value) -> int
        setSBOTerm(self, string sboid) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setSBOTerm(int value)

        Sets the value of the 'sboTerm' attribute.

        Beginning with SBML Level 2 Version 3, objects derived from SBase have
        an optional attribute named 'sboTerm' for supporting the use of the
        Systems Biology Ontology.  In SBML proper, the data type of the
        attribute is a string of the form 'SBO:NNNNNNN', where 'NNNNNNN' is a
        seven digit integer number; libSBML simplifies the representation by
        only storing the 'NNNNNNN' integer portion.  Thus, in libSBML, the
        'sboTerm' attribute on SBase has data type int, and SBO identifiers
        are stored simply as integers.

        SBO terms are a type of optional annotation, and each different class
        of SBML object derived from SBase imposes its own requirements about
        the values permitted for 'sboTerm'.  Please consult the SBML Level 2
        Version 4 specification for more information about the use of SBO and
        the 'sboTerm' attribute.

        Parameter 'value' is the NNNNNNN integer portion of the SBO identifier

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        See also setSBOTerm(), setSBOTerm().

        """
        return _libsbml.SBase_setSBOTerm(self, *args)

    def setNamespaces(self, *args):
        """
        setNamespaces(self, XMLNamespaces xmlns) -> int

        Sets the namespaces relevant of this SBML object.

        The content of 'xmlns' is copied, and this object's existing namespace
        content is deleted.

        The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
        information.  It is used to communicate the SBML Level, Version, and
        (in Level 3) packages used in addition to SBML Level 3 Core.

        Parameter 'xmlns' is the namespaces to set

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.SBase_setNamespaces(self, *args)

    def unsetMetaId(self):
        """
        unsetMetaId(self) -> int

        Unsets the value of the 'metaid' attribute of this SBML object.

        @par The optional attribute named 'metaid', present on every major
        SBML component type, is for supporting metadata annotations using RDF
        (Resource Description Format).  The attribute value has the data type
        XML ID, the XML identifier type, which means each 'metaid' value must
        be globally unique within an SBML file.  The latter point is
        important, because the uniqueness criterion applies across any
        attribute with type ID anywhere in the file, not just the 'metaid'
        attribute used by SBML -- something to be aware of if your
        application-specific XML content inside the 'annotation' subelement
        happens to use the XML ID type.  Although SBML itself specifies the
        use of XML ID only for the 'metaid' attribute, SBML-compatible
        applications should be careful if they use XML ID's in XML portions of
        a model that are not defined by SBML, such as in the application-
        specific content of the 'annotation' subelement.  Finally, note that
        LibSBML does not provide an explicit XML ID data type; it uses
        ordinary character strings, which is easier for applications to
        support.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBase_unsetMetaId(self)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this SBML object.

        Most (but not all) objects in SBML include two common attributes: 'id'
        and 'name'.  The identifier given by an object's 'id' attribute value
        is used to identify the object within the SBML model definition. Other
        objects can refer to the component using this identifier.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBase_unsetId(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this SBML object.

        Most (but not all) objects in SBML include two common attributes: 'id'
        and 'name'.  In contrast to the 'id' attribute, the 'name' attribute
        is optional and is not intended to be used for cross-referencing
        purposes within a model.  Its purpose instead is to provide a human-
        readable label for the component.  The data type of 'name' is the type
        string defined in XML Schema.  SBML imposes no restrictions as to the
        content of 'name' attributes beyond those restrictions defined by the
        string type in XML Schema.

        The recommended practice for handling 'name' is as follows.  If a
        software tool has the capability for displaying the content of 'name'
        attributes, it should display this content to the user as a
        component's label instead of the component's 'id'.  If the user
        interface does not have this capability (e.g., because it cannot
        display or use special characters in symbol names), or if the 'name'
        attribute is missing on a given component, then the user interface
        should display the value of the 'id' attribute instead.  (Script
        language interpreters are especially likely to display 'id' instead of
        'name'.)

        As a consequence of the above, authors of systems that automatically
        generate the values of 'id' attributes should be aware some systems
        may display the 'id''s to the user.  Authors therefore may wish to
        take some care to have their software create 'id' values that are: (a)
        reasonably easy for humans to type and read; and (b) likely to be
        meaningful, for example by making the 'id' attribute be an abbreviated
        form of the name attribute value.

        An additional point worth mentioning is although there are
        restrictions on the uniqueness of 'id' values, there are no
        restrictions on the uniqueness of 'name' values in a model.  This
        allows software applications leeway in assigning component
        identifiers.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBase_unsetName(self)

    def unsetNotes(self):
        """
        unsetNotes(self) -> int

        Unsets the value of the 'notes' subelement of this SBML object.

        The optional SBML element named 'notes', present on every major SBML
        component type, is intended as a place for storing optional
        information intended to be seen by humans.  An example use of the
        'notes' element would be to contain formatted user comments about the
        model element in which the 'notes' element is enclosed.  Every object
        derived directly or indirectly from type SBase can have a separate
        value for 'notes', allowing users considerable freedom when adding
        comments to their models.

        The format of 'notes' elements must be XHTML 1.0.  To help verify the
        formatting of 'notes' content, libSBML provides the static utility
        method SyntaxChecker.hasExpectedXHTMLSyntax(); however, readers are
        urged to consult the appropriate SBML specification document for the
        Level and Version of their model for more in-depth explanations.  The
        SBML Level 2 and  3 specifications have considerable detail about how
        'notes' element content must be structured.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also SyntaxChecker.hasExpectedXHTMLSyntax().

        """
        return _libsbml.SBase_unsetNotes(self)

    def unsetAnnotation(self):
        """
        unsetAnnotation(self) -> int

        Unsets the value of the 'annotation' subelement of this SBML object.

        Whereas the SBase 'notes' subelement is a container for content to be
        shown directly to humans, the 'annotation' element is a container for
        optional software-generated content not meant to be shown to humans.
        Every object derived from SBase can have its own value for
        'annotation'.  The element's content type is XML type 'any', allowing
        essentially arbitrary well-formed XML data content.

        SBML places a few restrictions on the organization of the content of
        annotations; these are intended to help software tools read and write
        the data as well as help reduce conflicts between annotations added by
        different tools.  Please see the SBML specifications for more details.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also appendAnnotation().

        """
        return _libsbml.SBase_unsetAnnotation(self)

    def unsetSBOTerm(self):
        """
        unsetSBOTerm(self) -> int

        Unsets the value of the 'sboTerm' attribute of this SBML object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.SBase_unsetSBOTerm(self)

    def addCVTerm(self, *args):
        """
        addCVTerm(self, CVTerm term, bool newBag = False) -> int
        addCVTerm(self, CVTerm term) -> int

        Adds a copy of the given CVTerm object to this SBML object.

        Parameter 'term' is the CVTerm to assign.

        Parameter 'newBag' is if True, creates a new RDF bag with the same
        identifier as a previous bag, and if False, adds the term to an
        existing RDF bag with the same type of qualifier as the term being
        added.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE, if this object lacks a
        'metaid' attribute

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        Since the CV Term uses the 'metaid' attribute of the object as a
        reference, if the object has no 'metaid' attribute value set, then the
        CVTerm will not be added.

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.SBase_addCVTerm(self, *args)

    def getCVTerms(self):
      """
      getCVTerms(self) -> CVTermList

      Get the CVTermList of CVTerm objects in this SBase.

      Returns the CVTermList for this SBase.


      """
      return _libsbml.SBase_getCVTerms(self)


    def getNumCVTerms(self):
        """
        getNumCVTerms(self) -> unsigned int

        Returns the number of CVTerm objects in the annotations of this SBML
        object.

        Returns the number of CVTerms for this SBML object.

        """
        return _libsbml.SBase_getNumCVTerms(self)

    def getCVTerm(self, *args):
        """
        getCVTerm(self, unsigned int n) -> CVTerm

        Returns the nth CVTerm in the list of CVTerms of this SBML object.

        Parameter 'n' is long the index of the CVTerm to retrieve

        Returns the nth CVTerm in the list of CVTerms for this SBML object.

        """
        return _libsbml.SBase_getCVTerm(self, *args)

    def unsetCVTerms(self):
        """
        unsetCVTerms(self) -> int

        Clears the list of CVTerm objects attached to this SBML object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBase_unsetCVTerms(self)

    def unsetModelHistory(self):
        """
        unsetModelHistory(self) -> int

        Unsets the ModelHistory object attached to this object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        In SBML Level 2, model history annotations were only permitted on the
        Model element.  In SBML Level 3, they are permitted on all SBML
        components derived from SBase.

        """
        return _libsbml.SBase_unsetModelHistory(self)

    def getResourceBiologicalQualifier(self, *args):
        """
        getResourceBiologicalQualifier(self, string resource) -> BiolQualifierType_t

        Returns the MIRIAM biological qualifier associated with the given
        resource.

        In MIRIAM, qualifiers are an optional means of indicating the
        relationship between a model component and its annotations.  There are
        two broad kinds of annotations: model and biological.  The latter kind
        is used to qualify the relationship between a model component and a
        biological entity which it represents.  Examples of relationships
        include 'is' and 'has part', but many others are possible.  MIRIAM
        defines numerous relationship qualifiers to enable different software
        tools to qualify biological annotations in the same standardized way.
        In libSBML, the MIRIAM controlled-vocabulary annotations on an SBML
        model element are represented using lists of CVTerm objects, and the
        the MIRIAM biological qualifiers are represented using values whose
        names begin with BQB_ in the interface class libsbml.

        This method searches the controlled-vocabulary annotations (i.e., the
        list of CVTerm objects) on the present object, then out of those that
        have biological qualifiers, looks for an annotation to the given
        'resource'.  If such an annotation is found, it returns the type of
        biological qualifier associated with that resource as a  value whose
        name begins with BQB_ from the interface class libsbml.

        Parameter 'resource' is string representing the resource; e.g.,
        'http://www.geneontology.org/#GO:0005892'.

        Returns the qualifier associated with the resource, or
        libsbml.BQB_UNKNOWN if the resource does not exist.

        Note:

        The set of MIRIAM biological qualifiers grows over time, although
        relatively slowly.  The values are up to date with MIRIAM at the time
        of a given libSBML release.  The set of values in list of BQB_
        constants defined in libsbml may be expanded in later libSBML
        releases, to match the values defined by MIRIAM at that later time.

        """
        return _libsbml.SBase_getResourceBiologicalQualifier(self, *args)

    def getResourceModelQualifier(self, *args):
        """
        getResourceModelQualifier(self, string resource) -> ModelQualifierType_t

        Returns the MIRIAM model qualifier associated with the given resource.

        In MIRIAM, qualifiers are an optional means of indicating the
        relationship between a model component and its annotations.  There are
        two broad kinds of annotations: model and biological.  The former kind
        is used to qualify the relationship between a model component and
        another modeling object.  An example qualifier is 'isDerivedFrom', to
        indicate that a given component of the model is derived from the
        modeling object represented by the referenced resource.  MIRIAM
        defines numerous relationship qualifiers to enable different software
        tools to qualify model annotations in the same standardized way.  In
        libSBML, the MIRIAM controlled-vocabulary annotations on an SBML model
        element are represented using lists of CVTerm objects, and the  the
        MIRIAM model qualifiers are represented using values whose names begin
        with BQM_ in the interface class libsbml.

        This method method searches the controlled-vocabulary annotations
        (i.e., the list of CVTerm objects) on the present object, then out of
        those that have model qualifiers, looks for an annotation to the given
        'resource'.  If such an annotation is found, it returns the type of
        type of model qualifier associated with that resource as a  value
        whose name begins with BQM_ from the interface class libsbml.

        Parameter 'resource' is string representing the resource; e.g.,
        'http://www.geneontology.org/#GO:0005892'.

        Returns the model qualifier type associated with the resource, or
        libsbml.BQM_UNKNOWN if the resource does not exist.

        Note:

        The set of MIRIAM model qualifiers grows over time, although
        relatively slowly.  The values are up to date with MIRIAM at the time
        of a given libSBML release.  The set of values in list of BQM_
        constants defined in libsbml may be expanded in later libSBML
        releases, to match the values defined by MIRIAM at that later time.

        """
        return _libsbml.SBase_getResourceModelQualifier(self, *args)

    def getModel(self):
        """
        getModel(self) -> Model

        Returns the Model object for the SBML Document in which the current
        object is located.

        Returns the Model object for the SBML Document of this SBML object.

        See also getSBMLDocument().

        """
        return _libsbml.SBase_getModel(self)

    def getLevel(self):
        """
        getLevel(self) -> unsigned int

        Returns the SBML Level of the SBMLDocument object containing this
        object.

        @par LibSBML uses the class SBMLDocument as a top-level container for
        storing SBML content and data associated with it (such as warnings and
        error messages).  An SBML model in libSBML is contained inside an
        SBMLDocument object.  SBMLDocument corresponds roughly to the class
        SBML defined in the SBML Level 3 and Level 2 specifications, but it
        does not have a direct correspondence in SBML Level 1.  (But, it is
        created by libSBML no matter whether the model is Level 1, Level 2 or
        Level 3.)

        Returns the SBML level of this SBML object.

        See also getPackageVersion().

        """
        return _libsbml.SBase_getLevel(self)

    def getVersion(self):
        """
        getVersion(self) -> unsigned int

        Returns the Version within the SBML Level of the SBMLDocument object
        containing this object.

        @par LibSBML uses the class SBMLDocument as a top-level container for
        storing SBML content and data associated with it (such as warnings and
        error messages).  An SBML model in libSBML is contained inside an
        SBMLDocument object.  SBMLDocument corresponds roughly to the class
        SBML defined in the SBML Level 3 and Level 2 specifications, but it
        does not have a direct correspondence in SBML Level 1.  (But, it is
        created by libSBML no matter whether the model is Level 1, Level 2 or
        Level 3.)

        Returns the SBML version of this SBML object.

        See also getNamespaces().

        """
        return _libsbml.SBase_getVersion(self)

    def getPackageVersion(self):
        """
        getPackageVersion(self) -> unsigned int

        Returns the Version of the SBML Level 3 package to which this element
        belongs to.

        Returns the version of the SBML Level 3 package to which this element
        belongs. The value 0 will be returned if this element belongs to the
        SBML Level 3 Core package.

        See also getVersion().

        """
        return _libsbml.SBase_getPackageVersion(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the name of the SBML Level 3 package in which this element is
        defined.

        Returns the name of the SBML package in which this element is defined.
        The string "core" will be returned if this element is defined in
        SBML Level 3 Core. The string "unknown" will be returned if this
        element is not defined in any SBML package.

        """
        return _libsbml.SBase_getPackageName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this object.

        This method may return the type code of this SBML object, or it may
        return libsbml.SBML_UNKNOWN.  This is because subclasses of SBase are
        not required to implement this method to return a type code.  This
        method is meant primarily for the LibSBML C interface, in which class
        and subclass information is not readily available.

        Returns the SBML object type code of this SBML object or
        libsbml.SBML_UNKNOWN (the default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.SBase_getTypeCode(self)

    def hasValidLevelVersionNamespaceCombination(self):
        """hasValidLevelVersionNamespaceCombination(self) -> bool"""
        return _libsbml.SBase_hasValidLevelVersionNamespaceCombination(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        This is overridden by subclasses to return a string appropriate to the
        SBML component.  For example, Model defines it as returning 'model',
        CompartmentType defines it as returning 'compartmentType', and so on.

        """
        return _libsbml.SBase_getElementName(self)

    def toSBML(self):
        """
        toSBML(self) -> char

        Returns a string consisting of a partial SBML corresponding to just
        this object.

        Returns the partial SBML that describes this SBML object.

        WARNING:

        This is primarily provided for testing and debugging purposes.  It may
        be removed in a future version of libSBML.

        """
        return _libsbml.SBase_toSBML(self)

    def toXMLNode(self):
        """
        toXMLNode(self) -> XMLNode

        Returns this element as an XMLNode.

        Returns this element as an XMLNode.

        WARNING:

        This operation is computationally expensive, because the element has
        to be fully serialized to a string and then parsed into the XMLNode
        structure.  Attempting to convert a large tree structure (e.g., a
        large Model) may consume significant computer memory and time.

        """
        return _libsbml.SBase_toXMLNode(self)

    def getPlugin(self, *args):
        """
        getPlugin(self, string package) -> SBasePlugin
        getPlugin(self, string package) -> SBasePlugin
        getPlugin(self, unsigned int n) -> SBasePlugin
        getPlugin(self, unsigned int n) -> SBasePlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getPlugin(long n)

        Returns the nth plug-in object (extension interface) for an SBML Level
        3 package extension.

        @par SBML Level 3 consists of a Core definition that can be extended
        via optional SBML Level 3 packages.  A given model may indicate that
        it uses one or more SBML packages, and likewise, a software tool may
        be able to support one or more packages.  LibSBML does not come
        preconfigured with all possible packages included and enabled, in part
        because not all package specifications have been finalized.  To
        support the ability for software systems to enable support for the
        Level 3 packages they choose, libSBML features a plug-in mechanism.
        Each SBML Level 3 package is implemented in a separate code plug-in
        that can be enabled by the application to support working with that
        SBML package.  A given SBML model may thus contain not only objects
        defined by SBML Level 3 Core, but also objects created by libSBML
        plug-ins supporting additional Level 3 packages.

        Parameter 'n' is the index of the plug-in to return

        Returns the plug-in object (the libSBML extension interface) of a
        package extension with the given package name or URI.

        @par <hr> Method variant with the following signature:

            getPlugin(string package)

        Returns a plug-in object (extension interface) for an SBML Level 3
        package extension with the given package name or URI.

        @par SBML Level 3 consists of a Core definition that can be extended
        via optional SBML Level 3 packages.  A given model may indicate that
        it uses one or more SBML packages, and likewise, a software tool may
        be able to support one or more packages.  LibSBML does not come
        preconfigured with all possible packages included and enabled, in part
        because not all package specifications have been finalized.  To
        support the ability for software systems to enable support for the
        Level 3 packages they choose, libSBML features a plug-in mechanism.
        Each SBML Level 3 package is implemented in a separate code plug-in
        that can be enabled by the application to support working with that
        SBML package.  A given SBML model may thus contain not only objects
        defined by SBML Level 3 Core, but also objects created by libSBML
        plug-ins supporting additional Level 3 packages.

        Parameter 'package' is the name or URI of the package

        Returns the plug-in object (the libSBML extension interface) of a
        package extension with the given package name or URI.

        """
        return _libsbml.SBase_getPlugin(self, *args)

    def getNumPlugins(self):
        """
        getNumPlugins(self) -> unsigned int

        Returns the number of plug-in objects (extenstion interfaces) for SBML
        Level 3 package extensions known.

        @par SBML Level 3 consists of a Core definition that can be extended
        via optional SBML Level 3 packages.  A given model may indicate that
        it uses one or more SBML packages, and likewise, a software tool may
        be able to support one or more packages.  LibSBML does not come
        preconfigured with all possible packages included and enabled, in part
        because not all package specifications have been finalized.  To
        support the ability for software systems to enable support for the
        Level 3 packages they choose, libSBML features a plug-in mechanism.
        Each SBML Level 3 package is implemented in a separate code plug-in
        that can be enabled by the application to support working with that
        SBML package.  A given SBML model may thus contain not only objects
        defined by SBML Level 3 Core, but also objects created by libSBML
        plug-ins supporting additional Level 3 packages.

        Returns the number of plug-in objects (extension interfaces) of
        package extensions known by this instance of libSBML.

        """
        return _libsbml.SBase_getNumPlugins(self)

    def enablePackage(self, *args):
        """
        enablePackage(self, string pkgURI, string pkgPrefix, bool flag) -> int

        Enables or disables the given SBML Level 3 package on this object.

        This method enables the specified package on this object and other
        objects connected by child-parent links in the same SBMLDocument
        object. This method is the converse of SBase.disablePackage().

        Parameter 'pkgURI' is the URI of the package.

        Parameter 'pkgPrefix' is the XML prefix of the package

        Parameter 'flag' is whether to enable (True) or disable (False) the
        package

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_PKG_UNKNOWN

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_CONFLICTED_VERSION

        See also disablePackage().

        """
        return _libsbml.SBase_enablePackage(self, *args)

    def disablePackage(self, *args):
        """
        disablePackage(self, string pkgURI, string pkgPrefix) -> int

        Disables the given SBML Level 3 package on this object.

        This method disables the specified package on this object and other
        objects connected by child-parent links in the same SBMLDocument
        object.

        An example of when this may be useful is during construction of model
        components when mixing existing and new models.  Suppose your
        application read an SBML document containing a model that used the
        SBML Hierarchical Model Composition (&ldquo;comp&rdquo;) package, and
        extracted parts of that model in order to construct a new model in
        memory.  The new, in-memory model will not accept a component drawn
        from an other SBMLDocument with different package namespace
        declarations. You could reconstruct the same namespaces in the in-
        memory model first, but as a shortcut, you could also disable the
        package namespace on the object being added.  Here is a code example
        to help clarify this:

          import sys
          import os.path
          from libsbml import *
          
          # We read in an SBML L3V1 model that uses the 'comp' package namespace
          doc = readSBML('sbml-file-with-comp-elements.xml');
          
          # We extract one of the species from the model we just read in.
          s1 = doc.getModel().getSpecies(0);
          
          # We construct a new model.  This model does not use the 'comp' package.
          newDoc = SBMLDocument(3, 1);
          newModel = newDoc.createModel();
          
          # The following would fail with an error, because addSpecies() would
          # first check that the parent of the given object has namespaces
          # declared, and will discover that s1 does but newModel does not.
          
          # newModel.addSpecies(s1);
          
          # However, if we disable the 'comp' package on s1, then the call
          # to addSpecies will work.
          
          s1.disablePackage('http://www.sbml.org/sbml/level3/version1/comp/version1',
                            'comp');
          newModel.addSpecies(s1);

         Parameter 'pkgURI' is the URI of the package

        Parameter 'pkgPrefix' is the XML prefix of the package

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_PKG_UNKNOWN

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_CONFLICTED_VERSION

        See also enablePackage().

        """
        return _libsbml.SBase_disablePackage(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.SBase_enablePackageInternal(self, *args)

    def isPackageURIEnabled(self, *args):
        """
        isPackageURIEnabled(self, string pkgURI) -> bool

        Predicate returning True if an SBML Level 3 package with the given URI
        is enabled with this object.

        Parameter 'pkgURI' is the URI of the package

        Returns True if the given package is enabled within this object, false
        otherwise.

        See also isPackageEnabled().

        """
        return _libsbml.SBase_isPackageURIEnabled(self, *args)

    def isPackageEnabled(self, *args):
        """
        isPackageEnabled(self, string pkgName) -> bool

        Predicate returning True if the given SBML Level 3 package is enabled
        with this object.

        The search ignores the package version.

        Parameter 'pkgName' is the name of the package

        Returns True if the given package is enabled within this object, false
        otherwise.

        See also isPackageURIEnabled().

        """
        return _libsbml.SBase_isPackageEnabled(self, *args)

    def isPkgURIEnabled(self, *args):
        """
        isPkgURIEnabled(self, string pkgURI) -> bool

        Predicate returning True if an SBML Level 3 package with the given URI
        is enabled with this object.

        Parameter 'pkgURI' is the URI of the package

        Returns True if the given package is enabled within this object, false
        otherwise.

        See also isPkgEnabled().

        DEPRECATED. Replaced in libSBML 5.2.0 by isPackageURIEnabled()

        """
        return _libsbml.SBase_isPkgURIEnabled(self, *args)

    def isPkgEnabled(self, *args):
        """
        isPkgEnabled(self, string pkgName) -> bool

        Predicate returning True if the given SBML Level 3 package is enabled
        with this object.

        The search ignores the package version.

        Parameter 'pkgName' is the name of the package

        Returns True if the given package is enabled within this object, false
        otherwise.

        See also isPkgURIEnabled().

        DEPRECATED. Replaced in libSBML 5.2.0 by isPackageEnabled()

        """
        return _libsbml.SBase_isPkgEnabled(self, *args)

    def writeExtensionElements(self, *args):
        """
        writeExtensionElements(self, XMLOutputStream stream)

        Internal implementation method.

        """
        return _libsbml.SBase_writeExtensionElements(self, *args)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Internal implementation method.

        """
        return _libsbml.SBase_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Internal implementation method.

        """
        return _libsbml.SBase_hasRequiredElements(self)

    def checkCompatibility(self, *args):
        """
        checkCompatibility(self, SBase object) -> int

        Internal implementation method.

        """
        return _libsbml.SBase_checkCompatibility(self, *args)

    def setSBMLNamespacesAndOwn(self, *args):
        """
        setSBMLNamespacesAndOwn(self, SBMLNamespaces sbmlns)

        Internal implementation method.

        """
        return _libsbml.SBase_setSBMLNamespacesAndOwn(self, *args)

    def getSBMLNamespaces(self):
        """
        getSBMLNamespaces(self) -> SBMLNamespaces

        Internal implementation method.

        """
        return _libsbml.SBase_getSBMLNamespaces(self)

    def checkMathMLNamespace(self, *args):
        """
        checkMathMLNamespace(self, XMLToken elem) -> string

        Internal implementation method.

        """
        return _libsbml.SBase_checkMathMLNamespace(self, *args)

    def getDerivedUnitDefinition(self):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition

        Internal implementation method.

        """
        return _libsbml.SBase_getDerivedUnitDefinition(self)

    def containsUndeclaredUnits(self):
        """
        containsUndeclaredUnits(self) -> bool

        Internal implementation method.

        """
        return _libsbml.SBase_containsUndeclaredUnits(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Removes this object from its parent.

        If the parent was storing this object as a pointer, it is deleted.  If
        not, it is simply cleared (as in ListOf objects).  This is a pure
        virtual method, as every SBase element has different parents, and
        therefore different methods of removing itself.  Will fail (and not
        delete itself) if it has no parent object.  This function is designed
        to be overridden, but for all objects whose parent is of the class
        ListOf, the default implementation will work.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBase_removeFromParentAndDelete(self)

    def matchesSBMLNamespaces(self, *args):
        """
        matchesSBMLNamespaces(self, SBase sb) -> bool
        matchesSBMLNamespaces(self, SBase sb) -> bool

        Returns True if this object's set of XML namespaces are the same as
        the given object's XML namespaces.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sb' is an object to compare with respect to namespaces

        Returns boolean, True if this object's collection of namespaces is the
        same as 'sb's', False otherwise.

        """
        return _libsbml.SBase_matchesSBMLNamespaces(self, *args)

    def matchesRequiredSBMLNamespacesForAddition(self, *args):
        """
        matchesRequiredSBMLNamespacesForAddition(self, SBase sb) -> bool
        matchesRequiredSBMLNamespacesForAddition(self, SBase sb) -> bool

        Returns True if this object's set of XML namespaces are a subset of
        the given object's XML namespaces.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sb' is an object to compare with respect to namespaces

        Returns boolean, True if this object's collection of namespaces is a
        subset of 'sb's', False otherwise.

        """
        return _libsbml.SBase_matchesRequiredSBMLNamespacesForAddition(self, *args)

    def getURI(self):
        """
        getURI(self) -> string

        Gets the namespace URI to which this element belongs to.

        For example, all elements that belong to SBML Level 3 Version 1 Core
        must would have the URI
        'http://www.sbml.org/sbml/level3/version1/core'; all elements that
        belong to Layout Extension Version 1 for SBML Level 3 Version 1 Core
        must would have the URI
        'http://www.sbml.org/sbml/level3/version1/layout/version1/'

        This function first returns the URI for this element by looking into
        the SBMLNamespaces object of the document with the its package name.
        If not found, it will return the XML namespace to which this element
        belongs.

        Returns the URI of this element

        See also getPackageName().

        """
        return _libsbml.SBase_getURI(self)

    def getPrefix(self):
        """
        getPrefix(self) -> string

        Returns the namespace prefix of this element.

        """
        return _libsbml.SBase_getPrefix(self)

    __metaclass__ = AutoProperty

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

    def getListOfAllElements(self, filter = None):
        """
        getListOfAllElements(self, ElementFilter filter = None) -> SBaseList
        getListOfAllElements(self) -> SBaseList

        Returns an SBaseList of all child SBase objects, including those
        nested to an arbitrary depth.

        @return an SBaseList

        """
        return _libsbml.SBase_getListOfAllElements(self, filter)

    def getListOfAllElementsFromPlugins(self, filter = None):
        """
        getListOfAllElementsFromPlugins(self, ElementFilter filter = None) -> SBaseList
        getListOfAllElementsFromPlugins(self) -> SBaseList

        Returns an SBaseList of all child SBase objects contained in SBML package
        plugins.

        This method walks down the list of all packages used by the model and
        returns all objects contained in them.

        @return an SBaseList of all children objects from plugins.

        """
        return _libsbml.SBase_getListOfAllElementsFromPlugins(self, filter)

SBase_swigregister = _libsbml.SBase_swigregister
SBase_swigregister(SBase)

class ListOf(SBase):
    """
    Parent class for libSBML's 'ListOfXYZ' classes.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The ListOf class in libSBML is a utility class that serves as the
    parent class for implementing the ListOf__ classes.  It provides
    methods for working generically with the various SBML lists of objects
    in a program. LibSBML uses this separate list class rather than
    ordinary Python lists, so that it can provide the methods and features
    associated with SBase.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOf, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOf, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_ListOf
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) -> ListOf
        __init__(self, unsigned int level = SBML_DEFAULT_LEVEL) -> ListOf
        __init__(self) -> ListOf
        __init__(self, SBMLNamespaces sbmlns) -> ListOf
        __init__(self, ListOf orig) -> ListOf

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOf(SBMLNamespaces sbmlns)

        Creates a new ListOf with a given SBMLNamespaces object.

        Parameter 'sbmlns' is the set of SBML namespaces that this ListOf
        should contain.

        Note:

        Bare ListOf objects are impossible to add to SBML models.  The ListOf
        class is simply the base of other classes in libSBML.  Calling
        programs are not intended to create bare ListOf objects themselves.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            ListOf(long level   = SBML_DEFAULT_LEVEL, long version =
        SBML_DEFAULT_VERSION)

        Creates a new ListOf object.

        Parameter 'level' is the SBML Level; if not assigned, defaults to the
        value of SBMLDocument.getDefaultLevel().

        Parameter 'version' is the Version within the SBML Level; if not
        assigned, defaults to the value of SBMLDocument.getDefaultVersion().

        Note:

        Bare ListOf objects are impossible to add to SBML models.  The ListOf
        class is simply the base of other classes in libSBML.  Calling
        programs are not intended to create bare ListOf objects themselves.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            ListOf(ListOf orig)

        Copy constructor; creates a copy of this ListOf.

        Parameter 'orig' is the ListOf instance to copy.

        """
        this = _libsbml.new_ListOf(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOf

        Creates and returns a deep copy of this ListOf.

        Returns a (deep) copy of this ListOf.

        """
        return _libsbml.ListOf_clone(self)

    def append(self, *args):
        """
        append(self, SBase item) -> int

        Adds an item to the end of this ListOf's list of items.

        This method makes a clone of the 'item' handed to it.  This means that
        when the ListOf object is destroyed, the original items will not be
        destroyed.  For a method with an alternative ownership behavior, see
        the ListOf.appendAndOwn() method.

        Parameter 'item' is the item to be added to the list.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        See also appendFrom().

        """
        return _libsbml.ListOf_append(self, *args)

    def appendAndOwn(self, *args):
        """
        appendAndOwn(self, SBase item) -> int

        Adds an item to the end of this ListOf's list of items.

        This method does not clone the 'item' handed to it; instead, it
        assumes ownership of it.  This means that when the ListOf is
        destroyed, the item will be destroyed along with it.  For a method
        with an alternative ownership behavior, see the ListOf.append()
        method.

        Parameter 'item' is the item to be added to the list.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        See also appendFrom().

        """
        if args[0] is not None: args[0].thisown = 0


        return _libsbml.ListOf_appendAndOwn(self, *args)

    def appendFrom(self, *args):
        """
        appendFrom(self, ListOf list) -> int

        Adds a clone of a list of items to this ListOf's list.

        Note that because this clones the objects handed to it, the original
        items will not be destroyed when this ListOf object is destroyed.

        Parameter 'list' is a list of items to be added.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        See also appendAndOwn().

        """
        return _libsbml.ListOf_appendFrom(self, *args)

    def insert(self, *args):
        """
        insert(self, int location, SBase item) -> int

        Inserts an item at a given position in this ListOf's list of items.

        This variant of the method makes a clone of the 'item' handed to it.
        This means that when the ListOf is destroyed, the original 'item' will
        not be destroyed.

        Parameter 'location' is the location in the list where to insert the
        item. Parameter 'item' is the item to be inserted to the list.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        See also insertAndOwn().

        """
        return _libsbml.ListOf_insert(self, *args)

    def insertAndOwn(self, *args):
        """
        insertAndOwn(self, int location, SBase item) -> int

        Inserts an item at a given position in this ListOf's list of items.

        This variant of the method makes a clone of the 'item' handed to it.
        This means that when the ListOf is destroyed, the original 'item' will
        be destroyed.

        Parameter 'location' is the location where to insert the item
        Parameter 'item' is the item to be inserted to the list

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        See also insert().

        """
        return _libsbml.ListOf_insertAndOwn(self, *args)

    def get(self, *args):
        """
        get(self, unsigned int n) -> SBase
        get(self, unsigned int n) -> SBase

        Get an item from the list.

        Parameter 'n' is the index number of the item to get.

        Returns the nth item in this ListOf items, or a null pointer if the
        index number 'n' refers to a nonexistent position in this list.

        See also size().

        """
        return _libsbml.ListOf_get(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given identifier.

        This method searches this ListOf's list of items for SBML objects
        based on their 'id' attribute value in the model-wide SId identifier
        namespace.

        Parameter 'id' is string representing the id of the object to find.

        Returns the first element found with the given 'id', or None if no
        such object is found.

        """
        return _libsbml.ListOf_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element found with the given meta-identifier.

        Parameter 'metaid' is string representing the 'metaid' attribute of
        the object to find.

        Returns the first element found with the given 'metaid', or None if no
        such object is found.

        """
        return _libsbml.ListOf_getElementByMetaId(self, *args)

    def clear(self, doDelete = True):
        """
        clear(self, bool doDelete = True)
        clear(self)

        Removes all items in this ListOf object.

        If parameter 'doDelete' is True (default), all items in this ListOf
        object are deleted and cleared, and thus the caller doesn't have to
        delete those items.  Otherwise, all items are cleared only from this
        ListOf object; the caller is still responsible for deleting the actual
        items.  (In the latter case, callers are advised to store pointers to
        all items elsewhere before calling this function.)

        Parameter 'doDelete' is if True (default), all items are deleted and
        cleared. Otherwise, all items are just cleared and not deleted.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.ListOf_clear(self, doDelete)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Removes all items in this ListOf object and deletes its properties
        too.

        This performs a call to clear() with an argument of True (thus
        removing all the child objects in the list), followed by calls to
        various libSBML unsetFoo methods to delete everything else: CVTerm
        objects, model history objects, etc.

          Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ListOf_removeFromParentAndDelete(self)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> SBase

        Removes the nth item from this ListOf list of items and returns it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        """
        return _libsbml.ListOf_remove(self, *args)

    def size(self):
        """
        size(self) -> unsigned int

        Returns number of items in this ListOf list.

        Returns the number of items in this ListOf items.

        """
        return _libsbml.ListOf_size(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.ListOf_connectToChild(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this object, namely,
        libsbml.SBML_LIST_OF.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_LIST_OF
        (default).

        Note:

        The various ListOf classes mostly differ from each other in what they
        contain.  Hence, one must call getItemTypeCode() to fully determine
        the class of this SBML object.

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ListOf_getTypeCode(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Get the type code of the objects contained in this ListOf.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Classes that inherit from the ListOf class should override this method
        to return the SBML type code for the objects contained in this ListOf.
        If they do not, this method will return libsbml.SBML_UNKNOWN

        Returns The ListOf base class contains no SBML objects, and therefore
        this method returns libsbml.SBML_UNKNOWN.

        See also getPackageName().

        """
        return _libsbml.ListOf_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for ListOf, is
        always 'listOf'.

        Returns the XML name of this element.

        """
        return _libsbml.ListOf_getElementName(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.ListOf_enablePackageInternal(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _libsbml.ListOf___len__(self)

    def __getitem__(self, key):

      try:
         keyIsSlice = isinstance(key, slice)
      except:
         keyIsSlice = 0

      if keyIsSlice:
        start = key.start
        if start is None:
          start = 0
        stop = key.stop
        if stop is None:
          stop = self.size()
        return [self[i] for i in range(
          self._fixNegativeIndex(start), self._fixNegativeIndex(stop)
        )]

      key = self._fixNegativeIndex(key)
      if key < 0 or key >= self.size():
        raise IndexError(key)
      return self.get(key)


    def _fixNegativeIndex(self, index):
      if index < 0:
        return index + self.size()
      else:
        return index


    def __iter__(self):
      for i in range(self.size()):
        yield self[i]


    def __repr__(self):
      return "[" + ", ".join([repr(self[i]) for i in range(len(self))]) + "]"


    def __str__(self):
      return repr(self)

ListOf_swigregister = _libsbml.ListOf_swigregister
ListOf_swigregister(ListOf)

class Model(SBase):
    """
    Implementation of SBML's Model construct.

    In an SBML model definition, a single object of class Model serves as
    the overall container for the lists of the various model components.
    All of the lists are optional, but if a given list container is
    present within the model, the list must not be empty; that is, it must
    have length one or more.  The following are the components and lists
    permitted in different Levels and Versions of SBML in version 5.10.1
    of libSBML:

    * In SBML Level 1, the components are: UnitDefinition, Compartment,
    Species, Parameter, Rule, and Reaction.  Instances of the classes are
    placed inside instances of classes ListOfUnitDefinitions,
    ListOfCompartments, ListOfSpecies, ListOfParameters, ListOfRules, and
    ListOfReactions.

    * In SBML Level 2 Version 1, the components are: FunctionDefinition,
    UnitDefinition, Compartment, Species, Parameter, Rule, Reaction and
    Event.  Instances of the classes are placed inside instances of
    classes ListOfFunctionDefinitions, ListOfUnitDefinitions,
    ListOfCompartments, ListOfSpecies, ListOfParameters, ListOfRules,
    ListOfReactions, and ListOfEvents.

    * In SBML Level 2 Versions 2, 3 and 4, the components are:
    FunctionDefinition, UnitDefinition, CompartmentType, SpeciesType,
    Compartment, Species, Parameter, InitialAssignment, Rule, Constraint,
    Reaction and Event.  Instances of the classes are placed inside
    instances of classes ListOfFunctionDefinitions, ListOfUnitDefinitions,
    ListOfCompartmentTypes, ListOfSpeciesTypes, ListOfCompartments,
    ListOfSpecies, ListOfParameters, ListOfInitialAssignments,
    ListOfRules, ListOfConstraints, ListOfReactions, and ListOfEvents.

    * In SBML Level 3 Version 1, the components are: FunctionDefinition,
    UnitDefinition, Compartment, Species, Parameter, InitialAssignment,
    Rule, Constraint, Reaction and Event.  Instances of the classes are
    placed inside instances of classes ListOfFunctionDefinitions,
    ListOfUnitDefinitions, ListOfCompartments, ListOfSpecies,
    ListOfParameters, ListOfInitialAssignments, ListOfRules,
    ListOfConstraints, ListOfReactions, and ListOfEvents.   Although all
    the lists are optional, there are dependencies between SBML components
    such that defining some components requires defining others. An
    example is that defining a species requires defining a compartment,
    and defining a reaction requires defining a species.  The dependencies
    are explained in more detail in the SBML specifications.

    In addition to the above lists and attributes, the Model class in both
    SBML Level 2 and Level 3 has the usual two attributes of 'id' and
    'name', and both are optional.  As is the case for other SBML
    components with 'id' and 'name' attributes, they must be used
    according to the guidelines described in the SBML specifications.
    (Within the frameworks of SBML Level 2 and Level 3 Version 1 Core, a
    Model object identifier has no assigned meaning, but extension
    packages planned for SBML Level 3 are likely to make use of this
    identifier.)

    Finally, SBML Level 3 has introduced a number of additional Model
    attributes.  They are discussed in a separate section below.

    Approaches to creating objects using the libSBML API
    ======================================================================

    LibSBML provides two main mechanisms for creating objects: class
    constructors (e.g., Species.Species() ),  and createObject() methods
    (such as Model.createSpecies()) provided by certain Object classes
    such as Model.  These multiple mechanisms are provided by libSBML for
    flexibility and to support different use-cases, but they also have
    different implications for the overall model structure.

    In general, the recommended approach is to use the createObject()
    methods.  These methods both create an object and link it to the
    parent in one step. Here is an example:

      # Create an SBMLDocument object in Level 3 Version 1 format:
      
      sbmlDoc = SBMLDocument(3, 1)
      
      # Create a Model object inside the SBMLDocument object and set
      # its identifier.  The call to setId() returns a status code
      # to indicate whether the assignment was successful.  Code 0
      # means success; see the documentation for Model's setId() for 
      # more information.
      
      model = sbmlDoc.createModel()
      model.setId(&#34;BestModelEver&#34;)
      
      # Create a Species object inside the Model and set its identifier.
      # Again, the setId() returns a status code to indicate whether the
      # assignment was successful.  Code 0 means success; see the
      # documentation for Specie's setId() for more information.
      
      sp = model.createSpecies()
      sp.setId(&#34;BestSpeciesEver&#34;)

      The createObject() methods return a pointer to the object created,
    but they also add the object to the relevant list of object instances
    contained in the parent.  (These lists become the <listOfObjects>
    elements in the finished XML rendition of SBML.)  In the example
    above, Model.createSpecies() adds the created species directly to the
    <listOfSpeciesgt; list in the model.  Subsequently, methods called on
    the species change the species in the model (which is what is expected
    in most situations).

    Consistency and adherence to SBML specifications
    ======================================================================

    To make it easier for applications to do whatever they need, libSBML
    version 5.10.1 is relatively lax when it comes to enforcing
    correctness and completeness of models during model construction and
    editing. Essentially, libSBML will not in most cases check
    automatically that a model's components have valid attribute values,
    or that the overall model is consistent and free of errors -- even
    obvious errors such as duplication of identifiers.  This allows
    applications great leeway in how they build their models, but it means
    that software authors must take deliberate steps to ensure that the
    model will be, in the end, valid SBML.  These steps include such
    things as keeping track of the identifiers used in a model, manually
    performing updates in certain situations where an entity is referenced
    in more than one place (e.g., a species that is referenced by multiple
    SpeciesReference objects), and so on.

    That said, libSBML does provide powerful features for deliberately
    performing validation of SBML when an application decides it is time
    to do so.  The interfaces to these facilities are on the SBMLDocument
    class, in the form of SBMLDocument.checkInternalConsistency() and
    SBMLDocument.checkConsistency().  Please refer to the documentation
    for SBMLDocument for more information about this.

    While applications may play fast and loose and live like free spirits
    during the construction and editing of SBML models, they should always
    make sure to call SBMLDocument.checkInternalConsistency() and/or
    SBMLDocument.checkConsistency() before writing out the final version
    of an SBML model.

    Model attributes introduced in SBML Level 3
    ======================================================================

    As mentioned above, the Model class has a number of optional
    attributes in SBML Level 3 Version 1 Core.  These are
    'substanceUnits', 'timeUnits', 'volumeUnits', 'areaUnits',
    'lengthUnits', 'extentUnits', and 'conversionFactor.  The following
    provide more information about them.

    The 'substanceUnits' attribute
    ......................................................................

    The 'substanceUnits' attribute is used to specify the unit of
    measurement associated with substance quantities of Species objects
    that do not specify units explicitly.  If a given Species object
    definition does not specify its unit of substance quantity via the
    'substanceUnits' attribute on the Species object instance, then that
    species inherits the value of the Model 'substanceUnits' attribute.
    If the Model does not define a value for this attribute, then there is
    no unit to inherit, and all species that do not specify individual
    'substanceUnits' attribute values then have no declared units for
    their quantities.  The SBML Level 3 Version 1 Core specification
    provides more details.

    Note that when the identifier of a species appears in a model's
    mathematical expressions, the unit of measurement associated with that
    identifier is not solely determined by setting 'substanceUnits' on
    Model or Species.  Please see the discussion about units given in the
    documentation for the Species class.

    The 'timeUnits' attribute
    ......................................................................

    The 'timeUnits' attribute on SBML Level 3's Model object is used to
    specify the unit in which time is measured in the model.  This
    attribute on Model is the only way to specify a unit for time in a
    model. It is a global attribute; time is measured in the model
    everywhere in the same way.  This is particularly relevant to Reaction
    and RateRule objects in a model: all Reaction and RateRule objects in
    SBML define per-time values, and the unit of time is given by the
    'timeUnits' attribute on the Model object instance.  If the Model
    'timeUnits' attribute has no value, it means that the unit of time is
    not defined for the model's reactions and rate rules.  Leaving it
    unspecified in an SBML model does not result in an invalid model in
    SBML Level 3; however, as a matter of best practice, we strongly
    recommend that all models specify units of measurement for time.

    The 'volumeUnits', 'areaUnits', and 'lengthUnits' attributes
    ......................................................................

    The attributes 'volumeUnits', 'areaUnits' and 'lengthUnits' together
    are used to set the units of measurements for the sizes of Compartment
    objects in an SBML Level 3 model when those objects do not otherwise
    specify units.  The three attributes correspond to the most common
    cases of compartment dimensions: 'volumeUnits' for compartments having
    a 'spatialDimensions' attribute value of '3', 'areaUnits' for
    compartments having a 'spatialDimensions' attribute value of '2', and
    'lengthUnits' for compartments having a 'spatialDimensions' attribute
    value of '1'.  The attributes are not applicable to compartments whose
    'spatialDimensions' attribute values are not one of '1', '2' or '3'.

    If a given Compartment object instance does not provide a value for
    its 'units' attribute, then the unit of measurement of that
    compartment's size is inherited from the value specified by the Model
    'volumeUnits', 'areaUnits' or 'lengthUnits' attribute, as appropriate
    based on the Compartment object's 'spatialDimensions' attribute value.
    If the Model object does not define the relevant attribute, then there
    are no units to inherit, and all Compartment objects that do not set a
    value for their 'units' attribute then have no units associated with
    their compartment sizes.

    The use of three separate attributes is a carry-over from SBML Level
    2.  Note that it is entirely possible for a model to define a value
    for two or more of the attributes 'volumeUnits', 'areaUnits' and
    'lengthUnits' simultaneously, because SBML models may contain
    compartments with different numbers of dimensions.

    The 'extentUnits' attribute
    ......................................................................

    Reactions are processes that occur over time.  These processes involve
    events of some sort, where a single ``reaction event'' is one in which
    some set of entities (known as reactants, products and modifiers in
    SBML) interact, once.  The extent of a reaction is a measure of how
    many times the reaction has occurred, while the time derivative of the
    extent gives the instantaneous rate at which the reaction is
    occurring.  Thus, what is colloquially referred to as the 'rate of the
    reaction' is in fact equal to the rate of change of reaction extent.

    In SBML Level 3, the combination of 'extentUnits' and 'timeUnits'
    defines the units of kinetic laws in SBML and establishes how the
    numerical value of each KineticLaw object's mathematical formula is
    meant to be interpreted in a model.  The units of the kinetic laws are
    taken to be 'extentUnits' divided by 'timeUnits'.

    Note that this embodies an important principle in SBML Level 3 models:
    all reactions in an SBML model must have the same units for the rate
    of change of extent.  In other words, the units of all reaction rates
    in the model must be the same.  There is only one global value for
    'extentUnits' and one global value for 'timeUnits'.

    The 'conversionFactor' attribute
    ......................................................................

    The attribute 'conversionFactor' in SBML Level 3's Model object
    defines a global value inherited by all Species object instances that
    do not define separate values for their 'conversionFactor' attributes.
    The value of this attribute must refer to a Parameter object instance
    defined in the model.  The Parameter object in question must be a
    constant; ie it must have its 'constant' attribute value set to
    'true'.

    If a given Species object definition does not specify a conversion
    factor via the 'conversionFactor' attribute on Species, then the
    species inherits the conversion factor specified by the Model
    'conversionFactor' attribute.  If the Model does not define a value
    for this attribute, then there is no conversion factor to inherit.
    More information about conversion factors is provided in the SBML
    Level 3 Version 1 specification.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Model
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Model
        __init__(self, SBMLNamespaces sbmlns) -> Model
        __init__(self, Model orig) -> Model

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Model(SBMLNamespaces sbmlns)

        Creates a new Model using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Model(long level, long version)

        Creates a new Model using the given SBML 'level' and 'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Model

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Model

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Model(Model orig)

        Copy constructor; creates a (deep) copy of the given Model object.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Model(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Model

        Creates and returns a deep copy of this Model object.

        Returns a (deep) copy of this Model.

        """
        return _libsbml.Model_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id'.

        This operation searches the model-wide SId identifier type namespace

        Parameter 'id' is string representing the id of the object to find.

        Returns pointer to the first element found with the given 'id', or
        None if no such object is found.

        """
        return _libsbml.Model_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid'.

        Parameter 'metaid' is string representing the meta-identifier of the
        object to find.

        Returns pointer to the first element found with the given 'metaid', or
        None if no such object is found.

        """
        return _libsbml.Model_getElementByMetaId(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Model.

        Returns the id of this Model.

        """
        return _libsbml.Model_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Model.

        Returns the name of this Model.

        """
        return _libsbml.Model_getName(self)

    def getSubstanceUnits(self):
        """
        getSubstanceUnits(self) -> string

        Returns the value of the 'substanceUnits' attribute of this Model.

        Returns the substanceUnits of this Model.

        Note:

        The 'substanceUnits' attribute is available in SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_getSubstanceUnits(self)

    def getTimeUnits(self):
        """
        getTimeUnits(self) -> string

        Returns the value of the 'timeUnits' attribute of this Model.

        Returns the timeUnits of this Model.

        Note:

        The 'timeUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_getTimeUnits(self)

    def getVolumeUnits(self):
        """
        getVolumeUnits(self) -> string

        Returns the value of the 'volumeUnits' attribute of this Model.

        Returns the volumeUnits of this Model.

        Note:

        The 'volumeUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_getVolumeUnits(self)

    def getAreaUnits(self):
        """
        getAreaUnits(self) -> string

        Returns the value of the 'areaUnits' attribute of this Model.

        Returns the areaUnits of this Model.

        Note:

        The 'areaUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_getAreaUnits(self)

    def getLengthUnits(self):
        """
        getLengthUnits(self) -> string

        Returns the value of the 'lengthUnits' attribute of this Model.

        Returns the lengthUnits of this Model.

        Note:

        The 'lengthUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_getLengthUnits(self)

    def getExtentUnits(self):
        """
        getExtentUnits(self) -> string

        Returns the value of the 'extentUnits' attribute of this Model.

        Returns the extentUnits of this Model.

        Note:

        The 'extentUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_getExtentUnits(self)

    def getConversionFactor(self):
        """
        getConversionFactor(self) -> string

        Returns the value of the 'conversionFactor' attribute of this Model.

        Returns the conversionFactor of this Model.

        Note:

        The 'conversionFactor' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_getConversionFactor(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this Model's 'id' attribute is set.

        Returns True if the 'id' attribute of this Model is set, False
        otherwise.

        """
        return _libsbml.Model_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this Model's 'name' attribute is set.

        Returns True if the 'name' attribute of this Model is set, False
        otherwise.

        """
        return _libsbml.Model_isSetName(self)

    def isSetSubstanceUnits(self):
        """
        isSetSubstanceUnits(self) -> bool

        Predicate returning True if this Model's 'substanceUnits' attribute is
        set.

        Returns True if the 'substanceUnits' attribute of this Model is set,
        False otherwise.

        Note:

        The 'substanceUnits' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_isSetSubstanceUnits(self)

    def isSetTimeUnits(self):
        """
        isSetTimeUnits(self) -> bool

        Predicate returning True if this Model's 'timeUnits' attribute is set.

        Returns True if the 'timeUnits' attribute of this Model is set, False
        otherwise.

        Note:

        The 'substanceUnits' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_isSetTimeUnits(self)

    def isSetVolumeUnits(self):
        """
        isSetVolumeUnits(self) -> bool

        Predicate returning True if this Model's 'volumeUnits' attribute is
        set.

        Returns True if the 'volumeUnits' attribute of this Model is set,
        False otherwise.

        Note:

        The 'volumeUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_isSetVolumeUnits(self)

    def isSetAreaUnits(self):
        """
        isSetAreaUnits(self) -> bool

        Predicate returning True if this Model's 'areaUnits' attribute is set.

        Returns True if the 'areaUnits' attribute of this Model is set, False
        otherwise.

        Note:

        The 'areaUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_isSetAreaUnits(self)

    def isSetLengthUnits(self):
        """
        isSetLengthUnits(self) -> bool

        Predicate returning True if this Model's 'lengthUnits' attribute is
        set.

        Returns True if the 'lengthUnits' attribute of this Model is set,
        False otherwise.

        Note:

        The 'lengthUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_isSetLengthUnits(self)

    def isSetExtentUnits(self):
        """
        isSetExtentUnits(self) -> bool

        Predicate returning True if this Model's 'extentUnits' attribute is
        set.

        Returns True if the 'extentUnits' attribute of this Model is set,
        False otherwise.

        Note:

        The 'extentUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_isSetExtentUnits(self)

    def isSetConversionFactor(self):
        """
        isSetConversionFactor(self) -> bool

        Predicate returning True if this Model's 'conversionFactor' attribute
        is set.

        Returns True if the 'conversionFactor' attribute of this Model is set,
        False otherwise.

        Note:

        The 'conversionFactor' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_isSetConversionFactor(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this Model.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Model_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Model.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Model_setName(self, *args)

    def setSubstanceUnits(self, *args):
        """
        setSubstanceUnits(self, string units) -> int

        Sets the value of the 'substanceUnits' attribute of this Model.

        The string in 'units' is copied.

        Parameter 'units' is the new substanceUnits for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'substanceUnits' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_setSubstanceUnits(self, *args)

    def setTimeUnits(self, *args):
        """
        setTimeUnits(self, string units) -> int

        Sets the value of the 'timeUnits' attribute of this Model.

        The string in 'units' is copied.

        Parameter 'units' is the new timeUnits for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'timeUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_setTimeUnits(self, *args)

    def setVolumeUnits(self, *args):
        """
        setVolumeUnits(self, string units) -> int

        Sets the value of the 'volumeUnits' attribute of this Model.

        The string in 'units' is copied.

        Parameter 'units' is the new volumeUnits for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'volumeUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_setVolumeUnits(self, *args)

    def setAreaUnits(self, *args):
        """
        setAreaUnits(self, string units) -> int

        Sets the value of the 'areaUnits' attribute of this Model.

        The string in 'units' is copied.

        Parameter 'units' is the new areaUnits for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'areaUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_setAreaUnits(self, *args)

    def setLengthUnits(self, *args):
        """
        setLengthUnits(self, string units) -> int

        Sets the value of the 'lengthUnits' attribute of this Model.

        The string in 'units' is copied.

        Parameter 'units' is the new lengthUnits for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'lengthUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_setLengthUnits(self, *args)

    def setExtentUnits(self, *args):
        """
        setExtentUnits(self, string units) -> int

        Sets the value of the 'extentUnits' attribute of this Model.

        The string in 'units' is copied.

        Parameter 'units' is the new extentUnits for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'extentUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_setExtentUnits(self, *args)

    def setConversionFactor(self, *args):
        """
        setConversionFactor(self, string units) -> int

        Sets the value of the 'conversionFactor' attribute of this Model.

        The string in 'units' is copied.

        Parameter 'units' is the new conversionFactor for the Model

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'conversionFactor' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_setConversionFactor(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Model_unsetId(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Model_unsetName(self)

    def unsetSubstanceUnits(self):
        """
        unsetSubstanceUnits(self) -> int

        Unsets the value of the 'substanceUnits' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'substanceUnits' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_unsetSubstanceUnits(self)

    def unsetTimeUnits(self):
        """
        unsetTimeUnits(self) -> int

        Unsets the value of the 'timeUnits' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'timeUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_unsetTimeUnits(self)

    def unsetVolumeUnits(self):
        """
        unsetVolumeUnits(self) -> int

        Unsets the value of the 'volumeUnits' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'volumeUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_unsetVolumeUnits(self)

    def unsetAreaUnits(self):
        """
        unsetAreaUnits(self) -> int

        Unsets the value of the 'areaUnits' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'areaUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_unsetAreaUnits(self)

    def unsetLengthUnits(self):
        """
        unsetLengthUnits(self) -> int

        Unsets the value of the 'lengthUnits' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'lengthUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_unsetLengthUnits(self)

    def unsetExtentUnits(self):
        """
        unsetExtentUnits(self) -> int

        Unsets the value of the 'extentUnits' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'extentUnits' attribute is available in  SBML Level 3 but is not
        present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_unsetExtentUnits(self)

    def unsetConversionFactor(self):
        """
        unsetConversionFactor(self) -> int

        Unsets the value of the 'conversionFactor' attribute of this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'conversionFactor' attribute is available in  SBML Level 3 but is
        not present on Model in lower Levels of SBML.

        """
        return _libsbml.Model_unsetConversionFactor(self)

    def addFunctionDefinition(self, *args):
        """
        addFunctionDefinition(self, FunctionDefinition fd) -> int

        Adds a copy of the given FunctionDefinition object to this Model.

        Parameter 'fd' is the FunctionDefinition to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createFunctionDefinition().

        """
        return _libsbml.Model_addFunctionDefinition(self, *args)

    def addUnitDefinition(self, *args):
        """
        addUnitDefinition(self, UnitDefinition ud) -> int

        Adds a copy of the given UnitDefinition object to this Model.

        Parameter 'ud' is the UnitDefinition object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createUnitDefinition().

        """
        return _libsbml.Model_addUnitDefinition(self, *args)

    def addCompartmentType(self, *args):
        """
        addCompartmentType(self, CompartmentType ct) -> int

        Adds a copy of the given CompartmentType object to this Model.

        Parameter 'ct' is the CompartmentType object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        Note:

        The CompartmentType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        See also createCompartmentType().

        """
        return _libsbml.Model_addCompartmentType(self, *args)

    def addSpeciesType(self, *args):
        """
        addSpeciesType(self, SpeciesType st) -> int

        Adds a copy of the given SpeciesType object to this Model.

        Parameter 'st' is the SpeciesType object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        Note:

        The SpeciesType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        See also createSpeciesType().

        """
        return _libsbml.Model_addSpeciesType(self, *args)

    def addCompartment(self, *args):
        """
        addCompartment(self, Compartment c) -> int

        Adds a copy of the given Compartment object to this Model.

        Parameter 'c' is the Compartment object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createCompartment().

        """
        return _libsbml.Model_addCompartment(self, *args)

    def addSpecies(self, *args):
        """
        addSpecies(self, Species s) -> int

        Adds a copy of the given Species object to this Model.

        Parameter 's' is the Species object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createSpecies().

        """
        return _libsbml.Model_addSpecies(self, *args)

    def addParameter(self, *args):
        """
        addParameter(self, Parameter p) -> int

        Adds a copy of the given Parameter object to this Model.

        Parameter 'p' is the Parameter object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createParameter().

        """
        return _libsbml.Model_addParameter(self, *args)

    def addInitialAssignment(self, *args):
        """
        addInitialAssignment(self, InitialAssignment ia) -> int

        Adds a copy of the given InitialAssignment object to this Model.

        Parameter 'ia' is the InitialAssignment object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createInitialAssignment().

        """
        return _libsbml.Model_addInitialAssignment(self, *args)

    def addRule(self, *args):
        """
        addRule(self, Rule r) -> int

        Adds a copy of the given Rule object to this Model.

        Parameter 'r' is the Rule object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createRateRule().

        """
        return _libsbml.Model_addRule(self, *args)

    def addConstraint(self, *args):
        """
        addConstraint(self, Constraint c) -> int

        Adds a copy of the given Constraint object to this Model.

        Parameter 'c' is the Constraint object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createConstraint().

        """
        return _libsbml.Model_addConstraint(self, *args)

    def addReaction(self, *args):
        """
        addReaction(self, Reaction r) -> int

        Adds a copy of the given Reaction object to this Model.

        Parameter 'r' is the Reaction object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createReaction().

        """
        return _libsbml.Model_addReaction(self, *args)

    def addEvent(self, *args):
        """
        addEvent(self, Event e) -> int

        Adds a copy of the given Event object to this Model.

        Parameter 'e' is the Event object to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createEvent().

        """
        return _libsbml.Model_addEvent(self, *args)

    def createFunctionDefinition(self):
        """
        createFunctionDefinition(self) -> FunctionDefinition

        Creates a new FunctionDefinition inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the FunctionDefinition object created

        See also addFunctionDefinition().

        """
        return _libsbml.Model_createFunctionDefinition(self)

    def createUnitDefinition(self):
        """
        createUnitDefinition(self) -> UnitDefinition

        Creates a new UnitDefinition inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the UnitDefinition object created

        See also addUnitDefinition().

        """
        return _libsbml.Model_createUnitDefinition(self)

    def createUnit(self):
        """
        createUnit(self) -> Unit

        Creates a new Unit object within the last UnitDefinition object
        created in this model and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        The mechanism by which the UnitDefinition was created is not
        significant.  If a UnitDefinition object does not exist in this model,
        a new Unit is not created and None is returned instead.

        Returns the Unit object created

        See also addUnitDefinition().

        """
        return _libsbml.Model_createUnit(self)

    def createCompartmentType(self):
        """
        createCompartmentType(self) -> CompartmentType

        Creates a new CompartmentType inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the CompartmentType object created

        Note:

        The CompartmentType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        See also addCompartmentType().

        """
        return _libsbml.Model_createCompartmentType(self)

    def createSpeciesType(self):
        """
        createSpeciesType(self) -> SpeciesType

        Creates a new SpeciesType inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the SpeciesType object created

        Note:

        The SpeciesType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        See also addSpeciesType().

        """
        return _libsbml.Model_createSpeciesType(self)

    def createCompartment(self):
        """
        createCompartment(self) -> Compartment

        Creates a new Compartment inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the Compartment object created

        See also addCompartment().

        """
        return _libsbml.Model_createCompartment(self)

    def createSpecies(self):
        """
        createSpecies(self) -> Species

        Creates a new Species inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the Species object created

        See also addSpecies().

        """
        return _libsbml.Model_createSpecies(self)

    def createParameter(self):
        """
        createParameter(self) -> Parameter

        Creates a new Parameter inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the Parameter object created

        See also addParameter().

        """
        return _libsbml.Model_createParameter(self)

    def createInitialAssignment(self):
        """
        createInitialAssignment(self) -> InitialAssignment

        Creates a new InitialAssignment inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the InitialAssignment object created

        See also addInitialAssignment().

        """
        return _libsbml.Model_createInitialAssignment(self)

    def createAlgebraicRule(self):
        """
        createAlgebraicRule(self) -> AlgebraicRule

        Creates a new AlgebraicRule inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the AlgebraicRule object created

        See also addRule().

        """
        return _libsbml.Model_createAlgebraicRule(self)

    def createAssignmentRule(self):
        """
        createAssignmentRule(self) -> AssignmentRule

        Creates a new AssignmentRule inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the AssignmentRule object created

        See also addRule().

        """
        return _libsbml.Model_createAssignmentRule(self)

    def createRateRule(self):
        """
        createRateRule(self) -> RateRule

        Creates a new RateRule inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the RateRule object created

        See also addRule().

        """
        return _libsbml.Model_createRateRule(self)

    def createConstraint(self):
        """
        createConstraint(self) -> Constraint

        Creates a new Constraint inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the Constraint object created

        See also addConstraint().

        """
        return _libsbml.Model_createConstraint(self)

    def createReaction(self):
        """
        createReaction(self) -> Reaction

        Creates a new Reaction inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the Reaction object created

        See also addReaction().

        """
        return _libsbml.Model_createReaction(self)

    def createReactant(self):
        """
        createReactant(self) -> SpeciesReference

        Creates a new SpeciesReference object for a reactant inside the last
        Reaction object in this Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The mechanism by which the last Reaction object was created and
        added to this Model is not significant.  It could have been created in
        a variety of ways, for example using createReaction().  If a Reaction
        does not exist for this model, a new SpeciesReference is not created
        and None is returned instead.

        Returns the SpeciesReference object created

        """
        return _libsbml.Model_createReactant(self)

    def createProduct(self):
        """
        createProduct(self) -> SpeciesReference

        Creates a new SpeciesReference object for a product inside the last
        Reaction object in this Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The mechanism by which the last Reaction object was created and
        added to this Model is not significant.  It could have been created in
        a variety of ways, for example using createReaction().  If a Reaction
        does not exist for this model, a new SpeciesReference is not created
        and None is returned instead.

        Returns the SpeciesReference object created

        """
        return _libsbml.Model_createProduct(self)

    def createModifier(self):
        """
        createModifier(self) -> ModifierSpeciesReference

        Creates a new ModifierSpeciesReference object for a modifier species
        inside the last Reaction object in this Model, and returns a pointer
        to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The mechanism by which the last Reaction object was created and
        added to this Model is not significant.  It could have been created in
        a variety of ways, for example using createReaction().  If a Reaction
        does not exist for this model, a new SpeciesReference is not created
        and None is returned instead.

        Returns the SpeciesReference object created

        """
        return _libsbml.Model_createModifier(self)

    def createKineticLaw(self):
        """
        createKineticLaw(self) -> KineticLaw

        Creates a new KineticLaw inside the last Reaction object created in
        this Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The mechanism by which the last Reaction object was created and
        added to this Model is not significant.  It could have been created in
        a variety of ways, for example using createReaction().  If a Reaction
        does not exist for this model, a new SpeciesReference is not created
        and None is returned instead.

        Returns the KineticLaw object created

        """
        return _libsbml.Model_createKineticLaw(self)

    def createKineticLawParameter(self):
        """
        createKineticLawParameter(self) -> Parameter

        Creates a new local Parameter inside the KineticLaw object of the last
        Reaction created inside this Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The last KineticLaw object in this Model could have been created
        in a variety of ways.  For example, it could have been added using
        createKineticLaw(), or it could be the result of using
        Reaction.createKineticLaw() on the Reaction object created by a
        createReaction().  If a Reaction does not exist for this model, or the
        last Reaction does not contain a KineticLaw object, a new Parameter is
        not created and None is returned instead.

        Returns the Parameter object created

        """
        return _libsbml.Model_createKineticLawParameter(self)

    def createKineticLawLocalParameter(self):
        """
        createKineticLawLocalParameter(self) -> LocalParameter

        Creates a new LocalParameter inside the KineticLaw object of the last
        Reaction created inside this Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The last KineticLaw object in this Model could have been created
        in a variety of ways.  For example, it could have been added using
        createKineticLaw(), or it could be the result of using
        Reaction.createKineticLaw() on the Reaction object created by a
        createReaction().  If a Reaction does not exist for this model, or the
        last Reaction does not contain a KineticLaw object, a new Parameter is
        not created and None is returned instead.

        Returns the Parameter object created

        """
        return _libsbml.Model_createKineticLawLocalParameter(self)

    def createEvent(self):
        """
        createEvent(self) -> Event

        Creates a new Event inside this Model and returns it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        Returns the Event object created

        """
        return _libsbml.Model_createEvent(self)

    def createEventAssignment(self):
        """
        createEventAssignment(self) -> EventAssignment

        Creates a new EventAssignment inside the last Event object created in
        this Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The mechanism by which the last Event object in this model was
        created is not significant.  It could have been created in a variety
        of ways, for example by using createEvent().  If no Event object
        exists in this Model object, a new EventAssignment is not created and
        None is returned instead.

        Returns the EventAssignment object created

        """
        return _libsbml.Model_createEventAssignment(self)

    def createTrigger(self):
        """
        createTrigger(self) -> Trigger

        Creates a new Trigger inside the last Event object created in this
        Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The mechanism by which the last Event object in this model was
        created is not significant.  It could have been created in a variety
        of ways, for example by using createEvent().  If no Event object
        exists in this Model object, a new EventAssignment is not created and
        None is returned instead.

        Returns the Trigger object created

        """
        return _libsbml.Model_createTrigger(self)

    def createDelay(self):
        """
        createDelay(self) -> Delay

        Creates a new Delay inside the last Event object created in this
        Model, and returns a pointer to it.

        The SBML Level and Version of the enclosing Model object, as well as
        any SBML package namespaces, are used to initialize this object's
        corresponding attributes.

        @par The mechanism by which the last Event object in this model was
        created is not significant.  It could have been created in a variety
        of ways, for example by using createEvent().  If no Event object
        exists in this Model object, a new EventAssignment is not created and
        None is returned instead.

        Returns the Delay object created

        """
        return _libsbml.Model_createDelay(self)

    def setAnnotation(self, *args):
        """
        setAnnotation(self, XMLNode annotation) -> int
        setAnnotation(self, string annotation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setAnnotation(XMLNode annotation)

        Sets the value of the 'annotation' subelement of this SBML object to a
        copy of 'annotation'.

        Any existing content of the 'annotation' subelement is discarded.
        Unless you have taken steps to first copy and reconstitute any
        existing annotations into the 'annotation' that is about to be
        assigned, it is likely that performing such wholesale replacement is
        unfriendly towards other software applications whose annotations are
        discarded.  An alternative may be to use appendAnnotation().

        Parameter 'annotation' is an XML structure that is to be used as the
        content of the 'annotation' subelement of this object

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also appendAnnotation(), appendAnnotation().

        """
        return _libsbml.Model_setAnnotation(self, *args)

    def appendAnnotation(self, *args):
        """
        appendAnnotation(self, XMLNode annotation) -> int
        appendAnnotation(self, string annotation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            appendAnnotation(XMLNode annotation)

        Appends annotation content to any existing content in the 'annotation'
        subelement of this object.

        The content in 'annotation' is copied.  Unlike setAnnotation(), this
        method allows other annotations to be preserved when an application
        adds its own data.

        Parameter 'annotation' is an XML structure that is to be copied and
        appended to the content of the 'annotation' subelement of this object

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also setAnnotation(), setAnnotation().

        """
        return _libsbml.Model_appendAnnotation(self, *args)

    def getListOfFunctionDefinitions(self, *args):
        """
        getListOfFunctionDefinitions(self) -> ListOfFunctionDefinitions
        getListOfFunctionDefinitions(self) -> ListOfFunctionDefinitions

        Get the ListOfFunctionDefinitions object in this Model.

        Returns the list of FunctionDefinitions for this Model.

        """
        return _libsbml.Model_getListOfFunctionDefinitions(self, *args)

    def getListOfUnitDefinitions(self, *args):
        """
        getListOfUnitDefinitions(self) -> ListOfUnitDefinitions
        getListOfUnitDefinitions(self) -> ListOfUnitDefinitions

        Get the ListOfUnitDefinitions object in this Model.

        Returns the list of UnitDefinitions for this Model.

        """
        return _libsbml.Model_getListOfUnitDefinitions(self, *args)

    def getListOfCompartmentTypes(self, *args):
        """
        getListOfCompartmentTypes(self) -> ListOfCompartmentTypes
        getListOfCompartmentTypes(self) -> ListOfCompartmentTypes

        Get the ListOfCompartmentTypes object in this Model.

        Returns the list of CompartmentTypes for this Model.

        Note:

        The CompartmentType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        """
        return _libsbml.Model_getListOfCompartmentTypes(self, *args)

    def getListOfSpeciesTypes(self, *args):
        """
        getListOfSpeciesTypes(self) -> ListOfSpeciesTypes
        getListOfSpeciesTypes(self) -> ListOfSpeciesTypes

        Get the ListOfSpeciesTypes object in this Model.

        Returns the list of SpeciesTypes for this Model.

        Note:

        The SpeciesType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        """
        return _libsbml.Model_getListOfSpeciesTypes(self, *args)

    def getListOfCompartments(self, *args):
        """
        getListOfCompartments(self) -> ListOfCompartments
        getListOfCompartments(self) -> ListOfCompartments

        Get the ListOfCompartments object in this Model.

        Returns the list of Compartments for this Model.

        """
        return _libsbml.Model_getListOfCompartments(self, *args)

    def getListOfSpecies(self, *args):
        """
        getListOfSpecies(self) -> ListOfSpecies
        getListOfSpecies(self) -> ListOfSpecies

        Get the ListOfSpecies object in this Model.

        Returns the list of Species for this Model.

        """
        return _libsbml.Model_getListOfSpecies(self, *args)

    def getListOfParameters(self, *args):
        """
        getListOfParameters(self) -> ListOfParameters
        getListOfParameters(self) -> ListOfParameters

        Get the ListOfParameters object in this Model.

        Returns the list of Parameters for this Model.

        """
        return _libsbml.Model_getListOfParameters(self, *args)

    def getListOfInitialAssignments(self, *args):
        """
        getListOfInitialAssignments(self) -> ListOfInitialAssignments
        getListOfInitialAssignments(self) -> ListOfInitialAssignments

        Get the ListOfInitialAssignments object in this Model.

        Returns the list of InitialAssignments for this Model.

        """
        return _libsbml.Model_getListOfInitialAssignments(self, *args)

    def getListOfRules(self, *args):
        """
        getListOfRules(self) -> ListOfRules
        getListOfRules(self) -> ListOfRules

        Get the ListOfRules object in this Model.

        Returns the list of Rules for this Model.

        """
        return _libsbml.Model_getListOfRules(self, *args)

    def getListOfConstraints(self, *args):
        """
        getListOfConstraints(self) -> ListOfConstraints
        getListOfConstraints(self) -> ListOfConstraints

        Get the ListOfConstraints object in this Model.

        Returns the list of Constraints for this Model.

        """
        return _libsbml.Model_getListOfConstraints(self, *args)

    def getListOfReactions(self, *args):
        """
        getListOfReactions(self) -> ListOfReactions
        getListOfReactions(self) -> ListOfReactions

        Get the ListOfReactions object in this Model.

        Returns the list of Reactions for this Model.

        """
        return _libsbml.Model_getListOfReactions(self, *args)

    def getListOfEvents(self, *args):
        """
        getListOfEvents(self) -> ListOfEvents
        getListOfEvents(self) -> ListOfEvents

        Get the ListOfEvents object in this Model.

        Returns the list of Events for this Model.

        """
        return _libsbml.Model_getListOfEvents(self, *args)

    def getFunctionDefinition(self, *args):
        """
        getFunctionDefinition(self, unsigned int n) -> FunctionDefinition
        getFunctionDefinition(self, unsigned int n) -> FunctionDefinition
        getFunctionDefinition(self, string sid) -> FunctionDefinition
        getFunctionDefinition(self, string sid) -> FunctionDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getFunctionDefinition(long n)

        Get the nth FunctionDefinitions object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth FunctionDefinition of this Model.

        @par <hr> Method variant with the following signature:

            getFunctionDefinition(string sid)

        Get a FunctionDefinition object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the FunctionDefinition in this Model with the identifier 'sid'
        or None if no such FunctionDefinition exists.

        """
        return _libsbml.Model_getFunctionDefinition(self, *args)

    def getUnitDefinition(self, *args):
        """
        getUnitDefinition(self, unsigned int n) -> UnitDefinition
        getUnitDefinition(self, unsigned int n) -> UnitDefinition
        getUnitDefinition(self, string sid) -> UnitDefinition
        getUnitDefinition(self, string sid) -> UnitDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getUnitDefinition(long n)

        Get the nth UnitDefinition object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth UnitDefinition of this Model.

        @par <hr> Method variant with the following signature:

            getUnitDefinition(string sid)

        Get a UnitDefinition based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the UnitDefinition in this Model with the identifier 'sid' or
        None if no such UnitDefinition exists.

        """
        return _libsbml.Model_getUnitDefinition(self, *args)

    def getCompartmentType(self, *args):
        """
        getCompartmentType(self, unsigned int n) -> CompartmentType
        getCompartmentType(self, unsigned int n) -> CompartmentType
        getCompartmentType(self, string sid) -> CompartmentType
        getCompartmentType(self, string sid) -> CompartmentType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getCompartmentType(long n)

        Get the nth CompartmentType object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth CompartmentType of this Model.

        Note:

        The CompartmentType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        @par <hr> Method variant with the following signature:

            getCompartmentType(string sid)

        Get a CompartmentType object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the CompartmentType in this Model with the identifier 'sid' or
        None if no such CompartmentType exists.

        Note:

        The CompartmentType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        """
        return _libsbml.Model_getCompartmentType(self, *args)

    def getSpeciesType(self, *args):
        """
        getSpeciesType(self, unsigned int n) -> SpeciesType
        getSpeciesType(self, unsigned int n) -> SpeciesType
        getSpeciesType(self, string sid) -> SpeciesType
        getSpeciesType(self, string sid) -> SpeciesType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getSpeciesType(long n)

        Get the nth SpeciesType object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth SpeciesType of this Model.

        Note:

        The SpeciesType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        @par <hr> Method variant with the following signature:

            getSpeciesType(string sid)

        Get a SpeciesType object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the SpeciesType in this Model with the identifier 'sid' or
        None if no such SpeciesType exists.

        Note:

        The SpeciesType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        """
        return _libsbml.Model_getSpeciesType(self, *args)

    def getCompartment(self, *args):
        """
        getCompartment(self, unsigned int n) -> Compartment
        getCompartment(self, unsigned int n) -> Compartment
        getCompartment(self, string sid) -> Compartment
        getCompartment(self, string sid) -> Compartment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getCompartment(long n)

        Get the nth Compartment object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth Compartment of this Model.

        @par <hr> Method variant with the following signature:

            getCompartment(string sid)

        Get a Compartment object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the Compartment in this Model with the identifier 'sid' or
        None if no such Compartment exists.

        """
        return _libsbml.Model_getCompartment(self, *args)

    def getSpecies(self, *args):
        """
        getSpecies(self, unsigned int n) -> Species
        getSpecies(self, unsigned int n) -> Species
        getSpecies(self, string sid) -> Species
        getSpecies(self, string sid) -> Species

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getSpecies(long n)

        Get the nth Species object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth Species of this Model.

        @par <hr> Method variant with the following signature:

            getSpecies(string sid)

        Get a Species object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the Species in this Model with the identifier 'sid' or None if
        no such Species exists.

        """
        return _libsbml.Model_getSpecies(self, *args)

    def getParameter(self, *args):
        """
        getParameter(self, unsigned int n) -> Parameter
        getParameter(self, unsigned int n) -> Parameter
        getParameter(self, string sid) -> Parameter
        getParameter(self, string sid) -> Parameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getParameter(long n)

        Get the nth Parameter object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth Parameter of this Model.

        @par <hr> Method variant with the following signature:

            getParameter(string sid)

        Get a Parameter object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the Parameter in this Model with the identifier 'sid' or None
        if no such Parameter exists.

        """
        return _libsbml.Model_getParameter(self, *args)

    def getInitialAssignment(self, *args):
        """
        getInitialAssignment(self, unsigned int n) -> InitialAssignment
        getInitialAssignment(self, unsigned int n) -> InitialAssignment
        getInitialAssignment(self, string symbol) -> InitialAssignment
        getInitialAssignment(self, string symbol) -> InitialAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getInitialAssignment(string symbol)

        Get an InitialAssignment object based on the symbol to which it
        assigns a value.

        Parameter 'symbol' is the symbol to search for.

        Returns the InitialAssignment in this Model with the given 'symbol'
        attribute value or None if no such InitialAssignment exists.

        @par <hr> Method variant with the following signature:

            getInitialAssignment(long n)

        Get the nth InitialAssignment object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth InitialAssignment of this Model.

        """
        return _libsbml.Model_getInitialAssignment(self, *args)

    def getInitialAssignmentBySymbol(self, *args):
        """
        getInitialAssignmentBySymbol(self, string symbol) -> InitialAssignment
        getInitialAssignmentBySymbol(self, string symbol) -> InitialAssignment

        Get an InitialAssignment object based on the symbol to which it
        assigns a value.

        Parameter 'symbol' is the symbol to search for.

        Returns the InitialAssignment in this Model with the given 'symbol'
        attribute value or None if no such InitialAssignment exists.

        """
        return _libsbml.Model_getInitialAssignmentBySymbol(self, *args)

    def getRule(self, *args):
        """
        getRule(self, unsigned int n) -> Rule
        getRule(self, unsigned int n) -> Rule
        getRule(self, string variable) -> Rule
        getRule(self, string variable) -> Rule

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getRule(string variable)

        Get a Rule object based on the variable to which it assigns a value.

        Parameter 'variable' is the variable to search for.

        Returns the Rule in this Model with the given 'variable' attribute
        value or None if no such Rule exists.

        @par <hr> Method variant with the following signature:

            getRule(long n)

        Get the nth Rule object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth Rule of this Model.

        """
        return _libsbml.Model_getRule(self, *args)

    def getRuleByVariable(self, *args):
        """
        getRuleByVariable(self, string variable) -> Rule
        getRuleByVariable(self, string variable) -> Rule

        Get a Rule object based on the variable to which it assigns a value.

        Parameter 'variable' is the variable to search for.

        Returns the Rule in this Model with the given 'variable' attribute
        value or None if no such Rule exists.

        """
        return _libsbml.Model_getRuleByVariable(self, *args)

    def getAssignmentRule(self, *args):
        """
        getAssignmentRule(self, string variable) -> AssignmentRule
        getAssignmentRule(self, string variable) -> AssignmentRule

        Get a Rule object based on the variable to which it assigns a value.

        Parameter 'variable' is the variable to search for.

        Returns the Rule in this Model with the given 'variable' attribute
        value or None if no such Rule exists.

        """
        return _libsbml.Model_getAssignmentRule(self, *args)

    def getRateRule(self, *args):
        """
        getRateRule(self, string variable) -> RateRule
        getRateRule(self, string variable) -> RateRule

        Get a Rule object based on the variable to which it assigns a value.

        Parameter 'variable' is the symbol to search for.

        Returns the Rule in this Model with the given 'variable' attribute
        value or None if no such Rule exists.

        """
        return _libsbml.Model_getRateRule(self, *args)

    def getAssignmentRuleByVariable(self, *args):
        """
        getAssignmentRuleByVariable(self, string variable) -> AssignmentRule
        getAssignmentRuleByVariable(self, string variable) -> AssignmentRule

        Get a Rule object based on the variable to which it assigns a value.

        Parameter 'variable' is the variable to search for.

        Returns the Rule in this Model with the given 'variable' attribute
        value or None if no such Rule exists.

        """
        return _libsbml.Model_getAssignmentRuleByVariable(self, *args)

    def getRateRuleByVariable(self, *args):
        """
        getRateRuleByVariable(self, string variable) -> RateRule
        getRateRuleByVariable(self, string variable) -> RateRule

        Get a Rule object based on the variable to which it assigns a value.

        Parameter 'variable' is the variable to search for.

        Returns the Rule in this Model with the given 'variable' attribute
        value or None if no such Rule exists.

        """
        return _libsbml.Model_getRateRuleByVariable(self, *args)

    def getConstraint(self, *args):
        """
        getConstraint(self, unsigned int n) -> Constraint
        getConstraint(self, unsigned int n) -> Constraint

        Get the nth Constraint object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth Constraint of this Model.

        """
        return _libsbml.Model_getConstraint(self, *args)

    def getReaction(self, *args):
        """
        getReaction(self, unsigned int n) -> Reaction
        getReaction(self, unsigned int n) -> Reaction
        getReaction(self, string sid) -> Reaction
        getReaction(self, string sid) -> Reaction

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getReaction(long n)

        Get the nth Reaction object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth Reaction of this Model.

        @par <hr> Method variant with the following signature:

            getReaction(string sid)

        Get a Reaction object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the Reaction in this Model with the identifier 'sid' or None
        if no such Reaction exists.

        """
        return _libsbml.Model_getReaction(self, *args)

    def getSpeciesReference(self, *args):
        """
        getSpeciesReference(self, string sid) -> SpeciesReference
        getSpeciesReference(self, string sid) -> SpeciesReference

        Get a SpeciesReference object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the SpeciesReference in this Model with the identifier 'sid'
        or None if no such SpeciesReference exists.

        """
        return _libsbml.Model_getSpeciesReference(self, *args)

    def getModifierSpeciesReference(self, *args):
        """
        getModifierSpeciesReference(self, string sid) -> ModifierSpeciesReference
        getModifierSpeciesReference(self, string sid) -> ModifierSpeciesReference

        Get a ModifierSpeciesReference object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the ModifierSpeciesReference in this Model with the
        identifier 'sid' or None if no such ModifierSpeciesReference exists.

        """
        return _libsbml.Model_getModifierSpeciesReference(self, *args)

    def getEvent(self, *args):
        """
        getEvent(self, unsigned int n) -> Event
        getEvent(self, unsigned int n) -> Event
        getEvent(self, string sid) -> Event
        getEvent(self, string sid) -> Event

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getEvent(long n)

        Get the nth Event object in this Model.

        Parameter 'n' is the index of the object to return.

        Returns the nth Event of this Model.

        @par <hr> Method variant with the following signature:

            getEvent(string sid)

        Get an Event object based on its identifier.

        Parameter 'sid' is the identifier to search for.

        Returns the Event in this Model with the identifier 'sid' or None if
        no such Event exists.

        """
        return _libsbml.Model_getEvent(self, *args)

    def getNumFunctionDefinitions(self):
        """
        getNumFunctionDefinitions(self) -> unsigned int

        Get the number of FunctionDefinition objects in this Model.

        Returns the number of FunctionDefinitions in this Model.

        """
        return _libsbml.Model_getNumFunctionDefinitions(self)

    def getNumUnitDefinitions(self):
        """
        getNumUnitDefinitions(self) -> unsigned int

        Get the number of UnitDefinition objects in this Model.

        Returns the number of UnitDefinitions in this Model.

        """
        return _libsbml.Model_getNumUnitDefinitions(self)

    def getNumCompartmentTypes(self):
        """
        getNumCompartmentTypes(self) -> unsigned int

        Get the number of CompartmentType objects in this Model.

        Returns the number of CompartmentTypes in this Model.

        Note:

        The CompartmentType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        """
        return _libsbml.Model_getNumCompartmentTypes(self)

    def getNumSpeciesTypes(self):
        """
        getNumSpeciesTypes(self) -> unsigned int

        Get the number of SpeciesType objects in this Model.

        Returns the number of SpeciesTypes in this Model.

        Note:

        The SpeciesType object class is only available in SBML Level 2
        Versions 2-4.  It is not available in Level 1 nor Level 3.

        """
        return _libsbml.Model_getNumSpeciesTypes(self)

    def getNumCompartments(self):
        """
        getNumCompartments(self) -> unsigned int

        Get the number of Compartment objects in this Model.

        Returns the number of Compartments in this Model.

        """
        return _libsbml.Model_getNumCompartments(self)

    def getNumSpecies(self):
        """
        getNumSpecies(self) -> unsigned int

        Get the number of Specie objects in this Model.

        Returns the number of Species in this Model.

        """
        return _libsbml.Model_getNumSpecies(self)

    def getNumSpeciesWithBoundaryCondition(self):
        """
        getNumSpeciesWithBoundaryCondition(self) -> unsigned int

        Get the number of Species in this Model having their
        'boundaryCondition' attribute value set to True.

        Returns the number of Species in this Model with boundaryCondition set
        to true.

        """
        return _libsbml.Model_getNumSpeciesWithBoundaryCondition(self)

    def getNumParameters(self):
        """
        getNumParameters(self) -> unsigned int

        Get the number of Parameter objects in this Model.

        Returns the number of Parameters in this Model.  Parameters defined in
        KineticLaws are not included.

        """
        return _libsbml.Model_getNumParameters(self)

    def getNumInitialAssignments(self):
        """
        getNumInitialAssignments(self) -> unsigned int

        Get the number of InitialAssignment objects in this Model.

        Returns the number of InitialAssignments in this Model.

        """
        return _libsbml.Model_getNumInitialAssignments(self)

    def getNumRules(self):
        """
        getNumRules(self) -> unsigned int

        Get the number of Rule objects in this Model.

        Returns the number of Rules in this Model.

        """
        return _libsbml.Model_getNumRules(self)

    def getNumConstraints(self):
        """
        getNumConstraints(self) -> unsigned int

        Get the number of Constraint objects in this Model.

        Returns the number of Constraints in this Model.

        """
        return _libsbml.Model_getNumConstraints(self)

    def getNumReactions(self):
        """
        getNumReactions(self) -> unsigned int

        Get the number of Reaction objects in this Model.

        Returns the number of Reactions in this Model.

        """
        return _libsbml.Model_getNumReactions(self)

    def getNumEvents(self):
        """
        getNumEvents(self) -> unsigned int

        Get the number of Event objects in this Model.

        Returns the number of Events in this Model.

        """
        return _libsbml.Model_getNumEvents(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Remove this Model from its parent SBMLDocument object.

        This works by finding this Model's parent SBMLDocument and then
        calling setModel(None) on it, indirectly deleting itself. Overridden
        from the SBase function since the parent is not a ListOf.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Model_removeFromParentAndDelete(self)

    def renameAllIds(self, *args):
        """
        renameAllIds(self, IdentifierTransformer idTransformer, ElementFilter filter = None) -> int
        renameAllIds(self, IdentifierTransformer idTransformer) -> int

        Internal implementation method.

        """
        return _libsbml.Model_renameAllIds(self, *args)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Model_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Model_renameUnitSIdRefs(self, *args)

    def convertL1ToL2(self):
        """
        convertL1ToL2(self)

        Internal implementation method.

        """
        return _libsbml.Model_convertL1ToL2(self)

    def convertL1ToL3(self):
        """
        convertL1ToL3(self)

        Internal implementation method.

        """
        return _libsbml.Model_convertL1ToL3(self)

    def convertL2ToL3(self):
        """
        convertL2ToL3(self)

        Internal implementation method.

        """
        return _libsbml.Model_convertL2ToL3(self)

    def convertL2ToL1(self, strict = False):
        """
        convertL2ToL1(self, bool strict = False)
        convertL2ToL1(self)

        Internal implementation method.

        """
        return _libsbml.Model_convertL2ToL1(self, strict)

    def convertL3ToL1(self):
        """
        convertL3ToL1(self)

        Internal implementation method.

        """
        return _libsbml.Model_convertL3ToL1(self)

    def convertL3ToL2(self, strict = False):
        """
        convertL3ToL2(self, bool strict = False)
        convertL3ToL2(self)

        Internal implementation method.

        """
        return _libsbml.Model_convertL3ToL2(self, strict)

    def addModifiers(self):
        """
        addModifiers(self)

        Internal implementation method.

        """
        return _libsbml.Model_addModifiers(self)

    def addConstantAttribute(self):
        """
        addConstantAttribute(self)

        Internal implementation method.

        """
        return _libsbml.Model_addConstantAttribute(self)

    def setSpatialDimensions(self, dims = 3.0):
        """
        setSpatialDimensions(self, double dims = 3.0)
        setSpatialDimensions(self)

        Internal implementation method.

        """
        return _libsbml.Model_setSpatialDimensions(self, dims)

    def addDefinitionsForDefaultUnits(self):
        """
        addDefinitionsForDefaultUnits(self)

        Internal implementation method.

        """
        return _libsbml.Model_addDefinitionsForDefaultUnits(self)

    def convertParametersToLocals(self, *args):
        """
        convertParametersToLocals(self, unsigned int level, unsigned int version)

        Internal implementation method.

        """
        return _libsbml.Model_convertParametersToLocals(self, *args)

    def setSpeciesReferenceConstantValueAndStoichiometry(self):
        """
        setSpeciesReferenceConstantValueAndStoichiometry(self)

        Internal implementation method.

        """
        return _libsbml.Model_setSpeciesReferenceConstantValueAndStoichiometry(self)

    def removeParameterRuleUnits(self, *args):
        """
        removeParameterRuleUnits(self, bool strict)

        Internal implementation method.

        """
        return _libsbml.Model_removeParameterRuleUnits(self, *args)

    def convertStoichiometryMath(self):
        """
        convertStoichiometryMath(self)

        Internal implementation method.

        """
        return _libsbml.Model_convertStoichiometryMath(self)

    def assignRequiredValues(self):
        """
        assignRequiredValues(self)

        Internal implementation method.

        """
        return _libsbml.Model_assignRequiredValues(self)

    def dealWithModelUnits(self):
        """
        dealWithModelUnits(self)

        Internal implementation method.

        """
        return _libsbml.Model_dealWithModelUnits(self)

    def dealWithStoichiometry(self):
        """
        dealWithStoichiometry(self)

        Internal implementation method.

        """
        return _libsbml.Model_dealWithStoichiometry(self)

    def dealWithEvents(self, *args):
        """
        dealWithEvents(self, bool strict)

        Internal implementation method.

        """
        return _libsbml.Model_dealWithEvents(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Model_connectToChild(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_MODEL
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Model_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Model, is
        always 'model'.

        Returns the name of this element, i.e., 'model'.

        """
        return _libsbml.Model_getElementName(self)

    def populateListFormulaUnitsData(self):
        """
        populateListFormulaUnitsData(self)

        Populates the list of FormulaDataUnits with the units derived for this
        Model object.

        The list contains elements of class FormulaUnitsData.  The first
        element of the list refers to the default units of 'substance per
        time' derived from the model and has the unitReferenceId
        'subs_per_time'. This facilitates the comparison of units derived from
        mathematical formula with the expected units.

        The next elements of the list record the units of the  compartments
        and species established from either explicitly declared or default
        units.

        The next elements record the units of any parameters.

        Subsequent elements of the list record the units derived for each
        mathematical expression encountered within the model.

        Note:

        This function is utilised by the Unit Consistency Validator. The list
        is populated prior to running the validation and thus the consistency
        of units can be checked by accessing the members of the list and
        comparing the appropriate data.

        """
        return _libsbml.Model_populateListFormulaUnitsData(self)

    def isPopulatedListFormulaUnitsData(self):
        """
        isPopulatedListFormulaUnitsData(self) -> bool

        Predicate returning True if  the list of FormulaUnitsData is
        populated.

        Returns True if the list of FormulaUnitsData is populated,  False
        otherwise.

        """
        return _libsbml.Model_isPopulatedListFormulaUnitsData(self)

    def getFormulaUnitsDataForVariable(self, *args):
        """
        getFormulaUnitsDataForVariable(self, string sid) -> FormulaUnitsData

        Internal implementation method.

        """
        return _libsbml.Model_getFormulaUnitsDataForVariable(self, *args)

    def getFormulaUnitsDataForAssignment(self, *args):
        """
        getFormulaUnitsDataForAssignment(self, string sid) -> FormulaUnitsData

        Internal implementation method.

        """
        return _libsbml.Model_getFormulaUnitsDataForAssignment(self, *args)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this Model
        object have been set.

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.Model_hasRequiredElements(self)

    def removeFunctionDefinition(self, *args):
        """
        removeFunctionDefinition(self, unsigned int n) -> FunctionDefinition
        removeFunctionDefinition(self, string sid) -> FunctionDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeFunctionDefinition(long n)

        Removes the nth FunctionDefinition object from this Model object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the FunctionDefinition object to remove

        Returns the FunctionDefinition object removed, or None if the given
        index is out of range.

         @par <hr> Method variant with the following signature:

            removeFunctionDefinition(string sid)

        Removes the FunctionDefinition object with the given identifier from
        this Model  object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the FunctionDefinition object to
        remove

        Returns the FunctionDefinition object removed, or None if no
        FunctionDefinition object with the identifier exists in this Model
        object.

        """
        return _libsbml.Model_removeFunctionDefinition(self, *args)

    def removeUnitDefinition(self, *args):
        """
        removeUnitDefinition(self, unsigned int n) -> UnitDefinition
        removeUnitDefinition(self, string sid) -> UnitDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeUnitDefinition(long n)

        Removes the nth UnitDefinition object from this Model object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the UnitDefinition object to remove

        Returns the UnitDefinition object removed., or None if the given index
        is out of range.

         @par <hr> Method variant with the following signature:

            removeUnitDefinition(string sid)

        Removes the UnitDefinition object with the given identifier from this
        Model object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the UnitDefinition object to
        remove

        Returns the UnitDefinition object removed, or None if no
        UnitDefinition object with the identifier exists in this Model object.

        """
        return _libsbml.Model_removeUnitDefinition(self, *args)

    def removeCompartmentType(self, *args):
        """
        removeCompartmentType(self, unsigned int n) -> CompartmentType
        removeCompartmentType(self, string sid) -> CompartmentType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeCompartmentType(long n)

        Removes the nth CompartmentType object from this Model object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the CompartmentType object to remove

        Returns the ComapartmentType object removed, or None if the given
        index is out of range.

         @par <hr> Method variant with the following signature:

            removeCompartmentType(string sid)

        Removes the CompartmentType object with the given identifier from this
        Model object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the object to remove

        Returns the CompartmentType object removed, or None if no
        CompartmentType object with the identifier exists in this Model
        object.

        """
        return _libsbml.Model_removeCompartmentType(self, *args)

    def removeSpeciesType(self, *args):
        """
        removeSpeciesType(self, unsigned int n) -> SpeciesType
        removeSpeciesType(self, string sid) -> SpeciesType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeSpeciesType(long n)

        Removes the nth SpeciesType object from this Model object and returns
        a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the SpeciesType object to remove

        Returns the SpeciesType object removed, or None if the given index is
        out of range.

         @par <hr> Method variant with the following signature:

            removeSpeciesType(string sid)

        Removes the SpeciesType object with the given identifier from this
        Model object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the SpeciesType object to remove

        Returns the SpeciesType object removed, or None if no SpeciesType
        object with the identifier exists in this Model object.

        """
        return _libsbml.Model_removeSpeciesType(self, *args)

    def removeCompartment(self, *args):
        """
        removeCompartment(self, unsigned int n) -> Compartment
        removeCompartment(self, string sid) -> Compartment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeCompartment(long n)

        Removes the nth Compartment object from this Model object and returns
        a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Compartment object to remove

        Returns the Compartment object removed, or None if the given index is
        out of range.

         @par <hr> Method variant with the following signature:

            removeCompartment(string sid)

        Removes the Compartment object with the given identifier from this
        Model object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the Compartment object to remove

        Returns the Compartment object removed, or None if no Compartment
        object with the identifier exists in this Model object.

        """
        return _libsbml.Model_removeCompartment(self, *args)

    def removeSpecies(self, *args):
        """
        removeSpecies(self, unsigned int n) -> Species
        removeSpecies(self, string sid) -> Species

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeSpecies(long n)

        Removes the nth Species object from this Model object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Species object to remove

        Returns the Species object removed, or None if the given index is out
        of range.

         @par <hr> Method variant with the following signature:

            removeSpecies(string sid)

        Removes the Species object with the given identifier from this Model
        object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the Species object to remove

        Returns the Species object removed, or None if no Species object with
        the identifier exists in this Model object.

        """
        return _libsbml.Model_removeSpecies(self, *args)

    def removeParameter(self, *args):
        """
        removeParameter(self, unsigned int n) -> Parameter
        removeParameter(self, string sid) -> Parameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeParameter(long n)

        Removes the nth Parameter object from this Model object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Parameter object to remove

        Returns the Parameter object removed, or None if the given index is
        out of range.

         @par <hr> Method variant with the following signature:

            removeParameter(string sid)

        Removes the Parameter object with the given identifier from this Model
        object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the Parameter object to remove

        Returns the Parameter object removed, or None if no Parameter object
        with the identifier exists in this Model object.

        """
        return _libsbml.Model_removeParameter(self, *args)

    def removeInitialAssignment(self, *args):
        """
        removeInitialAssignment(self, unsigned int n) -> InitialAssignment
        removeInitialAssignment(self, string symbol) -> InitialAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeInitialAssignment(string symbol)

        Removes the InitialAssignment object with the given 'symbol' attribute
        from this Model object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'symbol' is the 'symbol' attribute of the InitialAssignment
        object to remove

        Returns the InitialAssignment object removed, or None if no
        InitialAssignment object with the 'symbol' attribute exists in this
        Model object.

        @par <hr> Method variant with the following signature:

            removeInitialAssignment(long n)

        Removes the nth InitialAssignment object from this Model object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the InitialAssignment object to remove

        Returns the InitialAssignment object removed, or None if the given
        index is out of range.

        """
        return _libsbml.Model_removeInitialAssignment(self, *args)

    def removeRule(self, *args):
        """
        removeRule(self, unsigned int n) -> Rule
        removeRule(self, string variable) -> Rule

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeRule(string variable)

        Removes the Rule object with the given 'variable' attribute from this
        Model  object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'variable' is the 'variable' attribute of the Rule object to
        remove

        Returns the Rule object removed, or None if no Rule object with the
        'variable' attribute exists in this Model object.

        @par <hr> Method variant with the following signature:

            removeRule(long n)

        Removes the nth Rule object from this Model object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Rule object to remove

        Returns the Rule object removed, or None if the given index is out of
        range.

        """
        return _libsbml.Model_removeRule(self, *args)

    def removeConstraint(self, *args):
        """
        removeConstraint(self, unsigned int n) -> Constraint

        Removes the nth Constraint object from this Model object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Constraint object to remove

        Returns the Constraint object removed, or None if the given index is
        out of range.

        """
        return _libsbml.Model_removeConstraint(self, *args)

    def removeReaction(self, *args):
        """
        removeReaction(self, unsigned int n) -> Reaction
        removeReaction(self, string sid) -> Reaction

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeReaction(long n)

        Removes the nth Reaction object from this Model object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Reaction object to remove

        Returns the Reaction object removed, or None if the given index is out
        of range.

         @par <hr> Method variant with the following signature:

            removeReaction(string sid)

        Removes the Reaction object with the given identifier from this Model
        object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the Reaction object to remove

        Returns the Reaction object removed, or None if no Reaction object
        with the identifier exists in this Model object.

        """
        return _libsbml.Model_removeReaction(self, *args)

    def removeEvent(self, *args):
        """
        removeEvent(self, unsigned int n) -> Event
        removeEvent(self, string sid) -> Event

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeEvent(long n)

        Removes the nth Event object from this Model object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Event object to remove

        Returns the Event object removed, or None if the given index is out of
        range.

         @par <hr> Method variant with the following signature:

            removeEvent(string sid)

        Removes the Event object with the given identifier from this Model
        object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the Event object to remove

        Returns the Event object removed, or None if no Event object with the
        identifier exists in this Model object.

        """
        return _libsbml.Model_removeEvent(self, *args)

    def appendFrom(self, *args):
        """
        appendFrom(self, Model model) -> int

        Copies a given Model object's subcomponents and appends the copies to
        the appropriate places in this Model.

        This method also calls the appendFrom method on all libSBML plug-in
        objects.

        @par SBML Level 3 consists of a Core definition that can be extended
        via optional SBML Level 3 packages.  A given model may indicate that
        it uses one or more SBML packages, and likewise, a software tool may
        be able to support one or more packages.  LibSBML does not come
        preconfigured with all possible packages included and enabled, in part
        because not all package specifications have been finalized.  To
        support the ability for software systems to enable support for the
        Level 3 packages they choose, libSBML features a plug-in mechanism.
        Each SBML Level 3 package is implemented in a separate code plug-in
        that can be enabled by the application to support working with that
        SBML package.  A given SBML model may thus contain not only objects
        defined by SBML Level 3 Core, but also objects created by libSBML
        plug-ins supporting additional Level 3 packages.

        Parameter 'model' is the Model to merge with this one.

        """
        return _libsbml.Model_appendFrom(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Model_enablePackageInternal(self, *args)

    def renameIDs(self, *args):
        """
        renameIDs(self, SBaseList elements, IdentifierTransformer idTransformer)

        """
        return _libsbml.Model_renameIDs(self, *args)

Model_swigregister = _libsbml.Model_swigregister
Model_swigregister(Model)

IdCheckON = _libsbml.IdCheckON
IdCheckOFF = _libsbml.IdCheckOFF
SBMLCheckON = _libsbml.SBMLCheckON
SBMLCheckOFF = _libsbml.SBMLCheckOFF
SBOCheckON = _libsbml.SBOCheckON
SBOCheckOFF = _libsbml.SBOCheckOFF
MathCheckON = _libsbml.MathCheckON
MathCheckOFF = _libsbml.MathCheckOFF
UnitsCheckON = _libsbml.UnitsCheckON
UnitsCheckOFF = _libsbml.UnitsCheckOFF
OverdeterCheckON = _libsbml.OverdeterCheckON
OverdeterCheckOFF = _libsbml.OverdeterCheckOFF
PracticeCheckON = _libsbml.PracticeCheckON
PracticeCheckOFF = _libsbml.PracticeCheckOFF
AllChecksON = _libsbml.AllChecksON
class SBMLDocument(SBase):
    """
    Container for an SBML document and interface for global operations
    on SBML documents.

    LibSBML uses the class SBMLDocument as a top-level container for
    storing SBML content and data associated with it (such as warnings and
    error messages).  The two primary means of reading an SBML model,
    SBMLReader.readSBML() and SBMLReader.readSBMLFromString(), both return
    a pointer to an SBMLDocument object.  From there, callers can inquire
    about any errors encountered (e.g., using
    SBMLDocument.getNumErrors()), access the Model object, and perform
    other actions such as consistency-checking and model translation.

     When creating fresh models programmatically, the starting point is
    typically the creation of an SBMLDocument object instance.  The
    SBMLDocument constructor accepts arguments for the SBML Level and
    Version of the model to be created.  After creating the SBMLDocument
    object, calling programs then typically call
    SBMLDocument.createModel() almost immediately, and then proceed to
    call the methods on the Model object to fill out the model's contents.

    SBMLDocument corresponds roughly to the class Sbml defined in the SBML
    Level 2 specification and SBML in the Level 3 specification.  It does
    not have a direct correspondence in SBML Level 1.  (However, to make
    matters simpler for applications, libSBML creates an SBMLDocument no
    matter whether the model is Level 1, Level 2 or Level 3.)  In its
    barest form, when written out in XML format for (e.g.) SBML Level 2
    Version 4, the corresponding structure is the following:

      <sbml xmlns='http://www.sbml.org/sbml/level2/version4' level='2' version='4'>
        ...
      </sbml>

    SBMLDocument is derived from SBase, and therefore contains the usual
    SBase attributes (in SBML Level 2 and Level 3) of 'metaid' and
    'sboTerm', as well as the subelements 'notes' and 'annotation'.  It
    also contains the attributes 'level' and 'version' indicating the
    Level and Version of the SBML data structure.  These can be accessed
    using the methods defined by the SBase class for that purpose.

    Checking consistency and adherence to SBML specifications
    ======================================================================

    One of the most important features of libSBML is its ability to
    perform SBML validation to ensure that a model adheres to the SBML
    specification for whatever Level+Version combination the model uses.
    SBMLDocument provides the methods for running consistency-checking and
    validation rules on the SBML content.

    First, a brief explanation of the rationale is in order.  In libSBML
    versions up to and including the version 3.3.x series, the individual
    methods for creating and setting attributes and other components were
    quite lenient, and allowed a caller to compose SBML entities that
    might not, in the end, represent valid SBML.  This allowed
    applications the freedom to do things such as save incomplete models
    (which is useful when models are being developed over long periods of
    time).  In the version 4.x series, libSBML is somewhat stricter, but
    still permits structures to be created independently and the results
    to be combined in a separate step.  In all these cases, it means that
    a separate validation step is necessary when a calling program finally
    wants to finish a complete SBML document.

    The primary interface to this validation facility is SBMLDocument's
    SBMLDocument.checkInternalConsistency() and
    SBMLDocument.checkConsistency().  The former verifies the basic
    internal consistency and syntax of an SBML document, and the latter
    implements more elaborate validation rules (both those defined by the
    SBML specifications, as well as additional rules offered by libSBML).

    The checks performed by SBMLDocument.checkInternalConsistency() are
    hardwired and cannot be changed by calling programs, but the
    validation performed by SBMLDocument.checkConsistency() is under
    program control using the method SBMLDocument.setConsistencyChecks().
    Applications can selectively disable specific kinds of checks that
    they may not be interested in, by calling
    SBMLDocument.setConsistencyChecks() with appropriate parameters.

     These methods have slightly different relevance depending on whether
    a model is created programmaticaly from scratch, or whether it is read
    in from a file or data stream.  The following list summarizes the
    possible scenarios.

    Scenario 1: Creating a model from scratch.  Before writing out the
    model,

        * Call SBMLDocument.checkInternalConsistency(), then inquire about
    the results by calling SBMLDocument.getNumErrors()

        * Call SBMLDocument.setConsistencyChecks()  to configure which
    checks will be performed by SBMLDocument.checkConsistency()

        * Call SBMLDocument.checkConsistency(), then inquire about the
    results by calling SBMLDocument.getNumErrors()

    Scenario 2: Reading a model from a file or data stream. After reading
    the model,

        * Basic consistency checks will have been performed automatically
    by libSBML upon reading the content, so you only need to inquire about
    the results by using SBMLDocument.getNumErrors()

        * Call SBMLDocument.setConsistencyChecks()  to configure which
    checks are performed by SBMLDocument.checkConsistency()

        * Call SBMLDocument.checkConsistency(), then inquire about the
    results by calling SBMLDocument.getNumErrors()

      Converting documents between Levels and Versions of SBML
    ======================================================================

    LibSBML provides facilities for limited translation of SBML between
    Levels and Versions of the SBML specifications.  The method for doing
    is is setLevelAndVersion() .  In  general, models can be converted
    upward without difficulty (e.g., from SBML Level 1 to Level 2, or from
    an earlier Version of Level 2 to the latest Version of Level 2).
    Sometimes models can be translated downward as well, if they do not
    use constructs specific to more advanced Levels of SBML.

    Calling SBMLDocument.setLevelAndVersion()  will not necessarily lead
    to a successful conversion.  The method will return a boolean value to
    indicate success or failure.  Callers must check the error log (see
    next section) attached to the SBMLDocument object after calling
    SBMLDocument.setLevelAndVersion()  in order to assess whether any
    problems arose.

    If an application is interested in translating to a lower Level and/or
    Version of SBML within a Level, the following methods allow for prior
    assessment of whether there is sufficient compatibility to make a
    translation possible:

        * SBMLDocument.checkL1Compatibility(),

       * SBMLDocument.checkL2v1Compatibility(),

       * SBMLDocument.checkL2v2Compatibility(),

       * SBMLDocument.checkL2v3Compatibility(),

       * SBMLDocument.checkL2v4Compatibility(), and

       * SBMLDocument.checkL3v1Compatibility().

    Some changes between Versions of SBML Level 2 may lead to unexpected
    behaviors when attempting conversions in either direction. For
    example, SBML Level 2 Version 4 relaxed the requirement for
    consistency in units of measurement between expressions annd
    quantities in a model.  As a result, a model written in Version 4, if
    converted to Version 3 with no other changes, may fail validation as a
    Version 3 model because Version 3 imposed stricter requirements on
    unit consistency.

    Other changes between SBML Level 2 and Level 3 make downward
    conversions challenging.  In some cases, it means that a model
    converted to Level 2 from Level 3 will contain attributes that were
    not explicitly given in the Level 3 model, because in Level 2 these
    attributes may have been optional or have default values.

    Error handling
    ======================================================================

    Upon reading a model, SBMLDocument logs any problems encountered while
    reading the model from the file or data stream.  The log contains
    objects that record diagnostic information about any notable issues
    that arose.  Whether the problems are warnings or errors, they are
    both reported through a single common interface involving the object
    class SBMLError.

    The methods SBMLDocument.getNumErrors(), SBMLDocument.getError()  and
    SBMLDocument.printErrors() allow callers to interact with the warnings
    or errors logged.  Alternatively, callers may retrieve the entire log
    as an SBMLErrorLog object using the method SBMLDocument.getErrorLog().
    The SBMLErrorLog object provides some alternative methods for
    interacting with the set of errors and warnings.  In either case,
    applications typically should first call SBMLDocument.getNumErrors()
    to find out if any issues have been logged after specific libSBML
    operations such as the ones discussed in the sections above.  If they
    have, then an application will should proceed to inspect the
    individual reports using either the direct interfaces on SBMLDocument
    or using the methods on the SBMLErrorLog object.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLDocument, name)
    __repr__ = _swig_repr
    def getDefaultLevel():
        """
        getDefaultLevel() -> unsigned int

        The default SBML Level of new SBMLDocument objects.

        @par This 'default Level' corresponds to the most recent SBML
        specification Level available at the time libSBML version 5.10.1 was
        released.  The default Level is used by SBMLDocument if no Level is
        explicitly specified at the time of the construction of an
        SBMLDocument instance.

        Returns an integer indicating the most recent SBML specification Level

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SBMLDocument.getDefaultVersion()

        """
        return _libsbml.SBMLDocument_getDefaultLevel()

    if _newclass:getDefaultLevel = staticmethod(getDefaultLevel)
    __swig_getmethods__["getDefaultLevel"] = lambda x: getDefaultLevel
    def getDefaultVersion():
        """
        getDefaultVersion() -> unsigned int

        The default Version of new SBMLDocument objects.

        @par This 'default Version' corresponds to the most recent Version
        within the most recent Level of SBML available at the time libSBML
        version 5.10.1 was released.  The default Version is used by
        SBMLDocument if no Version is explicitly specified at the time of the
        construction of an SBMLDocument instance.

        Returns an integer indicating the most recent SBML specification
        Version

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SBMLDocument.getDefaultLevel()

        """
        return _libsbml.SBMLDocument_getDefaultVersion()

    if _newclass:getDefaultVersion = staticmethod(getDefaultVersion)
    __swig_getmethods__["getDefaultVersion"] = lambda x: getDefaultVersion
    __swig_destroy__ = _libsbml.delete_SBMLDocument
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = 0, unsigned int version = 0) -> SBMLDocument
        __init__(self, unsigned int level = 0) -> SBMLDocument
        __init__(self) -> SBMLDocument
        __init__(self, SBMLNamespaces sbmlns) -> SBMLDocument
        __init__(self, SBMLDocument orig) -> SBMLDocument

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLDocument(SBMLNamespaces sbmlns)

        Creates a new SBMLDocument using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        @par <hr> Method variant with the following signature:

            SBMLDocument(long level = 0, long version = 0)

        Creates a new SBMLDocument, optionally with given values for the SBML
        Level and Version.

        If both the SBML Level and Version attributes are not specified, the
        SBML document is treated as having the latest Level and Version of
        SBML as determined by SBMLDocument.getDefaultLevel() and
        SBMLDocument.getDefaultVersion(); however, the SBMLDocument object is
        otherwise left blank.  In particular, the blank SBMLDocument object
        has no associated XML attributes, including (but not limited to) an
        XML namespace declaration.  The XML namespace declaration is not added
        until the model is written out, or the method
        SBMLDocument.setLevelAndVersion() is called.  This may be important to
        keep in mind if an application needs to add additional XML namespace
        declarations on the <sbml> element.  Application writers should either
        provide values for 'level' and 'version' on the call to this
        constructor, or else call SBMLDocument.setLevelAndVersion() shortly
        after creating the SBMLDocument object.

        Parameter 'level' is an integer for the SBML Level

        Parameter 'version' is an integer for the Version within the SBML
        Level

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        See also getDefaultVersion().

        @par <hr> Method variant with the following signature:

            SBMLDocument(SBMLDocument orig)

        Copy constructor; creates a copy of this SBMLDocument.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_SBMLDocument(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLDocument

        Creates and returns a deep copy of this SBMLDocument.

        Returns a (deep) copy of this SBMLDocument.

        """
        return _libsbml.SBMLDocument_clone(self)

    def getModel(self, *args):
        """
        getModel(self) -> Model
        getModel(self) -> Model

        Returns the Model object stored in this SBMLDocument.

        It is important to note that this method does not create a Model
        instance.  The model in the SBMLDocument must have been created at
        some prior time, for example using SBMLDocument.createModel()  or
        SBMLDocument.setModel(). This method returns None if a model does not
        yet exist.

        Returns the Model contained in this SBMLDocument.

        See also createModel().

        """
        return _libsbml.SBMLDocument_getModel(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.SBMLDocument_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object is
        found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns pointer to the first element found with the given 'metaid'.

        """
        return _libsbml.SBMLDocument_getElementByMetaId(self, *args)

    def expandFunctionDefinitions(self):
        """
        expandFunctionDefinitions(self) -> bool

        Removes FunctionDefinition constructs from the document and expands
        any instances of their use within <math> elements.

        For example, suppose a Model contains a FunctionDefinition with
        identifier 'f' representing the math expression: f(x, y) = x * y.
        Suppose further that there is a reaction in which the <math> element
        of the KineticLaw object contains f(s, p), where s and p are other
        identifiers defined in the model.  The outcome of invoking this method
        is that the <math> of the KineticLaw now represents the expression s *
        p and the model no longer contains any FunctionDefinition objects.

        Returns bool True if the transformation was successful,  False,
        otherwise.

        Note:

        This function will check the consistency of a model before attemptimg
        the transformation.  If the model is not valid SBML, the
        transformation will not be performed and the function will return
        false.

        """
        return _libsbml.SBMLDocument_expandFunctionDefinitions(self)

    def expandInitialAssignments(self):
        """
        expandInitialAssignments(self) -> bool

        Removes InitialAssignment constructs from the document and replaces
        them with appropriate values.

        For example, suppose a Model contains a InitialAssignment to a symbol
        'k' where 'k' is the identifier of a Parameter.  The outcome of
        invoking this method is that the 'value' attribute of the Parameter
        definition is set to the result calculated using the InitialAssignment
        object's <math> formula, and the corresponding InitialAssignment is
        then removed from the Model.

        Returns bool True if the transformation was successful,  False,
        otherwise.

        Note:

        This function will check the consistency of a model before attemptimg
        the transformation.  If the model is not valid SBML, the
        transformation will not be performed and the function will return
        false.  As part of that process, this method will check that it has
        values for any components referred to by the <math> elements of
        InitialAssignment objects.  In cases where not all of the values have
        been declared (e.g., if the mathematical expression refers to model
        entities that have no declared values), the InitialAssignment in
        question will not be removed and this method will return false.

        """
        return _libsbml.SBMLDocument_expandInitialAssignments(self)

    def setLevelAndVersion(self, *args):
        """
        setLevelAndVersion(self, unsigned int level, unsigned int version, bool strict = True, 
            bool ignorePackages = False) -> bool
        setLevelAndVersion(self, unsigned int level, unsigned int version, bool strict = True) -> bool
        setLevelAndVersion(self, unsigned int level, unsigned int version) -> bool

        Sets the SBML Level and Version of this SBMLDocument instance,
        attempting to convert the model as needed.

        This method is the principal way in libSBML to convert models between
        Levels and Versions of SBML.  Generally, models can be converted
        upward without difficulty (e.g., from SBML Level 1 to Level 2, or from
        an earlier Version of Level 2 to the latest Version of Level 2).
        Sometimes models can be translated downward as well, if they do not
        use constructs specific to more advanced Levels of SBML.

        Before calling this method, callers may check compatibility directly
        using the methods SBMLDocument.checkL1Compatibility(),
        SBMLDocument.checkL2v1Compatibility(),
        SBMLDocument.checkL2v2Compatibility(),
        SBMLDocument.checkL2v3Compatibility(),
        SBMLDocument.checkL2v4Compatibility(), and
        SBMLDocument.checkL3v1Compatibility().

        The valid combinations of SBML Level and Version as of this release of
        libSBML are the following:

        * Level 1 Version 2

           * Level 2 Version 1

           * Level 2 Version 2

           * Level 2 Version 3

           * Level 2 Version 4

           * Level 3 Version 1 Strict conversion applies the additional
        criteria that both the source and the target model must be consistent
        SBML.  Users can control the consistency checks that are applied using
        the SBMLDocument.setConsistencyChecksForConversion() method.  If
        either the source or the potential target model have validation
        errors, the conversion is not performed.  When a strict conversion is
        successful, the underlying SBML object model is altered to reflect the
        new level and version.  Thus, information that cannot be converted
        (e.g. sboTerms) will be lost.

        Parameter 'level' is the desired SBML Level

        Parameter 'version' is the desired Version within the SBML Level

        Parameter 'strict' is boolean indicating whether to check consistency
        of both the source and target model when performing conversion
        (defaults to  true )

        Parameter 'ignorePackages' is boolean indicating whether the presence
        of packages should be ignored by the conversion routine  (defaults to
        false )

        Returns True if the level and version of the document were
        successfully set to the requested values (which may have required
        conversion of the model), False otherwise.

        Note:

        Calling this method will not necessarily lead to a successful
        conversion.  If the conversion fails, it will be logged in the error
        list associated with this SBMLDocument.  Callers should consult
        getNumErrors() to find out if the conversion succeeded without
        problems.  For conversions from Level 2 to Level 1, callers can also
        check the Level of the model after calling this method to find out
        whether it is Level 1.  (If the conversion to Level 1 failed, the
        Level of this model will be left unchanged.)

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        See also checkL3v1Compatibility().

        """
        return _libsbml.SBMLDocument_setLevelAndVersion(self, *args)

    def updateSBMLNamespace(self, *args):
        """
        updateSBMLNamespace(self, string package, unsigned int level, unsigned int version)

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_updateSBMLNamespace(self, *args)

    def setModel(self, *args):
        """
        setModel(self, Model m) -> int

        Sets the Model for this SBMLDocument to a copy of the given Model.

        Parameter 'm' is the new Model to use.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

        See also getModel().

        """
        return _libsbml.SBMLDocument_setModel(self, *args)

    def createModel(self, sid = ""):
        """
        createModel(self, string sid = "") -> Model
        createModel(self) -> Model

        Creates a new Model inside this SBMLDocument, and returns a pointer to
        it.

        In SBML Level 2, the use of an identifier on a Model object is
        optional.  This method takes an optional argument, 'sid', for setting
        the identifier.  If not supplied, the identifier attribute on the
        Model instance is not set.

        Parameter 'sid' is the identifier of the new Model to create.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        See also SBMLDocument.setModel().

        """
        return _libsbml.SBMLDocument_createModel(self, sid)

    def setLocationURI(self, *args):
        """
        setLocationURI(self, string uri)

        Sets the location of this SBMLDocument.

        Called automatically when readSBMLFromFile is used, but may be set
        manually as well.

        """
        return _libsbml.SBMLDocument_setLocationURI(self, *args)

    def getLocationURI(self, *args):
        """
        getLocationURI(self) -> string
        getLocationURI(self) -> string

        Get the location of this SBMLDocument.

        If this document was read from a file or had its location set
        manually, that filename or set location will be returned, otherwise,
        an empty string is returned.

        """
        return _libsbml.SBMLDocument_getLocationURI(self, *args)

    def setConsistencyChecks(self, *args):
        """
        setConsistencyChecks(self, SBMLErrorCategory_t category, bool apply)

        Controls the consistency checks that are performed when
        SBMLDocument.checkConsistency() is called.

        This method works by adding or subtracting consistency checks from the
        set of all possible checks that SBMLDocument.checkConsistency() knows
        how to perform.  This method may need to be called multiple times in
        order to achieve the desired combination of checks.  The first
        argument ('category') in a call to this method indicates the category
        of consistency/error checks that are to be turned on or off, and the
        second argument ('apply', a boolean) indicates whether to turn it on
        (value of True) or off (value of False).

        The possible categories (values to the argument 'category') are the
        set of constants whose names begin with the characters LIBSBML_CAT_ in
        the interface class libsbml. The following are the possible choices:

         * libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY: Correctness and
        consistency of specific SBML language constructs.  Performing this set
        of checks is highly recommended.  With respect to the SBML
        specification, these concern failures in applying the validation rules
        numbered 2xxxx in the Level 2 Versions 2-4 and Level 3 Version 1
        specifications.

        * libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY: Correctness and
        consistency of identifiers used for model entities.  An example of
        inconsistency would be using a species identifier in a reaction rate
        formula without first having declared the species.  With respect to
        the SBML specification, these concern failures in applying the
        validation rules numbered 103xx in the Level 2 Versions 2-4 and Level
        3 Version 1 specifications.

        * libsbml.LIBSBML_CAT_UNITS_CONSISTENCY: Consistency of measurement
        units associated with quantities in a model.  With respect to the SBML
        specification, these concern failures in applying the validation rules
        numbered 105xx in the Level 2 Versions 2-4 and Level 3 Version 1
        specifications.

        * libsbml.LIBSBML_CAT_MATHML_CONSISTENCY: Syntax of MathML constructs.
        With respect to the SBML specification, these concern failures in
        applying the validation rules numbered 102xx in the Level 2 Versions
        2-4 and Level 3 Version 1 specifications.

        * libsbml.LIBSBML_CAT_SBO_CONSISTENCY: Consistency and validity of SBO
        identifiers (if any) used in the model.  With respect to the SBML
        specification, these concern failures in applying the validation rules
        numbered 107xx in the Level 2 Versions 2-4 and Level 3 Version 1
        specifications.

        * libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL: Static analysis of whether
        the system of equations implied by a model is mathematically
        overdetermined.  With respect to the SBML specification, this is
        validation rule #10601 in the Level 2 Versions 2-4 and Level 3 Version
        1 specifications.

        * libsbml.LIBSBML_CAT_MODELING_PRACTICE: Additional checks for
        recommended good modeling practice. (These are tests performed by
        libSBML and do not have equivalent SBML validation rules.) By default,
        all validation checks are applied to the model in an SBMLDocument
        object unless SBMLDocument.setConsistencyChecks() is called to
        indicate that only a subset should be applied.  Further, this default
        (i.e., performing all checks) applies separately to each new
        SBMLDocument object created.  In other words, each time a model is
        read using SBMLReader.readSBML(), SBMLReader.readSBMLFromString(), or
        the global functions readSBML() and readSBMLFromString(), a new
        SBMLDocument is created and for that document, a call to
        SBMLDocument.checkConsistency() will default to applying all possible
        checks. Calling programs must invoke
        SBMLDocument.setConsistencyChecks() for each such new model if they
        wish to change the consistency checks applied.

        Parameter 'category' is a value drawn from the set of SBML error
        categories indicating the consistency checking/validation to be turned
        on or off.

        Parameter 'apply' is a boolean indicating whether the checks indicated
        by 'category' should be applied or not.

        See also SBMLDocument.checkConsistency().

        """
        return _libsbml.SBMLDocument_setConsistencyChecks(self, *args)

    def setConsistencyChecksForConversion(self, *args):
        """
        setConsistencyChecksForConversion(self, SBMLErrorCategory_t category, bool apply)

        Controls the consistency checks that are performed when
        SBMLDocument.setLevelAndVersion() is called.

        This method works by adding or subtracting consistency checks from the
        set of all possible checks that may be performed to avoid conversion
        to or from an invalid document.  This method may need to be called
        multiple times in order to achieve the desired combination of checks.
        The first argument ('category') in a call to this method indicates the
        category of consistency/error checks that are to be turned on or off,
        and the second argument ('apply', a boolean) indicates whether to turn
        it on (value of True) or off (value of False).

        The possible categories (values to the argument 'category') are the
        set of constants whose names begin with the characters LIBSBML_CAT_ in
        the interface class libsbml. The following are the possible choices:

         * libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY: Correctness and
        consistency of specific SBML language constructs.  Performing this set
        of checks is highly recommended.  With respect to the SBML
        specification, these concern failures in applying the validation rules
        numbered 2xxxx in the Level 2 Versions 2-4 and Level 3 Version 1
        specifications.

        * libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY: Correctness and
        consistency of identifiers used for model entities.  An example of
        inconsistency would be using a species identifier in a reaction rate
        formula without first having declared the species.  With respect to
        the SBML specification, these concern failures in applying the
        validation rules numbered 103xx in the Level 2 Versions 2-4 and Level
        3 Version 1 specifications.

        * libsbml.LIBSBML_CAT_UNITS_CONSISTENCY: Consistency of measurement
        units associated with quantities in a model.  With respect to the SBML
        specification, these concern failures in applying the validation rules
        numbered 105xx in the Level 2 Versions 2-4 and Level 3 Version 1
        specifications.

        * libsbml.LIBSBML_CAT_MATHML_CONSISTENCY: Syntax of MathML constructs.
        With respect to the SBML specification, these concern failures in
        applying the validation rules numbered 102xx in the Level 2 Versions
        2-4 and Level 3 Version 1 specifications.

        * libsbml.LIBSBML_CAT_SBO_CONSISTENCY: Consistency and validity of SBO
        identifiers (if any) used in the model.  With respect to the SBML
        specification, these concern failures in applying the validation rules
        numbered 107xx in the Level 2 Versions 2-4 and Level 3 Version 1
        specifications.

        * libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL: Static analysis of whether
        the system of equations implied by a model is mathematically
        overdetermined.  With respect to the SBML specification, this is
        validation rule #10601 in the Level 2 Versions 2-4 and Level 3 Version
        1 specifications.

        * libsbml.LIBSBML_CAT_MODELING_PRACTICE: Additional checks for
        recommended good modeling practice. (These are tests performed by
        libSBML and do not have equivalent SBML validation rules.) By default,
        all validation checks are applied to the model in an SBMLDocument
        object unless SBMLDocument.setConsistencyChecks() is called to
        indicate that only a subset should be applied.  Further, this default
        (i.e., performing all checks) applies separately to each new
        SBMLDocument object created.  In other words, each time a model is
        read using SBMLReader.readSBML(), SBMLReader.readSBMLFromString(), or
        the global functions readSBML() and readSBMLFromString(), a new
        SBMLDocument is created and for that document, a call to
        SBMLDocument.checkConsistency() will default to applying all possible
        checks. Calling programs must invoke
        SBMLDocument.setConsistencyChecks() for each such new model if they
        wish to change the consistency checks applied.

        Parameter 'category' is a value drawn from the set of SBML error
        categories indicating the consistency checking/validation to be turned
        on or off.

        Parameter 'apply' is a boolean indicating whether the checks indicated
        by 'category' should be applied or not.

        See also SBMLDocument.setLevelAndVersion().

        """
        return _libsbml.SBMLDocument_setConsistencyChecksForConversion(self, *args)

    def checkConsistency(self):
        """
        checkConsistency(self) -> unsigned int

        Performs consistency checking and validation on this SBML document.

        If this method returns a nonzero value (meaning, one or more
        consistency checks have failed for SBML document), the failures may be
        due to warnings or errors.  Callers should inspect the severity flag
        in the individual SBMLError objects returned by
        SBMLDocument.getError() to determine the nature of the failures.

        Returns the number of failed checks (errors) encountered.

        See also SBMLDocument.checkInternalConsistency().

        """
        return _libsbml.SBMLDocument_checkConsistency(self)

    def validateSBML(self):
        """
        validateSBML(self) -> unsigned int

        Performs consistency checking and validation on this SBML document.

        If this method returns a nonzero value (meaning, one or more
        consistency checks have failed for SBML document), the failures may be
        due to warnings or errors.  Callers should inspect the severity flag
        in the individual SBMLError objects returned by
        SBMLDocument.getError() to determine the nature of the failures.

        Note:

        unlike checkConsistency this method will write the document in order
        to determine all errors for the document. This will  also clear the
        error log.

        Returns the number of failed checks (errors) encountered.

        See also SBMLDocument.checkConsistency().

        """
        return _libsbml.SBMLDocument_validateSBML(self)

    def checkInternalConsistency(self):
        """
        checkInternalConsistency(self) -> unsigned int

        Performs consistency checking on libSBML's internal representation of
        an SBML Model.

        Callers should query the results of the consistency check by calling
        SBMLDocument.getError().

        Returns the number of failed checks (errors) encountered.

        The distinction between this method and
        SBMLDocument.checkConsistency() is that this method reports on
        fundamental syntactic and structural errors that violate the XML
        Schema for SBML; by contrast, SBMLDocument.checkConsistency() performs
        more elaborate model verifications and also validation according to
        the validation rules written in the appendices of the SBML Level 2
        Versions 2-4 specification documents.

        See also SBMLDocument.checkConsistency().

        """
        return _libsbml.SBMLDocument_checkInternalConsistency(self)

    def checkL1Compatibility(self):
        """
        checkL1Compatibility(self) -> unsigned int

        Performs a set of consistency checks on the document to establish
        whether it is compatible with SBML Level 1 and can be converted to
        Level 1.

        Callers should query the results of the consistency check by calling
        SBMLDocument.getError().

        Returns the number of failed checks (errors) encountered.

        """
        return _libsbml.SBMLDocument_checkL1Compatibility(self)

    def checkL2v1Compatibility(self):
        """
        checkL2v1Compatibility(self) -> unsigned int

        Performs a set of consistency checks on the document to establish
        whether it is compatible with SBML Level 2 Version 1 and can be
        converted to Level 2 Version 1.

        Callers should query the results of the consistency check by calling
        SBMLDocument.getError().

        Returns the number of failed checks (errors) encountered.

        """
        return _libsbml.SBMLDocument_checkL2v1Compatibility(self)

    def checkL2v2Compatibility(self):
        """
        checkL2v2Compatibility(self) -> unsigned int

        Performs a set of consistency checks on the document to establish
        whether it is compatible with SBML Level 2 Version 2 and can be
        converted to Level 2 Version 2.

        Callers should query the results of the consistency check by calling
        SBMLDocument.getError().

        Returns the number of failed checks (errors) encountered.

        """
        return _libsbml.SBMLDocument_checkL2v2Compatibility(self)

    def checkL2v3Compatibility(self):
        """
        checkL2v3Compatibility(self) -> unsigned int

        Performs a set of consistency checks on the document to establish
        whether it is compatible with SBML Level 2 Version 3 and can be
        converted to Level 2 Version 3.

        Callers should query the results of the consistency check by calling
        SBMLDocument.getError().

        Returns the number of failed checks (errors) encountered.

        """
        return _libsbml.SBMLDocument_checkL2v3Compatibility(self)

    def checkL2v4Compatibility(self):
        """
        checkL2v4Compatibility(self) -> unsigned int

        Performs a set of consistency checks on the document to establish
        whether it is compatible with SBML Level 2 Version 4 and can be
        converted to Level 2 Version 4.

        Callers should query the results of the consistency check by calling
        SBMLDocument.getError().

        Returns the number of failed checks (errors) encountered.

        """
        return _libsbml.SBMLDocument_checkL2v4Compatibility(self)

    def checkL3v1Compatibility(self):
        """
        checkL3v1Compatibility(self) -> unsigned int

        Performs a set of consistency checks on the document to establish
        whether it is compatible with SBML Level 3 Version 1 and can be
        converted to Level 3 Version 1.

        Callers should query the results of the consistency check by calling
        SBMLDocument.getError().

        Returns the number of failed checks (errors) encountered.

        """
        return _libsbml.SBMLDocument_checkL3v1Compatibility(self)

    def getError(self, *args):
        """
        getError(self, unsigned int n) -> SBMLError

        Returns the nth error or warning encountered during parsing,
        consistency checking, or attempted translation of this model.

        Callers can use method XMLError.getSeverity() on the result to assess
        the severity of the problem.  The possible severity levels range from
        informational messages to fatal errors.

        Returns the error or warning indexed by integer 'n', or return None if
        n > (getNumErrors() - 1).

        Parameter 'n' is the integer index of the error sought.

        See also SBMLDocument.getNumErrors().

        """
        return _libsbml.SBMLDocument_getError(self, *args)

    def getNumErrors(self, *args):
        """
        getNumErrors(self) -> unsigned int
        getNumErrors(self, unsigned int severity) -> unsigned int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getNumErrors(long severity)

        Returns the number of errors or warnings encountered with the given
        severity during parsing, consistency checking, or attempted
        translation of this model.

        Parameter 'severity' is the severity of the error sought.

        Returns the number of errors or warnings encountered

        See also SBMLDocument.getError(), SBMLDocument.getError().

        """
        return _libsbml.SBMLDocument_getNumErrors(self, *args)

    def printErrors(self, *args):
        """
        printErrors(self, ostream stream = cerr)
        printErrors(self)

        Prints all the errors or warnings encountered trying to parse, check,
        or translate this SBML document.

        It prints the text to the stream given by the optional parameter
        'stream'.  If no parameter is given, it prints the output to the
        standard error stream.

        If no errors have occurred, i.e., getNumErrors() == 0, no output will
        be sent to the stream.

        The format of the output is:

             N error(s):
               line NNN: (id) message

        Parameter 'stream' is the ostream or ostringstream object indicating
        where the output should be printed.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        See also SBMLDocument.getError().

        """
        return _libsbml.SBMLDocument_printErrors(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_connectToChild(self)

    def convert(self, *args):
        """
        convert(self, ConversionProperties props) -> int

        Converts this document using the converter that best matches the given
        conversion properties.

        Parameter 'props' is the conversion properties to use

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_CONV_CONVERSION_NOT_AVAILABLE

        """
        return _libsbml.SBMLDocument_convert(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_enablePackageInternal(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_DOCUMENT
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.SBMLDocument_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for SBMLDocument,
        is always 'sbml'.

        Returns the name of this element, i.e., 'sbml'.

        """
        return _libsbml.SBMLDocument_getElementName(self)

    def getErrorLog(self, *args):
        """
        getErrorLog(self) -> SBMLErrorLog
        getErrorLog(self) -> SBMLErrorLog

        Returns the list of errors or warnings logged during parsing,
        consistency checking, or attempted translation of this model.

        Returns the SBMLErrorLog used for this SBMLDocument

        See also SBMLDocument.getNumErrors().

        """
        return _libsbml.SBMLDocument_getErrorLog(self, *args)

    def getNamespaces(self):
        """
        getNamespaces(self) -> XMLNamespaces

        Returns a list of XML Namespaces associated with the XML content of
        this SBML document.

        Returns the XML Namespaces associated with this SBML object

        """
        return _libsbml.SBMLDocument_getNamespaces(self)

    def enableDefaultNS(self, *args):
        """
        enableDefaultNS(self, string package, bool flag) -> int

        Set/unset default namespace to each top-level element defined in the
        given package extension.

        This works by adding a xmlns="..." attribute.  No prefix will be
        written when writing elements defined in the given package extension
        if True is given as second argument.

        Parameter 'package' is the name or URI of the package extension.
        Parameter 'flag' is boolean value to indicate whether to write a
        namespace prefix.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_PKG_UNKNOWN_VERSION

        """
        return _libsbml.SBMLDocument_enableDefaultNS(self, *args)

    def isEnabledDefaultNS(self, *args):
        """
        isEnabledDefaultNS(self, string package) -> bool

        Returns True if a default namespace is added to each top-level element
        defined in the given package extension, otherwise returns False.

        This basically checks if the attribute xmlns="..." is present.

        Parameter 'package' is the name or URI of the package extension.

        Returns a boolean

        """
        return _libsbml.SBMLDocument_isEnabledDefaultNS(self, *args)

    def setPackageRequired(self, *args):
        """
        setPackageRequired(self, string package, bool flag) -> int

        Sets the required attribute value of the given package extension.

        Note:

        The name of package must not be given if the package is not enabled.

        Parameter 'package' is the name or URI of the package extension.
        Parameter 'flag' is Boolean value indicating whether the package is
        required.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_PKG_UNKNOWN_VERSION

        """
        return _libsbml.SBMLDocument_setPackageRequired(self, *args)

    def getPackageRequired(self, *args):
        """
        getPackageRequired(self, string package) -> bool

        Returns the required attribute of the given package extension.

        Note:

        The name of package must not be given if the package is not enabled.

        Parameter 'package' is the name or URI of the package extension.

        Returns Boolean flag indicating whether the package is flagged as
        being required.

        """
        return _libsbml.SBMLDocument_getPackageRequired(self, *args)

    def isSetPackageRequired(self, *args):
        """
        isSetPackageRequired(self, string package) -> bool

        Returns True if the required attribute of the given package extension
        is defined, otherwise returns False.

        Note:

        The name of package must not be given if the package is not enabled.

        Parameter 'package' is the name or URI of the package extension.

        Returns a Boolean

        """
        return _libsbml.SBMLDocument_isSetPackageRequired(self, *args)

    def isIgnoredPackage(self, *args):
        """
        isIgnoredPackage(self, string pkgURI) -> bool

        Returns True if the given package extension is one of an ignored
        packages, otherwise returns False.

        An ignored package is one that is defined to be used in this SBML
        document, but the package is not enabled in this copy of libSBML.

        Parameter 'pkgURI' is the URI of the package extension.

        Returns a Boolean, True if the package is being ignored and False
        otherwise.

        """
        return _libsbml.SBMLDocument_isIgnoredPackage(self, *args)

    def isDisabledIgnoredPackage(self, *args):
        """
        isDisabledIgnoredPackage(self, string pkgURI) -> bool

        Returns True if the given package extension is one of an ignored
        packages that has been disabled, otherwise returns False.

        An ignored package is one that is defined to be used in this SBML
        document, but the package is not enabled in this copy of libSBML. It
        may have been disabled to avoid reproducing the package information
        when writing out the file.

        Parameter 'pkgURI' is the URI of the package extension.

        Returns a Boolean, True if the package is being ignored and False
        otherwise.

        """
        return _libsbml.SBMLDocument_isDisabledIgnoredPackage(self, *args)

    def setPkgRequired(self, *args):
        """
        setPkgRequired(self, string package, bool flag) -> int

        Sets the value of the required attribute for the given package.

        Note:

        The name of package must not be given if the package is not enabled.

        Parameter 'package' is the name or URI of the package extension.
        Parameter 'flag' is a Boolean value.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_PKG_UNKNOWN_VERSION

        DEPRECATED. Replaced in libSBML 5.2.0 by setPackageRequired()

        """
        return _libsbml.SBMLDocument_setPkgRequired(self, *args)

    def getPkgRequired(self, *args):
        """
        getPkgRequired(self, string package) -> bool

        Returns the required attribute of the given package extension.

        Note:

        The name of package must not be given if the package is not enabled.

        Parameter 'package' is the name or URI of the package extension.

        Returns a Boolean value indicating whether the package is flagged as
        being required in this SBML document.

        DEPRECATED. Replaced in libSBML 5.2.0 by getPackageRequired()

        """
        return _libsbml.SBMLDocument_getPkgRequired(self, *args)

    def isSetPkgRequired(self, *args):
        """
        isSetPkgRequired(self, string package) -> bool

        Returns True if the required attribute of the given package extension
        is defined, otherwise returns False.

        Note:

        The name of package must not be given if the package is not enabled.

        Parameter 'package' is the name or URI of the package extension.

        Returns a Boolean value.

        DEPRECATED. Replaced in libSBML 5.2.0 by isSetPackageRequired()

        """
        return _libsbml.SBMLDocument_isSetPkgRequired(self, *args)

    def isIgnoredPkg(self, *args):
        """
        isIgnoredPkg(self, string pkgURI) -> bool

        Returns True if the given package extension is one of ignored
        packages, otherwise returns False.

        An ignored package is one that is defined to be used in this SBML
        document, but the package is not enabled in this copy of libSBML.

        Parameter 'pkgURI' is the URI of the package extension.

        Returns a boolean

        DEPRECATED. Replaced in libSBML 5.2.0 by isIgnoredPackage()

        """
        return _libsbml.SBMLDocument_isIgnoredPkg(self, *args)

    def getApplicableValidators(self):
        """
        getApplicableValidators(self) -> unsigned char

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_getApplicableValidators(self)

    def getConversionValidators(self):
        """
        getConversionValidators(self) -> unsigned char

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_getConversionValidators(self)

    def setApplicableValidators(self, *args):
        """
        setApplicableValidators(self, unsigned char appl)

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_setApplicableValidators(self, *args)

    def setConversionValidators(self, *args):
        """
        setConversionValidators(self, unsigned char appl)

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_setConversionValidators(self, *args)

    def getNumValidators(self):
        """
        getNumValidators(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_getNumValidators(self)

    def clearValidators(self):
        """
        clearValidators(self) -> int

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_clearValidators(self)

    def addValidator(self, *args):
        """
        addValidator(self, SBMLValidator validator) -> int

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_addValidator(self, *args)

    def getValidator(self, *args):
        """
        getValidator(self, unsigned int index) -> SBMLValidator

        Internal implementation method.

        """
        return _libsbml.SBMLDocument_getValidator(self, *args)

SBMLDocument_swigregister = _libsbml.SBMLDocument_swigregister
SBMLDocument_swigregister(SBMLDocument)

def SBMLDocument_getDefaultLevel():
  """
    SBMLDocument_getDefaultLevel() -> unsigned int

    The default SBML Level of new SBMLDocument objects.

    @par This 'default Level' corresponds to the most recent SBML
    specification Level available at the time libSBML version 5.10.1 was
    released.  The default Level is used by SBMLDocument if no Level is
    explicitly specified at the time of the construction of an
    SBMLDocument instance.

    Returns an integer indicating the most recent SBML specification Level

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SBMLDocument.getDefaultVersion()

    """
  return _libsbml.SBMLDocument_getDefaultLevel()

def SBMLDocument_getDefaultVersion():
  """
    SBMLDocument_getDefaultVersion() -> unsigned int

    The default Version of new SBMLDocument objects.

    @par This 'default Version' corresponds to the most recent Version
    within the most recent Level of SBML available at the time libSBML
    version 5.10.1 was released.  The default Version is used by
    SBMLDocument if no Version is explicitly specified at the time of the
    construction of an SBMLDocument instance.

    Returns an integer indicating the most recent SBML specification
    Version

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SBMLDocument.getDefaultLevel()

    """
  return _libsbml.SBMLDocument_getDefaultVersion()

class FunctionDefinition(SBase):
    """
    Implementation of SBML's FunctionDefinition construct.

    The FunctionDefinition structure associates an identifier with a
    function definition.  This identifier can then be used as the function
    called in subsequent MathML content elsewhere in an SBML model.

    FunctionDefinition has one required attribute, 'id', to give the
    function a unique identifier by which other parts of an SBML model
    definition can refer to it.  A FunctionDefinition instance can also
    have an optional 'name' attribute of type string.  Identifiers and
    names must be used according to the guidelines described in the SBML
    specification (e.g., Section 3.3 in the Level 2 Version 4
    specification).

    FunctionDefinition has a required 'math' subelement containing a
    MathML expression defining the function body.  The content of this
    element can only be a MathML 'lambda' element.  The 'lambda' element
    must begin with zero or more 'bvar' elements, followed by any other of
    the elements in the MathML subset allowed in SBML Level 2 except
    'lambda' (i.e., a 'lambda' element cannot contain another 'lambda'
    element).  This is the only place in SBML where a 'lambda' element can
    be used.  The function defined by a FunctionDefinition is only
    available for use in other MathML elements that follow the
    FunctionDefinition definition in the model.  (These restrictions
    prevent recursive and mutually-recursive functions from being
    expressed.)

    A further restriction on the content of 'math' is that it cannot
    contain references to variables other than the variables declared to
    the 'lambda' itself.  That is, the contents of MathML 'ci' elements
    inside the body of the 'lambda' can only be the variables declared by
    its 'bvar' elements, or the identifiers of other FunctionDefinition
    instances in the model.  This means must be written so that all
    variables or parameters used in the MathML content are passed to them
    via their function parameters.  In SBML Level 2, this restriction
    applies also to the MathML csymbol elements for time and delay; in
    SBML Level 3, it additionally applies to the csymbol element for
    avogadro.

    Note:

    Function definitions (also informally known as user-defined functions)
    were introduced in SBML Level 2.  They have purposefully limited
    capabilities.  A function cannot reference parameters or other model
    quantities outside of itself; values must be passed as parameters to
    the function.  Moreover, recursive and mutually-recursive functions
    are not permitted.  The purpose of these limitations is to balance
    power against complexity of implementation.  With the restrictions as
    they are, function definitions could be implemented as textual
    substitutions -- they are simply macros.  Software implementations
    therefore do not need the full function-definition machinery typically
    associated with programming languages.

    Another important point to note is FunctionDefinition does not have a
    separate attribute for defining the units of the value returned by the
    function.  The units associated with the function's return value, when
    the function is called from within MathML expressions elsewhere in
    SBML, are simply the overall units of the expression in
    FunctionDefinition's 'math' subelement when applied to the arguments
    supplied in the call to the function.  Ascertaining these units
    requires performing dimensional analysis on the expression.  (Readers
    may wonder why there is no attribute.  The reason is that having a
    separate attribute for declaring the units would not only be
    redundant, but also lead to the potential for having conflicting
    information.  In the case of a conflict between the declared units and
    those of the value actually returned by the function, the only logical
    resolution rule would be to assume that the correct units are those of
    the expression anyway.)

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionDefinition, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_FunctionDefinition
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> FunctionDefinition
        __init__(self, SBMLNamespaces sbmlns) -> FunctionDefinition
        __init__(self, FunctionDefinition orig) -> FunctionDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FunctionDefinition(SBMLNamespaces sbmlns)

        Creates a new FunctionDefinition using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            FunctionDefinition(long level, long version)

        Creates a new FunctionDefinition using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        FunctionDefinition

        Parameter 'version' is a long integer, the SBML Version to assign to
        this FunctionDefinition

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            FunctionDefinition(FunctionDefinition orig)

        Copy constructor; creates a copy of this FunctionDefinition.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_FunctionDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> FunctionDefinition

        Creates and returns a deep copy of this FunctionDefinition.

        Returns a (deep) copy of this FunctionDefinition.

        """
        return _libsbml.FunctionDefinition_clone(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this FunctionDefinition.

        Returns the id of this FunctionDefinition.

        """
        return _libsbml.FunctionDefinition_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this FunctionDefinition.

        Returns the name of this FunctionDefinition.

        """
        return _libsbml.FunctionDefinition_getName(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical formula of this FunctionDefinition.

        Returns an ASTNode, the value of the 'math' subelement of this
        FunctionDefinition

        """
        return _libsbml.FunctionDefinition_getMath(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this FunctionDefinition's 'id' attribute
        is set.

        Returns True if the 'id' attribute of this FunctionDefinition is set,
        False otherwise.

        """
        return _libsbml.FunctionDefinition_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this FunctionDefinition's 'name' attribute
        is set.

        Returns True if the 'name' attribute of this FunctionDefinition is
        set, False otherwise.

        """
        return _libsbml.FunctionDefinition_isSetName(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate returning True if this FunctionDefinition's 'math'
        subelement contains a value.

        Returns True if the 'math' for this FunctionDefinition is set, False
        otherwise.

        """
        return _libsbml.FunctionDefinition_isSetMath(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this FunctionDefinition.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        FunctionDefinition

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FunctionDefinition_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this FunctionDefinition.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the FunctionDefinition

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FunctionDefinition_setName(self, *args)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the 'math' subelement of this FunctionDefinition to the Abstract
        Syntax Tree given in 'math'.

        Parameter 'math' is an AST containing the mathematical expression to
        be used as the formula for this FunctionDefinition.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.FunctionDefinition_setMath(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this FunctionDefinition.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FunctionDefinition_unsetName(self)

    def getArgument(self, *args):
        """
        getArgument(self, unsigned int n) -> ASTNode
        getArgument(self, string name) -> ASTNode

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getArgument(long n)

        Get the nth argument to this function.

        Callers should first find out the number of arguments to the function
        by calling getNumArguments().

        Parameter 'n' is an integer index for the argument sought.

        Returns the nth argument (bound variable) passed to this
        FunctionDefinition.

        See also getNumArguments().

        @par <hr> Method variant with the following signature:

            getArgument(string name)

        Get the argument named 'name' to this FunctionDefinition.

        Parameter 'name' is the exact name (case-sensitive) of the sought-
        after argument

        Returns the argument (bound variable) having the given name, or None
        if no such argument exists.

        """
        return _libsbml.FunctionDefinition_getArgument(self, *args)

    def getBody(self, *args):
        """
        getBody(self) -> ASTNode
        getBody(self) -> ASTNode

        Get the mathematical expression that is the body of this
        FunctionDefinition object.

        Returns the body of this FunctionDefinition as an Abstract Syntax
        Tree, or None if no body is defined.

        """
        return _libsbml.FunctionDefinition_getBody(self, *args)

    def isSetBody(self):
        """
        isSetBody(self) -> bool

        Predicate returning True if the body of this FunctionDefinition has
        set.

        Returns True if the body of this FunctionDefinition is  set, False
        otherwise.

        """
        return _libsbml.FunctionDefinition_isSetBody(self)

    def getNumArguments(self):
        """
        getNumArguments(self) -> unsigned int

        Get the number of arguments (bound variables) taken by this
        FunctionDefinition.

        Returns the number of arguments (bound variables) that must be passed
        to this FunctionDefinition.

        """
        return _libsbml.FunctionDefinition_getNumArguments(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_FUNCTION_DEFINITION (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.FunctionDefinition_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        FunctionDefinition, is always 'functionDefinition'.

        Returns the name of this element, i.e., 'functionDefinition'.

        """
        return _libsbml.FunctionDefinition_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        FunctionDefinition object have been set.

        The required attributes for a FunctionDefinition object are:

           * 'id'

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.FunctionDefinition_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        FunctionDefinition object have been set.

        Note:

        The required elements for a FunctionDefinition object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.FunctionDefinition_hasRequiredElements(self)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Renames all the UnitSIdRef attributes on this element.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the unit identifiers to the value of 'oldid'.  If any matches are
        found, the matching identifiers are replaced with 'newid'.  The method
        does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.FunctionDefinition_renameUnitSIdRefs(self, *args)

FunctionDefinition_swigregister = _libsbml.FunctionDefinition_swigregister
FunctionDefinition_swigregister(FunctionDefinition)

class ListOfFunctionDefinitions(ListOf):
    """
    Implementation of SBML's ListOfFunctionDefinitions construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfFunctionDefinitions, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfFunctionDefinitions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfFunctionDefinitions
        __init__(self, SBMLNamespaces sbmlns) -> ListOfFunctionDefinitions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfFunctionDefinitions(SBMLNamespaces sbmlns)

        Creates a new ListOfFunctionDefinitions object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfFunctionDefinitions object
        to be created.

        @par <hr> Method variant with the following signature:

            ListOfFunctionDefinitions(long level, long version)

        Creates a new ListOfFunctionDefinitions object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfFunctionDefinitions(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfFunctionDefinitions

        Creates and returns a deep copy of this ListOfFunctionDefinitions
        instance.

        Returns a (deep) copy of this ListOfFunctionDefinitions.

        """
        return _libsbml.ListOfFunctionDefinitions_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., FunctionDefinition objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf:
        libsbml.SBML_FUNCTION_DEFINITION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfFunctionDefinitions_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfFunctionDefinitions, the XML element name is
        'listOfFunctionDefinitions'.

        Returns the name of this element, i.e., 'listOfFunctionDefinitions'.

        """
        return _libsbml.ListOfFunctionDefinitions_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> FunctionDefinition
        get(self, unsigned int n) -> FunctionDefinition
        get(self, string sid) -> FunctionDefinition
        get(self, string sid) -> FunctionDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a FunctionDefinition from the ListOfFunctionDefinitions.

        Parameter 'n' is the index number of the FunctionDefinition to get.

        Returns the nth FunctionDefinition in this ListOfFunctionDefinitions.

        See also size(), size().

        """
        return _libsbml.ListOfFunctionDefinitions_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> FunctionDefinition
        remove(self, string sid) -> FunctionDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfFunctionDefinitions items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfFunctionDefinitions items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfFunctionDefinitions_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfFunctionDefinitions
    __del__ = lambda self : None;
ListOfFunctionDefinitions_swigregister = _libsbml.ListOfFunctionDefinitions_swigregister
ListOfFunctionDefinitions_swigregister(ListOfFunctionDefinitions)

UNIT_KIND_AMPERE = _libsbml.UNIT_KIND_AMPERE
UNIT_KIND_AVOGADRO = _libsbml.UNIT_KIND_AVOGADRO
UNIT_KIND_BECQUEREL = _libsbml.UNIT_KIND_BECQUEREL
UNIT_KIND_CANDELA = _libsbml.UNIT_KIND_CANDELA
UNIT_KIND_CELSIUS = _libsbml.UNIT_KIND_CELSIUS
UNIT_KIND_COULOMB = _libsbml.UNIT_KIND_COULOMB
UNIT_KIND_DIMENSIONLESS = _libsbml.UNIT_KIND_DIMENSIONLESS
UNIT_KIND_FARAD = _libsbml.UNIT_KIND_FARAD
UNIT_KIND_GRAM = _libsbml.UNIT_KIND_GRAM
UNIT_KIND_GRAY = _libsbml.UNIT_KIND_GRAY
UNIT_KIND_HENRY = _libsbml.UNIT_KIND_HENRY
UNIT_KIND_HERTZ = _libsbml.UNIT_KIND_HERTZ
UNIT_KIND_ITEM = _libsbml.UNIT_KIND_ITEM
UNIT_KIND_JOULE = _libsbml.UNIT_KIND_JOULE
UNIT_KIND_KATAL = _libsbml.UNIT_KIND_KATAL
UNIT_KIND_KELVIN = _libsbml.UNIT_KIND_KELVIN
UNIT_KIND_KILOGRAM = _libsbml.UNIT_KIND_KILOGRAM
UNIT_KIND_LITER = _libsbml.UNIT_KIND_LITER
UNIT_KIND_LITRE = _libsbml.UNIT_KIND_LITRE
UNIT_KIND_LUMEN = _libsbml.UNIT_KIND_LUMEN
UNIT_KIND_LUX = _libsbml.UNIT_KIND_LUX
UNIT_KIND_METER = _libsbml.UNIT_KIND_METER
UNIT_KIND_METRE = _libsbml.UNIT_KIND_METRE
UNIT_KIND_MOLE = _libsbml.UNIT_KIND_MOLE
UNIT_KIND_NEWTON = _libsbml.UNIT_KIND_NEWTON
UNIT_KIND_OHM = _libsbml.UNIT_KIND_OHM
UNIT_KIND_PASCAL = _libsbml.UNIT_KIND_PASCAL
UNIT_KIND_RADIAN = _libsbml.UNIT_KIND_RADIAN
UNIT_KIND_SECOND = _libsbml.UNIT_KIND_SECOND
UNIT_KIND_SIEMENS = _libsbml.UNIT_KIND_SIEMENS
UNIT_KIND_SIEVERT = _libsbml.UNIT_KIND_SIEVERT
UNIT_KIND_STERADIAN = _libsbml.UNIT_KIND_STERADIAN
UNIT_KIND_TESLA = _libsbml.UNIT_KIND_TESLA
UNIT_KIND_VOLT = _libsbml.UNIT_KIND_VOLT
UNIT_KIND_WATT = _libsbml.UNIT_KIND_WATT
UNIT_KIND_WEBER = _libsbml.UNIT_KIND_WEBER
UNIT_KIND_INVALID = _libsbml.UNIT_KIND_INVALID

def UnitKind_equals(*args):
  """
    UnitKind_equals(UnitKind_t uk1, UnitKind_t uk2) -> int

    Tests for logical equality between two given UNIT_KIND_ code values.

    This function behaves exactly like C's == operator, except for the
    following two cases:

    * libsbml.UNIT_KIND_LITER == libsbml.UNIT_KIND_LITRE

       * libsbml.UNIT_KIND_METER == libsbml.UNIT_KIND_METRE In the two
    cases above, C equality comparison would yield False (because each of
    the above is a distinct enumeration value), but this function returns
    True.

    Parameter 'uk1' is a UNIT_KIND_ value  Parameter 'uk2' is a second
    UNIT_KIND_ value to compare to 'uk1'

    Returns nonzero (for True) if 'uk1' is logically equivalent to 'uk2',
    zero (for False) otherwise.

    Note:

    For more information about the libSBML unit codes, please refer to the
    class documentation for Unit.

    """
  return _libsbml.UnitKind_equals(*args)

def UnitKind_forName(*args):
  """
    UnitKind_forName(char name) -> UnitKind_t

    Converts a text string naming a kind of unit to its corresponding
    libSBML UNIT_KIND_ constant/enumeration value.

    Parameter 'name' is a string, the name of a predefined base unit in
    SBML

    Returns a value the set of UNIT_KIND_ codes defined in class libsbml,
    corresponding to the string 'name' (determined in a case-insensitive
    manner).

    Note:

    For more information about the libSBML unit codes, please refer to the
    class documentation for Unit.

    """
  return _libsbml.UnitKind_forName(*args)

def UnitKind_toString(*args):
  """
    UnitKind_toString(UnitKind_t uk) -> char

    Converts a unit code to a text string equivalent.

    Parameter 'uk' is a value from the set of UNIT_KIND_ codes defined in
    the class libsbml

     Returns the name corresponding to the given unit code.

    Note:

    For more information about the libSBML unit codes, please refer to the
    class documentation for Unit.

    WARNING:

    The string returned is a static data value.  The caller does not own
    the returned string and is therefore not allowed to modify it.

    """
  return _libsbml.UnitKind_toString(*args)

def UnitKind_isValidUnitKindString(*args):
  """
    UnitKind_isValidUnitKindString(char str, unsigned int level, unsigned int version) -> int

    Predicate for testing whether a given string corresponds to a
    predefined libSBML unit code.

    Parameter 'str' is a text string naming a base unit defined by SBML
    Parameter 'level' is the Level of SBML Parameter 'version' is the
    Version within the Level of SBML

    Returns nonzero (for True) if string is the name of a valid UNIT_KIND_
    value, zero (for False) otherwise.

    Note:

    For more information about the libSBML unit codes, please refer to the
    class documentation for Unit.

    """
  return _libsbml.UnitKind_isValidUnitKindString(*args)
class Unit(SBase):
    """
    Implementation of SBML's Unit construct.

    The SBML unit definition facility uses two classes of objects,
    UnitDefinition and Unit.  The approach to defining units in SBML is
    compositional; for example, meter second^-2 is constructed by
    combining a Unit object representing meter with another Unit object
    representing second^-2. The combination is wrapped inside a
    UnitDefinition, which provides for assigning an identifier and
    optional name to the combination.  The identifier can then be
    referenced from elsewhere in a model.  Thus, the UnitDefinition class
    is the container, and Unit instances are placed inside UnitDefinition
    instances.

    A Unit has four attributes named 'kind', 'exponent', 'scale' and
    'multiplier'.  It represents a (possibly transformed) reference to a
    base unit.  The attribute 'kind' on Unit indicates the chosen base
    unit. Its value must be one of the text strings listed below; this
    list corresponds to SBML Level 3 Version 1 Core:

    @par

      ampere         farad  joule     lux     radian     volt   
      avogadro       gram   katal     metre   second     watt   
      becquerel      gray   kelvin    mole    siemens    weber  
      candela        henry  kilogram  newton  sievert           
      coulomb        hertz  litre     ohm     steradian         
      dimensionless  item   lumen     pascal  tesla

      A few small differences exist between the Level 3 list of base units
    and the list defined in other Level/Version combinations of SBML.
    Specifically, Levels of SBML before Level 3 do not define avogadro;
    conversely, Level 2 Version 1 defines Celsius, and Level 1 defines
    celsius, meter, and liter, none of which are available in Level 3.  In
    libSBML, each of the predefined base unit names is represented by an
    enumeration value whose name begins with the characters UNIT_KIND_,
    discussed in a separate section below.

    The attribute named 'exponent' on Unit represents an exponent on the
    unit.  In SBML Level 2, the attribute is optional and has a default
    value of 1 (one); in SBML Level 3, the attribute is mandatory and
    there is no default value.  A Unit also has an attribute called
    'scale'; its value must be an integer exponent for a power-of-ten
    multiplier used to set the scale of the unit.  For example, a unit
    having a 'kind' value of gram and a 'scale' value of -3 signifies
    10^-3 * gram, or milligrams.  In SBML Level 2, the attribute is
    optional and has a default value of 0 (zero), because 10^0 = 1; in
    SBML Level 3, the attribute is mandatory and has no default value.
    Lastly, the attribute named 'multiplier' can be used to multiply the
    unit by a real-numbered factor; this enables the definition of units
    that are not power-of-ten multiples of SI units.  For instance, a
    multiplier of 0.3048 could be used to define foot as a measure of
    length in terms of a metre.  The 'multiplier' attribute is optional in
    SBML Level 2, where it has a default value of 1 (one); in SBML Level
    3, the attribute is mandatory and has not default value.

    Unit identification codes
    ......................................................................

     As discussed above, SBML defines a set of base units which serves as
    the starting point for new unit definitions.  This set of base units
    consists of the SI units and a small number of additional convenience
    units.

    In SBML Level 2 Versions before Version 3, there existed an
    enumeration of units called UnitKind.  In Version 3, this enumeration
    was removed and the identifier class UnitSId redefined to include the
    previous UnitKind values as reserved symbols.  This change has no net
    effect on permissible models, their representation or their syntax.
    The purpose of the change in the SBML specification was simply to
    clean up an inconsistency about the contexts in which these values
    were usable. However, libSBML maintains UnitKind in the form of of a
    set of static integer constants whose names begin with the characters
    UNIT_KIND_.  These constants are defined in the class libsbml.

     As a consequence of the fact that libSBML supports models in all
    Levels and Versions of SBML, libSBML's set of UNIT_KIND_ values is a
    union of all the possible base unit names defined in the different
    SBML specifications.  However, not every base unit is allowed in every
    Level+Version combination of SBML.  Note in particular the following
    exceptions:

    * The alternate spelling 'meter' is included in addition to the
    official SI spelling 'metre'.  This spelling is only permitted in SBML
    Level 1 models.

    * The alternate spelling 'liter' is included in addition to the
    official SI spelling 'litre'.  This spelling is only permitted in SBML
    Level 1 models.

    * The unit 'Celsius' is included because of its presence in
    specifications of SBML prior to SBML Level 2 Version 3.

    * The unit avogadro was introduced in SBML Level 3, and is only
    permitted for use in SBML Level 3 models. The table below lists the
    unit constants defined in libSBML, and their meanings.

      Enumerator              Meaning
      ---------               ---------
      UNIT_KIND_AMPERE        The ampere unit.
      UNIT_KIND_AVOGADRO      'dimensionless' multiplied by the value of Avogadro's constant.
      UNIT_KIND_BECQUEREL     The becquerel unit.
      UNIT_KIND_CANDELA       The candela unit.
      UNIT_KIND_CELSIUS       The Celsius unit. 
      UNIT_KIND_COULOMB       The coulomb unit.
      UNIT_KIND_DIMENSIONLESS A pseudo-unit indicating a dimensionless quantity.
      UNIT_KIND_FARAD         The farad unit.
      UNIT_KIND_GRAM          The gram unit.
      UNIT_KIND_GRAY          The gray unit.
      UNIT_KIND_HENRY         The henry unit.
      UNIT_KIND_HERTZ         The hertz unit.
      UNIT_KIND_ITEM          A pseudo-unit representing a single "thing".
      UNIT_KIND_JOULE         The joule unit.
      UNIT_KIND_KATAL         The katal unit.
      UNIT_KIND_KELVIN        The kelvin unit.
      UNIT_KIND_KILOGRAM      The kilogram unit.
      UNIT_KIND_LITER         Alternate spelling of litre.
      UNIT_KIND_LITRE         The litre unit.
      UNIT_KIND_LUMEN         The lumen unit.
      UNIT_KIND_LUX           The lux unit.
      UNIT_KIND_METER         Alternate spelling of metre.
      UNIT_KIND_METRE         The metre unit.
      UNIT_KIND_MOLE          The mole unit.
      UNIT_KIND_NEWTON        The newton unit.
      UNIT_KIND_OHM           The ohm unit.
      UNIT_KIND_PASCAL        The pascal unit.
      UNIT_KIND_RADIAN        The radian unit.
      UNIT_KIND_SECOND        The second unit.
      UNIT_KIND_SIEMENS       The siemens unit.
      UNIT_KIND_SIEVERT       The sievert unit.
      UNIT_KIND_STERADIAN     The steradian unit.
      UNIT_KIND_TESLA         The tesla unit.
      UNIT_KIND_VOLT          The volt unit.
      UNIT_KIND_WATT          The watt unit.
      UNIT_KIND_WEBER         The weber unit.
      UNIT_KIND_INVALID       Marker used by libSBML to indicate an invalid or unset unit.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unit, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Unit, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Unit
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Unit
        __init__(self, SBMLNamespaces sbmlns) -> Unit
        __init__(self, Unit orig) -> Unit

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Unit(SBMLNamespaces sbmlns)

        Creates a new Unit using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Unit(long level, long version)

        Creates a new Unit using the given SBML 'level' and 'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Unit

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Unit

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Unit(Unit orig)

        Copy constructor; creates a copy of this Unit.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Unit(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Unit

        Creates and returns a deep copy of this Unit.

        Returns a (deep) copy of this Unit.

        """
        return _libsbml.Unit_clone(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Initializes the fields of this Unit object to 'typical' default
        values.

        The SBML Unit component has slightly different aspects and default
        attribute values in different SBML Levels and Versions.  This method
        sets the values to certain common defaults, based mostly on what they
        are in SBML Level 2.  Specifically:

        * Sets attribute 'exponent' to 1

           * Sets attribute 'scale' to 0

           * Sets attribute 'multiplier' to 1.0 The 'kind' attribute is left
        unchanged.

        """
        return _libsbml.Unit_initDefaults(self)

    def getKind(self):
        """
        getKind(self) -> UnitKind_t

        Returns the 'kind' of Unit this is.

        Returns the value of the 'kind' attribute of this Unit as a value from
        the set of constants whose names begin with UNIT_KIND_ defined in the
        class libsbml.

        """
        return _libsbml.Unit_getKind(self)

    def getExponent(self):
        """
        getExponent(self) -> int

        Returns the value of the 'exponent' attribute of this unit.

        Returns the 'exponent' value of this Unit, as an integer.

        """
        return _libsbml.Unit_getExponent(self)

    def getExponentAsDouble(self):
        """
        getExponentAsDouble(self) -> double

        Returns the value of the 'exponent' attribute of this unit.

        Returns the 'exponent' value of this Unit, as a double.

        """
        return _libsbml.Unit_getExponentAsDouble(self)

    def getScale(self):
        """
        getScale(self) -> int

        Returns the value of the 'scale' attribute of this unit.

        Returns the 'scale' value of this Unit, as an integer.

        """
        return _libsbml.Unit_getScale(self)

    def getMultiplier(self):
        """
        getMultiplier(self) -> double

        Returns the value of the 'multiplier' attribute of this Unit.

        Returns the 'multiplier' value of this Unit, as a double.

        """
        return _libsbml.Unit_getMultiplier(self)

    def getOffset(self):
        """
        getOffset(self) -> double

        Returns the value of the 'offset' attribute of this Unit.

        Returns the 'offset' value of this Unit, as a double.

        WARNING:

        The 'offset' attribute is only available in SBML Level 2 Version 1.
        This attribute is not present in SBML Level 2 Version 2 or above.
        When producing SBML models using these later specifications, modelers
        and software tools need to account for units with offsets explicitly.
        The SBML specification document offers a number of suggestions for how
        to achieve this.  LibSBML methods such as this one related to 'offset'
        are retained for compatibility with earlier versions of SBML Level 2,
        but their use is strongly discouraged.

        """
        return _libsbml.Unit_getOffset(self)

    def isAmpere(self):
        """
        isAmpere(self) -> bool

        Predicate for testing whether this Unit is of the kind ampere.

        Returns True if the kind of this Unit is ampere, False otherwise.

        """
        return _libsbml.Unit_isAmpere(self)

    def isAvogadro(self):
        """
        isAvogadro(self) -> bool

        Predicate for testing whether this Unit is of the kind avogadro.

        Returns True if the kind of this Unit is avogadro, False otherwise.

        Note:

        The unit avogadro was introduced in SBML Level 3, and is only
        permitted for use in SBML Level 3 models.

        """
        return _libsbml.Unit_isAvogadro(self)

    def isBecquerel(self):
        """
        isBecquerel(self) -> bool

        Predicate for testing whether this Unit is of the kind becquerel

        Returns True if the kind of this Unit is becquerel, False otherwise.

        """
        return _libsbml.Unit_isBecquerel(self)

    def isCandela(self):
        """
        isCandela(self) -> bool

        Predicate for testing whether this Unit is of the kind candela

        Returns True if the kind of this Unit is candela, False otherwise.

        """
        return _libsbml.Unit_isCandela(self)

    def isCelsius(self):
        """
        isCelsius(self) -> bool

        Predicate for testing whether this Unit is of the kind Celsius

        Returns True if the kind of this Unit is Celsius, False otherwise.

        WARNING:

        The predefined unit Celsius was removed from the list of predefined
        units in SBML Level 2 Version 2 at the same time that the 'offset'
        attribute was removed from Unit definitions.  LibSBML methods such as
        this one related to Celsius are retained in order to support SBML
        Level 2 Version 1, but their use is strongly discouraged.

        """
        return _libsbml.Unit_isCelsius(self)

    def isCoulomb(self):
        """
        isCoulomb(self) -> bool

        Predicate for testing whether this Unit is of the kind coulomb

        Returns True if the kind of this Unit is coulomb, False otherwise.

        """
        return _libsbml.Unit_isCoulomb(self)

    def isDimensionless(self):
        """
        isDimensionless(self) -> bool

        Predicate for testing whether this Unit is of the kind dimensionless.

        Returns True if the kind of this Unit is dimensionless, False

        otherwise.

        """
        return _libsbml.Unit_isDimensionless(self)

    def isFarad(self):
        """
        isFarad(self) -> bool

        Predicate for testing whether this Unit is of the kind farad

        Returns True if the kind of this Unit is farad, False otherwise.

        """
        return _libsbml.Unit_isFarad(self)

    def isGram(self):
        """
        isGram(self) -> bool

        Predicate for testing whether this Unit is of the kind gram

        Returns True if the kind of this Unit is gram, False otherwise.

        """
        return _libsbml.Unit_isGram(self)

    def isGray(self):
        """
        isGray(self) -> bool

        Predicate for testing whether this Unit is of the kind gray

        Returns True if the kind of this Unit is gray, False otherwise.

        """
        return _libsbml.Unit_isGray(self)

    def isHenry(self):
        """
        isHenry(self) -> bool

        Predicate for testing whether this Unit is of the kind henry

        Returns True if the kind of this Unit is henry, False otherwise.

        """
        return _libsbml.Unit_isHenry(self)

    def isHertz(self):
        """
        isHertz(self) -> bool

        Predicate for testing whether this Unit is of the kind hertz

        Returns True if the kind of this Unit is hertz, False otherwise.

        """
        return _libsbml.Unit_isHertz(self)

    def isItem(self):
        """
        isItem(self) -> bool

        Predicate for testing whether this Unit is of the kind item

        Returns True if the kind of this Unit is item, False otherwise.

        """
        return _libsbml.Unit_isItem(self)

    def isJoule(self):
        """
        isJoule(self) -> bool

        Predicate for testing whether this Unit is of the kind joule

        Returns True if the kind of this Unit is joule, False otherwise.

        """
        return _libsbml.Unit_isJoule(self)

    def isKatal(self):
        """
        isKatal(self) -> bool

        Predicate for testing whether this Unit is of the kind katal

        Returns True if the kind of this Unit is katal, False otherwise.

        """
        return _libsbml.Unit_isKatal(self)

    def isKelvin(self):
        """
        isKelvin(self) -> bool

        Predicate for testing whether this Unit is of the kind kelvin

        Returns True if the kind of this Unit is kelvin, False otherwise.

        """
        return _libsbml.Unit_isKelvin(self)

    def isKilogram(self):
        """
        isKilogram(self) -> bool

        Predicate for testing whether this Unit is of the kind kilogram

        Returns True if the kind of this Unit is kilogram, False otherwise.

        """
        return _libsbml.Unit_isKilogram(self)

    def isLitre(self):
        """
        isLitre(self) -> bool

        Predicate for testing whether this Unit is of the kind litre

        Returns True if the kind of this Unit is litre or 'liter', false
        otherwise.

        """
        return _libsbml.Unit_isLitre(self)

    def isLumen(self):
        """
        isLumen(self) -> bool

        Predicate for testing whether this Unit is of the kind lumen

        Returns True if the kind of this Unit is lumen, False otherwise.

        """
        return _libsbml.Unit_isLumen(self)

    def isLux(self):
        """
        isLux(self) -> bool

        Predicate for testing whether this Unit is of the kind lux

        Returns True if the kind of this Unit is lux, False otherwise.

        """
        return _libsbml.Unit_isLux(self)

    def isMetre(self):
        """
        isMetre(self) -> bool

        Predicate for testing whether this Unit is of the kind metre

        Returns True if the kind of this Unit is metre or 'meter', false
        otherwise.

        """
        return _libsbml.Unit_isMetre(self)

    def isMole(self):
        """
        isMole(self) -> bool

        Predicate for testing whether this Unit is of the kind mole

        Returns True if the kind of this Unit is mole, False otherwise.

        """
        return _libsbml.Unit_isMole(self)

    def isNewton(self):
        """
        isNewton(self) -> bool

        Predicate for testing whether this Unit is of the kind newton

        Returns True if the kind of this Unit is newton, False otherwise.

        """
        return _libsbml.Unit_isNewton(self)

    def isOhm(self):
        """
        isOhm(self) -> bool

        Predicate for testing whether this Unit is of the kind ohm

        Returns True if the kind of this Unit is ohm, False otherwise.

        """
        return _libsbml.Unit_isOhm(self)

    def isPascal(self):
        """
        isPascal(self) -> bool

        Predicate for testing whether this Unit is of the kind pascal

        Returns True if the kind of this Unit is pascal, False otherwise.

        """
        return _libsbml.Unit_isPascal(self)

    def isRadian(self):
        """
        isRadian(self) -> bool

        Predicate for testing whether this Unit is of the kind radian

        Returns True if the kind of this Unit is radian, False otherwise.

        """
        return _libsbml.Unit_isRadian(self)

    def isSecond(self):
        """
        isSecond(self) -> bool

        Predicate for testing whether this Unit is of the kind second

        Returns True if the kind of this Unit is second, False otherwise.

        """
        return _libsbml.Unit_isSecond(self)

    def isSiemens(self):
        """
        isSiemens(self) -> bool

        Predicate for testing whether this Unit is of the kind siemens

        Returns True if the kind of this Unit is siemens, False otherwise.

        """
        return _libsbml.Unit_isSiemens(self)

    def isSievert(self):
        """
        isSievert(self) -> bool

        Predicate for testing whether this Unit is of the kind sievert

        Returns True if the kind of this Unit is sievert, False otherwise.

        """
        return _libsbml.Unit_isSievert(self)

    def isSteradian(self):
        """
        isSteradian(self) -> bool

        Predicate for testing whether this Unit is of the kind steradian

        Returns True if the kind of this Unit is steradian, False otherwise.

        """
        return _libsbml.Unit_isSteradian(self)

    def isTesla(self):
        """
        isTesla(self) -> bool

        Predicate for testing whether this Unit is of the kind tesla

        Returns True if the kind of this Unit is tesla, False otherwise.

        """
        return _libsbml.Unit_isTesla(self)

    def isVolt(self):
        """
        isVolt(self) -> bool

        Predicate for testing whether this Unit is of the kind volt

        Returns True if the kind of this Unit is volt, False otherwise.

        """
        return _libsbml.Unit_isVolt(self)

    def isWatt(self):
        """
        isWatt(self) -> bool

        Predicate for testing whether this Unit is of the kind watt

        Returns True if the kind of this Unit is watt, False otherwise.

        """
        return _libsbml.Unit_isWatt(self)

    def isWeber(self):
        """
        isWeber(self) -> bool

        Predicate for testing whether this Unit is of the kind weber

        Returns True if the kind of this Unit is weber, False otherwise.

        """
        return _libsbml.Unit_isWeber(self)

    def isSetKind(self):
        """
        isSetKind(self) -> bool

        Predicate to test whether the 'kind' attribute of this Unit is set.

        Returns True if the 'kind' attribute of this Unit is set, false
        otherwise.

        """
        return _libsbml.Unit_isSetKind(self)

    def isSetExponent(self):
        """
        isSetExponent(self) -> bool

        Predicate to test whether the 'exponent' attribute of this Unit  is
        set.

        Returns True if the 'exponent' attribute of this Unit is set,  False
        otherwise.

        """
        return _libsbml.Unit_isSetExponent(self)

    def isSetScale(self):
        """
        isSetScale(self) -> bool

        Predicate to test whether the 'scale' attribute of this Unit  is set.

        Returns True if the 'scale' attribute of this Unit is set,  False
        otherwise.

        """
        return _libsbml.Unit_isSetScale(self)

    def isSetMultiplier(self):
        """
        isSetMultiplier(self) -> bool

        Predicate to test whether the 'multiplier' attribute of this Unit  is
        set.

        Returns True if the 'multiplier' attribute of this Unit is set,  False
        otherwise.

        """
        return _libsbml.Unit_isSetMultiplier(self)

    def setKind(self, *args):
        """
        setKind(self, UnitKind_t kind) -> int

        Sets the 'kind' attribute value of this Unit.

        Parameter 'kind' is a unit identifier chosen from the set of constants
        whose names begin with UNIT_KIND_ in libsbml.

         Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Unit_setKind(self, *args)

    def setExponent(self, *args):
        """
        setExponent(self, int value) -> int
        setExponent(self, double value) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setExponent(int value)

        Sets the 'exponent' attribute value of this Unit.

        Parameter 'value' is the integer to which the attribute 'exponent'
        should be set

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        @par <hr> Method variant with the following signature:

            setExponent(double value)

        Sets the 'exponent' attribute value of this Unit.

        Parameter 'value' is the double to which the attribute 'exponent'
        should be set

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.Unit_setExponent(self, *args)

    def setScale(self, *args):
        """
        setScale(self, int value) -> int

        Sets the 'scale' attribute value of this Unit.

        Parameter 'value' is the integer to which the attribute 'scale' should
        be set

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.Unit_setScale(self, *args)

    def setMultiplier(self, *args):
        """
        setMultiplier(self, double value) -> int

        Sets the 'multipler' attribute value of this Unit.

        Parameter 'value' is the floating-point value to which the attribute
        'multiplier' should be set

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.Unit_setMultiplier(self, *args)

    def setOffset(self, *args):
        """
        setOffset(self, double value) -> int

        Sets the 'offset' attribute value of this Unit.

        Parameter 'value' is the float-point value to which the attribute
        'offset' should set

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        WARNING:

        The 'offset' attribute is only available in SBML Level 2 Version 1.
        This attribute is not present in SBML Level 2 Version 2 or above.
        When producing SBML models using these later specifications, modelers
        and software tools need to account for units with offsets explicitly.
        The SBML specification document offers a number of suggestions for how
        to achieve this.  LibSBML methods such as this one related to 'offset'
        are retained for compatibility with earlier versions of SBML Level 2,
        but their use is strongly discouraged.

        """
        return _libsbml.Unit_setOffset(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_UNIT
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getElementName().

        """
        return _libsbml.Unit_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Unit, is always
        'unit'.

        Returns the name of this element, i.e., 'unit'.

        """
        return _libsbml.Unit_getElementName(self)

    def isBuiltIn(*args):
        """
        isBuiltIn(string name, unsigned int level) -> bool

        Predicate to test whether a given string is the name of a predefined
        SBML unit.

        Parameter 'name' is a string to be tested against the predefined unit
        names

        Parameter 'level' is the Level of SBML for which the determination
        should be made.  This is necessary because there are a few small
        differences in allowed units between SBML Level 1 and Level 2.

        Returns True if 'name' is one of the five SBML predefined unit
        identifiers ('substance', 'volume', 'area', 'length' or 'time'), False
        otherwise.

        Note:

        The predefined unit identifiers 'length' and 'area' were added in
        Level 2 Version 1.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.Unit_isBuiltIn(*args)

    if _newclass:isBuiltIn = staticmethod(isBuiltIn)
    __swig_getmethods__["isBuiltIn"] = lambda x: isBuiltIn
    def isUnitKind(*args):
        """
        isUnitKind(string name, unsigned int level, unsigned int version) -> bool

        Predicate to test whether a given string is the name of a valid base
        unit in SBML (such as 'gram' or 'mole').

        This method exists because prior to SBML Level 2 Version 3, an
        enumeration called UnitKind was defined by SBML.  This enumeration was
        removed in SBML Level 2 Version 3 and its values were folded into the
        space of values of a type called UnitSId.  This method therefore has
        less significance in SBML Level 2 Version 3 and Level 2 Version 4, but
        remains for backward compatibility and support for reading models in
        older Versions of Level 2.

        Parameter 'name' is a string to be tested

        Parameter 'level' is a long integer representing the SBML
        specification Level

        Parameter 'version' is a long integer representing the SBML
        specification Version

        Returns True if name is a valid SBML UnitKind, False otherwise

        Note:

        The allowed unit names differ between SBML Levels 1 and 2 and again
        slightly between Level 2 Versions 1 and 2.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.Unit_isUnitKind(*args)

    if _newclass:isUnitKind = staticmethod(isUnitKind)
    __swig_getmethods__["isUnitKind"] = lambda x: isUnitKind
    def areIdentical(*args):
        """
        areIdentical(Unit unit1, Unit unit2) -> bool

        Predicate returning True if two Unit objects are identical.

        Two Unit objects are considered to be identical if they match in all
        attributes.  (Contrast this to the method areEquivalent(), which
        compares Unit objects only with respect to certain attributes.)

        Parameter 'unit1' is the first Unit object to compare Parameter
        'unit2' is the second Unit object to compare

        Returns True if all the attributes of unit1 are identical to the
        attributes of unit2, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see Unit.areEquivalent()

        """
        return _libsbml.Unit_areIdentical(*args)

    if _newclass:areIdentical = staticmethod(areIdentical)
    __swig_getmethods__["areIdentical"] = lambda x: areIdentical
    def areEquivalent(*args):
        """
        areEquivalent(Unit unit1, Unit unit2) -> bool

        Predicate returning True if  Unit objects are equivalent.

        Two Unit objects are considered to be equivalent either if (1) both
        have a 'kind' attribute value of dimensionless, or (2) their 'kind',
        'exponent' and (for SBML Level 2 Version 1) 'offset' attribute values
        are equal. (Contrast this to the method areIdentical(), which compares
        Unit objects with respect to all attributes, not just the 'kind' and
        'exponent'.)

        Parameter 'unit1' is the first Unit object to compare Parameter
        'unit2' is the second Unit object to compare

        Returns True if the 'kind' and 'exponent' attributes of unit1 are
        identical to the kind and exponent attributes of unit2, False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see Unit.areIdentical()

        """
        return _libsbml.Unit_areEquivalent(*args)

    if _newclass:areEquivalent = staticmethod(areEquivalent)
    __swig_getmethods__["areEquivalent"] = lambda x: areEquivalent
    def removeScale(*args):
        """
        removeScale(Unit unit) -> int

        Manipulates the attributes of the Unit to express the unit with the
        value of the scale attribute reduced to zero.

        For example, 1 millimetre can be expressed as a Unit with kind='metre'
        multiplier='1' scale='-3' exponent='1'. It can also be expressed as a
        Unit with kind='metre' multiplier='0.001' scale='0' exponent='1'.

        Parameter 'unit' is the Unit object to manipulate.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see Unit.convertToSI()  @see Unit.merge()

        """
        return _libsbml.Unit_removeScale(*args)

    if _newclass:removeScale = staticmethod(removeScale)
    __swig_getmethods__["removeScale"] = lambda x: removeScale
    def merge(*args):
        """
        merge(Unit unit1, Unit unit2)

        Merges two Unit objects with the same 'kind' attribute value into a
        single Unit.

        For example, the following,

           <unit kind='metre' exponent='2'/>
           <unit kind='metre' exponent='1'/>

        would be merged to become

           <unit kind='metre' exponent='3'/>

        Parameter 'unit1' is the first Unit object; the result of the
        operation is left as a new version of this unit, modified in-place.
        Not modified if the two units have different kinds.

        Parameter 'unit2' is the second Unit object to merge with the first

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see Unit.convertToSI()  @see Unit.removeScale()

        """
        return _libsbml.Unit_merge(*args)

    if _newclass:merge = staticmethod(merge)
    __swig_getmethods__["merge"] = lambda x: merge
    def convertToSI(*args):
        """
        convertToSI(Unit unit) -> UnitDefinition

        Returns a UnitDefinition object containing the given 'unit' converted
        to the appropriate SI unit.

        This method exists because some units can be expressed in terms of
        others when the same physical dimension is involved.  For example, one
        hertz is identical to 1 sec^-1, one litre is equivalent to 1 cubic
        decametre, and so on.

        Parameter 'unit' is the Unit object to convert to SI

        Returns a UnitDefinition object containing the SI unit.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see Unit.merge()

        """
        return _libsbml.Unit_convertToSI(*args)

    if _newclass:convertToSI = staticmethod(convertToSI)
    __swig_getmethods__["convertToSI"] = lambda x: convertToSI
    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this Unit
        object have been set.

        The required attributes for a Unit object are:

           * 'kind'

           * 'exponent' (required in SBML Level 3; optional in Level 2)

           * 'multiplier' (required in SBML Level 3; optional in Level 2)

           * 'scale' (required in SBML Level 3; optional in Level 2)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.Unit_hasRequiredAttributes(self)

Unit_swigregister = _libsbml.Unit_swigregister
Unit_swigregister(Unit)

def Unit_isBuiltIn(*args):
  """
    Unit_isBuiltIn(string name, unsigned int level) -> bool

    Predicate to test whether a given string is the name of a predefined
    SBML unit.

    Parameter 'name' is a string to be tested against the predefined unit
    names

    Parameter 'level' is the Level of SBML for which the determination
    should be made.  This is necessary because there are a few small
    differences in allowed units between SBML Level 1 and Level 2.

    Returns True if 'name' is one of the five SBML predefined unit
    identifiers ('substance', 'volume', 'area', 'length' or 'time'), False
    otherwise.

    Note:

    The predefined unit identifiers 'length' and 'area' were added in
    Level 2 Version 1.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.Unit_isBuiltIn(*args)

def Unit_isUnitKind(*args):
  """
    Unit_isUnitKind(string name, unsigned int level, unsigned int version) -> bool

    Predicate to test whether a given string is the name of a valid base
    unit in SBML (such as 'gram' or 'mole').

    This method exists because prior to SBML Level 2 Version 3, an
    enumeration called UnitKind was defined by SBML.  This enumeration was
    removed in SBML Level 2 Version 3 and its values were folded into the
    space of values of a type called UnitSId.  This method therefore has
    less significance in SBML Level 2 Version 3 and Level 2 Version 4, but
    remains for backward compatibility and support for reading models in
    older Versions of Level 2.

    Parameter 'name' is a string to be tested

    Parameter 'level' is a long integer representing the SBML
    specification Level

    Parameter 'version' is a long integer representing the SBML
    specification Version

    Returns True if name is a valid SBML UnitKind, False otherwise

    Note:

    The allowed unit names differ between SBML Levels 1 and 2 and again
    slightly between Level 2 Versions 1 and 2.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.Unit_isUnitKind(*args)

def Unit_areIdentical(*args):
  """
    Unit_areIdentical(Unit unit1, Unit unit2) -> bool

    Predicate returning True if two Unit objects are identical.

    Two Unit objects are considered to be identical if they match in all
    attributes.  (Contrast this to the method areEquivalent(), which
    compares Unit objects only with respect to certain attributes.)

    Parameter 'unit1' is the first Unit object to compare Parameter
    'unit2' is the second Unit object to compare

    Returns True if all the attributes of unit1 are identical to the
    attributes of unit2, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see Unit.areEquivalent()

    """
  return _libsbml.Unit_areIdentical(*args)

def Unit_areEquivalent(*args):
  """
    Unit_areEquivalent(Unit unit1, Unit unit2) -> bool

    Predicate returning True if  Unit objects are equivalent.

    Two Unit objects are considered to be equivalent either if (1) both
    have a 'kind' attribute value of dimensionless, or (2) their 'kind',
    'exponent' and (for SBML Level 2 Version 1) 'offset' attribute values
    are equal. (Contrast this to the method areIdentical(), which compares
    Unit objects with respect to all attributes, not just the 'kind' and
    'exponent'.)

    Parameter 'unit1' is the first Unit object to compare Parameter
    'unit2' is the second Unit object to compare

    Returns True if the 'kind' and 'exponent' attributes of unit1 are
    identical to the kind and exponent attributes of unit2, False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see Unit.areIdentical()

    """
  return _libsbml.Unit_areEquivalent(*args)

def Unit_removeScale(*args):
  """
    Unit_removeScale(Unit unit) -> int

    Manipulates the attributes of the Unit to express the unit with the
    value of the scale attribute reduced to zero.

    For example, 1 millimetre can be expressed as a Unit with kind='metre'
    multiplier='1' scale='-3' exponent='1'. It can also be expressed as a
    Unit with kind='metre' multiplier='0.001' scale='0' exponent='1'.

    Parameter 'unit' is the Unit object to manipulate.

    Returns integer value indicating success/failure of the function.  The
    possible values returned by this function are:

       * libsbml.LIBSBML_OPERATION_SUCCESS

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see Unit.convertToSI()  @see Unit.merge()

    """
  return _libsbml.Unit_removeScale(*args)

def Unit_merge(*args):
  """
    Unit_merge(Unit unit1, Unit unit2)

    Merges two Unit objects with the same 'kind' attribute value into a
    single Unit.

    For example, the following,

       <unit kind='metre' exponent='2'/>
       <unit kind='metre' exponent='1'/>

    would be merged to become

       <unit kind='metre' exponent='3'/>

    Parameter 'unit1' is the first Unit object; the result of the
    operation is left as a new version of this unit, modified in-place.
    Not modified if the two units have different kinds.

    Parameter 'unit2' is the second Unit object to merge with the first

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see Unit.convertToSI()  @see Unit.removeScale()

    """
  return _libsbml.Unit_merge(*args)

def Unit_convertToSI(*args):
  """
    Unit_convertToSI(Unit unit) -> UnitDefinition

    Returns a UnitDefinition object containing the given 'unit' converted
    to the appropriate SI unit.

    This method exists because some units can be expressed in terms of
    others when the same physical dimension is involved.  For example, one
    hertz is identical to 1 sec^-1, one litre is equivalent to 1 cubic
    decametre, and so on.

    Parameter 'unit' is the Unit object to convert to SI

    Returns a UnitDefinition object containing the SI unit.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see Unit.merge()

    """
  return _libsbml.Unit_convertToSI(*args)

class ListOfUnits(ListOf):
    """
    Implementation of SBML's ListOfUnits construct.

    ListOfUnits is entirely contained within UnitDefinition.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfUnits, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfUnits, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfUnits
        __init__(self, SBMLNamespaces sbmlns) -> ListOfUnits

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfUnits(SBMLNamespaces sbmlns)

        Creates a new ListOfUnits object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfUnits object to be created.

        @par <hr> Method variant with the following signature:

            ListOfUnits(long level, long version)

        Creates a new ListOfUnits object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfUnits(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfUnits

        Creates and returns a deep copy of this ListOfUnits.

        Returns a (deep) copy of this ListOfUnits.

        """
        return _libsbml.ListOfUnits_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Unit objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_UNIT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfUnits_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfUnits, the XML element name is 'listOfUnits'.

        Returns the name of this element, i.e., 'listOfUnits'.

        """
        return _libsbml.ListOfUnits_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Unit
        get(self, unsigned int n) -> Unit

        Get a Unit from the ListOfUnits.

        Parameter 'n' is the index number of the Unit to get.

        Returns the nth Unit in this ListOfUnits.

        See also size().

        """
        return _libsbml.ListOfUnits_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Unit

        Removes the nth item from this ListOfUnits items and returns a pointer
        to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        """
        return _libsbml.ListOfUnits_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfUnits
    __del__ = lambda self : None;
ListOfUnits_swigregister = _libsbml.ListOfUnits_swigregister
ListOfUnits_swigregister(ListOfUnits)

class UnitDefinition(SBase):
    """
    Implementation of SBML's UnitDefinition construct.

    Units of measurement may be supplied in a number of contexts in an
    SBML model.  The SBML unit definition facility uses two classes of
    objects, UnitDefinition and Unit.  The approach to defining units in
    SBML is compositional; for example, meter second^-2 is constructed by
    combining a Unit object representing meter with another Unit object
    representing second^-2. The combination is wrapped inside a
    UnitDefinition, which provides for assigning an identifier and
    optional name to the combination.  The identifier can then be
    referenced from elsewhere in a model.  Thus, the UnitDefinition class
    is the container, and Unit instances are placed inside UnitDefinition
    instances.

    Two points are worth discussing in the context of SBML units.  First,
    unit declarations in SBML models are optional.  The consequence of
    this is that a model must be numerically self-consistent independently
    of unit declarations, for the benefit of software tools that cannot
    interpret or manipulate units.  Unit declarations in SBML are thus
    more akin to a type of annotation; they can indicate intentions, and
    can be used by model readers for checking the consistency of the
    model, labeling simulation output, etc., but any transformations of
    values implied by different units must be incorporated explicitly into
    a model.

    Second, the vast majority of situations that require new SBML unit
    definitions involve simple multiplicative combinations of base units
    and factors.  An example is moles per litre per second.  What
    distinguishes these sorts of unit definitions from more complex ones
    is that they may be expressed without the use of an additive offset
    from a zero point.  The use of offsets complicates all unit definition
    systems, yet in the domain of SBML, the real-life cases requiring
    offsets are few (and in fact, to the best of our knowledge, only
    involve temperature). Consequently, the SBML unit system has been
    consciously designed to simplify implementation of unit support for
    the most common cases in systems biology.  The cost of this
    simplification is to require units with offsets to be handled
    explicitly by the modeler.

    Summary of the UnitDefinition construct
    ======================================================================

    UnitDefinition has two attributes and one subelement.  The two
    attributes are 'id' and 'name', and the subelement is ListOfUnits.

    The required attribute 'id' and optional attribute 'name' are both
    strings.  The 'id' attribute is used to give the defined unit a unique
    identifier by which other parts of an SBML model definition can refer
    to it.  The 'name' attribute is intended to be used for giving the
    unit definition an optional human-readable name.  Please see the next
    section for information about the values permitted for 'id'.

    A UnitDefinition must contain exactly one ListOfUnits, and this list
    must contain one or more Unit definitions; see the definitions of
    these other object classes for more information about them.  The
    following example illustrates a complete unit definition (when written
    in XML) when they all the pieces are combined together.  This defines
    'mmls' to be millimoles per litre per second.

       <listOfUnitDefinitions>
           <unitDefinition id='mmls'>
               <listOfUnits>
                   <unit kind='mole'   scale='-3'/>
                   <unit kind='litre'  exponent='-1'/>
                   <unit kind='second' exponent='-1'/>
               </listOfUnits>
           </unitDefinition>
       </listOfUnitDefinitions>

    Special considerations for Unit object identifiers
    ======================================================================

    The attribute 'id' in UnitDefinition cannot be given simply any value,
    and the precise details of the values permitted differ slightly
    between Levels of SBML:

    * The 'id' of a UnitDefinition must not contain a value from the list
    of SBML's predefined base unit names (i.e., the strings gram, litre,
    etc.).  In SBML Level 3, this list consists of the following:

    @par

      ampere         farad  joule     lux     radian     volt   
      avogadro       gram   katal     metre   second     watt   
      becquerel      gray   kelvin    mole    siemens    weber  
      candela        henry  kilogram  newton  sievert           
      coulomb        hertz  litre     ohm     steradian         
      dimensionless  item   lumen     pascal  tesla

      This list of predefined base units is nearly identical in SBML Level
    2 Version 4, the exception being that Level 2 does not define
    avogadro.  SBML Level 2 Version 1 (and only this Level+Version
    combination) provides an additional predefined unit name, Celsius, not
    available in Level 3.  Finally, SBML Level 1 Versions 2-3 provide two
    more additional predefined unit names, meter and liter.  This is
    explained in somewhat greater detail in the description of the Unit
    class.

        * In SBML Level 2 (all Versions), there is an additional set of
    reserved identifiers: substance, volume, area, length, and time.
    Using one of these values for the attribute 'id' of a UnitDefinition
    has the effect of redefining the model-wide default units for the
    corresponding quantities.  The list of special unit names in SBML
    Level 2 is given in the table below: Identifier Possible scalable
    units Default units substancemole, item, gram, kilogram,
    dimensionlessmole volumelitre, cubic metre, dimensionlesslitre
    areasquare metre, dimensionlesssquare metre lengthmetre,
    dimensionlessmetre timesecond, dimensionlesssecond

    Also, SBML Level 2 imposes two limitations on redefining the
    predefined unit substance, volume, area, length, and time: (1) The
    UnitDefinition of a predefined SBML unit can only contain a single
    Unit object within it.  (2) The value of the 'kind' attribute in a
    Unit instance must be drawn from one of the values in the second
    column of the table above.

    The special unit names substance, volume, area, length, and time are
    not defined by SBML Level 3, which uses a different approach to
    setting model-wide inherited units.

    Further comments about SBML's unit definition system
    ======================================================================

    The vast majority of modeling situations requiring new SBML unit
    definitions involve simple multiplicative combinations of base units
    and factors.  An example of this might be moles per litre per second.
    What distinguishes these sorts of simpler unit definitions from more
    complex ones is that they may be expressed without the use of an
    additive offset from a zero point.  The use of offsets complicates all
    unit definition systems, yet in the domain of SBML the real-life cases
    requiring offsets are few (and in fact, to the best of our knowledge,
    only involve temperature).  Consequently, the SBML unit system has
    been consciously designed in a way that attempts to simplify
    implementation of unit support for the most common cases in systems
    biology.

    As of SBML Level 2 Version 2, Unit no longer has the attribute called
    'offset' introduced in SBML Level 2 Version 1.  It turned out that the
    general case involving units with offsets was incorrectly defined, and
    few (if any) developers even attempted to support offset-based units
    in their software.  In the development of Level 2 Version 2, a
    consensus among SBML developers emerged that a fully generalized unit
    scheme is so confusing and complicated that it actually impedes
    interoperability. SBML Level 2 Version 2, Version 3 and Version 4
    acknowledge this reality by reducing and simplifying the unit system,
    specifically by removing the 'offset' attribute on Unit and Celsius as
    a pre-defined unit.

    The following guidelines suggest methods for handling units that do
    require the use of zero offsets for their definitions:

    * Handling Celsius.  A model in which certain quantities are
    temperatures measured in degrees Celsius can be converted
    straightforwardly to a model in which those temperatures are in
    kelvin.  A software tool could do this by performing a straightforward
    substitution using the following relationship: T_ kelvin = T_Celsius +
    273.15.  In every mathematical formula of the model where a quantity
    (call it x) in degrees Celsius appears, replace x with x_k+ 273.15,
    where x_k is now in kelvin.  An alternative approach would  be to use
    a FunctionDefinition object to define a function encapsulating this
    relationship above and then using that in the rest of the model as
    needed.  Since Celsius is a commonly-used unit, software tools could
    help users by providing users with the ability to express temperatures
    in Celsius in the tools' interfaces, and making substitutions
    automatically when writing out the SBML.

    * Other units requiring offsets.  One approach to handling other kinds
    of units is to use a FunctionDefinition to define a function
    encapsulating the necessary mathematical relationship, then
    substituting a call to this function wherever the original quantity
    appeared in the model.  For example, here is a possible definition for
    converting Fahrenheit to Celsius degrees:

       <functionDefinition id='Fahrenheit_to_kelvin'>
           <math xmlns='http://www.w3.org/1998/Math/MathML'>
               <lambda>
                   <bvar><ci> temp_in_fahrenheit </ci></bvar>
                   <apply>
                       <divide/>
                       <apply>
                           <plus/>
                           <ci> temp_in_fahrenheit </ci>
                           <cn> 459.67 </cn>
                       </apply>
                       <cn> 1.8 </cn>
                   </apply>
               </lambda>
           </math>
       </functionDefinition>

        * An alternative approach not requiring the use of function
    definitions is to use an AssignmentRule for each variable in
    Fahrenheit units. The AssignmentRule could compute the conversion from
    Fahrenheit to (say) kelvin, assign its value to a variable (in Kelvin
    units), and then that variable could be used elsewhere in the model.

    * Still another approach is to rewrite the mathematical formulas of a
    model to directly incorporate the conversion formula wherever the
    original quantity appeared. Please consult the SBML specifications for
    more information about this and other issues involving units.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitDefinition, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_UnitDefinition
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> UnitDefinition
        __init__(self, SBMLNamespaces sbmlns) -> UnitDefinition
        __init__(self, UnitDefinition orig) -> UnitDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            UnitDefinition(SBMLNamespaces sbmlns)

        Creates a new UnitDefinition using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            UnitDefinition(long level, long version)

        Creates a new UnitDefinition using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        UnitDefinition

        Parameter 'version' is a long integer, the SBML Version to assign to
        this UnitDefinition

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            UnitDefinition(UnitDefinition orig)

        Copy constructor; creates a copy of this UnitDefinition.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_UnitDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> UnitDefinition

        Creates and returns a deep copy of this UnitDefinition.

        Returns a (deep) copy of this UnitDefinition.

        """
        return _libsbml.UnitDefinition_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find.

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.UnitDefinition_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or None if no such object is found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns pointer to the first element found with the given 'metaid'.

        """
        return _libsbml.UnitDefinition_getElementByMetaId(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this UnitDefinition.

        Returns the id of this UnitDefinition.

        """
        return _libsbml.UnitDefinition_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this UnitDefinition.

        Returns the name of this UnitDefinition.

        """
        return _libsbml.UnitDefinition_getName(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this UnitDefinition's 'id' attribute is
        set.

        Returns True if the 'id' attribute of this UnitDefinition is set,
        False otherwise.

        """
        return _libsbml.UnitDefinition_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this UnitDefinition's 'name' attribute is
        set.

        Returns True if the 'name' attribute of this UnitDefinition is set,
        False otherwise.

        """
        return _libsbml.UnitDefinition_isSetName(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this UnitDefinition.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        UnitDefinition

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.UnitDefinition_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this UnitDefinition.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the UnitDefinition

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.UnitDefinition_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this UnitDefinition.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.UnitDefinition_unsetName(self)

    def isVariantOfArea(self):
        """
        isVariantOfArea(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the predefined unit identifier 'area'.

        Returns True if this UnitDefinition is a variant of the predefined
        unit area, meaning square metres with only abritrary variations in
        scale or multiplier values; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfArea(self)

    def isVariantOfLength(self):
        """
        isVariantOfLength(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the predefined unit identifier 'length'.

        Returns True if this UnitDefinition is a variant of the predefined
        unit length, meaning metres with only abritrary variations in scale or
        multiplier values; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfLength(self)

    def isVariantOfSubstance(self):
        """
        isVariantOfSubstance(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the predefined unit identifier 'substance'.

        Returns True if this UnitDefinition is a variant of the predefined
        unit substance, meaning moles or items (and grams or kilograms from
        SBML Level 2 Version 2 onwards) with only abritrary variations in
        scale or multiplier values; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfSubstance(self)

    def isVariantOfTime(self):
        """
        isVariantOfTime(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the predefined unit identifier 'time'.

        Returns True if this UnitDefinition is a variant of the predefined
        unit time, meaning seconds with only abritrary variations in scale or
        multiplier values; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfTime(self)

    def isVariantOfVolume(self):
        """
        isVariantOfVolume(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the predefined unit identifier 'volume'.

        Returns True if this UnitDefinition is a variant of the predefined
        unit volume, meaning litre or cubic metre with only abritrary
        variations in scale or multiplier values; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfVolume(self)

    def isVariantOfDimensionless(self):
        """
        isVariantOfDimensionless(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the unit 'dimensionless'.

        Returns True if this UnitDefinition is a variant of dimensionless,
        meaning dimensionless with only abritrary variations in scale or
        multiplier values; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfDimensionless(self)

    def isVariantOfMass(self):
        """
        isVariantOfMass(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the predefined unit identifier 'mass'.

        Returns True if this UnitDefinition is a variant of mass units,
        meaning gram or kilogram with only abritrary variations in scale or
        multiplier values; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfMass(self)

    def isVariantOfSubstancePerTime(self):
        """
        isVariantOfSubstancePerTime(self) -> bool

        Convenience function for testing if a given unit definition is a
        variant of the predefined unit 'substance' divided by the predefined
        unit 'time'.

        Returns True if this UnitDefinition is a variant of the predefined
        unit substance per predefined unit time, meaning it contains two units
        one of which is a variant of substance and the other is a variant of
        time which an exponent of -1; False otherwise.

        """
        return _libsbml.UnitDefinition_isVariantOfSubstancePerTime(self)

    def addUnit(self, *args):
        """
        addUnit(self, Unit u) -> int

        Adds a copy of the given Unit to this UnitDefinition.

        Parameter 'u' is the Unit instance to add to this UnitDefinition.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createUnit().

        """
        return _libsbml.UnitDefinition_addUnit(self, *args)

    def createUnit(self):
        """
        createUnit(self) -> Unit

        Creates a new and empty Unit, adds it to this UnitDefinition's list of
        units, and returns it.

        Returns a newly constructed (and empty) Unit instance.

        Note:

        It is worth emphasizing that the attribute 'kind' value of a Unit is a
        required attribute for a valid Unit definition.  The createUnit()
        method does not assign a valid kind to the constructed unit (instead,
        it sets the 'kind' to libsbml.UNIT_KIND_INVALID). Callers are
        cautioned to set the newly-constructed Unit's kind using
        Unit.setKind() soon after calling this method.

        See also addUnit().

        """
        return _libsbml.UnitDefinition_createUnit(self)

    def getListOfUnits(self, *args):
        """
        getListOfUnits(self) -> ListOfUnits
        getListOfUnits(self) -> ListOfUnits

        Returns the list of Units for this UnitDefinition instance. Returns
        the ListOfUnits value for this UnitDefinition.

        """
        return _libsbml.UnitDefinition_getListOfUnits(self, *args)

    def getUnit(self, *args):
        """
        getUnit(self, unsigned int n) -> Unit
        getUnit(self, unsigned int n) -> Unit

        Returns a specific Unit instance belonging to this UnitDefinition.

        Parameter 'n' is an integer, the index of the Unit to be returned.

        Returns the nth Unit of this UnitDefinition.

        See also getNumUnits().

        """
        return _libsbml.UnitDefinition_getUnit(self, *args)

    def getNumUnits(self):
        """
        getNumUnits(self) -> unsigned int

        Returns the number of Unit objects contained within this
        UnitDefinition.

        Returns an integer representing the number of Units in this
        UnitDefinition.

        """
        return _libsbml.UnitDefinition_getNumUnits(self)

    def removeUnit(self, *args):
        """
        removeUnit(self, unsigned int n) -> Unit

        Removes the nth Unit object from this UnitDefinition object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Unit object to remove

        Returns the Unit object removed, or None if the given index  is out of
        range.

        """
        return _libsbml.UnitDefinition_removeUnit(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.UnitDefinition_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.UnitDefinition_enablePackageInternal(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_UNIT_DEFINITION (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getElementName().

        """
        return _libsbml.UnitDefinition_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for UnitDefinition,
        is always 'unitDefinition'.

        Returns the name of this element, i.e., 'unitDefinition'.

        """
        return _libsbml.UnitDefinition_getElementName(self)

    def simplify(*args):
        """
        simplify(UnitDefinition ud)

        Simplifies the UnitDefinition such that any given kind of Unit object
        occurs only once in the ListOfUnits.

        For example, the following definition,

           <unitDefinition>
            <listOfUnits>
              <unit kind='metre' exponent='1'/>
              <unit kind='metre' exponent='2'/>
            </listOfUnits>
           <unitDefinition>

        will be simplified to

           <unitDefinition>
             <listOfUnits>
               <unit kind='metre' exponent='3'/>
             </listOfUnits>
           <unitDefinition>

        Parameter 'ud' is the UnitDefinition object to be simplified.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.UnitDefinition_simplify(*args)

    if _newclass:simplify = staticmethod(simplify)
    __swig_getmethods__["simplify"] = lambda x: simplify
    def reorder(*args):
        """
        reorder(UnitDefinition ud)

        Alphabetically orders the Unit objects within the ListOfUnits of a
        UnitDefinition.

        Parameter 'ud' is the UnitDefinition object whose units are to be
        reordered.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.UnitDefinition_reorder(*args)

    if _newclass:reorder = staticmethod(reorder)
    __swig_getmethods__["reorder"] = lambda x: reorder
    def convertToSI(*args):
        """
        convertToSI(UnitDefinition ud) -> UnitDefinition

        Convert a given UnitDefinition into a new UnitDefinition object that
        uses SI units.

        Parameter 'ud' is the UnitDefinition object to convert to SI

        Returns a new UnitDefinition object representing the results of the
        conversion.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.UnitDefinition_convertToSI(*args)

    if _newclass:convertToSI = staticmethod(convertToSI)
    __swig_getmethods__["convertToSI"] = lambda x: convertToSI
    def areIdentical(*args):
        """
        areIdentical(UnitDefinition ud1, UnitDefinition ud2) -> bool

        Predicate returning True if two UnitDefinition objects are identical.

        For the purposes of performing this comparison, two UnitDefinition
        objects are considered identical when they contain identical lists of
        Unit objects.  Pairs of Unit objects in the lists are in turn
        considered identical if they satisfy the predicate
        Unit.areIdentical(). The predicate compares every attribute of the
        Unit objects.

        Parameter 'ud1' is the first UnitDefinition object to compare
        Parameter 'ud2' is the second UnitDefinition object to compare

        Returns True if all the Unit objects in ud1 are identical to the Unit
        objects of ud2, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        See also Unit.areIdentical().

        """
        return _libsbml.UnitDefinition_areIdentical(*args)

    if _newclass:areIdentical = staticmethod(areIdentical)
    __swig_getmethods__["areIdentical"] = lambda x: areIdentical
    def areEquivalent(*args):
        """
        areEquivalent(UnitDefinition ud1, UnitDefinition ud2) -> bool

        Predicate returning True if two UnitDefinition objects are equivalent.

        For the purposes of performing this comparison, two UnitDefinition
        objects are considered equivalent when they contain equivalent list of
        Unit objects.  Unit objects are in turn considered equivalent if they
        satisfy the predicate Unit.areEquivalent(). The predicate tests a
        subset of the objects's attributes.

        Parameter 'ud1' is the first UnitDefinition object to compare

        Parameter 'ud2' is the second UnitDefinition object to compare

        Returns True if all the Unit objects in ud1 are equivalent to the Unit
        objects in ud2, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        See also Unit.areEquivalent().

        """
        return _libsbml.UnitDefinition_areEquivalent(*args)

    if _newclass:areEquivalent = staticmethod(areEquivalent)
    __swig_getmethods__["areEquivalent"] = lambda x: areEquivalent
    def combine(*args):
        """
        combine(UnitDefinition ud1, UnitDefinition ud2) -> UnitDefinition

        Combines two UnitDefinition objects into a single UnitDefinition.

        This takes UnitDefinition objects 'ud1' and 'ud2', and creates a
        UnitDefinition object that expresses the product of the units of 'ud1'
        and 'ud2'.

        Parameter 'ud1' is the first UnitDefinition object  Parameter 'ud2' is
        the second UnitDefinition object

        Returns a UnitDefinition which represents the product of the  units of
        the two argument UnitDefinitions.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.UnitDefinition_combine(*args)

    if _newclass:combine = staticmethod(combine)
    __swig_getmethods__["combine"] = lambda x: combine
    def divide(*args):
        """
        divide(UnitDefinition ud1, UnitDefinition ud2) -> UnitDefinition

        Combines two UnitDefinition objects into a single UnitDefinition as a
        division.

        This takes UnitDefinition objects 'ud1' and 'ud2', and creates a
        UnitDefinition object that expresses the division of the units of
        'ud1' and 'ud2'.

        Parameter 'ud1' is the first UnitDefinition object  Parameter 'ud2' is
        the second UnitDefinition object

        Returns a UnitDefinition which represents the division of the  units
        of the two argument UnitDefinitions.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.UnitDefinition_divide(*args)

    if _newclass:divide = staticmethod(divide)
    __swig_getmethods__["divide"] = lambda x: divide
    def printUnits(*args):
        """
        printUnits(UnitDefinition ud, bool compact = False) -> string
        printUnits(UnitDefinition ud) -> string

        Expresses the given definition in a plain-text form.

        For example, UnitDefinition.printUnits() applied to

           <unitDefinition>
            <listOfUnits>
              <unit kind='metre' exponent='1'/>
              <unit kind='second' exponent='-2'/>
            </listOfUnits>
           <unitDefinition>

        will return the string 'metre (exponent = 1, multiplier = 1, scale =
        0) second (exponent = -2, multiplier = 1, scale = 0)' or, if the
        optional parameter 'compact' is given the value True, the string '(1
        metre)^1 (1 second)^-2'.  This method may be useful for printing unit
        information to human users, or in debugging software, or other
        situations.

        Parameter 'ud' is the UnitDefinition object Parameter 'compact' is
        boolean indicating whether the compact form should be used (defaults
        to false)

        Returns a string expressing the unit definition defined by the given
        UnitDefinition object 'ud'.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.UnitDefinition_printUnits(*args)

    if _newclass:printUnits = staticmethod(printUnits)
    __swig_getmethods__["printUnits"] = lambda x: printUnits
    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        UnitDefinition object have been set.

        The required attributes for a UnitDefinition object are:

           * 'id'

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.UnitDefinition_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        UnitDefinition object have been set.

        Note:

        The required elements for a Constraint object are:

           * 'listOfUnits' (required in SBML Level 2 only, optional in Level
        3)

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.UnitDefinition_hasRequiredElements(self)

UnitDefinition_swigregister = _libsbml.UnitDefinition_swigregister
UnitDefinition_swigregister(UnitDefinition)

def UnitDefinition_simplify(*args):
  """
    UnitDefinition_simplify(UnitDefinition ud)

    Simplifies the UnitDefinition such that any given kind of Unit object
    occurs only once in the ListOfUnits.

    For example, the following definition,

       <unitDefinition>
        <listOfUnits>
          <unit kind='metre' exponent='1'/>
          <unit kind='metre' exponent='2'/>
        </listOfUnits>
       <unitDefinition>

    will be simplified to

       <unitDefinition>
         <listOfUnits>
           <unit kind='metre' exponent='3'/>
         </listOfUnits>
       <unitDefinition>

    Parameter 'ud' is the UnitDefinition object to be simplified.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.UnitDefinition_simplify(*args)

def UnitDefinition_reorder(*args):
  """
    UnitDefinition_reorder(UnitDefinition ud)

    Alphabetically orders the Unit objects within the ListOfUnits of a
    UnitDefinition.

    Parameter 'ud' is the UnitDefinition object whose units are to be
    reordered.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.UnitDefinition_reorder(*args)

def UnitDefinition_convertToSI(*args):
  """
    UnitDefinition_convertToSI(UnitDefinition ud) -> UnitDefinition

    Convert a given UnitDefinition into a new UnitDefinition object that
    uses SI units.

    Parameter 'ud' is the UnitDefinition object to convert to SI

    Returns a new UnitDefinition object representing the results of the
    conversion.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.UnitDefinition_convertToSI(*args)

def UnitDefinition_areIdentical(*args):
  """
    UnitDefinition_areIdentical(UnitDefinition ud1, UnitDefinition ud2) -> bool

    Predicate returning True if two UnitDefinition objects are identical.

    For the purposes of performing this comparison, two UnitDefinition
    objects are considered identical when they contain identical lists of
    Unit objects.  Pairs of Unit objects in the lists are in turn
    considered identical if they satisfy the predicate
    Unit.areIdentical(). The predicate compares every attribute of the
    Unit objects.

    Parameter 'ud1' is the first UnitDefinition object to compare
    Parameter 'ud2' is the second UnitDefinition object to compare

    Returns True if all the Unit objects in ud1 are identical to the Unit
    objects of ud2, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    See also Unit.areIdentical().

    """
  return _libsbml.UnitDefinition_areIdentical(*args)

def UnitDefinition_areEquivalent(*args):
  """
    UnitDefinition_areEquivalent(UnitDefinition ud1, UnitDefinition ud2) -> bool

    Predicate returning True if two UnitDefinition objects are equivalent.

    For the purposes of performing this comparison, two UnitDefinition
    objects are considered equivalent when they contain equivalent list of
    Unit objects.  Unit objects are in turn considered equivalent if they
    satisfy the predicate Unit.areEquivalent(). The predicate tests a
    subset of the objects's attributes.

    Parameter 'ud1' is the first UnitDefinition object to compare

    Parameter 'ud2' is the second UnitDefinition object to compare

    Returns True if all the Unit objects in ud1 are equivalent to the Unit
    objects in ud2, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    See also Unit.areEquivalent().

    """
  return _libsbml.UnitDefinition_areEquivalent(*args)

def UnitDefinition_combine(*args):
  """
    UnitDefinition_combine(UnitDefinition ud1, UnitDefinition ud2) -> UnitDefinition

    Combines two UnitDefinition objects into a single UnitDefinition.

    This takes UnitDefinition objects 'ud1' and 'ud2', and creates a
    UnitDefinition object that expresses the product of the units of 'ud1'
    and 'ud2'.

    Parameter 'ud1' is the first UnitDefinition object  Parameter 'ud2' is
    the second UnitDefinition object

    Returns a UnitDefinition which represents the product of the  units of
    the two argument UnitDefinitions.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.UnitDefinition_combine(*args)

def UnitDefinition_divide(*args):
  """
    UnitDefinition_divide(UnitDefinition ud1, UnitDefinition ud2) -> UnitDefinition

    Combines two UnitDefinition objects into a single UnitDefinition as a
    division.

    This takes UnitDefinition objects 'ud1' and 'ud2', and creates a
    UnitDefinition object that expresses the division of the units of
    'ud1' and 'ud2'.

    Parameter 'ud1' is the first UnitDefinition object  Parameter 'ud2' is
    the second UnitDefinition object

    Returns a UnitDefinition which represents the division of the  units
    of the two argument UnitDefinitions.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.UnitDefinition_divide(*args)

def UnitDefinition_printUnits(*args):
  """
    printUnits(UnitDefinition ud, bool compact = False) -> string
    UnitDefinition_printUnits(UnitDefinition ud) -> string

    Expresses the given definition in a plain-text form.

    For example, UnitDefinition.printUnits() applied to

       <unitDefinition>
        <listOfUnits>
          <unit kind='metre' exponent='1'/>
          <unit kind='second' exponent='-2'/>
        </listOfUnits>
       <unitDefinition>

    will return the string 'metre (exponent = 1, multiplier = 1, scale =
    0) second (exponent = -2, multiplier = 1, scale = 0)' or, if the
    optional parameter 'compact' is given the value True, the string '(1
    metre)^1 (1 second)^-2'.  This method may be useful for printing unit
    information to human users, or in debugging software, or other
    situations.

    Parameter 'ud' is the UnitDefinition object Parameter 'compact' is
    boolean indicating whether the compact form should be used (defaults
    to false)

    Returns a string expressing the unit definition defined by the given
    UnitDefinition object 'ud'.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.UnitDefinition_printUnits(*args)

class ListOfUnitDefinitions(ListOf):
    """
    Implementation of SBML's ListOfUnitDefinitions construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfUnitDefinitions, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfUnitDefinitions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfUnitDefinitions
        __init__(self, SBMLNamespaces sbmlns) -> ListOfUnitDefinitions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfUnitDefinitions(SBMLNamespaces sbmlns)

        Creates a new ListOfUnitDefinitions object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfUnitDefinitions object to
        be created.

        @par <hr> Method variant with the following signature:

            ListOfUnitDefinitions(long level, long version)

        Creates a new ListOfUnitDefinitions object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfUnitDefinitions(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfUnitDefinitions

        Creates and returns a deep copy of this ListOfUnitDefinitions
        instance.

        Returns a (deep) copy of this ListOfUnitDefinitions.

        """
        return _libsbml.ListOfUnitDefinitions_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., UnitDefinition objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_UNIT_DEFINITION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfUnitDefinitions_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfUnitDefinitions, the XML element name is
        'listOfUnitDefinitions'.

        Returns the name of this element, i.e., 'listOfUnitDefinitions'.

        """
        return _libsbml.ListOfUnitDefinitions_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> UnitDefinition
        get(self, unsigned int n) -> UnitDefinition
        get(self, string sid) -> UnitDefinition
        get(self, string sid) -> UnitDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a UnitDefinition from the ListOfUnitDefinitions.

        Parameter 'n' is the index number of the UnitDefinition to get.

        Returns the nth UnitDefinition in this ListOfUnitDefinitions.

        See also size(), size().

        """
        return _libsbml.ListOfUnitDefinitions_get(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Note that UnitDefinitions themselves are in the UnitId namespace, not
        the SId namespace, so no UnitDefinition object will be returned from
        this function (and is the reason we override the base
        ListOf::getElementBySId function here).

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.ListOfUnitDefinitions_getElementBySId(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> UnitDefinition
        remove(self, string sid) -> UnitDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfUnitDefinitions items and returns
        a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfUnitDefinitions items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfUnitDefinitions_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfUnitDefinitions
    __del__ = lambda self : None;
ListOfUnitDefinitions_swigregister = _libsbml.ListOfUnitDefinitions_swigregister
ListOfUnitDefinitions_swigregister(ListOfUnitDefinitions)

class CompartmentType(SBase):
    """
    Implementation of SBML's Level 2's CompartmentType construct.

    SBML Level 2 Versions 2-4 provide the compartment type as a grouping
    construct that can be used to establish a relationship between
    multiple Compartment objects.  A CompartmentType object only has an
    identity, and this identity can only be used to indicate that
    particular Compartment objects in the model belong to this type.  This
    may be useful for conveying a modeling intention, such as when a model
    contains many similar compartments, either by their biological
    function or the reactions they carry.  Without a compartment type
    construct, it would be impossible within SBML itself to indicate that
    all of the compartments share an underlying conceptual relationship
    because each SBML compartment must be given a unique and separate
    identity.  Compartment types have no mathematical meaning in SBML --
    they have no effect on a model's mathematical interpretation.
    Simulators and other numerical analysis software may ignore
    CompartmentType definitions and references to them in a model.

    There is no mechanism in SBML Level 2 for representing hierarchies of
    compartment types.  One CompartmentType instance cannot be the subtype
    of another CompartmentType instance; SBML provides no means of
    defining such relationships.

    As with other major structures in SBML, CompartmentType has a
    mandatory attribute, 'id', used to give the compartment type an
    identifier.  The identifier must be a text string conforming to the
    identifer syntax permitted in SBML.  CompartmentType also has an
    optional 'name' attribute, of type string.  The 'id' and 'name' must
    be used according to the guidelines described in the SBML
    specification (e.g., Section 3.3 in the Level 2 Version 4
    specification).

    CompartmentType was introduced in SBML Level 2 Version 2.  It is not
    available in SBML Level 1 nor in Level 3.

    See also ListOfSpeciesTypes.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentType, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_CompartmentType
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> CompartmentType
        __init__(self, SBMLNamespaces sbmlns) -> CompartmentType
        __init__(self, CompartmentType orig) -> CompartmentType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CompartmentType(SBMLNamespaces sbmlns)

        Creates a new CompartmentType object using the given SBMLNamespaces
        object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        It is worth emphasizing that although this constructor does not take
        an identifier argument, in SBML Level 2 and beyond, the 'id'
        (identifier) attribute of a CompartmentType object is required to have
        a value.  Thus, callers are cautioned to assign a value after calling
        this constructor.  Setting the identifier can be accomplished using
        the method setId().

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            CompartmentType(long level, long version)

        Creates a new CompartmentType object using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        CompartmentType

        Parameter 'version' is a long integer, the SBML Version to assign to
        this CompartmentType

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            CompartmentType(CompartmentType orig)

        Copy constructor; creates a copy of this CompartmentType object.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_CompartmentType(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> CompartmentType

        Creates and returns a deep copy of this CompartmentType object.

        Returns a (deep) copy of this CompartmentType.

        """
        return _libsbml.CompartmentType_clone(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this CompartmentType
        object.

        Returns the identifier of this CompartmentType object.

        See also isSetId().

        """
        return _libsbml.CompartmentType_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this CompartmentType
        object.

        Returns the name of this CompartmentType object.

        See also unsetName().

        """
        return _libsbml.CompartmentType_getName(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this CompartmentType object's 'id'
        attribute is set.

        Returns True if the 'id' attribute of this CompartmentType object is
        set, False otherwise.

        See also setId().

        """
        return _libsbml.CompartmentType_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this CompartmentType object's 'name'
        attribute is set.

        Returns True if the 'name' attribute of this CompartmentType object is
        set, False otherwise.

        See also unsetName().

        """
        return _libsbml.CompartmentType_isSetName(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this CompartmentType object.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        CompartmentType

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        See also isSetId().

        """
        return _libsbml.CompartmentType_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this CompartmentType object.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the CompartmentType

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        See also unsetName().

        """
        return _libsbml.CompartmentType_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this CompartmentType
        object.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also isSetName().

        """
        return _libsbml.CompartmentType_unsetName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_COMPARTMENT_TYPE (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.CompartmentType_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        CompartmentType, is always 'compartmentType'.

        Returns the name of this element, i.e., 'compartmentType'.

        See also getPackageName().

        """
        return _libsbml.CompartmentType_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        CompartmentType object have been set.

        The required attributes for a CompartmentType object are:

           * 'id'

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.CompartmentType_hasRequiredAttributes(self)

CompartmentType_swigregister = _libsbml.CompartmentType_swigregister
CompartmentType_swigregister(CompartmentType)

class ListOfCompartmentTypes(ListOf):
    """
    Implementation of SBML's ListOfCompartmentTypes construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfCompartmentTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfCompartmentTypes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfCompartmentTypes
        __init__(self, SBMLNamespaces sbmlns) -> ListOfCompartmentTypes

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfCompartmentTypes(SBMLNamespaces sbmlns)

        Creates a new ListOfCompartmentTypes object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfCompartmentTypes object to
        be created.

        @par <hr> Method variant with the following signature:

            ListOfCompartmentTypes(long level, long version)

        Creates a new ListOfCompartmentTypes object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfCompartmentTypes(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfCompartmentTypes

        Creates and returns a deep copy of this ListOfCompartmentTypes
        instance.

        Returns a (deep) copy of this ListOfCompartmentTypes.

        """
        return _libsbml.ListOfCompartmentTypes_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., CompartmentType objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf
        instance: libsbml.SBML_COMPARTMENT_TYPE (default).

        See also getPackageName().

        """
        return _libsbml.ListOfCompartmentTypes_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfCompartmentTypes, the XML element name is
        'listOfCompartmentTypes'.

        Returns the name of this element, i.e., 'listOfCompartmentTypes'.

        """
        return _libsbml.ListOfCompartmentTypes_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> CompartmentType
        get(self, unsigned int n) -> CompartmentType
        get(self, string sid) -> CompartmentType
        get(self, string sid) -> CompartmentType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a CompartmentType object from the ListOfCompartmentTypes.

        Parameter 'n' is the index number of the CompartmentType object to
        get.

        Returns the nth CompartmentType object in this ListOfCompartmentTypes.

        See also size(), size().

        """
        return _libsbml.ListOfCompartmentTypes_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> CompartmentType
        remove(self, string sid) -> CompartmentType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfCompartmentTypes items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfCompartmentTypes items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfCompartmentTypes_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfCompartmentTypes
    __del__ = lambda self : None;
ListOfCompartmentTypes_swigregister = _libsbml.ListOfCompartmentTypes_swigregister
ListOfCompartmentTypes_swigregister(ListOfCompartmentTypes)

class SpeciesType(SBase):
    """
    Implementation of SBML Level 2's SpeciesType construct.

    The term species type refers to reacting entities independent of
    location.  These include simple ions (e.g., protons, calcium), simple
    molecules (e.g., glucose, ATP), large molecules (e.g., RNA,
    polysaccharides, and proteins), and others.

    SBML Level 2 Versions 2-4 provide an explicit SpeciesType class of
    object to enable Species objects of the same type to be related
    together.  SpeciesType is a conceptual construct; the existence of
    SpeciesType objects in a model has no effect on the model's numerical
    interpretation.  Except for the requirement for uniqueness of
    species/species type combinations located in compartments, simulators
    and other numerical analysis software may ignore SpeciesType
    definitions and references to them in a model.

    There is no mechanism in SBML Level 2 for representing hierarchies of
    species types.  One SpeciesType object cannot be the subtype of
    another SpeciesType object; SBML provides no means of defining such
    relationships.

    As with other major structures in SBML, SpeciesType has a mandatory
    attribute, 'id', used to give the species type an identifier.  The
    identifier must be a text string conforming to the identifer syntax
    permitted in SBML.  SpeciesType also has an optional 'name' attribute,
    of type string.  The 'id' and 'name' must be used according to the
    guidelines described in the SBML specification (e.g., Section 3.3 in
    the Level 2 Version 4 specification).

    SpeciesType was introduced in SBML Level 2 Version 2.  It is not
    available in SBML Level 1 nor in Level 3.

    See also ListOfCompartmentTypes.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpeciesType, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpeciesType, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SpeciesType
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> SpeciesType
        __init__(self, SBMLNamespaces sbmlns) -> SpeciesType
        __init__(self, SpeciesType orig) -> SpeciesType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SpeciesType(SBMLNamespaces sbmlns)

        Creates a new SpeciesType using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        It is worth emphasizing that although this constructor does not take
        an identifier argument, in SBML Level 2 and beyond, the 'id'
        (identifier) attribute of a SpeciesType object is required to have a
        value. Thus, callers are cautioned to assign a value after calling
        this constructor.  Setting the identifier can be accomplished using
        the method SBase.setId().

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            SpeciesType(long level, long version)

        Creates a new SpeciesType using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        SpeciesType

        Parameter 'version' is a long integer, the SBML Version to assign to
        this SpeciesType

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            SpeciesType(SpeciesType orig)

        Copy constructor; creates a copy of this SpeciesType.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_SpeciesType(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SpeciesType

        Creates and returns a deep copy of this SpeciesType.

        Returns a (deep) copy of this SpeciesType.

        """
        return _libsbml.SpeciesType_clone(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this SpeciesType.

        Returns the id of this SpeciesType.

        """
        return _libsbml.SpeciesType_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this SpeciesType.

        Returns the name of this SpeciesType.

        """
        return _libsbml.SpeciesType_getName(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this SpeciesType's 'id' attribute is set.

        Returns True if the 'id' attribute of this SpeciesType is set, False
        otherwise.

        """
        return _libsbml.SpeciesType_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this SpeciesType's 'name' attribute is
        set.

        Returns True if the 'name' attribute of this SpeciesType is set, False
        otherwise.

        """
        return _libsbml.SpeciesType_isSetName(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this SpeciesType.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        SpeciesType

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.SpeciesType_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this SpeciesType.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the SpeciesType

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.SpeciesType_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this SpeciesType.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SpeciesType_unsetName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_SPECIES_TYPE
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.SpeciesType_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for SpeciesType, is
        always 'compartmentType'.

        Returns the name of this element, i.e., 'compartmentType'.

        """
        return _libsbml.SpeciesType_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        SpeciesType object have been set.

        The required attributes for a SpeciesType object are:

           * 'id'

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.SpeciesType_hasRequiredAttributes(self)

SpeciesType_swigregister = _libsbml.SpeciesType_swigregister
SpeciesType_swigregister(SpeciesType)

class ListOfSpeciesTypes(ListOf):
    """
    Implementation of SBML's ListOfSpeciesTypes construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfSpeciesTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfSpeciesTypes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfSpeciesTypes
        __init__(self, SBMLNamespaces sbmlns) -> ListOfSpeciesTypes

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesTypes(SBMLNamespaces sbmlns)

        Creates a new ListOfSpeciesTypes object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfSpeciesTypes object to be
        created.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesTypes(long level, long version)

        Creates a new ListOfSpeciesTypes object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfSpeciesTypes(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfSpeciesTypes

        Creates and returns a deep copy of this ListOfSpeciesTypes instance.

        Returns a (deep) copy of this ListOfSpeciesTypes.

        """
        return _libsbml.ListOfSpeciesTypes_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., SpeciesType objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_SPECIES_TYPE (default).

        See also getPackageName().

        """
        return _libsbml.ListOfSpeciesTypes_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfSpeciesTypes, the XML element name is 'listOfSpeciesTypes'.

        Returns the name of this element, i.e., 'listOfSpeciesTypes'.

        """
        return _libsbml.ListOfSpeciesTypes_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> SpeciesType
        get(self, unsigned int n) -> SpeciesType
        get(self, string sid) -> SpeciesType
        get(self, string sid) -> SpeciesType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a SpeciesType from the ListOfSpeciesTypes.

        Parameter 'n' is the index number of the SpeciesType to get.

        Returns the nth SpeciesType in this ListOfSpeciesTypes.

        See also size(), size().

        """
        return _libsbml.ListOfSpeciesTypes_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> SpeciesType
        remove(self, string sid) -> SpeciesType

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfSpeciesTypes items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfSpeciesTypes items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfSpeciesTypes_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfSpeciesTypes
    __del__ = lambda self : None;
ListOfSpeciesTypes_swigregister = _libsbml.ListOfSpeciesTypes_swigregister
ListOfSpeciesTypes_swigregister(ListOfSpeciesTypes)

class Compartment(SBase):
    """
    Implementation of SBML's Compartment construct.

    A compartment in SBML represents a bounded space in which species are
    located.  Compartments do not necessarily have to correspond to actual
    structures inside or outside of a biological cell.

    It is important to note that although compartments are optional in the
    overall definition of Model, every species in an SBML model must be
    located in a compartment.  This in turn means that if a model defines
    any species, the model must also define at least one compartment.  The
    reason is simply that species represent physical things, and therefore
    must exist somewhere.  Compartments represent the somewhere.

    Compartment has one required attribute, 'id', to give the compartment
    a unique identifier by which other parts of an SBML model definition
    can refer to it.  A compartment can also have an optional 'name'
    attribute of type string.  Identifiers and names must be used
    according to the guidelines described in the SBML specifications.

    Compartment also has an optional attribute 'spatialDimensions' that is
    used to indicate the number of spatial dimensions possessed by the
    compartment.  Most modeling scenarios involve compartments with
    integer values of 'spatialDimensions' of 3 (i.e., a three-dimensional
    compartment, which is to say, a volume), or 2 (a two-dimensional
    compartment, a surface), or 1 (a one-dimensional compartment, a line).
    In SBML Level 3, the type of this attribute is double, there are no
    restrictions on the permitted values of the 'spatialDimensions'
    attribute, and there are no default values.  In SBML Level 2, the
    value must be a positive integer, and the default value is 3; the
    permissible values in SBML Level 2 are 3, 2, 1, and 0 (for a point).

    Another optional attribute on Compartment is 'size', representing the
    initial total size of that compartment in the model.  The 'size'
    attribute must be a floating-point value and may represent a volume
    (if the compartment is a three-dimensional one), or an area (if the
    compartment is two-dimensional), or a length (if the compartment is
    one-dimensional). There is no default value of compartment size in
    SBML Level 2 or Level 3.  In particular, a missing 'size' value does
    not imply that the compartment size is 1.  (This is unlike the
    definition of compartment 'volume' in SBML Level 1.)  When the
    compartment's 'spatialDimensions' attribute does not have a value of
    0, a missing value of 'size' for a given compartment signifies that
    the value either is unknown, or to be obtained from an external
    source, or determined by an InitialAssignment, AssignmentRule,
    AlgebraicRule or RateRule object elsewhere in the model.  In SBML
    Level 2, there are additional special requirements on the values of
    'size'; we discuss them in a separate section below.

    The units associated with a compartment's 'size' attribute value may
    be set using the optional attribute 'units'.  The rules for setting
    and using compartment size units differ between SBML Level 2 and Level
    3, and are discussed separately below.

    Finally, the optional Compartment attribute named 'constant' is used
    to indicate whether the compartment's size stays constant after
    simulation begins.  A value of True indicates the compartment's 'size'
    cannot be changed by any other construct except InitialAssignment; a
    value of false indicates the compartment's 'size' can be changed by
    other constructs in SBML.  In SBML Level 2, there is an additional
    explicit restriction that if 'spatialDimensions'='0', the value cannot
    be changed by InitialAssignment either.  Further, in Level 2,
    'constant' has a default value of True.  In SBML Level 3, there is no
    default value for the 'constant' attribute.

    Additional considerations in SBML Level 2
    ======================================================================

    In SBML Level 2, the default units of compartment size, and the kinds
    of units allowed as values of the attribute 'units', interact with the
    number of spatial dimensions of the compartment.  The value of the
    'units' attribute of a Compartment object must be one of the base
    units (see Unit), or the predefined unit identifiers volume, area,
    length or dimensionless, or a new unit defined by a UnitDefinition
    object in the enclosing Model, subject to the restrictions detailed in
    the following table:

      +----------------------------+---------------+----------------+-----------------------------------+----------------------------------+
      |Value of spatialDimensions  |size allowed?  |units allowed?  |Allowable kinds of units           |Default value of attribute units  |
      +----------------------------+---------------+----------------+-----------------------------------+----------------------------------+
      |3                           |yes            |yes             |units of volume, or dimensionless  |volume                            |
      |2                           |yes            |yes             |units of area, or dimensionless    |area                              |
      |1                           |yes            |yes             |units of length, or dimensionless  |length                            |
      |0                           |no             |no              |(no units allowed)                 |                                  |
      +----------------------------+---------------+----------------+-----------------------------------+----------------------------------+

      In SBML Level 2, the units of the compartment size, as defined by
    the 'units' attribute or (if 'units' is not set) the default value
    listed in the table above, are used in the following ways when the
    compartment has a 'spatialDimensions' value greater than 0:

    * The value of the 'units' attribute is used as the units of the
    compartment identifier when the identifier appears as a numerical
    quantity in a mathematical formula expressed in MathML.

    * The math element of an AssignmentRule or InitialAssignment referring
    to this compartment must have identical units.

    * In RateRule objects that set the rate of change of the compartment's
    size, the units of the rule's math element must be identical to the
    compartment's 'units' attribute divided by the default time units. (In
    other words, the units for the rate of change of compartment size are
    compartment size/time units.

    * When a Species is to be treated in terms of concentrations or
    density, the units of the spatial size portion of the concentration
    value (i.e., the denominator in the units formula substance/size) are
    those indicated by the value of the 'units' attribute on the
    compartment in which the species is located. Compartments with
    'spatialDimensions'=0 require special treatment in this framework.  As
    implied above, the 'size' attribute must not have a value on an SBML
    Level 2 Compartment object if the 'spatialDimensions' attribute has a
    value of 0.  An additional related restriction is that the 'constant'
    attribute must default to or be set to True if the value of the
    'spatialDimensions' attribute is 0, because a zero-dimensional
    compartment cannot ever have a size.

    If a compartment has no size or dimensional units, how should such a
    compartment's identifier be interpreted when it appears in
    mathematical formulas?  The answer is that such a compartment's
    identifier should not appear in mathematical formulas in the first
    place -- it has no value, and its value cannot change.  Note also that
    a zero-dimensional compartment is a point, and species located at
    points can only be described in terms of amounts, not spatially-
    dependent measures such as concentration.  Since SBML KineticLaw
    formulas are already in terms of substance/time and not (say)
    concentration/time, volume or other factors in principle are not
    needed for species located in zero-dimensional compartments.

    Finally, in SBML Level 2 Versions 2-4, each compartment in a model may
    optionally be designated as belonging to a particular compartment
    type.  The optional attribute 'compartmentType' is used identify the
    compartment type represented by the Compartment structure. The
    'compartmentType' attribute's value must be the identifier of a
    CompartmentType instance defined in the model.  If the
    'compartmentType' attribute is not present on a particular compartment
    definition, a unique virtual compartment type is assumed for that
    compartment, and no other compartment can belong to that compartment
    type.  The values of 'compartmentType' attributes on compartments have
    no effect on the numerical interpretation of a model.  Simulators and
    other numerical analysis software may ignore 'compartmentType'
    attributes.  The 'compartmentType' attribute and the CompartmentType
    class of objects are not present in SBML Level 3 Core nor in SBML
    Level 1.

    Additional considerations in SBML Level 3
    ======================================================================

    One difference between SBML Level 3 and lower Levels of SBML is that
    there are no restrictions on the permissible values of the
    'spatialDimensions' attribute, and there is no default value defined
    for the attribute.  The value of 'spatialDimensions' does not have to
    be an integer, either; this is to allow for the possibility of
    representing structures with fractal dimensions.

    The number of spatial dimensions possessed by a compartment cannot
    enter into mathematical formulas, and therefore cannot directly alter
    the numerical interpretation of a model.  However, the value of
    'spatialDimensions' does affect the interpretation of the units
    associated with a compartment's size.  Specifically, the value of
    'spatialDimensions' is used to select among the Model attributes
    'volumeUnits', 'areaUnits' and 'lengthUnits' when a Compartment
    structure does not define a value for its 'units' attribute.

    The 'units' attribute may be left unspecified for a given compartment
    in a model; in that case, the compartment inherits the unit of
    measurement specified by one of the attributes on the enclosing Model
    object instance.  The applicable attribute on Model depends on the
    value of the compartment's 'spatialDimensions' attribute; the
    relationship is shown in the table below.  If the Model object does
    not define the relevant attribute ('volumeUnits', 'areaUnits' or
    'lengthUnits') for a given 'spatialDimensions' value, the unit
    associated with that Compartment object's size is undefined.  If both
    'spatialDimensions' and 'units' are left unset on a given Compartment
    object instance, then no unit can be chosen from among the Model's
    'volumeUnits', 'areaUnits' or 'lengthUnits' attributes (even if the
    Model instance provides values for those attributes), because there is
    no basis to select between them and there is no default value of
    'spatialDimensions'. Leaving the units of compartments' sizes
    undefined in an SBML model does not render the model invalid; however,
    as a matter of best practice, we strongly recommend that all models
    specify the units of measurement for all compartment sizes.

      +----------------------------------------+-------------------------------------------------+-----------------------------------+
      |Value of attribute 'spatialDimensions'  |Attribute of Model used for inheriting the unit  |Recommended candidate units        |
      +----------------------------------------+-------------------------------------------------+-----------------------------------+
      |3                                       |"volumeUnits"                                  |units of volume, or dimensionless  |
      |2                                       |"areaUnits"                                    |units of area, or dimensionless    |
      |1                                       |"lengthUnits"                                  |units of length, or dimensionless  |
      |other                                   |no units inherited                               |no specific recommendations        |
      +----------------------------------------+-------------------------------------------------+-----------------------------------+

      The unit of measurement associated with a compartment's size, as
    defined by the 'units' attribute or (if 'units' is not set) the
    inherited value from Model according to the table above, is used in
    the following ways:

        * When the identifier of the compartment appears as a numerical
    quantity in a mathematical formula expressed in MathML, it represents
    the size of the compartment, and the unit associated with the size is
    the value of the 'units' attribute.

    * When a Species is to be treated in terms of concentrations or
    density, the unit associated with the spatial size portion of the
    concentration value (i.e., the denominator in the formula amount/size)
    is specified by the value of the 'units' attribute on the compartment
    in which the species is located.

    * The 'math' elements of AssignmentRule, InitialAssignment and
    EventAssignment objects setting the value of the compartment size
    should all have the same units as the unit associated with the
    compartment's size.

    * In a RateRule object that defines a rate of change for a
    compartment's size, the unit of the rule's 'math' element should be
    identical to the compartment's 'units' attribute divided by the model-
    wide unit of time.  (In other words, {unit of compartment size}/{unit
    of time}.)

    Other aspects of Compartment
    ======================================================================

    In SBML Level 1 and Level 2, Compartment has an optional attribute
    named 'outside', whose value can be the identifier of another
    Compartment object defined in the enclosing Model object.  Doing so
    means that the other compartment contains it or is outside of it.
    This enables the representation of simple topological relationships
    between compartments, for those simulation systems that can make use
    of the information (e.g., for drawing simple diagrams of
    compartments).  It is worth noting that in SBML, there is no
    relationship between compartment sizes when compartment positioning is
    expressed using the 'outside' attribute.  The size of a given
    compartment does not in any sense include the sizes of other
    compartments having it as the value of their 'outside' attributes.  In
    other words, if a compartment B has the identifier of compartment A as
    its 'outside' attribute value, the size of A does not include the size
    of B.  The compartment sizes are separate.

    In Level 2, there are two restrictions on the 'outside' attribute.
    First, because a compartment with 'spatialDimensions' of 0 has no
    size, such a compartment cannot act as the container of any other
    compartment except compartments that also have 'spatialDimensions'
    values of 0.  Second, the directed graph formed by representing
    Compartment structures as vertexes and the 'outside' attribute values
    as edges must be acyclic.  The latter condition is imposed to prevent
    a compartment from being contained inside itself.  In the absence of a
    value for 'outside', compartment definitions in SBML Level 2 do not
    have any implied spatial relationships between each other.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Compartment, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Compartment, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Compartment
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Compartment
        __init__(self, SBMLNamespaces sbmlns) -> Compartment
        __init__(self, Compartment orig) -> Compartment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Compartment(SBMLNamespaces sbmlns)

        Creates a new Compartment object using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        It is worth emphasizing that although this constructor does not take
        an identifier argument, in SBML Level 2 and beyond, the 'id'
        (identifier) attribute of a Compartment object is required to have a
        value.  Thus, callers are cautioned to assign a value after calling
        this constructor.  Setting the identifier can be accomplished using
        the method setId().

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Compartment(long level, long version)

        Creates a new Compartment object using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Compartment

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Compartment

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Compartment(Compartment orig)

        Copy constructor; creates a copy of a Compartment.

        Parameter 'orig' is the Compartment instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Compartment(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Compartment

        Creates and returns a deep copy of this Compartment object object.

        Returns a (deep) copy of this Compartment.

        """
        return _libsbml.Compartment_clone(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Initializes the fields of this Compartment object to 'typical' default
        values.

        The SBML Compartment component has slightly different aspects and
        default attribute values in different SBML Levels and Versions. This
        method sets the values to certain common defaults, based mostly on
        what they are in SBML Level 2.  Specifically:

            * Sets attribute 'spatialDimensions' to 3

           * Sets attribute 'constant' to True

           * (Applies to Level 1 models only) Sets attribute 'volume' to 1.0

           * (Applies to Level 3 models only) Sets attribute 'units' to litre

        """
        return _libsbml.Compartment_initDefaults(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Compartment object.

        Returns the identifier of this Compartment object.

        See also isSetId().

        """
        return _libsbml.Compartment_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Compartment object.

        Returns the name of this Compartment object.

        See also unsetName().

        """
        return _libsbml.Compartment_getName(self)

    def getCompartmentType(self):
        """
        getCompartmentType(self) -> string

        Get the value of the 'compartmentType' attribute of this Compartment
        object.

        Returns the value of the 'compartmentType' attribute of this
        Compartment object as a string.

        Note:

        The 'compartmentType' attribute is only available in SBML Level 2
        Versions 2-4.

        See also unsetCompartmentType().

        """
        return _libsbml.Compartment_getCompartmentType(self)

    def getSpatialDimensions(self):
        """
        getSpatialDimensions(self) -> unsigned int

        Get the number of spatial dimensions of this Compartment object.

        Returns the value of the 'spatialDimensions' attribute of this
        Compartment object as a long integereger

        Note:

        In SBML Level 3, the data type of the 'spatialDimensions' attribute is
        double, whereas in Level 2, it is integer.  To avoid backward
        compatibility issues, libSBML provides two separate methods for
        obtaining the value as either an integer or a type double, for models
        where it is relevant.

        See also unsetSpatialDimensions().

        """
        return _libsbml.Compartment_getSpatialDimensions(self)

    def getSpatialDimensionsAsDouble(self):
        """
        getSpatialDimensionsAsDouble(self) -> double

        Get the number of spatial dimensions of this Compartment object, as a
        double.

        Returns the value of the 'spatialDimensions' attribute of this
        Compartment object as a double, or NaN if this model is not in SBML
        Level 3 format.

        Note:

        In SBML Level 3, the data type of the 'spatialDimensions' attribute is
        double, whereas in Level 2, it is integer.  To avoid backward
        compatibility issues, libSBML provides two separate methods for
        obtaining the value as either an integer or a type double, for models
        where it is relevant.

        See also unsetSpatialDimensions().

        """
        return _libsbml.Compartment_getSpatialDimensionsAsDouble(self)

    def getSize(self):
        """
        getSize(self) -> double

        Get the size of this Compartment object.

        @par In SBML Level 1, compartments are always three-dimensional
        constructs and only have volumes, whereas in SBML Level 2 and higher,
        compartments may be other than three-dimensional, and therefore the
        'volume' attribute is named 'size' in Level 2 and above.  LibSBML
        provides both Compartment.getSize() and Compartment.getVolume() for
        easier support of different SBML Levels.

        Returns the value of the 'size' attribute ('volume' in Level 1) of
        this Compartment object as a floating-point number.

        Note:

        This method is identical to getVolume().

        See also unsetSize().

        """
        return _libsbml.Compartment_getSize(self)

    def getVolume(self):
        """
        getVolume(self) -> double

        Get the volume of this Compartment object.

        @par In SBML Level 1, compartments are always three-dimensional
        constructs and only have volumes, whereas in SBML Level 2 and higher,
        compartments may be other than three-dimensional, and therefore the
        'volume' attribute is named 'size' in Level 2 and above.  LibSBML
        provides both Compartment.getSize() and Compartment.getVolume() for
        easier support of different SBML Levels.

        Returns the value of the 'volume' attribute ('size' in Level 2) of
        this Compartment object, as a floating-point number.

        Note:

        The attribute 'volume' only exists by that name in SBML Level 1.  In
        Level 2 and above, the equivalent attribute is named 'size'.  In SBML
        Level 1, a compartment's volume has a default value (1.0) and
        therefore methods such as Compartment.isSetVolume() will always return
        True for a Level 1 model.  In Level 2, a compartment's size (the
        equivalent of SBML Level 1's 'volume') is optional and has no default
        value, and therefore may or may not be set.

        Note:

        This method is identical to getSize().

        See also unsetVolume().

        """
        return _libsbml.Compartment_getVolume(self)

    def getUnits(self):
        """
        getUnits(self) -> string

        Get the units of this Compartment object's size.

        The value of an SBML compartment's 'units' attribute establishes the
        unit of measurement associated with the compartment's size.

        Returns the value of the 'units' attribute of this Compartment object,
        as a string.  An empty string indicates that no units have been
        assigned to the value of the size.

        Note:

        There is an important distinction to be made between no units
        assigned, and assuming a value without units has any specific unit
        such as dimensionless.  In SBML, default units are never attributed to
        numbers, and numbers without units are not automatically assumed to
        have the unit dimensionless.  Please consult the relevant SBML
        specification document for a more in-depth explanation of this topic
        and the SBML unit system.

        See also unsetUnits().

        """
        return _libsbml.Compartment_getUnits(self)

    def getOutside(self):
        """
        getOutside(self) -> string

        Get the identifier, if any, of the Compartment object that is
        designated as being outside of this one.

        Returns the value of the 'outside' attribute of this Compartment
        object.

        Note:

        The 'outside' attribute is defined in SBML Level 1 and Level 2, but
        does not exist in SBML Level 3 Version 1 Core.

        See also unsetOutside().

        """
        return _libsbml.Compartment_getOutside(self)

    def getConstant(self):
        """
        getConstant(self) -> bool

        Get the value of the 'constant' attribute of this Compartment object.

        Returns True if this Compartment object's size is flagged as being
        constant, False otherwise.

        See also setConstant().

        """
        return _libsbml.Compartment_getConstant(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this Compartment object's 'id' attribute
        is set.

        Returns True if the 'id' attribute of this Compartment object is set,
        False otherwise.

        See also setId().

        """
        return _libsbml.Compartment_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this Compartment object's 'name' attribute
        is set.

        Returns True if the 'name' attribute of this Compartment object is
        set, False otherwise.

        See also unsetName().

        """
        return _libsbml.Compartment_isSetName(self)

    def isSetCompartmentType(self):
        """
        isSetCompartmentType(self) -> bool

        Predicate returning True if this Compartment object's
        'compartmentType' attribute is set.

        Returns True if the 'compartmentType' attribute of this Compartment is
        set, False otherwise.

        Note:

        The 'compartmentType' attribute is only available in SBML Level 2
        Versions 2-4.

        See also unsetCompartmentType().

        """
        return _libsbml.Compartment_isSetCompartmentType(self)

    def isSetSize(self):
        """
        isSetSize(self) -> bool

        Predicate returning True if this Compartment object's 'size' attribute
        is set.

        This method is similar but not identical to isSetVolume().  The latter
        should be used in the context of SBML Level 1 models instead of
        isSetSize() because isSetVolume() performs extra processing to take
        into account the difference in default values between SBML Levels 1
        and 2.

        Returns True if the 'size' attribute ('volume' in Level 2) of this
        Compartment object is set, False otherwise.

        See also unsetSize().

        """
        return _libsbml.Compartment_isSetSize(self)

    def isSetVolume(self):
        """
        isSetVolume(self) -> bool

        Predicate returning True if this Compartment object's 'volume'
        attribute is set.

        This method is similar but not identical to isSetSize().  The latter
        should not be used in the context of SBML Level 1 models because the
        present method performs extra processing to take into account the
        difference in default values between SBML Levels 1 and 2.

        Returns True if the 'volume' attribute ('size' in Level 2 and above)
        of this Compartment object is set, False otherwise.

        Note:

        The attribute 'volume' only exists by that name in SBML Level 1.  In
        Level 2 and above, the equivalent attribute is named 'size'.  In SBML
        Level 1, a compartment's volume has a default value (1.0) and
        therefore methods such as Compartment.isSetVolume() will always return
        True for a Level 1 model.  In Level 2, a compartment's size (the
        equivalent of SBML Level 1's 'volume') is optional and has no default
        value, and therefore may or may not be set.

        See also unsetVolume().

        """
        return _libsbml.Compartment_isSetVolume(self)

    def isSetUnits(self):
        """
        isSetUnits(self) -> bool

        Predicate returning True if this Compartment object's 'units'
        attribute is set.

        Returns True if the 'units' attribute of this Compartment object is
        set, False otherwise.

        Note:

        There is an important distinction to be made between no units
        assigned, and assuming a value without units has any specific unit
        such as dimensionless.  In SBML, default units are never attributed to
        numbers, and numbers without units are not automatically assumed to
        have the unit dimensionless.  Please consult the relevant SBML
        specification document for a more in-depth explanation of this topic
        and the SBML unit system.

        See also unsetUnits().

        """
        return _libsbml.Compartment_isSetUnits(self)

    def isSetOutside(self):
        """
        isSetOutside(self) -> bool

        Predicate returning True if this Compartment object's 'outside'
        attribute is set.

        Returns True if the 'outside' attribute of this Compartment object is
        set, False otherwise.

        Note:

        The 'outside' attribute is defined in SBML Level 1 and Level 2, but
        does not exist in SBML Level 3 Version 1 Core.

        See also unsetOutside().

        """
        return _libsbml.Compartment_isSetOutside(self)

    def isSetSpatialDimensions(self):
        """
        isSetSpatialDimensions(self) -> bool

        Predicate returning True if this Compartment object's
        'spatialDimensions' attribute is set.

        Returns True if the 'spatialDimensions' attribute of this Compartment
        object is set, False otherwise.

        See also unsetSpatialDimensions().

        """
        return _libsbml.Compartment_isSetSpatialDimensions(self)

    def isSetConstant(self):
        """
        isSetConstant(self) -> bool

        Predicate returning True if this Compartment object's 'constant'
        attribute is set.

        Returns True if the 'constant' attribute of this Compartment object is
        set, False otherwise.

        See also setConstant().

        """
        return _libsbml.Compartment_isSetConstant(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this Compartment object.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        Compartment object. If the string is None, this method will return
        libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        See also isSetId().

        """
        return _libsbml.Compartment_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Compartment object.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the Compartment object. If the
        string is None, this method will return
        libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        See also unsetName().

        """
        return _libsbml.Compartment_setName(self, *args)

    def setCompartmentType(self, *args):
        """
        setCompartmentType(self, string sid) -> int

        Sets the 'compartmentType' attribute of this Compartment object.

        Parameter 'sid' is the identifier of a CompartmentType object defined
        elsewhere in this Model. If the string is None, this method will
        return libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The 'compartmentType' attribute is only available in SBML Level 2
        Versions 2-4.

        See also unsetCompartmentType().

        """
        return _libsbml.Compartment_setCompartmentType(self, *args)

    def setSpatialDimensions(self, *args):
        """
        setSpatialDimensions(self, unsigned int value) -> int
        setSpatialDimensions(self, double value) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setSpatialDimensions(double value)

        Sets the 'spatialDimensions' attribute of this Compartment object as a
        double.

        Parameter 'value' is a double indicating the number of dimensions of
        this compartment.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        See also unsetSpatialDimensions(), unsetSpatialDimensions().

        """
        return _libsbml.Compartment_setSpatialDimensions(self, *args)

    def setSize(self, *args):
        """
        setSize(self, double value) -> int

        Sets the 'size' attribute (or 'volume' in SBML Level 1) of this
        Compartment object.

        Parameter 'value' is a double representing the size of this
        compartment instance in whatever units are in effect for the
        compartment.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        Note:

        This method is identical to setVolume().

        See also unsetSize().

        """
        return _libsbml.Compartment_setSize(self, *args)

    def setVolume(self, *args):
        """
        setVolume(self, double value) -> int

        Sets the 'volume' attribute (or 'size' in SBML Level 2) of this
        Compartment object.

        This method is identical to setSize() and is provided for
        compatibility between SBML Level 1 and higher Levels of SBML.

        Parameter 'value' is a double representing the volume of this
        compartment instance in whatever units are in effect for the
        compartment.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        Note:

        The attribute 'volume' only exists by that name in SBML Level 1.  In
        Level 2 and above, the equivalent attribute is named 'size'.  In SBML
        Level 1, a compartment's volume has a default value (1.0) and
        therefore methods such as Compartment.isSetVolume() will always return
        True for a Level 1 model.  In Level 2, a compartment's size (the
        equivalent of SBML Level 1's 'volume') is optional and has no default
        value, and therefore may or may not be set.

        See also unsetVolume().

        """
        return _libsbml.Compartment_setVolume(self, *args)

    def setUnits(self, *args):
        """
        setUnits(self, string sid) -> int

        Sets the 'units' attribute of this Compartment object.

        Parameter 'sid' is the identifier of the defined units to use.  If
        'sid' is None, then this method will return
        libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        See also unsetUnits().

        """
        return _libsbml.Compartment_setUnits(self, *args)

    def setOutside(self, *args):
        """
        setOutside(self, string sid) -> int

        Sets the 'outside' attribute of this Compartment object.

        Parameter 'sid' is the identifier of a compartment that encloses this
        one. If 'sid' is None, then this method will return
        libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'outside' attribute is defined in SBML Level 1 and Level 2, but
        does not exist in SBML Level 3 Version 1 Core.

        See also unsetOutside().

        """
        return _libsbml.Compartment_setOutside(self, *args)

    def setConstant(self, *args):
        """
        setConstant(self, bool value) -> int

        Sets the value of the 'constant' attribute of this Compartment object.

        Parameter 'value' is a boolean indicating whether the size/volume of
        this compartment should be considered constant (True) or variable
        (False).

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        See also getConstant().

        """
        return _libsbml.Compartment_setConstant(self, *args)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Compartment_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Compartment_renameUnitSIdRefs(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Compartment object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also isSetName().

        """
        return _libsbml.Compartment_unsetName(self)

    def unsetCompartmentType(self):
        """
        unsetCompartmentType(self) -> int

        Unsets the value of the 'compartmentType' attribute of this
        Compartment object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The 'compartmentType' attribute is only available in SBML Level 2
        Versions 2-4.

        See also getCompartmentType().

        """
        return _libsbml.Compartment_unsetCompartmentType(self)

    def unsetSize(self):
        """
        unsetSize(self) -> int

        Unsets the value of the 'size' attribute of this Compartment object.

        In SBML Level 1, a compartment's volume has a default value (1.0) and
        therefore should always be set.  Calling this method on a Level 1
        model resets the value to 1.0 rather than actually unsetting it.  In
        Level 2, a compartment's 'size' is optional with no default value, and
        unsetting it will result in the compartment having no defined size.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method is identical to unsetVolume().

        See also setSize().

        """
        return _libsbml.Compartment_unsetSize(self)

    def unsetVolume(self):
        """
        unsetVolume(self) -> int

        Unsets the value of the 'volume' attribute of this Compartment object.

        This method is identical to unsetSize().  Please refer to that
        method's documentation for more information about its behavior.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The attribute 'volume' only exists by that name in SBML Level 1.  In
        Level 2 and above, the equivalent attribute is named 'size'.  In SBML
        Level 1, a compartment's volume has a default value (1.0) and
        therefore methods such as Compartment.isSetVolume() will always return
        True for a Level 1 model.  In Level 2, a compartment's size (the
        equivalent of SBML Level 1's 'volume') is optional and has no default
        value, and therefore may or may not be set.

        See also isSetVolume().

        """
        return _libsbml.Compartment_unsetVolume(self)

    def unsetUnits(self):
        """
        unsetUnits(self) -> int

        Unsets the value of the 'units' attribute of this Compartment object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also getUnits().

        """
        return _libsbml.Compartment_unsetUnits(self)

    def unsetOutside(self):
        """
        unsetOutside(self) -> int

        Unsets the value of the 'outside' attribute of this Compartment
        object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'outside' attribute is defined in SBML Level 1 and Level 2, but
        does not exist in SBML Level 3 Version 1 Core.

        See also setOutside().

        """
        return _libsbml.Compartment_unsetOutside(self)

    def unsetSpatialDimensions(self):
        """
        unsetSpatialDimensions(self) -> int

        Unsets the value of the 'spatialDimensions' attribute of this
        Compartment object.

        In SBML Levels prior to Level 3, compartments must always have a value
        for the number of dimensions.  Consequently, calling this method on a
        model of SBML Level 1-2 will result in a return value of
        libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        This function is only valid for SBML Level 3.

        See also setSpatialDimensions().

        """
        return _libsbml.Compartment_unsetSpatialDimensions(self)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Constructs and returns a UnitDefinition that corresponds to the units
        of this Compartment object's designated size.

        @par Compartments in SBML have an attribute ('units') for declaring
        the units of measurement intended for the value of the compartment's
        size.  In the absence of a value given for this attribute, the units
        are inherited from values either defined on the enclosing Model (in
        SBML Level 3) or in defaults (in SBML Level 2).  This method returns a
        UnitDefinition object based on how this compartment's units are
        interpreted according to the relevant SBML guidelines, or it returns
        None if no units have been declared and no defaults are defined by the
        relevant SBML specification.

        Note that unit declarations for Compartment objects  are specified in
        terms of the identifier of a unit, but this method returns an object ,
        not a unit identifier.  It does this by constructing an appropriate
        UnitDefinition object.  For SBML Level 2 models, it will do this even
        when the value of the 'units' attribute is one of the special SBML
        Level 2 unit identifiers 'substance', 'volume', 'area', 'length' or
        'time'.  Callers may find this useful in conjunction with the helper
        methods provided by the UnitDefinition class for comparing different
        UnitDefinition objects.

        Returns a UnitDefinition that expresses the units of this Compartment
        object, or None if one cannot be constructed.

        Note:

        The libSBML system for unit analysis depends on the model as a whole.
        In cases where the Compartment object has not yet been added to a
        model, or the model itself is incomplete, unit analysis is not
        possible, and consequently this method will return None.

        See also getUnits().

        """
        return _libsbml.Compartment_getDerivedUnitDefinition(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_COMPARTMENT
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Compartment_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Compartment, is
        always 'compartment'.

        Returns the name of this element, i.e., 'compartment'.

        """
        return _libsbml.Compartment_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        Compartment object have been set.

        The required attributes for a Compartment object are:

           * 'id' (or 'name' in SBML Level 1)

           * 'constant' (in SBML Level 3 only)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.Compartment_hasRequiredAttributes(self)

Compartment_swigregister = _libsbml.Compartment_swigregister
Compartment_swigregister(Compartment)

class ListOfCompartments(ListOf):
    """
    Implementation of SBML Level 2's ListOfCompartments construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfCompartments, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfCompartments, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfCompartments
        __init__(self, SBMLNamespaces sbmlns) -> ListOfCompartments

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfCompartments(SBMLNamespaces sbmlns)

        Creates a new ListOfCompartments object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfCompartments object to be
        created.

        @par <hr> Method variant with the following signature:

            ListOfCompartments(long level, long version)

        Creates a new ListOfCompartments object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfCompartments(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfCompartments

        Creates and returns a deep copy of this ListOfCompartments instance.

        Returns a (deep) copy of this ListOfCompartments.

        """
        return _libsbml.ListOfCompartments_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Compartment objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf
        instance: libsbml.SBML_COMPARTMENT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfCompartments_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfCompartments, the XML element name is 'listOfCompartments'.

        Returns the name of this element, i.e., 'listOfCompartments'.

        """
        return _libsbml.ListOfCompartments_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Compartment
        get(self, unsigned int n) -> Compartment
        get(self, string sid) -> Compartment
        get(self, string sid) -> Compartment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Compartment object from the ListOfCompartments.

        Parameter 'n' is the index number of the Compartment object to get.

        Returns the nth Compartment object in this ListOfCompartments.

        See also size(), size().

        """
        return _libsbml.ListOfCompartments_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Compartment
        remove(self, string sid) -> Compartment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfCompartments items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfCompartments items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfCompartments_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfCompartments
    __del__ = lambda self : None;
ListOfCompartments_swigregister = _libsbml.ListOfCompartments_swigregister
ListOfCompartments_swigregister(ListOfCompartments)

class Species(SBase):
    """
    Implementation of SBML's Species construct.

    A species in SBML refers to a pool of entities that (a) are considered
    indistinguishable from each other for the purposes of the model, (b)
    participate in reactions, and (c) are located in a specific
    compartment.  The SBML Species object class is intended to represent
    these pools.

    As with other major constructs in SBML, Species has a mandatory
    attribute, 'id', used to give the species type an identifier in the
    model.  The identifier must be a text string conforming to the
    identifer syntax permitted in SBML.  Species also has an optional
    'name' attribute, of type string.  The 'id' and 'name' must be used
    according to the guidelines described in the SBML specifications.

    The required attribute 'compartment' is used to identify the
    compartment in which the species is located.  The attribute's value
    must be the identifier of an existing Compartment object.  It is
    important to note that there is no default value for the 'compartment'
    attribute on Species; every species in an SBML model must be assigned
    a compartment explicitly.  (This also implies that every model with
    one or more Species objects must define at least one Compartment
    object.)

    The initial amount and concentration of a species
    ======================================================================

    The optional attributes 'initialAmount' and 'initialConcentration',
    both having a data type of double, can be used to set the initial
    quantity of the species in the compartment where the species is
    located. These attributes are mutually exclusive; i.e., only one can
    have a value on any given instance of a Species object.  Missing
    'initialAmount' and 'initialConcentration' values implies that their
    values either are unknown, or to be obtained from an external source,
    or determined by an InitialAssignment or other SBML construct
    elsewhere in the model.

    A species' initial quantity in SBML is set by the 'initialAmount' or
    'initialConcentration' attribute exactly once.  If the 'constant'
    attribute is True, then the value of the species' quantity is fixed
    and cannot be changed except by an InitialAssignment.  These methods
    differ in that the 'initialAmount' and 'initialConcentration'
    attributes can only be used to set the species quantity to a literal
    floating-point number, whereas the use of an InitialAssignment object
    allows the value to be set using an arbitrary mathematical expression
    (which, thanks to MathML's expressiveness, may evaluate to a rational
    number).  If the species' 'constant' attribute is False, the species'
    quantity value may be overridden by an InitialAssignment or changed by
    AssignmentRule or AlgebraicRule, and in addition, for t > 0, it may
    also be changed by a RateRule, Event objects, and as a result of being
    a reactant or product in one or more Reaction objects.  (However, some
    constructs are mutually exclusive; see the SBML specifications for the
    precise details.)  It is not an error to define 'initialAmount' or
    'initialConcentration' on a species and also redefine the value using
    an InitialAssignment, but the 'initialAmount' or
    'initialConcentration' setting in that case is ignored.  The SBML
    specifications provide additional information about the semantics of
    assignments, rules and values for simulation time t <= 0.

    SBML Level 2 additionally stipulates that in cases where a species'
    compartment has a 'spatialDimensions' value of 0 (zero), the species
    cannot have a value for 'initialConcentration' because the concepts of
    concentration and density break down when a container has zero
    dimensions.

    The units of a species' amount or concentration
    ======================================================================

    When the attribute 'initialAmount' is set, the unit of measurement
    associated with the value of 'initialAmount' is specified by the
    Species attribute 'substanceUnits'.  When the 'initialConcentration'
    attribute is set, the unit of measurement associated with this
    concentration value is {unit of amount} divided by {unit of size},
    where the {unit of amount} is specified by the Species
    'substanceUnits' attribute, and the {unit of size} is specified by the
    'units' attribute of the Compartment object in which the species is
    located.  Note that in either case, a unit of amount is involved and
    determined by the 'substanceUnits' attribute.  Note these two
    attributes alone do not determine the units of the species when the
    species identifier appears in a mathematical expression; that aspect
    is determined by the attribute 'hasOnlySubstanceUnits' discussed
    below.

    In SBML Level 3, if the 'substanceUnits' attribute is not set on a
    given Species object instance, then the unit of amount for that
    species is inherited from the 'substanceUnits' attribute on the
    enclosing Model object instance.  If that attribute on Model is not
    set either, then the unit associated with the species' quantity is
    undefined.

    In SBML Level 2, if the 'substanceUnits' attribute is not set on a
    given Species object instance, then the unit of amount for that
    species is taken from the predefined SBML unit identifier 'substance'.
    The value assigned to 'substanceUnits' must be chosen from one of the
    following possibilities: one of the base unit identifiers defined in
    SBML, the built-in unit identifier 'substance', or the identifier of a
    new unit defined in the list of unit definitions in the enclosing
    Model object.  The chosen units for 'substanceUnits' must be be
    'dimensionless', 'mole', 'item', 'kilogram', 'gram', or units derived
    from these.

    As noted at the beginning of this section, simply setting
    'initialAmount' or 'initialConcentration' alone does not determine
    whether a species identifier represents an amount or a concentration
    when it appears elsewhere in an SBML model.  The role of the attribute
    'hasOnlySubstanceUnits' is to indicate whether the units of the
    species, when the species identifier appears in mathematical formulas,
    are intended to be concentration or amount.  The attribute takes on a
    boolean value.  In SBML Level 3, the attribute has no default value
    and must always be set in a model; in SBML Level 2, it has a default
    value of False.

    The units of the species are used in the following ways:

    * When the species' identifier appears in a MathML formula, it
    represents the species' quantity, and the unit of measurement
    associated with the quantity is as described above.

    * The 'math' elements of AssignmentRule, InitialAssignment and
    EventAssignment objects referring to this species should all have the
    same units as the unit of measurement associated with the species
    quantity.

    * In a RateRule object that defines the rate of change of the species'
    quantity, the unit associated with the rule's 'math' element should be
    equal to the unit of the species' quantity divided by the model-wide
    unit of time; in other words, {unit of species quantity}/{unit of
    time}.

    The 'constant' and 'boundaryCondition' attributes
    ======================================================================

    The Species object class has two boolean attributes named 'constant'
    and 'boundaryCondition', used to indicate whether and how the quantity
    of that species can vary during a simulation.  In SBML Level 2 they
    are optional; in SBML Level 3 they are mandatory.  The following table
    shows how to interpret the combined values of these attributes.

    Interpretation of species' constant and boundaryCondition attributes.
    constant value boundaryCondition value Can have assignment or rate
    rule? Can be reactant or product? Species' quantity can be changed by
    true true no yes (never changes) false true yes yes rules and events
    true false no no (never changes) false false yes yes reactions or
    rules (but not both at the same time), and events

    By default, when a species is a product or reactant of one or more
    reactions, its quantity is determined by those reactions.  In SBML, it
    is possible to indicate that a given species' quantity is not
    determined by the set of reactions even when that species occurs as a
    product or reactant; i.e., the species is on the boundary of the
    reaction system, and its quantity is not determined by the reactions.
    The boolean attribute 'boundaryCondition' can be used to indicate
    this.  A value of False indicates that the species is part of the
    reaction system.  In SBML Level 2, the attribute has a default value
    of False, while in SBML Level 3, it has no default.

    The 'constant' attribute indicates whether the species' quantity can
    be changed at all, regardless of whether by reactions, rules, or
    constructs other than InitialAssignment.  A value of False indicates
    that the species' quantity can be changed.  (This is also a common
    value because the purpose of most simulations is precisely to
    calculate changes in species quantities.)  In SBML Level 2, the
    attribute has a default value of False, while in SBML Level 3, it has
    no default.  Note that the initial quantity of a species can be set by
    an InitialAssignment irrespective of the value of the 'constant'
    attribute.

    In practice, a 'boundaryCondition' value of True means a differential
    equation derived from the reaction definitions should not be generated
    for the species.  However, the species' quantity may still be changed
    by AssignmentRule, RateRule, AlgebraicRule, Event, and
    InitialAssignment constructs if its 'constant' attribute is False.
    Conversely, if the species' 'constant' attribute is True, then its
    value cannot be changed by anything except InitialAssignment.

    A species having 'boundaryCondition'=False and 'constant'=False can
    appear as a product and/or reactant of one or more reactions in the
    model.  If the species is a reactant or product of a reaction, it must
    not also appear as the target of any AssignmentRule or RateRule object
    in the model.  If instead the species has 'boundaryCondition'=false
    and 'constant'=True, then it cannot appear as a reactant or product,
    or as the target of any AssignmentRule, RateRule or EventAssignment
    object in the model.

    The conversionFactor attribute in SBML Level 3
    ======================================================================

    In SBML Level 3, Species has an additional optional attribute,
    'conversionFactor', that defines a conversion factor that applies to a
    particular species.  The value must be the identifier of a Parameter
    object instance defined in the model.  That Parameter object must be a
    constant, meaning its 'constant' attribute must be set to True. If a
    given Species object definition defines a value for its
    'conversionFactor' attribute, it takes precedence over any factor
    defined by the Model object's 'conversionFactor' attribute.

    The unit of measurement associated with a species' quantity can be
    different from the unit of extent of reactions in the model.  SBML
    Level 3 avoids implicit unit conversions by providing an explicit way
    to indicate any unit conversion that might be required.  The use of a
    conversion factor in computing the effects of reactions on a species'
    quantity is explained in detail in the SBML Level 3 specification
    document.  Because the value of the 'conversionFactor' attribute is
    the identifier of a Parameter object, and because parameters can have
    units attached to them, the transformation from reaction extent units
    to species units can be completely specified using this approach.

    Note that the unit conversion factor is only applied when calculating
    the effect of a reaction on a species.  It is not used in any rules or
    other SBML constructs that affect the species, and it is also not used
    when the value of the species is referenced in a mathematical
    expression.

    The speciesType attribute in SBML Level 2 Versions 2-4
    ======================================================================

    In SBML Level 2 Versions 2-4, each species in a model may optionally
    be designated as belonging to a particular species type. The optional
    attribute 'speciesType' is used to identify the species type of the
    chemical entities that make up the pool represented by the Species
    objects.  The attribute's value must be the identifier of an existing
    SpeciesType object in the model.  If the 'speciesType' attribute is
    not present on a particular species definition, it means the pool
    contains chemical entities of a type unique to that pool; in effect, a
    virtual species type is assumed for that species, and no other species
    can belong to that species type.  The value of 'speciesType'
    attributes on species have no effect on the numerical interpretation
    of a model; simulators and other numerical analysis software may
    ignore 'speciesType' attributes.

    There can be only one species of a given species type in any given
    compartment of a model.  More specifically, for all Species objects
    having a value for the 'speciesType' attribute, the pair <center>
    ('speciesType' attribute value, 'compartment' attribute value)
    </center>

    must be unique across the set of all Species object in a model.

    The spatialSizeUnits attribute in SBML Level 2 Versions 1-2
    ======================================================================

    In versions of SBML Level 2 before Version 3, the class Species
    included an attribute called 'spatialSizeUnits', which allowed
    explicitly setting the units of size for initial concentration.
    LibSBML retains this attribute for compatibility with older
    definitions of Level 2, but its use is strongly discouraged because
    many software tools do no properly interpret this unit declaration and
    it is incompatible with all SBML specifications after Level 2 Version
    3.

    Additional considerations for interpreting the numerical value of a
    species
    ======================================================================

    Species are unique in SBML in that they have a kind of duality: a
    species identifier may stand for either substance amount (meaning, a
    count of the number of individual entities) or a concentration or
    density (meaning, amount divided by a compartment size).  The previous
    sections explain the meaning of a species identifier when it is
    referenced in a mathematical formula or in rules or other SBML
    constructs; however, it remains to specify what happens to a species
    when the compartment in which it is located changes in size.

    When a species definition has a 'hasOnlySubstanceUnits' attribute
    value of False and the size of the compartment in which the species is
    located changes, the default in SBML is to assume that it is the
    concentration that must be updated to account for the size change.
    This follows from the principle that, all other things held constant,
    if a compartment simply changes in size, the size change does not in
    itself cause an increase or decrease in the number of entities of any
    species in that compartment.  In a sense, the default is that the
    amount of a species is preserved across compartment size changes.
    Upon such size changes, the value of the concentration or density must
    be recalculated from the simple relationship concentration = amount /
    size if the value of the concentration is needed (for example, if the
    species identifier appears in a mathematical formula or is otherwise
    referenced in an SBML construct).  There is one exception: if the
    species' quantity is determined by an AssignmentRule, RateRule,
    AlgebraicRule, or an EventAssignment and the species has a
    'hasOnlySubstanceUnits' attribute value of False, it means that the
    concentration is assigned by the rule or event; in that case, the
    amount must be calculated when the compartment size changes.  (Events
    also require additional care in this situation, because an event with
    multiple assignments could conceivably reassign both a species
    quantity and a compartment size simultaneously.  Please refer to the
    SBML specifications for the details.)

    Note that the above only matters if a species has a
    'hasOnlySubstanceUnits' attribute value of False, meaning that the
    species identifier refers to a concentration wherever the identifier
    appears in a mathematical formula.  If instead the attribute's value
    is True, then the identifier of the species always stands for an
    amount wherever it appears in a mathematical formula or is referenced
    by an SBML construct.  In that case, there is never a question about
    whether an assignment or event is meant to affect the amount or
    concentration: it is always the amount.

    A particularly confusing situation can occur when the species has
    'constant' attribute value of True in combination with a
    'hasOnlySubstanceUnits' attribute value of False.  Suppose this
    species is given a value for 'initialConcentration'.  Does a
    'constant' value of True mean that the concentration is held constant
    if the compartment size changes?  No; it is still the amount that is
    kept constant across a compartment size change.  The fact that the
    species was initialized using a concentration value is irrelevant.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Species, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Species, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Species
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Species
        __init__(self, SBMLNamespaces sbmlns) -> Species
        __init__(self, Species orig) -> Species

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Species(SBMLNamespaces sbmlns)

        Creates a new Species using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        It is worth emphasizing that although this constructor does not take
        an identifier argument, in SBML Level 2 and beyond, the 'id'
        (identifier) attribute of a Species is required to have a value. Thus,
        callers are cautioned to assign a value after calling this
        constructor.  Setting the identifier can be accomplished using the
        method Species.setId().

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Species(long level, long version)

        Creates a new Species using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Species

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Species

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Species(Species orig)

        Copy constructor; creates a copy of this Species object.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Species(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Species

        Creates and returns a deep copy of this Species object.

        Returns a (deep) copy of this Species object.

        """
        return _libsbml.Species_clone(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Initializes the fields of this Species object to 'typical' defaults
        values.

        The SBML Species component has slightly different aspects and default
        attribute values in different SBML Levels and Versions. This method
        sets the values to certain common defaults, based mostly on what they
        are in SBML Level 2.  Specifically:

        * Sets 'boundaryCondition' to False

           * Sets 'constant' to False

           * sets 'hasOnlySubstanceUnits' to False

           * (Applies to Level 3 models only) Sets attribute 'substanceUnits'
        to mole

        """
        return _libsbml.Species_initDefaults(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Species object.

        Returns the id of this Species object.

        """
        return _libsbml.Species_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Species object.

        Returns the name of this Species object.

        """
        return _libsbml.Species_getName(self)

    def getSpeciesType(self):
        """
        getSpeciesType(self) -> string

        Get the type of this Species object object.

        Returns the value of the 'speciesType' attribute of this Species as a
        string.

        Note:

        The 'speciesType' attribute is only available in SBML Level 2 Versions
        2-4.

        """
        return _libsbml.Species_getSpeciesType(self)

    def getCompartment(self):
        """
        getCompartment(self) -> string

        Get the compartment in which this species is located.

        The compartment is designated by its identifier.

        Returns the value of the 'compartment' attribute of this Species
        object, as a string.

        """
        return _libsbml.Species_getCompartment(self)

    def getInitialAmount(self):
        """
        getInitialAmount(self) -> double

        Get the value of the 'initialAmount' attribute.

        Returns the initialAmount of this Species, as a float-point number.

        """
        return _libsbml.Species_getInitialAmount(self)

    def getInitialConcentration(self):
        """
        getInitialConcentration(self) -> double

        Get the value of the 'initialConcentration' attribute.

        Returns the initialConcentration of this Species,, as a float-point
        number.

        Note:

        The attribute 'initialConcentration' is only available in SBML Level 2
        and 3.  It does not exist on Species in Level 1.

        """
        return _libsbml.Species_getInitialConcentration(self)

    def getSubstanceUnits(self):
        """
        getSubstanceUnits(self) -> string

        Get the value of the 'substanceUnits' attribute.

        Returns the value of the 'substanceUnits' attribute of this Species,
        as a string.  An empty string indicates that no units have been
        assigned.

        Note:

        There is an important distinction to be made between no units
        assigned, and assuming a value without units has any specific unit
        such as dimensionless.  In SBML, default units are never attributed to
        numbers, and numbers without units are not automatically assumed to
        have the unit dimensionless.  Please consult the relevant SBML
        specification document for a more in-depth explanation of this topic
        and the SBML unit system.

        See also setSubstanceUnits().

        """
        return _libsbml.Species_getSubstanceUnits(self)

    def getSpatialSizeUnits(self):
        """
        getSpatialSizeUnits(self) -> string

        Get the value of the 'spatialSizeUnits' attribute.

        Returns the value of the 'spatialSizeUnits' attribute of this Species
        object, as a string.

        WARNING:

        In versions of SBML Level 2 before Version 3, the class Species
        included an attribute called 'spatialSizeUnits', which allowed
        explicitly setting the units of size for initial concentration.  This
        attribute was removed in SBML Level 2 Version 3.  LibSBML retains this
        attribute for compatibility with older definitions of Level 2, but its
        use is strongly discouraged because it is incompatible with Level 2
        Version 3 and Level 2 Version 4.

        """
        return _libsbml.Species_getSpatialSizeUnits(self)

    def getUnits(self):
        """
        getUnits(self) -> string

        Get the value of the 'units' attribute.

        Returns the units of this Species (L1 only).

        Note:

        The 'units' attribute is defined only in SBML Level 1.  In SBML Level
        2 and Level 3, it has been replaced by a combination of
        'substanceUnits' and the units of the Compartment object in which a
        species is located.  In SBML Level 2 Versions 1-2, an additional
        attribute 'spatialSizeUnits' helps determine the units of the species
        quantity, but this attribute was removed in later versions of SBML
        Level 2.

        """
        return _libsbml.Species_getUnits(self)

    def getHasOnlySubstanceUnits(self):
        """
        getHasOnlySubstanceUnits(self) -> bool

        Get the value of the 'hasOnlySubstanceUnits' attribute.

        Returns True if this Species' 'hasOnlySubstanceUnits' attribute value
        is nonzero, False otherwise.

        Note:

        The 'hasOnlySubstanceUnits' attribute does not exist in SBML Level 1.

        """
        return _libsbml.Species_getHasOnlySubstanceUnits(self)

    def getBoundaryCondition(self):
        """
        getBoundaryCondition(self) -> bool

        Get the value of the 'boundaryCondition' attribute.

        Returns True if this Species' 'boundaryCondition' attribute value is
        nonzero, False otherwise.

        """
        return _libsbml.Species_getBoundaryCondition(self)

    def getCharge(self):
        """
        getCharge(self) -> int

        Get the value of the 'charge' attribute.

        Returns the charge of this Species object.

        Note:

        Beginning in SBML Level 2 Version 2, the 'charge' attribute on Species
        is deprecated and in SBML Level 3 it does not exist at all.  Its use
        strongly discouraged.  Its presence is considered a misfeature in
        earlier definitions of SBML because its implications for the
        mathematics of a model were never defined, and in any case, no known
        modeling system ever used it.  Instead, models take account of charge
        values directly in their definitions of species by (for example)
        having separate species identities for the charged and uncharged
        versions of the same species.  This allows the condition to affect
        model mathematics directly.  LibSBML retains this method for easier
        compatibility with SBML Level 1.

        """
        return _libsbml.Species_getCharge(self)

    def getConstant(self):
        """
        getConstant(self) -> bool

        Get the value of the 'constant' attribute.

        Returns True if this Species's 'constant' attribute value is nonzero,
        False otherwise.

        Note:

        The attribute 'constant' is only available in SBML Levels 2 and 3.  It
        does not exist on Species in Level 1.

        """
        return _libsbml.Species_getConstant(self)

    def getConversionFactor(self):
        """
        getConversionFactor(self) -> string

        Get the value of the 'conversionFactor' attribute.

        Returns the conversionFactor of this Species, as a string.

        Note:

        The 'conversionFactor' attribute was introduced in SBML Level 3.  It
        does not exist on Species in SBML Levels 1 and 2.

        """
        return _libsbml.Species_getConversionFactor(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this Species object's 'id' attribute is
        set.

        Returns True if the 'id' attribute of this Species is set, False
        otherwise.

        """
        return _libsbml.Species_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this Species object's 'name' attribute is
        set.

        Returns True if the 'name' attribute of this Species is set, False
        otherwise.

        """
        return _libsbml.Species_isSetName(self)

    def isSetSpeciesType(self):
        """
        isSetSpeciesType(self) -> bool

        Predicate returning True if this Species object's 'speciesType'
        attribute is set.

        Returns True if the 'speciesType' attribute of this Species is set,
        False otherwise.

        Note:

        The 'speciesType' attribute is only available in SBML Level 2 Versions
        2-4.

        """
        return _libsbml.Species_isSetSpeciesType(self)

    def isSetCompartment(self):
        """
        isSetCompartment(self) -> bool

        Predicate returning True if this Species object's 'compartment'
        attribute is set.

        Returns True if the 'compartment' attribute of this Species is set,
        False otherwise.

        """
        return _libsbml.Species_isSetCompartment(self)

    def isSetInitialAmount(self):
        """
        isSetInitialAmount(self) -> bool

        Predicate returning True if this Species object's 'initialAmount'
        attribute is set.

        Returns True if the 'initialAmount' attribute of this Species is set,
        False otherwise.

        Note:

        In SBML Level 1, Species' 'initialAmount' is required and therefore
        should always be set.  (However, in Level 1, the attribute has no
        default value either, so this method will not return True until a
        value has been assigned.)  In SBML Level 2, 'initialAmount' is
        optional and as such may or may not be set.

        """
        return _libsbml.Species_isSetInitialAmount(self)

    def isSetInitialConcentration(self):
        """
        isSetInitialConcentration(self) -> bool

        Predicate returning True if this Species object's
        'initialConcentration' attribute is set.

        Returns True if the 'initialConcentration' attribute of this Species
        is set, False otherwise.

        Note:

        The attribute 'initialConcentration' is only available in SBML Level 2
        and 3.  It does not exist on Species in Level 1.

        """
        return _libsbml.Species_isSetInitialConcentration(self)

    def isSetSubstanceUnits(self):
        """
        isSetSubstanceUnits(self) -> bool

        Predicate returning True if this Species object's 'substanceUnits'
        attribute is set.

        Returns True if the 'substanceUnits' attribute of this Species is set,
        False otherwise.

        """
        return _libsbml.Species_isSetSubstanceUnits(self)

    def isSetSpatialSizeUnits(self):
        """
        isSetSpatialSizeUnits(self) -> bool

        Predicate returning True if this Species object's 'spatialSizeUnits'
        attribute is set.

        Returns True if the 'spatialSizeUnits' attribute of this Species is
        set, False otherwise.

        WARNING:

        In versions of SBML Level 2 before Version 3, the class Species
        included an attribute called 'spatialSizeUnits', which allowed
        explicitly setting the units of size for initial concentration.  This
        attribute was removed in SBML Level 2 Version 3.  LibSBML retains this
        attribute for compatibility with older definitions of Level 2, but its
        use is strongly discouraged because it is incompatible with Level 2
        Version 3 and Level 2 Version 4.

        """
        return _libsbml.Species_isSetSpatialSizeUnits(self)

    def isSetUnits(self):
        """
        isSetUnits(self) -> bool

        Predicate returning True if this Species object's 'units' attribute is
        set.

        Returns True if the 'units' attribute of this Species is set, False
        otherwise.

        """
        return _libsbml.Species_isSetUnits(self)

    def isSetCharge(self):
        """
        isSetCharge(self) -> bool

        Predicate returning True if this Species object's 'charge' attribute
        is set.

        Returns True if the 'charge' attribute of this Species is set, False
        otherwise.

        Note:

        Beginning in SBML Level 2 Version 2, the 'charge' attribute on Species
        is deprecated and in SBML Level 3 it does not exist at all.  Its use
        strongly discouraged.  Its presence is considered a misfeature in
        earlier definitions of SBML because its implications for the
        mathematics of a model were never defined, and in any case, no known
        modeling system ever used it.  Instead, models take account of charge
        values directly in their definitions of species by (for example)
        having separate species identities for the charged and uncharged
        versions of the same species.  This allows the condition to affect
        model mathematics directly.  LibSBML retains this method for easier
        compatibility with SBML Level 1.

        """
        return _libsbml.Species_isSetCharge(self)

    def isSetConversionFactor(self):
        """
        isSetConversionFactor(self) -> bool

        Predicate returning True if this Species object's 'conversionFactor'
        attribute is set.

        Returns True if the 'conversionFactor' attribute of this Species is
        set, False otherwise.

        Note:

        The 'conversionFactor' attribute was introduced in SBML Level 3.  It
        does not exist on Species in SBML Levels 1 and 2.

        """
        return _libsbml.Species_isSetConversionFactor(self)

    def isSetBoundaryCondition(self):
        """
        isSetBoundaryCondition(self) -> bool

        Predicate returning True if this Species object's 'boundaryCondition'
        attribute is set.

        Returns True if the 'boundaryCondition' attribute of this Species is
        set, False otherwise.

        """
        return _libsbml.Species_isSetBoundaryCondition(self)

    def isSetHasOnlySubstanceUnits(self):
        """
        isSetHasOnlySubstanceUnits(self) -> bool

        Predicate returning True if this Species object's
        'hasOnlySubstanceUnits' attribute is set.

        Returns True if the 'hasOnlySubstanceUnits' attribute of this Species
        is set, False otherwise.

        Note:

        The 'hasOnlySubstanceUnits' attribute does not exist in SBML Level 1.

        """
        return _libsbml.Species_isSetHasOnlySubstanceUnits(self)

    def isSetConstant(self):
        """
        isSetConstant(self) -> bool

        Predicate returning True if this Species object's 'constant' attribute
        is set.

        Returns True if the 'constant' attribute of this Species is set, False
        otherwise.

        Note:

        The attribute 'constant' is only available in SBML Levels 2 and 3.  It
        does not exist on Species in Level 1.

        """
        return _libsbml.Species_isSetConstant(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this Species object.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this Species

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Species_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Species object.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the Species

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Species_setName(self, *args)

    def setSpeciesType(self, *args):
        """
        setSpeciesType(self, string sid) -> int

        Sets the 'speciesType' attribute of this Species object.

        Parameter 'sid' is the identifier of a SpeciesType object defined
        elsewhere in this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The 'speciesType' attribute is only available in SBML Level 2 Versions
        2-4.

        """
        return _libsbml.Species_setSpeciesType(self, *args)

    def setCompartment(self, *args):
        """
        setCompartment(self, string sid) -> int

        Sets the 'compartment' attribute of this Species object.

        Parameter 'sid' is the identifier of a Compartment object defined
        elsewhere in this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Species_setCompartment(self, *args)

    def setInitialAmount(self, *args):
        """
        setInitialAmount(self, double value) -> int

        Sets the 'initialAmount' attribute of this Species and marks the field
        as set.

        This method also unsets the 'initialConcentration' attribute.

        Parameter 'value' is the value to which the 'initialAmount' attribute
        should be set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.Species_setInitialAmount(self, *args)

    def setInitialConcentration(self, *args):
        """
        setInitialConcentration(self, double value) -> int

        Sets the 'initialConcentration' attribute of this Species and marks
        the field as set.

        This method also unsets the 'initialAmount' attribute.

        Parameter 'value' is the value to which the 'initialConcentration'
        attribute should be set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attribute 'initialConcentration' is only available in SBML Level 2
        and 3.  It does not exist on Species in Level 1.

        """
        return _libsbml.Species_setInitialConcentration(self, *args)

    def setSubstanceUnits(self, *args):
        """
        setSubstanceUnits(self, string sid) -> int

        Sets the 'substanceUnits' attribute of this Species object.

        Parameter 'sid' is the identifier of the unit to use.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Species_setSubstanceUnits(self, *args)

    def setSpatialSizeUnits(self, *args):
        """
        setSpatialSizeUnits(self, string sid) -> int

        (SBML Level 2 Versions 1-2) Sets the 'spatialSizeUnits' attribute of
        this Species object.

        Parameter 'sid' is the identifier of the unit to use.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        WARNING:

        In versions of SBML Level 2 before Version 3, the class Species
        included an attribute called 'spatialSizeUnits', which allowed
        explicitly setting the units of size for initial concentration.  This
        attribute was removed in SBML Level 2 Version 3.  LibSBML retains this
        attribute for compatibility with older definitions of Level 2, but its
        use is strongly discouraged because it is incompatible with Level 2
        Version 3 and Level 2 Version 4.

        """
        return _libsbml.Species_setSpatialSizeUnits(self, *args)

    def setUnits(self, *args):
        """
        setUnits(self, string sname) -> int

        (SBML Level 1 only) Sets the units of this Species object.

        Parameter 'sname' is the identifier of the unit to use.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Species_setUnits(self, *args)

    def setHasOnlySubstanceUnits(self, *args):
        """
        setHasOnlySubstanceUnits(self, bool value) -> int

        Sets the 'hasOnlySubstanceUnits' attribute of this Species object.

        Parameter 'value' is boolean value for the 'hasOnlySubstanceUnits'
        attribute.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The 'hasOnlySubstanceUnits' attribute does not exist in SBML Level 1.

        """
        return _libsbml.Species_setHasOnlySubstanceUnits(self, *args)

    def setBoundaryCondition(self, *args):
        """
        setBoundaryCondition(self, bool value) -> int

        Sets the 'boundaryCondition' attribute of this Species object.

        Parameter 'value' is boolean value for the 'boundaryCondition'
        attribute.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.Species_setBoundaryCondition(self, *args)

    def setCharge(self, *args):
        """
        setCharge(self, int value) -> int

        Sets the 'charge' attribute of this Species object.

        Parameter 'value' is an integer to which to set the 'charge' to.

        Note:

        Beginning in SBML Level 2 Version 2, the 'charge' attribute on Species
        is deprecated and in SBML Level 3 it does not exist at all.  Its use
        strongly discouraged.  Its presence is considered a misfeature in
        earlier definitions of SBML because its implications for the
        mathematics of a model were never defined, and in any case, no known
        modeling system ever used it.  Instead, models take account of charge
        values directly in their definitions of species by (for example)
        having separate species identities for the charged and uncharged
        versions of the same species.  This allows the condition to affect
        model mathematics directly.  LibSBML retains this method for easier
        compatibility with SBML Level 1.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.Species_setCharge(self, *args)

    def setConstant(self, *args):
        """
        setConstant(self, bool value) -> int

        Sets the 'constant' attribute of this Species object.

        Parameter 'value' is a boolean value for the 'constant' attribute

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attribute 'constant' is only available in SBML Levels 2 and 3.  It
        does not exist on Species in Level 1.

        """
        return _libsbml.Species_setConstant(self, *args)

    def setConversionFactor(self, *args):
        """
        setConversionFactor(self, string sid) -> int

        Sets the value of the 'conversionFactor' attribute of this Species
        object.

        The string in 'sid' is copied.

        Parameter 'sid' is the new conversionFactor for the Species

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'conversionFactor' attribute was introduced in SBML Level 3.  It
        does not exist on Species in SBML Levels 1 and 2.

        """
        return _libsbml.Species_setConversionFactor(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Species object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Species_unsetName(self)

    def unsetSpeciesType(self):
        """
        unsetSpeciesType(self) -> int

        Unsets the 'speciesType' attribute value of this Species object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The attribute 'speciesType' is only available in SBML Level 2 Versions
        2-4.

        """
        return _libsbml.Species_unsetSpeciesType(self)

    def unsetInitialAmount(self):
        """
        unsetInitialAmount(self) -> int

        Unsets the 'initialAmount' attribute value of this Species object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Species_unsetInitialAmount(self)

    def unsetInitialConcentration(self):
        """
        unsetInitialConcentration(self) -> int

        Unsets the 'initialConcentration' attribute value of this Species
        object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The attribute 'initialConcentration' is only available in SBML Level 2
        and 3.  It does not exist on Species in Level 1.

        """
        return _libsbml.Species_unsetInitialConcentration(self)

    def unsetSubstanceUnits(self):
        """
        unsetSubstanceUnits(self) -> int

        Unsets the 'substanceUnits' attribute value of this Species object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Species_unsetSubstanceUnits(self)

    def unsetSpatialSizeUnits(self):
        """
        unsetSpatialSizeUnits(self) -> int

        Unsets the 'spatialSizeUnits' attribute value of this Species object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        WARNING:

        In versions of SBML Level 2 before Version 3, the class Species
        included an attribute called 'spatialSizeUnits', which allowed
        explicitly setting the units of size for initial concentration.  This
        attribute was removed in SBML Level 2 Version 3.  LibSBML retains this
        attribute for compatibility with older definitions of Level 2, but its
        use is strongly discouraged because it is incompatible with Level 2
        Version 3 and Level 2 Version 4.

        """
        return _libsbml.Species_unsetSpatialSizeUnits(self)

    def unsetUnits(self):
        """
        unsetUnits(self) -> int

        Unsets the 'units' attribute value of this Species object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Species_unsetUnits(self)

    def unsetCharge(self):
        """
        unsetCharge(self) -> int

        Unsets the 'charge' attribute value of this Species object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        Beginning in SBML Level 2 Version 2, the 'charge' attribute on Species
        is deprecated and in SBML Level 3 it does not exist at all.  Its use
        strongly discouraged.  Its presence is considered a misfeature in
        earlier definitions of SBML because its implications for the
        mathematics of a model were never defined, and in any case, no known
        modeling system ever used it.  Instead, models take account of charge
        values directly in their definitions of species by (for example)
        having separate species identities for the charged and uncharged
        versions of the same species.  This allows the condition to affect
        model mathematics directly.  LibSBML retains this method for easier
        compatibility with SBML Level 1.

        """
        return _libsbml.Species_unsetCharge(self)

    def unsetConversionFactor(self):
        """
        unsetConversionFactor(self) -> int

        Unsets the 'conversionFactor' attribute value of this Species object.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'conversionFactor' attribute was introduced in SBML Level 3.  It
        does not exist on Species in SBML Levels 1 and 2.

        """
        return _libsbml.Species_unsetConversionFactor(self)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Constructs and returns a UnitDefinition that corresponds to the units
        of this Species' amount or concentration.

        Species in SBML have an attribute ('substanceUnits') for declaring the
        units of measurement intended for the species' amount or concentration
        (depending on which one applies).  In the absence of a value given for
        'substanceUnits', the units are taken from the enclosing Model's
        definition of 'substance' or 'substance'/(size of the compartment) in
        which the species is located, or finally, if these are not redefined
        by the Model, the relevant SBML default units for those quantities.
        Following that procedure, the method getDerivedUnitDefinition()
        returns a UnitDefinition based on the interpreted units of this
        species's amount or concentration.

        Note that the functionality that facilitates unit analysis depends  on
        the model as a whole.  Thus, in cases where the object has not  been
        added to a model or the model itself is incomplete, unit analysis is
        not possible and this method will return None.

        Note also that unit declarations for Species are in terms of the
        identifier of a unit, but this method returns a UnitDefinition object,
        not a unit identifier.  It does this by constructing an appropriate
        UnitDefinition.  Callers may find this particularly useful when used
        in conjunction with the helper methods on UnitDefinition for comparing
        different UnitDefinition objects.

        In SBML Level 2 specifications prior to Version 3, Species includes an
        additional attribute named 'spatialSizeUnits', which allows explicitly
        setting the units of size for initial concentration. The
        getDerivedUnitDefinition() takes this into account for models
        expressed in SBML Level 2 Versions 1 and 2.

        Returns a UnitDefinition that expresses the units of this  Species, or
        None if one cannot be constructed.

        See also getSubstanceUnits().

        """
        return _libsbml.Species_getDerivedUnitDefinition(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_SPECIES
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Species_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Species, is
        always 'species'.

        Returns the name of this element, i.e., 'species'.

        """
        return _libsbml.Species_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        Species object have been set.

        The required attributes for a Species object are:

           * 'id' (or 'name' in SBML Level 1)

           * 'compartment'

           * 'initialAmount' (required in SBML Level 1 only; optional
        otherwise)

           * 'hasOnlySubstanceUnits' (required in SBML Level 3; optional in
        SBML Level 2)

           * 'boundaryCondition' (required in SBML Level 3; optional in Levels
        1 and 2)

           * 'constant' (required in SBML Level 3; optional in SBML Level 2)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.Species_hasRequiredAttributes(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Species_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Species_renameUnitSIdRefs(self, *args)

Species_swigregister = _libsbml.Species_swigregister
Species_swigregister(Species)

class ListOfSpecies(ListOf):
    """
    Implementation of SBML Level 2's ListOfSpecies construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfSpecies, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfSpecies, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfSpecies
        __init__(self, SBMLNamespaces sbmlns) -> ListOfSpecies

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfSpecies(SBMLNamespaces sbmlns)

        Creates a new ListOfSpecies object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfSpecies object to be
        created.

        @par <hr> Method variant with the following signature:

            ListOfSpecies(long level, long version)

        Creates a new ListOfSpecies object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfSpecies(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfSpecies

        Creates and returns a deep copy of this ListOfSpeciess instance.

        Returns a (deep) copy of this ListOfSpeciess.

        """
        return _libsbml.ListOfSpecies_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Species objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_SPECIES (default).

        See also getPackageName().

        """
        return _libsbml.ListOfSpecies_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfSpeciess, the XML element name is 'listOfSpeciess'.

        Returns the name of this element, i.e., 'listOfSpeciess'.

        """
        return _libsbml.ListOfSpecies_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Species
        get(self, unsigned int n) -> Species
        get(self, string sid) -> Species
        get(self, string sid) -> Species

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Species from the ListOfSpecies.

        Parameter 'n' is the index number of the Species to get.

        Returns the nth Species in this ListOfSpecies.

        See also size(), size().

        """
        return _libsbml.ListOfSpecies_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Species
        remove(self, string sid) -> Species

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfSpeciess items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfSpeciess items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfSpecies_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfSpecies
    __del__ = lambda self : None;
ListOfSpecies_swigregister = _libsbml.ListOfSpecies_swigregister
ListOfSpecies_swigregister(ListOfSpecies)

class Parameter(SBase):
    """
    Implementation of SBML's Parameter construct.

    A Parameter is used in SBML to define a symbol associated with a
    value; this symbol can then be used in mathematical formulas in a
    model.  By default, parameters have constant value for the duration of
    a simulation, and for this reason are called parameters instead of
    variables in SBML, although it is crucial to understand that SBML
    parameters represent both concepts.  Whether a given SBML parameter is
    intended to be constant or variable is indicated by the value of its
    'constant' attribute.

    SBML's Parameter has a required attribute, 'id', that gives the
    parameter a unique identifier by which other parts of an SBML model
    definition can refer to it.  A parameter can also have an optional
    'name' attribute of type string.  Identifiers and names must be used
    according to the guidelines described in the SBML specifications.

    The optional attribute 'value' determines the value (of type double)
    assigned to the parameter.  A missing value for 'value' implies that
    the value either is unknown, or to be obtained from an external
    source, or determined by an initial assignment.  The unit of
    measurement associated with the value of the parameter can be
    specified using the optional attribute 'units'.  Here we only mention
    briefly some notable points about the possible unit choices, but
    readers are urged to consult the SBML specification documents for more
    information:

    * In SBML Level 3, there are no constraints on the units that can be
    assigned to parameters in a model; there are also no units to inherit
    from the enclosing Model object (unlike the case for, e.g., Species
    and Compartment).

    * In SBML Level 2, the value assigned to the parameter's 'units'
    attribute must be chosen from one of the following possibilities: one
    of the base unit identifiers defined in SBML; one of the built-in unit
    identifiers 'substance', 'time', 'volume', 'area' or 'length'; or the
    identifier of a new unit defined in the list of unit definitions in
    the enclosing Model structure.  There are no constraints on the units
    that can be chosen from these sets.  There are no default units for
    parameters. The Parameter structure has another boolean attribute
    named 'constant' that is used to indicate whether the parameter's
    value can vary during a simulation.  (In SBML Level 3, the attribute
    is mandatory and must be given a value; in SBML Levels below Level 3,
    the attribute is optional.)  A value of True indicates the parameter's
    value cannot be changed by any construct except InitialAssignment.
    Conversely, if the value of 'constant' is False, other constructs in
    SBML, such as rules and events, can change the value of the parameter.

    SBML Level 3 uses a separate object class, LocalParameter, for
    parameters that are local to a Reaction's KineticLaw.  In Levels prior
    to SBML Level 3, the Parameter class is used both for definitions of
    global parameters, as well as reaction-local parameters stored in a
    list within KineticLaw objects.  Parameter objects that are local to a
    reaction (that is, those defined within the KineticLaw structure of a
    Reaction) cannot be changed by rules and therefore are implicitly
    always constant; consequently, in SBML Level 2, parameter definitions
    within Reaction structures should not have their 'constant' attribute
    set to False.

    What if a global parameter has its 'constant' attribute set to False,
    but the model does not contain any rules, events or other constructs
    that ever change its value over time?  Although the model may be
    suspect, this situation is not strictly an error.  A value of False
    for 'constant' only indicates that a parameter can change value, not
    that it must.

    As with all other major SBML components, Parameter is derived from
    SBase, and the methods defined on SBase are available on Parameter.

    Note:

    The use of the term parameter in SBML sometimes leads to confusion
    among readers who have a particular notion of what something called
    'parameter' should be.  It has been the source of heated debate, but
    despite this, no one has yet found an adequate replacement term that
    does not have different connotations to different people and hence
    leads to confusion among some subset of users.  Perhaps it would have
    been better to have two constructs, one called constants and the other
    called variables.  The current approach in SBML is simply more
    parsimonious, using a single Parameter construct with the boolean flag
    'constant' indicating which flavor it is.  In any case, readers are
    implored to look past their particular definition of a parameter and
    simply view SBML's Parameter as a single mechanism for defining both
    constants and (additional) variables in a model.  (We write additional
    because the species in a model are usually considered to be the
    central variables.)  After all, software tools are not required to
    expose to users the actual names of particular SBML constructs, and
    thus tools can present to their users whatever terms their designers
    feel best matches their target audience.

    See also ListOfParameters.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Parameter
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Parameter
        __init__(self, SBMLNamespaces sbmlns) -> Parameter
        __init__(self, Parameter orig) -> Parameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Parameter(SBMLNamespaces sbmlns)

        Creates a new Parameter using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        It is worth emphasizing that although this constructor does not take
        an identifier argument, in SBML Level 2 and beyond, the 'id'
        (identifier) attribute of a Parameter is required to have a value.
        Thus, callers are cautioned to assign a value after calling this
        constructor if no identifier is provided as an argument.  Setting the
        identifier can be accomplished using the method setId().

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Parameter(long level, long version)

        Creates a new Parameter using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Parameter

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Parameter

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Parameter(Parameter orig)

        Copy constructor; creates a copy of a Parameter.

        Parameter 'orig' is the Parameter instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Parameter

        Creates and returns a deep copy of this Parameter.

        Returns a (deep) copy of this Parameter.

        """
        return _libsbml.Parameter_clone(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Initializes the fields of this Parameter object to 'typical' defaults
        values.

        The SBML Parameter component has slightly different aspects and
        default attribute values in different SBML Levels and Versions.  Many
        SBML object classes defined by libSBML have an initDefaults() method
        to set the values to certain common defaults, based mostly on what
        they are in SBML Level 2.  In the case of Parameter, this method only
        sets the value of the 'constant' attribute to True.

        See also setConstant().

        """
        return _libsbml.Parameter_initDefaults(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Parameter.

        Returns the id of this Parameter.

        """
        return _libsbml.Parameter_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Parameter.

        Returns the name of this Parameter.

        """
        return _libsbml.Parameter_getName(self)

    def getValue(self):
        """
        getValue(self) -> double

        Gets the numerical value of this Parameter.

        Returns the value of the 'value' attribute of this Parameter, as a
        number of type double.

        Note:

        It is crucial that callers not blindly call Parameter.getValue()
        without first using Parameter.isSetValue() to determine whether a
        value has ever been set.  Otherwise, the value return by
        Parameter.getValue() may not actually represent a value assigned to
        the parameter.  The reason is simply that the data type double in a
        program always has some value.  A separate test is needed to determine
        whether the value is a true model value, or uninitialized data in a
        computer's memory location.

        See also getUnits().

        """
        return _libsbml.Parameter_getValue(self)

    def getUnits(self):
        """
        getUnits(self) -> string

        Gets the units defined for this Parameter.

        The value of an SBML parameter's 'units' attribute establishes the
        unit of measurement associated with the parameter's value.

        Returns the value of the 'units' attribute of this Parameter, as a
        string.  An empty string indicates that no units have been assigned.

        Note:

        There is an important distinction to be made between no units
        assigned, and assuming a value without units has any specific unit
        such as dimensionless.  In SBML, default units are never attributed to
        numbers, and numbers without units are not automatically assumed to
        have the unit dimensionless.  Please consult the relevant SBML
        specification document for a more in-depth explanation of this topic
        and the SBML unit system.

        See also getValue().

        """
        return _libsbml.Parameter_getUnits(self)

    def getConstant(self):
        """
        getConstant(self) -> bool

        Gets the value of the 'constant' attribute of this Parameter instance.

        Returns True if this Parameter is declared as being constant, False
        otherwise.

        Note:

        Readers who view the documentation for LocalParameter may be confused
        about the presence of this method.  LibSBML derives LocalParameter
        from Parameter; however, this does not precisely match the object
        hierarchy defined by SBML Level 3, where LocalParameter is derived
        directly from SBase and not Parameter.  We believe this arrangement
        makes it easier for libSBML users to program applications that work
        with both SBML Level 2 and SBML Level 3, but programmers should also
        keep in mind this difference exists.  A side-effect of libSBML's
        scheme is that certain methods on LocalParameter that are inherited
        from Parameter do not actually have relevance to LocalParameter
        objects.  An example of this is the methods pertaining to Parameter's
        attribute 'constant' (i.e., isSetConstant(), setConstant(), and
        getConstant()).

        See also setConstant().

        """
        return _libsbml.Parameter_getConstant(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this Parameter's 'id' attribute is set.

        Returns True if the 'id' attribute of this Parameter is set, False
        otherwise.

        """
        return _libsbml.Parameter_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this Parameter's 'name' attribute is set.

        Returns True if the 'name' attribute of this Parameter is set, False
        otherwise.

        """
        return _libsbml.Parameter_isSetName(self)

    def isSetValue(self):
        """
        isSetValue(self) -> bool

        Predicate returning True if the 'value' attribute of this Parameter is
        set.

        In SBML definitions after SBML Level 1 Version 1, parameter values are
        optional and have no defaults.  If a model read from a file does not
        contain a setting for the 'value' attribute of a parameter, its value
        is considered unset; it does not default to any particular value.
        Similarly, when a Parameter object is created in libSBML, it has no
        value until given a value.  The Parameter.isSetValue() method allows
        calling applications to determine whether a given parameter's value
        has ever been set.

        In SBML Level 1 Version 1, parameters are required to have values and
        therefore, the value of a Parameter should always be set.  In Level 1
        Version 2 and beyond, the value is optional and as such, the 'value'
        attribute may or may not be set.

        Returns True if the value of this Parameter is set, False otherwise.

        See also setValue().

        """
        return _libsbml.Parameter_isSetValue(self)

    def isSetUnits(self):
        """
        isSetUnits(self) -> bool

        Predicate returning True if the 'units' attribute of this Parameter is
        set.

        Returns True if the 'units' attribute of this Parameter is set, False
        otherwise.

        Note:

        There is an important distinction to be made between no units
        assigned, and assuming a value without units has any specific unit
        such as dimensionless.  In SBML, default units are never attributed to
        numbers, and numbers without units are not automatically assumed to
        have the unit dimensionless.  Please consult the relevant SBML
        specification document for a more in-depth explanation of this topic
        and the SBML unit system.

        """
        return _libsbml.Parameter_isSetUnits(self)

    def isSetConstant(self):
        """
        isSetConstant(self) -> bool

        Predicate returning True if the 'constant' attribute of this Parameter
        is set.

        Returns True if the 'constant' attribute of this Parameter is set,
        False otherwise.

        Note:

        Readers who view the documentation for LocalParameter may be confused
        about the presence of this method.  LibSBML derives LocalParameter
        from Parameter; however, this does not precisely match the object
        hierarchy defined by SBML Level 3, where LocalParameter is derived
        directly from SBase and not Parameter.  We believe this arrangement
        makes it easier for libSBML users to program applications that work
        with both SBML Level 2 and SBML Level 3, but programmers should also
        keep in mind this difference exists.  A side-effect of libSBML's
        scheme is that certain methods on LocalParameter that are inherited
        from Parameter do not actually have relevance to LocalParameter
        objects.  An example of this is the methods pertaining to Parameter's
        attribute 'constant' (i.e., isSetConstant(), setConstant(), and
        getConstant()).

        See also setConstant().

        """
        return _libsbml.Parameter_isSetConstant(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this Parameter.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        Parameter

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Parameter_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Parameter.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the Parameter

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Parameter_setName(self, *args)

    def setValue(self, *args):
        """
        setValue(self, double value) -> int

        Sets the 'value' attribute of this Parameter to the given double value
        and marks the attribute as set.

        Parameter 'value' is a double, the value to assign

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.Parameter_setValue(self, *args)

    def setUnits(self, *args):
        """
        setUnits(self, string units) -> int

        Sets the 'units' attribute of this Parameter to a copy of the given
        units identifier 'units'.

        Parameter 'units' is a string, the identifier of the units to assign
        to this Parameter instance

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Parameter_setUnits(self, *args)

    def setConstant(self, *args):
        """
        setConstant(self, bool flag) -> int

        Sets the 'constant' attribute of this Parameter to the given boolean
        'flag'.

        Parameter 'flag' is a boolean, the value for the 'constant' attribute
        of this Parameter instance

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        Readers who view the documentation for LocalParameter may be confused
        about the presence of this method.  LibSBML derives LocalParameter
        from Parameter; however, this does not precisely match the object
        hierarchy defined by SBML Level 3, where LocalParameter is derived
        directly from SBase and not Parameter.  We believe this arrangement
        makes it easier for libSBML users to program applications that work
        with both SBML Level 2 and SBML Level 3, but programmers should also
        keep in mind this difference exists.  A side-effect of libSBML's
        scheme is that certain methods on LocalParameter that are inherited
        from Parameter do not actually have relevance to LocalParameter
        objects.  An example of this is the methods pertaining to Parameter's
        attribute 'constant' (i.e., isSetConstant(), setConstant(), and
        getConstant()).

        See also isSetConstant().

        """
        return _libsbml.Parameter_setConstant(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Parameter.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Parameter_unsetName(self)

    def unsetValue(self):
        """
        unsetValue(self) -> int

        Unsets the 'value' attribute of this Parameter instance.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        In SBML Level 1 Version 1, parameters are required to have values and
        therefore, the value of a Parameter should always be set.  In SBML
        Level 1 Version 2 and beyond, the value is optional and as such, the
        'value' attribute may or may not be set.

        """
        return _libsbml.Parameter_unsetValue(self)

    def unsetUnits(self):
        """
        unsetUnits(self) -> int

        Unsets the 'units' attribute of this Parameter instance.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Parameter_unsetUnits(self)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Constructs and returns a UnitDefinition that corresponds to the units
        of this Parameter's value.

        Parameters in SBML have an attribute ('units') for declaring the units
        of measurement intended for the parameter's value.  No defaults are
        defined by SBML in the absence of a definition for 'units'.  This
        method returns a UnitDefinition object based on the units declared for
        this Parameter using its 'units' attribute, or it returns None if no
        units have been declared.

        Note that unit declarations for Parameter objects are specified in
        terms of the identifier of a unit (e.g., using setUnits()), but this
        method returns a UnitDefinition object, not a unit identifier.  It
        does this by constructing an appropriate UnitDefinition.For SBML Level
        2 models, it will do this even when the value of the 'units' attribute
        is one of the special SBML Level 2 unit identifiers 'substance',
        'volume', 'area', 'length' or 'time'.  Callers may find this useful in
        conjunction with the helper methods provided by the UnitDefinition
        class for comparing different UnitDefinition objects.

        Returns a UnitDefinition that expresses the units of this  Parameter,
        or None if one cannot be constructed.

        Note:

        The libSBML system for unit analysis depends on the model as a whole.
        In cases where the Parameter object has not yet been added to a model,
        or the model itself is incomplete, unit analysis is not possible, and
        consequently this method will return None.

        See also isSetUnits().

        """
        return _libsbml.Parameter_getDerivedUnitDefinition(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_PARAMETER
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Parameter_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Parameter, is
        always 'parameter'.

        Returns the name of this element, i.e., 'parameter'.

        """
        return _libsbml.Parameter_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        Parameter object have been set.

        The required attributes for a Parameter object are:

           * 'id' (or 'name' in SBML Level 1)

           * 'value' (required in Level 1, optional otherwise)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.Parameter_hasRequiredAttributes(self)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Renames all the UnitSIdRef attributes on this element.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the unit identifiers to the value of 'oldid'.  If any matches are
        found, the matching identifiers are replaced with 'newid'.  The method
        does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Parameter_renameUnitSIdRefs(self, *args)

    def setCalculatingUnits(self, *args):
        """
        setCalculatingUnits(self, bool calculatingUnits)

        Internal implementation method.

        """
        return _libsbml.Parameter_setCalculatingUnits(self, *args)

Parameter_swigregister = _libsbml.Parameter_swigregister
Parameter_swigregister(Parameter)

class ListOfParameters(ListOf):
    """
    Implementation of SBML's ListOfParameters construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfParameters
        __init__(self, SBMLNamespaces sbmlns) -> ListOfParameters

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfParameters(SBMLNamespaces sbmlns)

        Creates a new ListOfParameters object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfParameters object to be
        created.

        @par <hr> Method variant with the following signature:

            ListOfParameters(long level, long version)

        Creates a new ListOfParameters object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfParameters

        Creates and returns a deep copy of this ListOfParameters instance.

        Returns a (deep) copy of this ListOfParameters.

        """
        return _libsbml.ListOfParameters_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Parameter objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this objects contained in this list:
        libsbml.SBML_PARAMETER (default).

        See also getPackageName().

        """
        return _libsbml.ListOfParameters_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfParameters, the XML element name is 'listOfParameters'.

        Returns the name of this element, i.e., 'listOfParameters'.

        """
        return _libsbml.ListOfParameters_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Parameter
        get(self, unsigned int n) -> Parameter
        get(self, string sid) -> Parameter
        get(self, string sid) -> Parameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Returns the Parameter object located at position 'n' within this
        ListOfParameters instance.

        Parameter 'n' is the index number of the Parameter to get.

        Returns the nth Parameter in this ListOfParameters.  If the index 'n'
        is out of bounds for the length of the list, then None is returned.

        See also get(), size().

        """
        return _libsbml.ListOfParameters_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Parameter
        remove(self, string sid) -> Parameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfParameters, and returns a pointer
        to it.

        Parameter 'n' is the index of the item to remove

        Returns the item removed.  The caller owns the returned object and is
        responsible for deleting it.  If the index number 'n' is out of bounds
        for the length of the list, then None is returned.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes the first Parameter object in this ListOfParameters matching
        the given identifier, and returns a pointer to it.

        Parameter 'sid' is the identifier of the item to remove.

        Returns the item removed.  The caller owns the returned object and is
        responsible for deleting it.  If none of the items have an identifier
        matching 'sid', then None is returned.

        """
        return _libsbml.ListOfParameters_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfParameters
    __del__ = lambda self : None;
ListOfParameters_swigregister = _libsbml.ListOfParameters_swigregister
ListOfParameters_swigregister(ListOfParameters)

class LocalParameter(Parameter):
    """
    Implementation of SBML Level 3's LocalParameter construct.

    LocalParameter has been introduced in SBML Level 3 to serve as the
    object class for parameter definitions that are intended to be local
    to a Reaction.  Objects of class LocalParameter never appear at the
    Model level; they are always contained within ListOfLocalParameters
    lists which are in turn contained within KineticLaw objects.

    Like its global Parameter counterpart, the LocalParameter object class
    is used to define a symbol associated with a value; this symbol can
    then be used in a model's mathematical formulas (and specifically, for
    LocalParameter, reaction rate formulas).  Unlike Parameter, the
    LocalParameter class does not have a 'constant' attribute: local
    parameters within reactions are always constant.

    LocalParameter has one required attribute, 'id', to give the parameter
    a unique identifier by which other parts of an SBML model definition
    can refer to it.  A parameter can also have an optional 'name'
    attribute of type string.  Identifiers and names must be used
    according to the guidelines described in the SBML specifications.

    The optional attribute 'value' determines the value (of type double)
    assigned to the parameter.  A missing value for 'value' implies that
    the value either is unknown, or to be obtained from an external
    source, or determined by an initial assignment.  The unit of
    measurement associated with the value of the parameter can be
    specified using the optional attribute 'units'.  Here we only mention
    briefly some notable points about the possible unit choices, but
    readers are urged to consult the SBML specification documents for more
    information:

    * In SBML Level 3, there are no constraints on the units that can be
    assigned to parameters in a model; there are also no units to inherit
    from the enclosing Model object.

    * In SBML Level 2, the value assigned to the parameter's 'units'
    attribute must be chosen from one of the following possibilities: one
    of the base unit identifiers defined in SBML; one of the built-in unit
    identifiers 'substance', 'time', 'volume', 'area' or 'length'; or the
    identifier of a new unit defined in the list of unit definitions in
    the enclosing Model structure.  There are no constraints on the units
    that can be chosen from these sets.  There are no default units for
    local parameters. As with all other major SBML components,
    LocalParameter is derived from SBase, and the methods defined on SBase
    are available on LocalParameter.

    WARNING:

    LibSBML derives LocalParameter from Parameter; however, this does not
    precisely match the object hierarchy defined by SBML Level 3, where
    LocalParameter is derived directly from SBase and not Parameter.  We
    believe this arrangement makes it easier for libSBML users to program
    applications that work with both SBML Level 2 and SBML Level 3, but
    programmers should also keep in mind this difference exists.  A side-
    effect of libSBML's scheme is that certain methods on LocalParameter
    that are inherited from Parameter do not actually have relevance to
    LocalParameter objects.  An example of this is the methods pertaining
    to Parameter's attribute 'constant' (i.e., isSetConstant(),
    setConstant(), and getConstant()).

    See also KineticLaw.

    """
    __swig_setmethods__ = {}
    for _s in [Parameter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Parameter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalParameter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_LocalParameter
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> LocalParameter
        __init__(self, SBMLNamespaces sbmlns) -> LocalParameter
        __init__(self, LocalParameter orig) -> LocalParameter
        __init__(self, Parameter orig) -> LocalParameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            LocalParameter(SBMLNamespaces sbmlns)

        Creates a new LocalParameter object with the given SBMLNamespaces
        object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        It is worth emphasizing that although this constructor does not take
        an identifier argument, in SBML Level 2 and beyond, the 'id'
        (identifier) attribute of a LocalParameter is required to have a
        value. Thus, callers are cautioned to assign a value after calling
        this constructor if no identifier is provided as an argument.  Setting
        the identifier can be accomplished using the method setId().

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            LocalParameter(long level, long version)

        Creates a new LocalParameter object with the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        LocalParameter.

        Parameter 'version' is a long integer, the SBML Version to assign to
        this LocalParameter.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            LocalParameter(LocalParameter orig)

        Copy constructor; creates a copy of a given LocalParameter object.

        Parameter 'orig' is the LocalParameter instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            LocalParameter(Parameter orig)

        Copy constructor; creates a LocalParameter object by copying the
        attributes of a given Parameter object.

        Parameter 'orig' is the Parameter instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_LocalParameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> LocalParameter

        Creates and returns a deep copy of this LocalParameter.

        Returns a (deep) copy of this LocalParameter.

        """
        return _libsbml.LocalParameter_clone(self)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Constructs and returns a UnitDefinition that corresponds to the units
        of this LocalParameter's value.

        @par LocalParameters in SBML have an attribute ('units') for declaring
        the units of measurement intended for the parameter's value.  No
        defaults are defined by SBML in the absence of a definition for
        'units'.  This method returns a UnitDefinition object based on the
        units declared for this LocalParameter using its 'units' attribute, or
        it returns None if no units have been declared.

        Note that unit declarations for LocalParameter objects are specified
        in terms of the identifier of a unit (e.g., using setUnits()), but
        this method returns a UnitDefinition object, not a unit identifier.
        It does this by constructing an appropriate UnitDefinition.  For SBML
        Level 2 models, it will do this even when the value of the 'units'
        attribute is one of the predefined SBML units 'substance', 'volume',
        'area', 'length' or 'time'.  Callers may find this useful in
        conjunction with the helper methods provided by the UnitDefinition
        class for comparing different UnitDefinition objects.

        Returns a UnitDefinition that expresses the units of this
        LocalParameter, or None if one cannot be constructed.

        Note:

        The libSBML system for unit analysis depends on the model as a whole.
        In cases where the LocalParameter object has not yet been added to a
        model, or the model itself is incomplete, unit analysis is not
        possible, and consequently this method will return None.

        See also isSetUnits().

        """
        return _libsbml.LocalParameter_getDerivedUnitDefinition(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LOCAL_PARAMETER (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.LocalParameter_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for LocalParameter,
        is always 'localParameter'.

        Returns the name of this element, i.e., 'localParameter'.

        """
        return _libsbml.LocalParameter_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        LocalParameter object have been set.

        The required attributes for a LocalParameter object are:

           * 'id'

           * 'value'

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.LocalParameter_hasRequiredAttributes(self)

    def getConstant(self):
        """
        getConstant(self) -> bool

        Internal implementation method.

        """
        return _libsbml.LocalParameter_getConstant(self)

    def isSetConstant(self):
        """
        isSetConstant(self) -> bool

        Internal implementation method.

        """
        return _libsbml.LocalParameter_isSetConstant(self)

    def setConstant(self, *args):
        """
        setConstant(self, bool flag) -> int

        Internal implementation method.

        """
        return _libsbml.LocalParameter_setConstant(self, *args)

LocalParameter_swigregister = _libsbml.LocalParameter_swigregister
LocalParameter_swigregister(LocalParameter)

class ListOfLocalParameters(ListOfParameters):
    """
    Implementation of SBML Level 3's ListOfLocalParameters construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOfParameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfLocalParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOfParameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfLocalParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfLocalParameters
        __init__(self, SBMLNamespaces sbmlns) -> ListOfLocalParameters

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfLocalParameters(SBMLNamespaces sbmlns)

        Creates a new ListOfLocalParameters object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfLocalParameters object to
        be created.

        @par <hr> Method variant with the following signature:

            ListOfLocalParameters(long level, long version)

        Creates a new ListOfLocalParameters object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfLocalParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfLocalParameters

        Creates and returns a deep copy of this ListOfLocalParameters object.

        Returns a (deep) copy of this ListOfLocalParameters.

        """
        return _libsbml.ListOfLocalParameters_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., LocalParameter objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf:
        libsbml.SBML_LOCAL_PARAMETER (default).

        See also getPackageName().

        """
        return _libsbml.ListOfLocalParameters_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfLocalParameters, the XML element name is
        'listOfLocalParameters'.

        Returns the name of this element, i.e., 'listOfLocalParameters'.

        """
        return _libsbml.ListOfLocalParameters_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> LocalParameter
        get(self, unsigned int n) -> LocalParameter
        get(self, string sid) -> LocalParameter
        get(self, string sid) -> LocalParameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Returns the LocalParameter object located at position 'n' within this
        ListOfLocalParameters instance.

        Parameter 'n' is the index number of the LocalParameter to get.

        Returns the item at position 'n'.  The caller owns the returned object
        and is responsible for deleting it.  If the index number 'n' is out of
        bounds for the length of the list, then None is returned.

        See also get(), size().

        """
        return _libsbml.ListOfLocalParameters_get(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Note that LocalParameters, while they use the SId namespace, are not
        in the model-wide SId namespace, so no LocalParameter object will be
        returned from this function (and is the reason we override the base
        ListOf::getElementBySId function here).

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.ListOfLocalParameters_getElementBySId(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> LocalParameter
        remove(self, string sid) -> LocalParameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfLocalParameters, and returns a
        pointer to it.

        Parameter 'n' is the index of the item to remove.

        Returns the item removed.  The caller owns the returned object and is
        responsible for deleting it.  If the index number 'n' is out of bounds
        for the length of the list, then None is returned.

        See also remove().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes the first LocalParameter object in this ListOfLocalParameters
        matching the given identifier, and returns a pointer to it.

        Parameter 'sid' is the identifier of the item to remove.

        Returns the item removed.  The caller owns the returned object and is
        responsible for deleting it.  If none of the items have an identifier
        matching 'sid', then None is returned.

        """
        return _libsbml.ListOfLocalParameters_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfLocalParameters
    __del__ = lambda self : None;
ListOfLocalParameters_swigregister = _libsbml.ListOfLocalParameters_swigregister
ListOfLocalParameters_swigregister(ListOfLocalParameters)

class InitialAssignment(SBase):
    """
    Implementation of SBML's InitialAssignment construct.

    SBML Level 2 Versions 2-4 and SBML Level 3 provide two ways of
    assigning initial values to entities in a model.  The simplest and
    most basic is to set the values of the appropriate attributes in the
    relevant components; for example, the initial value of a model
    parameter (whether it is a constant or a variable) can be assigned by
    setting its 'value' attribute directly in the model definition.
    However, this approach is not suitable when the value must be
    calculated, because the initial value attributes on different
    components such as species, compartments, and parameters are single
    values and not mathematical expressions.  In those situations, the
    InitialAssignment construct can be used; it permits the calculation of
    the value of a constant or the initial value of a variable from the
    values of other quantities in a model.

    As explained below, the provision of InitialAssignment does not mean
    that models necessarily must use this construct when defining initial
    values of quantities in a model.  If a value can be set directly using
    the relevant attribute of a component in a model, then that approach
    may be more efficient and more portable to other software tools.
    InitialAssignment should be used when the other mechanism is
    insufficient for the needs of a particular model.

    The InitialAssignment construct has some similarities to
    AssignmentRule. The main differences are: (a) an InitialAssignment can
    set the value of a constant whereas an AssignmentRule cannot, and (b)
    unlike AssignmentRule, an InitialAssignment definition only applies up
    to and including the beginning of simulation time, i.e., t <= 0, while
    an AssignmentRule applies at all times.

    InitialAssignment has a required attribute, 'symbol', whose value must
    follow the guidelines for identifiers described in the SBML
    specification (e.g., Section 3.3 in the Level 2 Version 4
    specification).  The value of this attribute in an InitialAssignment
    object can be the identifier of a Compartment, Species or global
    Parameter elsewhere in the model.  The InitialAssignment defines the
    initial value of the constant or variable referred to by the 'symbol'
    attribute.  (The attribute's name is 'symbol' rather than 'variable'
    because it may assign values to constants as well as variables in a
    model.)  Note that an initial assignment cannot be made to reaction
    identifiers, that is, the 'symbol' attribute value of an
    InitialAssignment cannot be an identifier that is the 'id' attribute
    value of a Reaction object in the model.  This is identical to a
    restriction placed on rules.

    InitialAssignment also has a required 'math' subelement that contains
    a MathML expression used to calculate the value of the constant or the
    initial value of the variable.  The units of the value computed by the
    formula in the 'math' subelement should (in SBML Level 2 Version 4 and
    in SBML Level 3) or must (in previous Versions) be identical to be the
    units associated with the identifier given in the 'symbol' attribute.
    (That is, the units are the units of the species, compartment, or
    parameter, as appropriate for the kind of object identified by the
    value of 'symbol'.)

    InitialAssignment was introduced in SBML Level 2 Version 2.  It is not
    available in SBML Level 2 Version 1 nor in any version of Level 1.

    Semantics of Initial Assignments
    ======================================================================

    The value calculated by an InitialAssignment object overrides the
    value assigned to the given symbol by the object defining that symbol.
    For example, if a compartment's 'size' attribute is set in its
    definition, and the model also contains an InitialAssignment having
    that compartment's identifier as its 'symbol' attribute value, then
    the interpretation is that the 'size' assigned in the Compartment
    object should be ignored and the value assigned based on the
    computation defined in the InitialAssignment.  Initial assignments can
    take place for Compartment, Species and global Parameter objects
    regardless of the value of their 'constant' attribute.

    The actions of all InitialAssignment objects are in general terms the
    same, but differ in the precise details depending on the type of
    variable being set:

    * In the case of a species, an InitialAssignment sets the referenced
    species' initial quantity (concentration or amount of substance) to
    the value determined by the formula in the 'math' subelement.    The
    overall units of the formula should (in SBML Level 2 Version 4 and in
    SBML Level 3) or must (in previous Versions) be the same as the units
    specified for the species.

    * In the case of a compartment, an InitialAssignment sets the
    referenced compartment's initial size to the size determined by the
    formula in 'math'.  The overall units of the formula should (in SBML
    Level 2 Version 4 and in SBML Level 3) or must (in previous Versions)
    be the same as the units specified for the size of the compartment.

    * In the case of a parameter, an InitialAssignment sets the referenced
    parameter's initial value to that determined by the formula in 'math'.
    The overall units of the formula should (in SBML Level 2 Version 4 and
    SBML Level 3) or must (in previous Versions) be the same as the units
    defined for the parameter.  In the context of a simulation, initial
    assignments establish values that are in effect prior to and including
    the start of simulation time, i.e., t <= 0.  Section 3.4.8 in the SBML
    Level 2 Version 4  and SBML Level 3 Version 1 Core specifications
    provides information about the interpretation of assignments, rules,
    and entity values for simulation time up to and including the start
    time t = 0; this is important for establishing the initial conditions
    of a simulation if the model involves expressions containing the delay
    'csymbol'.

    There cannot be two initial assignments for the same symbol in a
    model; that is, a model must not contain two or more InitialAssignment
    objects that both have the same identifier as their 'symbol' attribute
    value.  A model must also not define initial assignments and
    assignment rules for the same entity.  That is, there cannot be both
    an InitialAssignment and an AssignmentRule for the same symbol in a
    model, because both kinds of constructs apply prior to and at the
    start of simulated time -- allowing both to exist for a given symbol
    would result in indeterminism).

    The ordering of InitialAssignment objects is not significant.  The
    combined set of InitialAssignment, AssignmentRule and KineticLaw
    objects form a set of assignment statements that must be considered as
    a whole.  The combined set of assignment statements should not contain
    algebraic loops: a chain of dependency between these statements should
    terminate.  (More formally, consider the directed graph of assignment
    statements where nodes are a model's assignment statements and
    directed arcs exist for each occurrence of a symbol in an assignment
    statement 'math' attribute.  The directed arcs in this graph start
    from the statement assigning the symbol and end at the statement that
    contains the symbol in their math elements.  Such a graph must be
    acyclic.)

    Finally, it is worth being explicit about the expected behavior in the
    following situation.  Suppose (1) a given symbol has a value x
    assigned to it in its definition, and (2) there is an initial
    assignment having the identifier as its 'symbol' value and reassigning
    the value to y, and (3) the identifier is also used in the
    mathematical formula of a second initial assignment.  What value
    should the second initial assignment use?  It is y, the value assigned
    to the symbol by the first initial assignment, not whatever value was
    given in the symbol's definition.  This follows directly from the
    behavior described above: if an InitialAssignment object exists for a
    given symbol, then the symbol's value is overridden by that initial
    assignment.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InitialAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InitialAssignment, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_InitialAssignment
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> InitialAssignment
        __init__(self, SBMLNamespaces sbmlns) -> InitialAssignment
        __init__(self, InitialAssignment orig) -> InitialAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            InitialAssignment(SBMLNamespaces sbmlns)

        Creates a new InitialAssignment using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            InitialAssignment(long level, long version)

        Creates a new InitialAssignment using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        InitialAssignment

        Parameter 'version' is a long integer, the SBML Version to assign to
        this InitialAssignment

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            InitialAssignment(InitialAssignment orig)

        Copy constructor; creates a copy of this InitialAssignment.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_InitialAssignment(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> InitialAssignment

        Creates and returns a deep copy of this InitialAssignment.

        Returns a (deep) copy of this InitialAssignment.

        """
        return _libsbml.InitialAssignment_clone(self)

    def getSymbol(self):
        """
        getSymbol(self) -> string

        Get the value of the 'symbol' attribute of this InitialAssignment.

        Returns the identifier string stored as the 'symbol' attribute value
        in this InitialAssignment.

        """
        return _libsbml.InitialAssignment_getSymbol(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical formula of this InitialAssignment.

        Returns an ASTNode, the value of the 'math' subelement of this
        InitialAssignment

        """
        return _libsbml.InitialAssignment_getMath(self)

    def isSetSymbol(self):
        """
        isSetSymbol(self) -> bool

        Predicate returning True if this InitialAssignment's 'symbol'
        attribute is set.

        Returns True if the 'symbol' attribute of this InitialAssignment is
        set, False otherwise.

        """
        return _libsbml.InitialAssignment_isSetSymbol(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate returning True if this InitialAssignment's 'math' subelement
        contains a value.

        Returns True if the 'math' for this InitialAssignment is set, False
        otherwise.

        """
        return _libsbml.InitialAssignment_isSetMath(self)

    def setSymbol(self, *args):
        """
        setSymbol(self, string sid) -> int

        Sets the 'symbol' attribute value of this InitialAssignment.

        Parameter 'sid' is the identifier of a Species, Compartment or
        Parameter object defined elsewhere in this Model.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.InitialAssignment_setSymbol(self, *args)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the 'math' subelement of this InitialAssignment.

        The AST passed in 'math' is copied.

        Parameter 'math' is an AST containing the mathematical expression to
        be used as the formula for this InitialAssignment.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.InitialAssignment_setMath(self, *args)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Calculates and returns a UnitDefinition that expresses the units of
        measurement assumed for the 'math' expression of this
        InitialAssignment.

        @par The units are calculated based on the mathematical expression in
        the InitialAssignment and the model quantities referenced by <ci>
        elements used within that expression.  The method
        InitialAssignment.getDerivedUnitDefinition() returns the calculated
        units, to the extent that libSBML can compute them.

        Note:

        The functionality that facilitates unit analysis depends on the model
        as a whole.  Thus, in cases where the object has not been added to a
        model or the model itself is incomplete, unit analysis is not possible
        and this method will return None.

        WARNING:

        Note that it is possible the 'math' expression in the
        InitialAssignment contains literal numbers or parameters with
        undeclared units.  In those cases, it is not possible to calculate the
        units of the overall expression without making assumptions.  LibSBML
        does not make assumptions about the units, and
        InitialAssignment.getDerivedUnitDefinition() only returns the units as
        far as it is able to determine them.  For example, in an expression X
        + Y, if X has unambiguously-defined units and Y does not, it will
        return the units of X.  When using this method, it is critical that
        callers also invoke the method
        InitialAssignment.containsUndeclaredUnits() to determine whether this
        situation holds.  Callers should take suitable action in those
        situations.

        Returns a UnitDefinition that expresses the units of the math
        expression of this InitialAssignment, or None if one cannot be
        constructed.

        See also containsUndeclaredUnits().

        """
        return _libsbml.InitialAssignment_getDerivedUnitDefinition(self, *args)

    def containsUndeclaredUnits(self, *args):
        """
        containsUndeclaredUnits(self) -> bool
        containsUndeclaredUnits(self) -> bool

        Predicate returning True if the math expression of this
        InitialAssignment contains parameters/numbers with undeclared units.

        Returns True if the math expression of this InitialAssignment includes
        parameters/numbers  with undeclared units, False otherwise.

        Note:

        A return value of True indicates that the UnitDefinition returned by
        InitialAssignment::getDerivedUnitDefinition may not accurately
        represent the units of the expression.

        See also getDerivedUnitDefinition().

        """
        return _libsbml.InitialAssignment_containsUndeclaredUnits(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_INITIAL_ASSIGNMENT (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.InitialAssignment_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        InitialAssignment, is always 'initialAssignment'.

        Returns the name of this element, i.e., 'initialAssignment'.

        """
        return _libsbml.InitialAssignment_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        InitialAssignment object have been set.

        The required attributes for an InitialAssignment object are:

           * 'symbol'

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.InitialAssignment_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        InitialAssignment object have been set.

        Note:

        The required elements for a InitialAssignment object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.InitialAssignment_hasRequiredElements(self)

    def getId(self):
        """
        getId(self) -> string

        Internal implementation method.

        """
        return _libsbml.InitialAssignment_getId(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.InitialAssignment_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.InitialAssignment_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.InitialAssignment_replaceSIDWithFunction(self, *args)

    def divideAssignmentsToSIdByFunction(self, *args):
        """
        divideAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.InitialAssignment_divideAssignmentsToSIdByFunction(self, *args)

    def multiplyAssignmentsToSIdByFunction(self, *args):
        """
        multiplyAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.InitialAssignment_multiplyAssignmentsToSIdByFunction(self, *args)

InitialAssignment_swigregister = _libsbml.InitialAssignment_swigregister
InitialAssignment_swigregister(InitialAssignment)

class ListOfInitialAssignments(ListOf):
    """
    Implementation of SBML's ListOfInitialAssignments construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfInitialAssignments, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfInitialAssignments, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfInitialAssignments
        __init__(self, SBMLNamespaces sbmlns) -> ListOfInitialAssignments

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfInitialAssignments(SBMLNamespaces sbmlns)

        Creates a new ListOfInitialAssignments object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfInitialAssignments object
        to be created.

        @par <hr> Method variant with the following signature:

            ListOfInitialAssignments(long level, long version)

        Creates a new ListOfInitialAssignments object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfInitialAssignments(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfInitialAssignments

        Creates and returns a deep copy of this ListOfInitialAssignments
        instance.

        Returns a (deep) copy of this ListOfInitialAssignments.

        """
        return _libsbml.ListOfInitialAssignments_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., InitialAssignment objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf:
        libsbml.SBML_INITIAL_ASSIGNMENT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfInitialAssignments_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfInitialAssignments, the XML element name is
        'listOfInitialAssignments'.

        Returns the name of this element, i.e., 'listOfInitialAssignments'.

        """
        return _libsbml.ListOfInitialAssignments_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> InitialAssignment
        get(self, unsigned int n) -> InitialAssignment
        get(self, string sid) -> InitialAssignment
        get(self, string sid) -> InitialAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a InitialAssignment from the ListOfInitialAssignments.

        Parameter 'n' is the index number of the InitialAssignment to get.

        Returns the nth InitialAssignment in this ListOfInitialAssignments.

        See also size(), size().

        """
        return _libsbml.ListOfInitialAssignments_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> InitialAssignment
        remove(self, string sid) -> InitialAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfInitialAssignments items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfInitialAssignments items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfInitialAssignments_remove(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Note that InitialAssignments do not actually have IDs, though the
        libsbml interface pretends that they do: no initial assignment is
        returned by this function.

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.ListOfInitialAssignments_getElementBySId(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfInitialAssignments
    __del__ = lambda self : None;
ListOfInitialAssignments_swigregister = _libsbml.ListOfInitialAssignments_swigregister
ListOfInitialAssignments_swigregister(ListOfInitialAssignments)

RULE_TYPE_RATE = _libsbml.RULE_TYPE_RATE
RULE_TYPE_SCALAR = _libsbml.RULE_TYPE_SCALAR
RULE_TYPE_INVALID = _libsbml.RULE_TYPE_INVALID
class Rule(SBase):
    """
    Implementation of SBML's Rule construct.

    In SBML, rules provide additional ways to define the values of
    variables in a model, their relationships, and the dynamical behaviors
    of those variables.  They enable encoding relationships that cannot be
    expressed using Reaction nor InitialAssignment objects alone.

    The libSBML implementation of rules mirrors the SBML Level 3 Version 1
    Core definition (which is in turn is very similar to the Level 2
    Version 4 definition), with Rule being the parent class of three
    subclasses as explained below.  The Rule class itself cannot be
    instantiated by user programs and has no constructor; only the
    subclasses AssignmentRule, AlgebraicRule and RateRule can be
    instantiated directly.

    General summary of SBML rules
    ======================================================================

    In SBML Level 3 as well as Level 2, rules are separated into three
    subclasses for the benefit of model analysis software.  The three
    subclasses are based on the following three different possible
    functional forms (where x is a variable, f is some arbitrary function
    returning a numerical result, V is a vector of variables that does not
    include x, and W is a vector of variables that may include x):

      Algebraic:   left-hand side is zero               0 = f(W)      
      Assignment:  left-hand side is a scalar:          x = f(V)      
      Rate:        left-hand side is a rate-of-change:  dx/dt = f(W)

      In their general form given above, there is little to distinguish
    between assignment and algebraic rules.  They are treated as separate
    cases for the following reasons:

        * Assignment rules can simply be evaluated to calculate
    intermediate values for use in numerical methods.  They are statements
    of equality that hold at all times.  (For assignments that are only
    performed once, see InitialAssignment.)

       * SBML needs to place restrictions on assignment rules, for example
    the restriction that assignment rules cannot contain algebraic loops.

        * Some simulators do not contain numerical solvers capable of
    solving unconstrained algebraic equations, and providing more direct
    forms such as assignment rules may enable those simulators to process
    models they could not process if the same assignments were put in the
    form of general algebraic equations;

        * Those simulators that can solve these algebraic equations make a
    distinction between the different categories listed above; and

        * Some specialized numerical analyses of models may only be
    applicable to models that do not contain algebraic rules.

    The approach taken to covering these cases in SBML is to define an
    abstract Rule structure containing a subelement, 'math', to hold the
    right-hand side expression, then to derive subtypes of Rule that add
    attributes to distinguish the cases of algebraic, assignment and rate
    rules.  The 'math' subelement must contain a MathML expression
    defining the mathematical formula of the rule.  This MathML formula
    must return a numerical value.  The formula can be an arbitrary
    expression referencing the variables and other entities in an SBML
    model.

    Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
    RateRule) inherit the the 'math' subelement and other fields from
    SBase. The AssignmentRule and RateRule classes add an additional
    attribute, 'variable'.  See the definitions of AssignmentRule,
    AlgebraicRule and RateRule for details about the structure and
    interpretation of each one.

    Additional restrictions on SBML rules
    ======================================================================

    An important design goal of SBML rule semantics is to ensure that a
    model's simulation and analysis results will not be dependent on when
    or how often rules are evaluated.  To achieve this, SBML needs to
    place two restrictions on rule use.  The first concerns algebraic
    loops in the system of assignments in a model, and the second concerns
    overdetermined systems.

    A model must not contain algebraic loops
    ......................................................................

    The combined set of InitialAssignment, AssignmentRule and KineticLaw
    objects in a model constitute a set of assignment statements that
    should be considered as a whole.  (A KineticLaw object is counted as
    an assignment because it assigns a value to the symbol contained in
    the 'id' attribute of the Reaction object in which it is defined.)
    This combined set of assignment statements must not contain algebraic
    loops -- dependency chains between these statements must terminate.
    To put this more formally, consider a directed graph in which nodes
    are assignment statements and directed arcs exist for each occurrence
    of an SBML species, compartment or parameter symbol in an assignment
    statement's 'math' subelement.  Let the directed arcs point from the
    statement assigning the symbol to the statements that contain the
    symbol in their 'math' subelement expressions. This graph must be
    acyclic.

    SBML does not specify when or how often rules should be evaluated.
    Eliminating algebraic loops ensures that assignment statements can be
    evaluated any number of times without the result of those evaluations
    changing.  As an example, consider the set of equations x = x + 1, y =
    z + 200 and z = y + 100.  If this set of equations were interpreted as
    a set of assignment statements, it would be invalid because the rule
    for x refers to x (exhibiting one type of loop), and the rule for y
    refers to z while the rule for z refers back to y (exhibiting another
    type of loop). Conversely, the following set of equations would
    constitute a valid set of assignment statements: x = 10, y = z + 200,
    and z = x + 100.

    A model must not be overdetermined
    ......................................................................

    An SBML model must not be overdetermined; that is, a model must not
    define more equations than there are unknowns in a model.  An SBML
    model that does not contain AlgebraicRule structures cannot be
    overdetermined.

    LibSBML implements the static analysis procedure described in Appendix
    B of the SBML Level 3 Version 1 Core specification for assessing
    whether a model is overdetermined.

    (In summary, assessing whether a given continuous, deterministic,
    mathematical model is overdetermined does not require dynamic
    analysis; it can be done by analyzing the system of equations created
    from the model. One approach is to construct a bipartite graph in
    which one set of vertices represents the variables and the other the
    set of vertices represents the equations.  Place edges between
    vertices such that variables in the system are linked to the equations
    that determine them.  For algebraic equations, there will be edges
    between the equation and each variable occurring in the equation.  For
    ordinary differential equations (such as those defined by rate rules
    or implied by the reaction rate definitions), there will be a single
    edge between the equation and the variable determined by that
    differential equation.  A mathematical model is overdetermined if the
    maximal matchings of the bipartite graph contain disconnected vertexes
    representing equations.  If one maximal matching has this property,
    then all the maximal matchings will have this property; i.e., it is
    only necessary to find one maximal matching.)

    Rule types for SBML Level 1
    ======================================================================

    SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
    distinguishing rules; specifically, it uses an attribute whose value
    is drawn from an enumeration of 3 values.  LibSBML supports this using
    methods that work with the enumeration values  listed below.

        * libsbml.RULE_TYPE_RATE: Indicates the rule is a 'rate' rule.

       * libsbml.RULE_TYPE_SCALAR: Indicates the rule is a 'scalar' rule.

       * libsbml.RULE_TYPE_INVALID: Indicates the rule type is unknown or
    not yet set.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rule, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rule, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Rule
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, Rule orig) -> Rule

        Implementation of SBML's Rule construct.

        In SBML, rules provide additional ways to define the values of
        variables in a model, their relationships, and the dynamical behaviors
        of those variables.  They enable encoding relationships that cannot be
        expressed using Reaction nor InitialAssignment objects alone.

        The libSBML implementation of rules mirrors the SBML Level 3 Version 1
        Core definition (which is in turn is very similar to the Level 2
        Version 4 definition), with Rule being the parent class of three
        subclasses as explained below.  The Rule class itself cannot be
        instantiated by user programs and has no constructor; only the
        subclasses AssignmentRule, AlgebraicRule and RateRule can be
        instantiated directly.

        General summary of SBML rules
        ======================================================================

        In SBML Level 3 as well as Level 2, rules are separated into three
        subclasses for the benefit of model analysis software.  The three
        subclasses are based on the following three different possible
        functional forms (where x is a variable, f is some arbitrary function
        returning a numerical result, V is a vector of variables that does not
        include x, and W is a vector of variables that may include x):

          Algebraic:   left-hand side is zero               0 = f(W)      
          Assignment:  left-hand side is a scalar:          x = f(V)      
          Rate:        left-hand side is a rate-of-change:  dx/dt = f(W)

          In their general form given above, there is little to distinguish
        between assignment and algebraic rules.  They are treated as separate
        cases for the following reasons:

            * Assignment rules can simply be evaluated to calculate
        intermediate values for use in numerical methods.  They are statements
        of equality that hold at all times.  (For assignments that are only
        performed once, see InitialAssignment.)

           * SBML needs to place restrictions on assignment rules, for example
        the restriction that assignment rules cannot contain algebraic loops.

            * Some simulators do not contain numerical solvers capable of
        solving unconstrained algebraic equations, and providing more direct
        forms such as assignment rules may enable those simulators to process
        models they could not process if the same assignments were put in the
        form of general algebraic equations;

            * Those simulators that can solve these algebraic equations make a
        distinction between the different categories listed above; and

            * Some specialized numerical analyses of models may only be
        applicable to models that do not contain algebraic rules.

        The approach taken to covering these cases in SBML is to define an
        abstract Rule structure containing a subelement, 'math', to hold the
        right-hand side expression, then to derive subtypes of Rule that add
        attributes to distinguish the cases of algebraic, assignment and rate
        rules.  The 'math' subelement must contain a MathML expression
        defining the mathematical formula of the rule.  This MathML formula
        must return a numerical value.  The formula can be an arbitrary
        expression referencing the variables and other entities in an SBML
        model.

        Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
        RateRule) inherit the the 'math' subelement and other fields from
        SBase. The AssignmentRule and RateRule classes add an additional
        attribute, 'variable'.  See the definitions of AssignmentRule,
        AlgebraicRule and RateRule for details about the structure and
        interpretation of each one.

        Additional restrictions on SBML rules
        ======================================================================

        An important design goal of SBML rule semantics is to ensure that a
        model's simulation and analysis results will not be dependent on when
        or how often rules are evaluated.  To achieve this, SBML needs to
        place two restrictions on rule use.  The first concerns algebraic
        loops in the system of assignments in a model, and the second concerns
        overdetermined systems.

        A model must not contain algebraic loops
        ......................................................................

        The combined set of InitialAssignment, AssignmentRule and KineticLaw
        objects in a model constitute a set of assignment statements that
        should be considered as a whole.  (A KineticLaw object is counted as
        an assignment because it assigns a value to the symbol contained in
        the 'id' attribute of the Reaction object in which it is defined.)
        This combined set of assignment statements must not contain algebraic
        loops -- dependency chains between these statements must terminate.
        To put this more formally, consider a directed graph in which nodes
        are assignment statements and directed arcs exist for each occurrence
        of an SBML species, compartment or parameter symbol in an assignment
        statement's 'math' subelement.  Let the directed arcs point from the
        statement assigning the symbol to the statements that contain the
        symbol in their 'math' subelement expressions. This graph must be
        acyclic.

        SBML does not specify when or how often rules should be evaluated.
        Eliminating algebraic loops ensures that assignment statements can be
        evaluated any number of times without the result of those evaluations
        changing.  As an example, consider the set of equations x = x + 1, y =
        z + 200 and z = y + 100.  If this set of equations were interpreted as
        a set of assignment statements, it would be invalid because the rule
        for x refers to x (exhibiting one type of loop), and the rule for y
        refers to z while the rule for z refers back to y (exhibiting another
        type of loop). Conversely, the following set of equations would
        constitute a valid set of assignment statements: x = 10, y = z + 200,
        and z = x + 100.

        A model must not be overdetermined
        ......................................................................

        An SBML model must not be overdetermined; that is, a model must not
        define more equations than there are unknowns in a model.  An SBML
        model that does not contain AlgebraicRule structures cannot be
        overdetermined.

        LibSBML implements the static analysis procedure described in Appendix
        B of the SBML Level 3 Version 1 Core specification for assessing
        whether a model is overdetermined.

        (In summary, assessing whether a given continuous, deterministic,
        mathematical model is overdetermined does not require dynamic
        analysis; it can be done by analyzing the system of equations created
        from the model. One approach is to construct a bipartite graph in
        which one set of vertices represents the variables and the other the
        set of vertices represents the equations.  Place edges between
        vertices such that variables in the system are linked to the equations
        that determine them.  For algebraic equations, there will be edges
        between the equation and each variable occurring in the equation.  For
        ordinary differential equations (such as those defined by rate rules
        or implied by the reaction rate definitions), there will be a single
        edge between the equation and the variable determined by that
        differential equation.  A mathematical model is overdetermined if the
        maximal matchings of the bipartite graph contain disconnected vertexes
        representing equations.  If one maximal matching has this property,
        then all the maximal matchings will have this property; i.e., it is
        only necessary to find one maximal matching.)

        Rule types for SBML Level 1
        ======================================================================

        SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
        distinguishing rules; specifically, it uses an attribute whose value
        is drawn from an enumeration of 3 values.  LibSBML supports this using
        methods that work with the enumeration values  listed below.

            * libsbml.RULE_TYPE_RATE: Indicates the rule is a 'rate' rule.

           * libsbml.RULE_TYPE_SCALAR: Indicates the rule is a 'scalar' rule.

           * libsbml.RULE_TYPE_INVALID: Indicates the rule type is unknown or
        not yet set.

        """
        this = _libsbml.new_Rule(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Rule

        Creates and returns a deep copy of this Rule.

        Returns a (deep) copy of this Rule.

        """
        return _libsbml.Rule_clone(self)

    def getFormula(self):
        """
        getFormula(self) -> string

        Returns the mathematical expression of this Rule in text-string form.

        The text string is produced by SBML_formulaToString(); please consult
        the documentation for that function to find out more about the format
        of the text-string formula.

        Returns the formula text string for this Rule.

        Note:

        The attribute 'formula' is specific to SBML Level 1; in higher Levels
        of SBML, it has been replaced with a subelement named 'math'.
        However, libSBML provides a unified interface to the underlying math
        expression and this method can be used for models of all Levels of
        SBML.

        See also getMath().

        """
        return _libsbml.Rule_getFormula(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical formula of this Rule as an ASTNode tree.

        Returns an ASTNode, the value of the 'math' subelement of this Rule.

        Note:

        The subelement 'math' is present in SBML Levels 2 and 3.  In SBML
        Level 1, the equivalent construct is the attribute named 'formula'.
        LibSBML provides a unified interface to the underlying math expression
        and this method can be used for models of all Levels of SBML.

        See also getFormula().

        """
        return _libsbml.Rule_getMath(self)

    def getVariable(self):
        """
        getVariable(self) -> string

        Get the value of the 'variable' attribute of this Rule object.

        @par In SBML Level 1, the different rule types each have a different
        name for the attribute holding the reference to the object
        constituting the left-hand side of the rule.  (E.g., for SBML Level
        1's SpeciesConcentrationRule the attribute is 'species', for
        CompartmentVolumeRule it is 'compartment', etc.)  In SBML Levels 2 and
        3, the only two types of Rule objects with a left-hand side object
        reference are AssignmentRule and RateRule, and both of them use the
        same name for attribute: 'variable'.  In order to make it easier for
        application developers to work with all Levels of SBML, libSBML uses a
        uniform name for all such attributes, and it is 'variable', regardless
        of whether Level 1 rules or Level 2-3 rules are being used.

        Returns the identifier string stored as the 'variable' attribute value
        in this Rule, or None if this object is an AlgebraicRule object.

        """
        return _libsbml.Rule_getVariable(self)

    def getUnits(self):
        """
        getUnits(self) -> string

        Returns the units for the mathematical formula of this Rule.

        Returns the identifier of the units for the expression of this Rule.

        Note:

        The attribute 'units' exists on SBML Level 1 ParameterRule objects
        only.  It is not present in SBML Levels 2 and 3.

        """
        return _libsbml.Rule_getUnits(self)

    def isSetFormula(self):
        """
        isSetFormula(self) -> bool

        Predicate returning True if this Rule's mathematical expression is
        set.

        This method is equivalent to isSetMath().  This version is present for
        easier compatibility with SBML Level 1, in which mathematical formulas
        were written in text-string form.

        Returns True if the mathematical formula for this Rule is set, False
        otherwise.

        Note:

        The attribute 'formula' is specific to SBML Level 1; in higher Levels
        of SBML, it has been replaced with a subelement named 'math'.
        However, libSBML provides a unified interface to the underlying math
        expression and this method can be used for models of all Levels of
        SBML.

        See also isSetMath().

        """
        return _libsbml.Rule_isSetFormula(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate returning True if this Rule's mathematical expression is
        set.

        This method is equivalent to isSetFormula().

        Returns True if the formula (or equivalently the math) for this Rule
        is set, False otherwise.

        Note:

        The subelement 'math' is present in SBML Levels 2 and 3.  In SBML
        Level 1, the equivalent construct is the attribute named 'formula'.
        LibSBML provides a unified interface to the underlying math expression
        and this method can be used for models of all Levels of SBML.

        See also isSetFormula().

        """
        return _libsbml.Rule_isSetMath(self)

    def isSetVariable(self):
        """
        isSetVariable(self) -> bool

        Predicate returning True if this Rule's 'variable' attribute is set.

        @par In SBML Level 1, the different rule types each have a different
        name for the attribute holding the reference to the object
        constituting the left-hand side of the rule.  (E.g., for SBML Level
        1's SpeciesConcentrationRule the attribute is 'species', for
        CompartmentVolumeRule it is 'compartment', etc.)  In SBML Levels 2 and
        3, the only two types of Rule objects with a left-hand side object
        reference are AssignmentRule and RateRule, and both of them use the
        same name for attribute: 'variable'.  In order to make it easier for
        application developers to work with all Levels of SBML, libSBML uses a
        uniform name for all such attributes, and it is 'variable', regardless
        of whether Level 1 rules or Level 2-3 rules are being used.

        Returns True if the 'variable' attribute value of this Rule is set,
        False otherwise.

        """
        return _libsbml.Rule_isSetVariable(self)

    def isSetUnits(self):
        """
        isSetUnits(self) -> bool

        Predicate returning True if this Rule's 'units' attribute is set.

        Returns True if the units for this Rule is set, False otherwise

        Note:

        The attribute 'units' exists on SBML Level 1 ParameterRule objects
        only.  It is not present in SBML Levels 2 and 3.

        """
        return _libsbml.Rule_isSetUnits(self)

    def setFormula(self, *args):
        """
        setFormula(self, string formula) -> int

        Sets the 'math' subelement of this Rule to an expression in text-
        string form.

        This is equivalent to setMath(ASTNode math).  The provision of using
        text-string formulas is retained for easier SBML Level 1
        compatibility.  The formula is converted to an ASTNode internally.

        Parameter 'formula' is a mathematical formula in text-string form.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        The attribute 'formula' is specific to SBML Level 1; in higher Levels
        of SBML, it has been replaced with a subelement named 'math'.
        However, libSBML provides a unified interface to the underlying math
        expression and this method can be used for models of all Levels of
        SBML.

        See also setMath().

        """
        return _libsbml.Rule_setFormula(self, *args)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the 'math' subelement of this Rule to a copy of the given
        ASTNode.

        Parameter 'math' is the ASTNode_t structure of the mathematical
        formula.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        The subelement 'math' is present in SBML Levels 2 and 3.  In SBML
        Level 1, the equivalent construct is the attribute named 'formula'.
        LibSBML provides a unified interface to the underlying math expression
        and this method can be used for models of all Levels of SBML.

        See also setFormula().

        """
        return _libsbml.Rule_setMath(self, *args)

    def setVariable(self, *args):
        """
        setVariable(self, string sid) -> int

        Sets the 'variable' attribute value of this Rule object.

        @par In SBML Level 1, the different rule types each have a different
        name for the attribute holding the reference to the object
        constituting the left-hand side of the rule.  (E.g., for SBML Level
        1's SpeciesConcentrationRule the attribute is 'species', for
        CompartmentVolumeRule it is 'compartment', etc.)  In SBML Levels 2 and
        3, the only two types of Rule objects with a left-hand side object
        reference are AssignmentRule and RateRule, and both of them use the
        same name for attribute: 'variable'.  In order to make it easier for
        application developers to work with all Levels of SBML, libSBML uses a
        uniform name for all such attributes, and it is 'variable', regardless
        of whether Level 1 rules or Level 2-3 rules are being used.

        Parameter 'sid' is the identifier of a Compartment, Species or
        Parameter elsewhere in the enclosing Model object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.Rule_setVariable(self, *args)

    def setUnits(self, *args):
        """
        setUnits(self, string sname) -> int

        Sets the units for this Rule.

        Parameter 'sname' is the identifier of the units

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attribute 'units' exists on SBML Level 1 ParameterRule objects
        only.  It is not present in SBML Levels 2 and 3.

        """
        return _libsbml.Rule_setUnits(self, *args)

    def unsetUnits(self):
        """
        unsetUnits(self) -> int

        Unsets the 'units' for this Rule.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attribute 'units' exists on SBML Level 1 ParameterRule objects
        only.  It is not present in SBML Levels 2 and 3.

        """
        return _libsbml.Rule_unsetUnits(self)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Calculates and returns a UnitDefinition that expresses the units of
        measurement assumed for the 'math' expression of this Rule.

        @par The units are calculated based on the mathematical expression in
        the Rule and the model quantities referenced by <ci> elements used
        within that expression.  The method Rule.getDerivedUnitDefinition()
        returns the calculated units, to the extent that libSBML can compute
        them.

        Note:

        The functionality that facilitates unit analysis depends on the model
        as a whole.  Thus, in cases where the object has not been added to a
        model or the model itself is incomplete, unit analysis is not possible
        and this method will return None.

        WARNING:

        Note that it is possible the 'math' expression in the Rule contains
        pure numbers or parameters with undeclared units.  In those cases, it
        is not possible to calculate the units of the overall expression
        without making assumptions.  LibSBML does not make assumptions about
        the units, and Rule.getDerivedUnitDefinition() only returns the units
        as far as it is able to determine them.  For example, in an expression
        X + Y, if X has unambiguously-defined units and Y does not, it will
        return the units of X. It is important that callers also invoke the
        method Rule.containsUndeclaredUnits() to determine whether this
        situation holds.  Callers may wish to take suitable actions in those
        scenarios.

        Returns a UnitDefinition that expresses the units of the math
        expression of this Rule, or None if one cannot be constructed.

        See also containsUndeclaredUnits().

        """
        return _libsbml.Rule_getDerivedUnitDefinition(self, *args)

    def containsUndeclaredUnits(self, *args):
        """
        containsUndeclaredUnits(self) -> bool
        containsUndeclaredUnits(self) -> bool

        Predicate returning True if the math expression of this Rule contains
        parameters/numbers with undeclared units.

        Returns True if the math expression of this Rule includes
        parameters/numbers with undeclared units, False otherwise.

        Note:

        A return value of True indicates that the UnitDefinition returned by
        getDerivedUnitDefinition() may not accurately represent the units of
        the expression.

        See also getDerivedUnitDefinition().

        """
        return _libsbml.Rule_containsUndeclaredUnits(self, *args)

    def getType(self):
        """
        getType(self) -> RuleType_t

        Returns a code representing the type of rule this is.

        Returns the rule type, which will be one of the following three
        possible values:

           * libsbml.RULE_TYPE_RATE

           * libsbml.RULE_TYPE_SCALAR

           * libsbml.RULE_TYPE_INVALID

         Note:

        The attribute 'type' on Rule objects is present only in SBML Level 1.
        In SBML Level 2 and later, the type has been replaced by subclassing
        the Rule object.

        """
        return _libsbml.Rule_getType(self)

    def isAlgebraic(self):
        """
        isAlgebraic(self) -> bool

        Predicate returning True if this Rule is an AlgebraicRule.

        Returns True if this Rule is an AlgebraicRule, False otherwise.

        """
        return _libsbml.Rule_isAlgebraic(self)

    def isAssignment(self):
        """
        isAssignment(self) -> bool

        Predicate returning True if this Rule is an AssignmentRule.

        Returns True if this Rule is an AssignmentRule, False otherwise.

        """
        return _libsbml.Rule_isAssignment(self)

    def isCompartmentVolume(self):
        """
        isCompartmentVolume(self) -> bool

        Predicate returning True if this Rule is an CompartmentVolumeRule or
        equivalent.

        This libSBML method works for SBML Level 1 models (where there is such
        a thing as an explicit CompartmentVolumeRule), as well as other Levels
        of SBML.  For Levels above Level 1, this method checks the symbol
        being affected by the rule, and returns True if the symbol is the
        identifier of a Compartment object defined in the model.

        Returns True if this Rule is a CompartmentVolumeRule, False otherwise.

        """
        return _libsbml.Rule_isCompartmentVolume(self)

    def isParameter(self):
        """
        isParameter(self) -> bool

        Predicate returning True if this Rule is an ParameterRule or
        equivalent.

        This libSBML method works for SBML Level 1 models (where there is such
        a thing as an explicit ParameterRule), as well as other Levels of
        SBML.  For Levels above Level 1, this method checks the symbol being
        affected by the rule, and returns True if the symbol is the identifier
        of a Parameter object defined in the model.

        Returns True if this Rule is a ParameterRule, False otherwise.

        """
        return _libsbml.Rule_isParameter(self)

    def isRate(self):
        """
        isRate(self) -> bool

        Predicate returning True if this Rule is a RateRule (SBML Levels 2-3)
        or has a 'type' attribute value of 'rate' (SBML Level 1).

        Returns True if this Rule is a RateRule (Level 2) or has type 'rate'
        (Level 1), False otherwise.

        """
        return _libsbml.Rule_isRate(self)

    def isScalar(self):
        """
        isScalar(self) -> bool

        Predicate returning True if this Rule is an AssignmentRule (SBML
        Levels 2-3) or has a 'type' attribute value of 'scalar' (SBML Level
        1).

        Returns True if this Rule is an AssignmentRule (Level 2) or has type
        'scalar' (Level 1), False otherwise.

        """
        return _libsbml.Rule_isScalar(self)

    def isSpeciesConcentration(self):
        """
        isSpeciesConcentration(self) -> bool

        Predicate returning True if this Rule is a SpeciesConcentrationRule or
        equivalent.

        This libSBML method works for SBML Level 1 models (where there is such
        a thing as an explicit SpeciesConcentrationRule), as well as other
        Levels of SBML.  For Levels above Level 1, this method checks the
        symbol being affected by the rule, and returns True if the symbol is
        the identifier of a Species object defined in the model.

        Returns True if this Rule is a SpeciesConcentrationRule, False
        otherwise.

        """
        return _libsbml.Rule_isSpeciesConcentration(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object, either
        libsbml.SBML_ASSIGNMENT_RULE, libsbml.SBML_RATE_RULE, or
        libsbml.SBML_ALGEBRAIC_RULE  for SBML Core.

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Rule_getTypeCode(self)

    def getL1TypeCode(self):
        """
        getL1TypeCode(self) -> int

        Returns the SBML Level 1 type code for this Rule object.

        This method only applies to SBML Level 1 model objects.  If this is
        not an SBML Level 1 rule object, this method will return
        libsbml.SBML_UNKNOWN.

        Returns the SBML Level 1 type code for this Rule (namely,
        libsbml.SBML_COMPARTMENT_VOLUME_RULE, libsbml.SBML_PARAMETER_RULE,
        libsbml.SBML_SPECIES_CONCENTRATION_RULE, or libsbml.SBML_UNKNOWN).

        """
        return _libsbml.Rule_getL1TypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object

        The returned value can be any of a number of different strings,
        depending on the SBML Level in use and the kind of Rule object this
        is.  The rules as of libSBML version 5.10.1 are the following:

        * (Level 2 and 3) RateRule: returns 'rateRule'

           * (Level 2 and 3) AssignmentRule: returns 'assignmentRule'

           * (Level 2 and 3) AlgebraicRule: returns 'algebraicRule'

           * (Level 1 Version 1) SpecieConcentrationRule: returns
        'specieConcentrationRule'

           * (Level 1 Version 2) SpeciesConcentrationRule: returns
        'speciesConcentrationRule'

           * (Level 1) CompartmentVolumeRule: returns 'compartmentVolumeRule'

           * (Level 1) ParameterRule: returns 'parameterRule'

           * Unknown rule type: returns 'unknownRule' Beware that the last
        ('unknownRule') is not a valid SBML element name.

        Returns the name of this element

        """
        return _libsbml.Rule_getElementName(self)

    def setL1TypeCode(self, *args):
        """
        setL1TypeCode(self, int type) -> int

        Sets the SBML Level 1 type code for this Rule.

        Parameter 'type' is the SBML Level 1 type code for this Rule. The
        allowable values are libsbml.SBML_COMPARTMENT_VOLUME_RULE,
        libsbml.SBML_PARAMETER_RULE, and
        libsbml.SBML_SPECIES_CONCENTRATION_RULE.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE if given 'type' value is
        not one of the above.

        """
        return _libsbml.Rule_setL1TypeCode(self, *args)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this Rule
        object have been set.

        The only required element for a Rule object is the 'math' subelement.

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.Rule_hasRequiredElements(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this Rule
        object have been set.

        The required attributes for a Rule object depend on the type of Rule
        it is.  For AssignmentRule and RateRule objects (and SBML
        Level&nbsp1's SpeciesConcentrationRule, CompartmentVolumeRule, and
        ParameterRule objects), the required attribute is 'variable'; for
        AlgebraicRule objects, there is no required attribute.

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.Rule_hasRequiredAttributes(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Rule_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Rule_renameUnitSIdRefs(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Internal implementation method.

        """
        return _libsbml.Rule_getId(self)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.Rule_replaceSIDWithFunction(self, *args)

    def divideAssignmentsToSIdByFunction(self, *args):
        """
        divideAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.Rule_divideAssignmentsToSIdByFunction(self, *args)

    def multiplyAssignmentsToSIdByFunction(self, *args):
        """
        multiplyAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.Rule_multiplyAssignmentsToSIdByFunction(self, *args)

Rule_swigregister = _libsbml.Rule_swigregister
Rule_swigregister(Rule)

class ListOfRules(ListOf):
    """
    Implementation of SBML's ListOfRules construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfRules, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfRules, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfRules
        __init__(self, SBMLNamespaces sbmlns) -> ListOfRules

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfRules(SBMLNamespaces sbmlns)

        Creates a new ListOfRules object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfRules object to be created.

        @par <hr> Method variant with the following signature:

            ListOfRules(long level, long version)

        Creates a new ListOfRules object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfRules(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfRules

        Creates and returns a deep copy of this ListOfRules instance.

        Returns a (deep) copy of this ListOfRules.

        """
        return _libsbml.ListOfRules_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Rule objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_RULE (default).

        See also getPackageName().

        """
        return _libsbml.ListOfRules_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfRules, the XML element name is 'listOfRules'.

        Returns the name of this element, i.e., 'listOfRules'.

        """
        return _libsbml.ListOfRules_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Rule
        get(self, unsigned int n) -> Rule
        get(self, string sid) -> Rule
        get(self, string sid) -> Rule

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Rule from the ListOfRules.

        Parameter 'n' is the index number of the Rule to get.

        Returns the nth Rule in this ListOfRules.

        See also size(), size().

        """
        return _libsbml.ListOfRules_get(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Note that AssignmentRules and RateRules do not actually have IDs, but
        the libsbml interface pretends that they do: no assignment rule or
        rate rule is returned by this function.

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.ListOfRules_getElementBySId(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Rule
        remove(self, string sid) -> Rule

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfRules items and returns a pointer
        to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfRules items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfRules_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfRules
    __del__ = lambda self : None;
ListOfRules_swigregister = _libsbml.ListOfRules_swigregister
ListOfRules_swigregister(ListOfRules)

class AlgebraicRule(Rule):
    """
    Implementation of SBML's AlgebraicRule construct.

    The rule type AlgebraicRule is derived from the parent class Rule.  It
    is used to express equations that are neither assignments of model
    variables nor rates of change.  AlgebraicRule does not add any
    attributes to the basic Rule; its role is simply to distinguish this
    case from the other cases.

    In the context of a simulation, algebraic rules are in effect at all
    times, t >= 0.  For purposes of evaluating expressions that involve
    the delay 'csymbol' (see the SBML specification), algebraic rules are
    considered to apply also at t <= 0.  Please consult the relevant SBML
    specification for additional information about the semantics of
    assignments, rules, and entity values for simulation time t <= 0.

    An SBML model must not be overdetermined.  The ability to define
    arbitrary algebraic expressions in an SBML model introduces the
    possibility that a model is mathematically overdetermined by the
    overall system of equations constructed from its rules, reactions and
    events. Therefore, if an algebraic rule is introduced in a model, for
    at least one of the entities referenced in the rule's 'math' element
    the value of that entity must not be completely determined by other
    constructs in the model.  This means that at least this entity must
    not have the attribute 'constant'=True and there must also not be a
    rate rule or assignment rule for it.  Furthermore, if the entity is a
    Species object, its value must not be determined by reactions, which
    means that it must either have the attribute 'boundaryCondition'=True
    or else not be involved in any reaction at all.  These restrictions
    are explained in more detail in the SBML specification documents.

    In SBML Levels 2 and 3, Reaction object identifiers can be referenced
    in the 'math' expression of an algebraic rule, but reaction rates can
    never be determined by algebraic rules.  This is true even when a
    reaction does not contain a KineticLaw object.  (In such cases of
    missing kinetic law definitions, the model is valid but incomplete;
    the rates of reactions lacking kinetic laws are simply undefined, and
    not determined by the algebraic rule.)

    General summary of SBML rules
    ======================================================================

    In SBML Level 3 as well as Level 2, rules are separated into three
    subclasses for the benefit of model analysis software.  The three
    subclasses are based on the following three different possible
    functional forms (where x is a variable, f is some arbitrary function
    returning a numerical result, V is a vector of variables that does not
    include x, and W is a vector of variables that may include x):

      Algebraic:   left-hand side is zero               0 = f(W)      
      Assignment:  left-hand side is a scalar:          x = f(V)      
      Rate:        left-hand side is a rate-of-change:  dx/dt = f(W)

      In their general form given above, there is little to distinguish
    between assignment and algebraic rules.  They are treated as separate
    cases for the following reasons:

        * Assignment rules can simply be evaluated to calculate
    intermediate values for use in numerical methods.  They are statements
    of equality that hold at all times.  (For assignments that are only
    performed once, see InitialAssignment.)

       * SBML needs to place restrictions on assignment rules, for example
    the restriction that assignment rules cannot contain algebraic loops.

        * Some simulators do not contain numerical solvers capable of
    solving unconstrained algebraic equations, and providing more direct
    forms such as assignment rules may enable those simulators to process
    models they could not process if the same assignments were put in the
    form of general algebraic equations;

        * Those simulators that can solve these algebraic equations make a
    distinction between the different categories listed above; and

        * Some specialized numerical analyses of models may only be
    applicable to models that do not contain algebraic rules.

    The approach taken to covering these cases in SBML is to define an
    abstract Rule structure containing a subelement, 'math', to hold the
    right-hand side expression, then to derive subtypes of Rule that add
    attributes to distinguish the cases of algebraic, assignment and rate
    rules.  The 'math' subelement must contain a MathML expression
    defining the mathematical formula of the rule.  This MathML formula
    must return a numerical value.  The formula can be an arbitrary
    expression referencing the variables and other entities in an SBML
    model.

    Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
    RateRule) inherit the the 'math' subelement and other fields from
    SBase. The AssignmentRule and RateRule classes add an additional
    attribute, 'variable'.  See the definitions of AssignmentRule,
    AlgebraicRule and RateRule for details about the structure and
    interpretation of each one.

    Additional restrictions on SBML rules
    ======================================================================

    An important design goal of SBML rule semantics is to ensure that a
    model's simulation and analysis results will not be dependent on when
    or how often rules are evaluated.  To achieve this, SBML needs to
    place two restrictions on rule use.  The first concerns algebraic
    loops in the system of assignments in a model, and the second concerns
    overdetermined systems.

    A model must not contain algebraic loops
    ......................................................................

    The combined set of InitialAssignment, AssignmentRule and KineticLaw
    objects in a model constitute a set of assignment statements that
    should be considered as a whole.  (A KineticLaw object is counted as
    an assignment because it assigns a value to the symbol contained in
    the 'id' attribute of the Reaction object in which it is defined.)
    This combined set of assignment statements must not contain algebraic
    loops -- dependency chains between these statements must terminate.
    To put this more formally, consider a directed graph in which nodes
    are assignment statements and directed arcs exist for each occurrence
    of an SBML species, compartment or parameter symbol in an assignment
    statement's 'math' subelement.  Let the directed arcs point from the
    statement assigning the symbol to the statements that contain the
    symbol in their 'math' subelement expressions. This graph must be
    acyclic.

    SBML does not specify when or how often rules should be evaluated.
    Eliminating algebraic loops ensures that assignment statements can be
    evaluated any number of times without the result of those evaluations
    changing.  As an example, consider the set of equations x = x + 1, y =
    z + 200 and z = y + 100.  If this set of equations were interpreted as
    a set of assignment statements, it would be invalid because the rule
    for x refers to x (exhibiting one type of loop), and the rule for y
    refers to z while the rule for z refers back to y (exhibiting another
    type of loop). Conversely, the following set of equations would
    constitute a valid set of assignment statements: x = 10, y = z + 200,
    and z = x + 100.

    A model must not be overdetermined
    ......................................................................

    An SBML model must not be overdetermined; that is, a model must not
    define more equations than there are unknowns in a model.  An SBML
    model that does not contain AlgebraicRule structures cannot be
    overdetermined.

    LibSBML implements the static analysis procedure described in Appendix
    B of the SBML Level 3 Version 1 Core specification for assessing
    whether a model is overdetermined.

    (In summary, assessing whether a given continuous, deterministic,
    mathematical model is overdetermined does not require dynamic
    analysis; it can be done by analyzing the system of equations created
    from the model. One approach is to construct a bipartite graph in
    which one set of vertices represents the variables and the other the
    set of vertices represents the equations.  Place edges between
    vertices such that variables in the system are linked to the equations
    that determine them.  For algebraic equations, there will be edges
    between the equation and each variable occurring in the equation.  For
    ordinary differential equations (such as those defined by rate rules
    or implied by the reaction rate definitions), there will be a single
    edge between the equation and the variable determined by that
    differential equation.  A mathematical model is overdetermined if the
    maximal matchings of the bipartite graph contain disconnected vertexes
    representing equations.  If one maximal matching has this property,
    then all the maximal matchings will have this property; i.e., it is
    only necessary to find one maximal matching.)

    Rule types for SBML Level 1
    ======================================================================

    SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
    distinguishing rules; specifically, it uses an attribute whose value
    is drawn from an enumeration of 3 values.  LibSBML supports this using
    methods that work with the enumeration values  listed below.

        * libsbml.RULE_TYPE_RATE: Indicates the rule is a 'rate' rule.

       * libsbml.RULE_TYPE_SCALAR: Indicates the rule is a 'scalar' rule.

       * libsbml.RULE_TYPE_INVALID: Indicates the rule type is unknown or
    not yet set.

    """
    __swig_setmethods__ = {}
    for _s in [Rule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlgebraicRule, name, value)
    __swig_getmethods__ = {}
    for _s in [Rule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlgebraicRule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> AlgebraicRule
        __init__(self, SBMLNamespaces sbmlns) -> AlgebraicRule

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            AlgebraicRule(SBMLNamespaces sbmlns)

        Creates a new AlgebraicRule object using the given SBMLNamespaces
        object 'sbmlns'.

        The SBMLNamespaces object encapsulates SBML Level/Version/namespaces
        information.  It is used to communicate the SBML Level, Version, and
        (in Level 3) packages used in addition to SBML Level 3 Core. A common
        approach to using this class constructor is to create an
        SBMLNamespaces object somewhere in a program, once, then pass it to
        object constructors such as this one when needed.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError: Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            AlgebraicRule(long level, long version)

        Creates a new AlgebraicRule object using the given SBML 'level' and
        'version' values.

        Parameter 'level' is the SBML Level to assign to this AlgebraicRule
        object.

        Parameter 'version' is the SBML Version to assign to this
        AlgebraicRule object.

        Throws ValueError: Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        """
        this = _libsbml.new_AlgebraicRule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_AlgebraicRule
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> AlgebraicRule

        Creates and returns a deep copy of this Rule.

        Returns a (deep) copy of this Rule.

        """
        return _libsbml.AlgebraicRule_clone(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        AlgebraicRule object have been set.

        In SBML Levels 2-3, there is no required attribute for an
        AlgebraicRule object.  For Level 1, the only required attribute is
        'formula'.

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.AlgebraicRule_hasRequiredAttributes(self)

AlgebraicRule_swigregister = _libsbml.AlgebraicRule_swigregister
AlgebraicRule_swigregister(AlgebraicRule)

class AssignmentRule(Rule):
    """
    Implementation of SBML's AssignmentRule construct.

    The rule type AssignmentRule is derived from the parent class Rule.
    It is used to express equations that set the values of variables.  The
    left-hand side (the attribute named 'variable') of an assignment rule
    can refer to the identifier of a Species, SpeciesReference (in SBML
    Level 3), Compartment, or Parameter object in the model (but not a
    Reaction).  The entity identified must have its 'constant' attribute
    set to False.  The effects of an assignment rule construct are in
    general terms the same, but differ in the precise details depending on
    the type of SBML component being set:

    * In the case of a species, an SBML assignment rule sets the
    referenced species' quantity (whether a 'concentration' or 'amount')
    to the value determined by the formula in the MathML subelement
    'math'. The unit associated with the value produced by the 'math'
    formula should (in SBML Level 2 Version 4 and in SBML Level 3) or must
    (in SBML releases prior to Level 2 version 4) be equal to the unit
    associated with the species' quantity.  Restrictions: There must not
    be both an AssignmentRule 'variable' attribute and a SpeciesReference
    'species' attribute having the same value in a model, unless the
    referenced Species object has its 'boundaryCondition' attribute set to
    True.  In other words, an assignment rule cannot be defined for a
    species that is created or destroyed in a reaction unless that species
    is defined as a boundary condition in the model.

    * (For SBML Level 3 only) In the case of a species reference, an
    assignment rule sets the stoichiometry of the referenced reactant or
    product to the value determined by the formula in 'math'.  The unit
    associated with the value produced by the 'math' formula should be
    consistent with the unit 'dimensionless', because reactant and product
    stoichiometries in reactions are dimensionless quantities.

    * In the case of a compartment, an SBML assignment rule sets the
    referenced compartment's size to the value determined by the formula
    in the 'math' subelement of the AssignmentRule object.  The overall
    units of the formula in 'math' should (in SBML Level 2 Version 4 and
    in SBML Level 3) or must (in SBML releases prior to Level 2 version 4)
    be the same as the units of the size of the compartment.

    * In the case of a parameter, an assignment rule sets the referenced
    parameter's value to that determined by the formula in the 'math'
    subelement of the AssignmentRule object.  The overall units of the
    formula in the 'math' subelement should (in SBML Level 2 Version 4 and
    in SBML Level 3) or must (in SBML releases prior to Level 2 version 4)
    be the same as the units defined for the parameter.  In the context of
    a simulation, assignment rules are in effect at all times, t >= 0.
    For purposes of evaluating expressions that involve the delay
    'csymbol' (see the SBML Level 2 specification), assignment rules are
    considered to apply also at t <= 0.  Please consult the relevant SBML
    specification for additional information about the semantics of
    assignments, rules, and entity values for simulation time t <= 0.

    A model must not contain more than one AssignmentRule or RateRule
    object having the same value of 'variable'; in other words, in the set
    of all assignment rules and rate rules in an SBML model, each variable
    appearing in the left-hand sides can only appear once.  This simply
    follows from the fact that an indeterminate system would result if a
    model contained more than one assignment rule for the same variable or
    both an assignment rule and a rate rule for the same variable.

    Similarly, a model must also not contain both an AssignmentRule and an
    InitialAssignment definition for the same variable, because both kinds
    of constructs apply prior to and at the start of simulation time,
    i.e., t <= 0.  If a model contained both an initial assignment and an
    assignment rule for the same variable, an indeterminate system would
    result.

    The value calculated by an AssignmentRule object overrides the value
    assigned to the given symbol by the model component defining that
    symbol.  For example, if a Compartment object's 'size' attribute value
    is set in its definition, and the model also contains an
    AssignmentRule object  having that compartment's 'id' as its
    'variable' value, then the 'size' assigned in the Compartment object
    definition is ignored and the value assigned based on the computation
    defined in the AssignmentRule.  This does not mean that a definition
    for a given symbol can be omitted if there is an AssignmentRule object
    involving it.  For example,  there must be a Parameter object
    definition for a given parameter if there is an AssignmentRule
    definition for that parameter.  It is only a question of which value
    definition takes precedence.

    General summary of SBML rules
    ======================================================================

    In SBML Level 3 as well as Level 2, rules are separated into three
    subclasses for the benefit of model analysis software.  The three
    subclasses are based on the following three different possible
    functional forms (where x is a variable, f is some arbitrary function
    returning a numerical result, V is a vector of variables that does not
    include x, and W is a vector of variables that may include x):

      Algebraic:   left-hand side is zero               0 = f(W)      
      Assignment:  left-hand side is a scalar:          x = f(V)      
      Rate:        left-hand side is a rate-of-change:  dx/dt = f(W)

      In their general form given above, there is little to distinguish
    between assignment and algebraic rules.  They are treated as separate
    cases for the following reasons:

        * Assignment rules can simply be evaluated to calculate
    intermediate values for use in numerical methods.  They are statements
    of equality that hold at all times.  (For assignments that are only
    performed once, see InitialAssignment.)

       * SBML needs to place restrictions on assignment rules, for example
    the restriction that assignment rules cannot contain algebraic loops.

        * Some simulators do not contain numerical solvers capable of
    solving unconstrained algebraic equations, and providing more direct
    forms such as assignment rules may enable those simulators to process
    models they could not process if the same assignments were put in the
    form of general algebraic equations;

        * Those simulators that can solve these algebraic equations make a
    distinction between the different categories listed above; and

        * Some specialized numerical analyses of models may only be
    applicable to models that do not contain algebraic rules.

    The approach taken to covering these cases in SBML is to define an
    abstract Rule structure containing a subelement, 'math', to hold the
    right-hand side expression, then to derive subtypes of Rule that add
    attributes to distinguish the cases of algebraic, assignment and rate
    rules.  The 'math' subelement must contain a MathML expression
    defining the mathematical formula of the rule.  This MathML formula
    must return a numerical value.  The formula can be an arbitrary
    expression referencing the variables and other entities in an SBML
    model.

    Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
    RateRule) inherit the the 'math' subelement and other fields from
    SBase. The AssignmentRule and RateRule classes add an additional
    attribute, 'variable'.  See the definitions of AssignmentRule,
    AlgebraicRule and RateRule for details about the structure and
    interpretation of each one.

    Additional restrictions on SBML rules
    ======================================================================

    An important design goal of SBML rule semantics is to ensure that a
    model's simulation and analysis results will not be dependent on when
    or how often rules are evaluated.  To achieve this, SBML needs to
    place two restrictions on rule use.  The first concerns algebraic
    loops in the system of assignments in a model, and the second concerns
    overdetermined systems.

    A model must not contain algebraic loops
    ......................................................................

    The combined set of InitialAssignment, AssignmentRule and KineticLaw
    objects in a model constitute a set of assignment statements that
    should be considered as a whole.  (A KineticLaw object is counted as
    an assignment because it assigns a value to the symbol contained in
    the 'id' attribute of the Reaction object in which it is defined.)
    This combined set of assignment statements must not contain algebraic
    loops -- dependency chains between these statements must terminate.
    To put this more formally, consider a directed graph in which nodes
    are assignment statements and directed arcs exist for each occurrence
    of an SBML species, compartment or parameter symbol in an assignment
    statement's 'math' subelement.  Let the directed arcs point from the
    statement assigning the symbol to the statements that contain the
    symbol in their 'math' subelement expressions. This graph must be
    acyclic.

    SBML does not specify when or how often rules should be evaluated.
    Eliminating algebraic loops ensures that assignment statements can be
    evaluated any number of times without the result of those evaluations
    changing.  As an example, consider the set of equations x = x + 1, y =
    z + 200 and z = y + 100.  If this set of equations were interpreted as
    a set of assignment statements, it would be invalid because the rule
    for x refers to x (exhibiting one type of loop), and the rule for y
    refers to z while the rule for z refers back to y (exhibiting another
    type of loop). Conversely, the following set of equations would
    constitute a valid set of assignment statements: x = 10, y = z + 200,
    and z = x + 100.

    A model must not be overdetermined
    ......................................................................

    An SBML model must not be overdetermined; that is, a model must not
    define more equations than there are unknowns in a model.  An SBML
    model that does not contain AlgebraicRule structures cannot be
    overdetermined.

    LibSBML implements the static analysis procedure described in Appendix
    B of the SBML Level 3 Version 1 Core specification for assessing
    whether a model is overdetermined.

    (In summary, assessing whether a given continuous, deterministic,
    mathematical model is overdetermined does not require dynamic
    analysis; it can be done by analyzing the system of equations created
    from the model. One approach is to construct a bipartite graph in
    which one set of vertices represents the variables and the other the
    set of vertices represents the equations.  Place edges between
    vertices such that variables in the system are linked to the equations
    that determine them.  For algebraic equations, there will be edges
    between the equation and each variable occurring in the equation.  For
    ordinary differential equations (such as those defined by rate rules
    or implied by the reaction rate definitions), there will be a single
    edge between the equation and the variable determined by that
    differential equation.  A mathematical model is overdetermined if the
    maximal matchings of the bipartite graph contain disconnected vertexes
    representing equations.  If one maximal matching has this property,
    then all the maximal matchings will have this property; i.e., it is
    only necessary to find one maximal matching.)

    Rule types for SBML Level 1
    ======================================================================

    SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
    distinguishing rules; specifically, it uses an attribute whose value
    is drawn from an enumeration of 3 values.  LibSBML supports this using
    methods that work with the enumeration values  listed below.

        * libsbml.RULE_TYPE_RATE: Indicates the rule is a 'rate' rule.

       * libsbml.RULE_TYPE_SCALAR: Indicates the rule is a 'scalar' rule.

       * libsbml.RULE_TYPE_INVALID: Indicates the rule type is unknown or
    not yet set.

    """
    __swig_setmethods__ = {}
    for _s in [Rule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentRule, name, value)
    __swig_getmethods__ = {}
    for _s in [Rule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentRule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> AssignmentRule
        __init__(self, SBMLNamespaces sbmlns) -> AssignmentRule

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            AssignmentRule(SBMLNamespaces sbmlns)

        Creates a new AssignmentRule using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            AssignmentRule(long level, long version)

        Creates a new AssignmentRule using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        AssignmentRule.

        Parameter 'version' is a long integer, the SBML Version to assign to
        this AssignmentRule.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        """
        this = _libsbml.new_AssignmentRule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_AssignmentRule
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> AssignmentRule

        Creates and returns a deep copy of this Rule.

        Returns a (deep) copy of this Rule.

        """
        return _libsbml.AssignmentRule_clone(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        AssignmentRule object have been set.

        In SBML Levels 2-3, the only required attribute for an AssignmentRule
        object is 'variable'.  For Level 1, where the equivalent attribute is
        known by different names ('compartment', 'species', or 'name',
        depending on the type of object), there is an additional required
        attribute called 'formula'.

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.AssignmentRule_hasRequiredAttributes(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.AssignmentRule_renameSIdRefs(self, *args)

AssignmentRule_swigregister = _libsbml.AssignmentRule_swigregister
AssignmentRule_swigregister(AssignmentRule)

class RateRule(Rule):
    """
    Implementation of SBML's RateRule construct.

    The rule type RateRule is derived from the parent class Rule.  It is
    used to express equations that determine the rates of change of
    variables.  The left-hand side (the 'variable' attribute) can refer to
    the identifier of a species, compartment, or parameter (but not a
    reaction).  The entity identified must have its 'constant' attribute
    set to False.  The effects of a RateRule are in general terms the
    same, but differ in the precise details depending on which variable is
    being set:

        * In the case of a species, a RateRule sets the rate of change of
    the species' quantity (concentration or amount of substance) to the
    value determined by the formula in the 'math' subelement of the
    RateRule object.  The overall units of the formula in 'math' should
    (in SBML Level 2 Version 4 and in SBML Level 3) or must (in SBML
    releases prior to Level 2 version 4) be equal to the unit of species
    quantity divided by the model-wide unit of time.  Restrictions: There
    must not be both a RateRule 'variable' attribute and a
    SpeciesReference 'species' attribute having the same value, unless
    that species has its 'boundaryCondition' attribute is set to True.
    This means a rate rule cannot be defined for a species that is created
    or destroyed in a reaction, unless that species is defined as a
    boundary condition in the model.

    * (For SBML Level 3 only) In the case of a species reference, a
    RateRule sets the rate of change of the stoichiometry of the
    referenced reactant or product to the value determined by the formula
    in 'math'.  The unit associated with the value produced by the 'math'
    formula should be consistent with the unit 'dimensionless' divided by
    the model-wide unit of time.

    * In the case of a compartment, a RateRule sets the rate of change of
    the compartment's size to the value determined by the formula in the
    'math' subelement of the RateRule object.  The overall units of the
    formula should (in SBML Level 2 Version 4 and in SBML Level 3) or must
    (in SBML releases prior to Level 2 version 4) be the units of the
    compartment's size divided by the model-wide unit of time.

    * In the case of a parameter, a RateRule sets the rate of change of
    the parameter's value to that determined by the formula in the 'math'
    subelement of the RateRule object.  The overall units of the formula
    should (in SBML Level 2 Version 4 and in SBML Level 3) or must (in
    SBML releases prior to Level 2 version 4) be the Parameter object's
    'unit' attribute value divided by the model-wide unit of time.  In the
    context of a simulation, rate rules are in effect for simulation time
    t < 0.  Please consult the relevant SBML specification for additional
    information about the semantics of assignments, rules, and entity
    values for simulation time t <= 0.

    As mentioned in the description of AssignmentRule, a model must not
    contain more than one RateRule or AssignmentRule object having the
    same value of 'variable'; in other words, in the set of all assignment
    rules and rate rules in an SBML model, each variable appearing in the
    left-hand sides can only appear once.  This simply follows from the
    fact that an indeterminate system would result if a model contained
    more than one assignment rule for the same variable or both an
    assignment rule and a rate rule for the same variable.

    General summary of SBML rules
    ======================================================================

    In SBML Level 3 as well as Level 2, rules are separated into three
    subclasses for the benefit of model analysis software.  The three
    subclasses are based on the following three different possible
    functional forms (where x is a variable, f is some arbitrary function
    returning a numerical result, V is a vector of variables that does not
    include x, and W is a vector of variables that may include x):

      Algebraic:   left-hand side is zero               0 = f(W)      
      Assignment:  left-hand side is a scalar:          x = f(V)      
      Rate:        left-hand side is a rate-of-change:  dx/dt = f(W)

      In their general form given above, there is little to distinguish
    between assignment and algebraic rules.  They are treated as separate
    cases for the following reasons:

        * Assignment rules can simply be evaluated to calculate
    intermediate values for use in numerical methods.  They are statements
    of equality that hold at all times.  (For assignments that are only
    performed once, see InitialAssignment.)

       * SBML needs to place restrictions on assignment rules, for example
    the restriction that assignment rules cannot contain algebraic loops.

        * Some simulators do not contain numerical solvers capable of
    solving unconstrained algebraic equations, and providing more direct
    forms such as assignment rules may enable those simulators to process
    models they could not process if the same assignments were put in the
    form of general algebraic equations;

        * Those simulators that can solve these algebraic equations make a
    distinction between the different categories listed above; and

        * Some specialized numerical analyses of models may only be
    applicable to models that do not contain algebraic rules.

    The approach taken to covering these cases in SBML is to define an
    abstract Rule structure containing a subelement, 'math', to hold the
    right-hand side expression, then to derive subtypes of Rule that add
    attributes to distinguish the cases of algebraic, assignment and rate
    rules.  The 'math' subelement must contain a MathML expression
    defining the mathematical formula of the rule.  This MathML formula
    must return a numerical value.  The formula can be an arbitrary
    expression referencing the variables and other entities in an SBML
    model.

    Each of the three subclasses of Rule (AssignmentRule, AlgebraicRule,
    RateRule) inherit the the 'math' subelement and other fields from
    SBase. The AssignmentRule and RateRule classes add an additional
    attribute, 'variable'.  See the definitions of AssignmentRule,
    AlgebraicRule and RateRule for details about the structure and
    interpretation of each one.

    Additional restrictions on SBML rules
    ======================================================================

    An important design goal of SBML rule semantics is to ensure that a
    model's simulation and analysis results will not be dependent on when
    or how often rules are evaluated.  To achieve this, SBML needs to
    place two restrictions on rule use.  The first concerns algebraic
    loops in the system of assignments in a model, and the second concerns
    overdetermined systems.

    A model must not contain algebraic loops
    ......................................................................

    The combined set of InitialAssignment, AssignmentRule and KineticLaw
    objects in a model constitute a set of assignment statements that
    should be considered as a whole.  (A KineticLaw object is counted as
    an assignment because it assigns a value to the symbol contained in
    the 'id' attribute of the Reaction object in which it is defined.)
    This combined set of assignment statements must not contain algebraic
    loops -- dependency chains between these statements must terminate.
    To put this more formally, consider a directed graph in which nodes
    are assignment statements and directed arcs exist for each occurrence
    of an SBML species, compartment or parameter symbol in an assignment
    statement's 'math' subelement.  Let the directed arcs point from the
    statement assigning the symbol to the statements that contain the
    symbol in their 'math' subelement expressions. This graph must be
    acyclic.

    SBML does not specify when or how often rules should be evaluated.
    Eliminating algebraic loops ensures that assignment statements can be
    evaluated any number of times without the result of those evaluations
    changing.  As an example, consider the set of equations x = x + 1, y =
    z + 200 and z = y + 100.  If this set of equations were interpreted as
    a set of assignment statements, it would be invalid because the rule
    for x refers to x (exhibiting one type of loop), and the rule for y
    refers to z while the rule for z refers back to y (exhibiting another
    type of loop). Conversely, the following set of equations would
    constitute a valid set of assignment statements: x = 10, y = z + 200,
    and z = x + 100.

    A model must not be overdetermined
    ......................................................................

    An SBML model must not be overdetermined; that is, a model must not
    define more equations than there are unknowns in a model.  An SBML
    model that does not contain AlgebraicRule structures cannot be
    overdetermined.

    LibSBML implements the static analysis procedure described in Appendix
    B of the SBML Level 3 Version 1 Core specification for assessing
    whether a model is overdetermined.

    (In summary, assessing whether a given continuous, deterministic,
    mathematical model is overdetermined does not require dynamic
    analysis; it can be done by analyzing the system of equations created
    from the model. One approach is to construct a bipartite graph in
    which one set of vertices represents the variables and the other the
    set of vertices represents the equations.  Place edges between
    vertices such that variables in the system are linked to the equations
    that determine them.  For algebraic equations, there will be edges
    between the equation and each variable occurring in the equation.  For
    ordinary differential equations (such as those defined by rate rules
    or implied by the reaction rate definitions), there will be a single
    edge between the equation and the variable determined by that
    differential equation.  A mathematical model is overdetermined if the
    maximal matchings of the bipartite graph contain disconnected vertexes
    representing equations.  If one maximal matching has this property,
    then all the maximal matchings will have this property; i.e., it is
    only necessary to find one maximal matching.)

    Rule types for SBML Level 1
    ======================================================================

    SBML Level 1 uses a different scheme than SBML Level 2 and Level 3 for
    distinguishing rules; specifically, it uses an attribute whose value
    is drawn from an enumeration of 3 values.  LibSBML supports this using
    methods that work with the enumeration values  listed below.

        * libsbml.RULE_TYPE_RATE: Indicates the rule is a 'rate' rule.

       * libsbml.RULE_TYPE_SCALAR: Indicates the rule is a 'scalar' rule.

       * libsbml.RULE_TYPE_INVALID: Indicates the rule type is unknown or
    not yet set.

    """
    __swig_setmethods__ = {}
    for _s in [Rule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateRule, name, value)
    __swig_getmethods__ = {}
    for _s in [Rule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RateRule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> RateRule
        __init__(self, SBMLNamespaces sbmlns) -> RateRule

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            RateRule(SBMLNamespaces sbmlns)

        Creates a new RateRule using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

         @par <hr> Method variant with the following signature:

            RateRule(long level, long version)

        Creates a new RateRule using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        RateRule

        Parameter 'version' is a long integer, the SBML Version to assign to
        this RateRule

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        """
        this = _libsbml.new_RateRule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_RateRule
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> RateRule

        Creates and returns a deep copy of this Rule.

        Returns a (deep) copy of this Rule.

        """
        return _libsbml.RateRule_clone(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        RateRule object have been set.

        In SBML Levels 2-3, the only required attribute for a RateRule object
        is 'variable'.  For Level 1, where the equivalent attribute is known
        by different names ('compartment', 'species', or 'name', depending on
        the type of object), there is an additional required attribute called
        'formula'.

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.RateRule_hasRequiredAttributes(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.RateRule_renameSIdRefs(self, *args)

RateRule_swigregister = _libsbml.RateRule_swigregister
RateRule_swigregister(RateRule)

class Constraint(SBase):
    """
    Implementation of SBML's Constraint construct.

    The Constraint object class was introduced in SBML Level 2 Version 2
    as a mechanism for stating the assumptions under which a model is
    designed to operate.  The constraints are statements about permissible
    values of different quantities in a model. Constraints are not used to
    compute dynamical values for simulation or analysis, but rather, they
    serve an advisory role for simulation/analysis tools.

    SBML's Constraint object class has one required attribute, 'id', to
    give the parameter a unique identifier by which other parts of an SBML
    model definition can refer to it.  A Constraint object can also have
    an optional 'name' attribute of type string.  Identifiers and names
    must be used according to the guidelines described in the SBML
    specification (e.g., Section 3.3 in the Level 2 Version 4
    specification).

    Constraint has one required subelement, 'math', containing a MathML
    formula defining the condition of the constraint.  This formula must
    return a boolean value of True when the model is a valid state.  The
    formula can be an arbitrary expression referencing the variables and
    other entities in an SBML model.  The evaluation of 'math' and
    behavior of constraints are described in more detail below.

    A Constraint structure also has an optional subelement called
    'message'. This can contain a message in XHTML format that may be
    displayed to the user when the condition of the formula in the 'math'
    subelement evaluates to a value of False.  Software tools are not
    required to display the message, but it is recommended that they do so
    as a matter of best practice.  The XHTML content within a 'message'
    subelement must follow the same restrictions as for the 'notes'
    element on SBase described in in the SBML Level 2 specification;
    please consult the SBML specification document corresponding to the
    SBML Level and Version of your model for more information about the
    requirements for 'notes' content.

    Constraint was introduced in SBML Level 2 Version 2.  It is not
    available in earlier versions of Level 2 nor in any version of Level
    1.

    Semantics of Constraints
    ======================================================================

    In the context of a simulation, a Constraint has effect at all times t
    >= 0.  Each Constraint's 'math' subelement is first evaluated after
    any InitialAssignment definitions in a model at t = 0 and can
    conceivably trigger at that point.  (In other words, a simulation
    could fail a constraint immediately.)

    Constraint structures cannot and should not be used to compute the
    dynamical behavior of a model as part of, for example, simulation.
    Constraints may be used as input to non-dynamical analysis, for
    instance by expressing flux constraints for flux balance analysis.

    The results of a simulation of a model containing a constraint are
    invalid from any simulation time at and after a point when the
    function given by the 'math' subelement returns a value of False.
    Invalid simulation results do not make a prediction of the behavior of
    the biochemical reaction network represented by the model.  The
    precise behavior of simulation tools is left undefined with respect to
    constraints.  If invalid results are detected with respect to a given
    constraint, the 'message' subelement may optionally be displayed to
    the user.  The simulation tool may also halt the simulation or clearly
    delimit in output data the simulation time point at which the
    simulation results become invalid.

    SBML does not impose restrictions on duplicate Constraint definitions
    or the order of evaluation of Constraint objects in a model.  It is
    possible for a model to define multiple constraints all with the same
    mathematical expression.  Since the failure of any constraint
    indicates that the model simulation has entered an invalid state, a
    system is not required to attempt to detect whether other constraints
    in the model have failed once any one constraint has failed.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Constraint
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Constraint
        __init__(self, SBMLNamespaces sbmlns) -> Constraint
        __init__(self, Constraint orig) -> Constraint

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Constraint(SBMLNamespaces sbmlns)

        Creates a new Constraint using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Constraint(long level, long version)

        Creates a new Constraint using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Constraint

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Constraint

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Constraint(Constraint orig)

        Copy constructor; creates a copy of this Constraint.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Constraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Constraint

        Creates and returns a deep copy of this Constraint.

        Returns a (deep) copy of this Constraint.

        """
        return _libsbml.Constraint_clone(self)

    def getMessage(self):
        """
        getMessage(self) -> XMLNode

        Get the message, if any, associated with this Constraint

        Returns the message for this Constraint, as an XMLNode.

        """
        return _libsbml.Constraint_getMessage(self)

    def getMessageString(self):
        """
        getMessageString(self) -> string

        Get the message string, if any, associated with this Constraint

        Returns the message for this Constraint, as a string.

        """
        return _libsbml.Constraint_getMessageString(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical expression of this Constraint

        Returns the math for this Constraint, as an ASTNode.

        """
        return _libsbml.Constraint_getMath(self)

    def isSetMessage(self):
        """
        isSetMessage(self) -> bool

        Predicate returning True if a message is defined for this Constraint.

        Returns True if the message of this Constraint is set, False
        otherwise.

        """
        return _libsbml.Constraint_isSetMessage(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate returning True if a mathematical formula is defined for this
        Constraint.

        Returns True if the 'math' subelement for this Constraint is set,
        False otherwise.

        """
        return _libsbml.Constraint_isSetMath(self)

    def setMessage(self, *args):
        """
        setMessage(self, XMLNode xhtml) -> int

        Sets the message of this Constraint.

        The XMLNode tree passed in 'xhtml' is copied.

        Parameter 'xhtml' is an XML tree containing XHTML content.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.Constraint_setMessage(self, *args)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the mathematical expression of this Constraint to a copy of the
        AST given as 'math'.

        Parameter 'math' is an ASTNode expression to be assigned as the 'math'
        subelement of this Constraint

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.Constraint_setMath(self, *args)

    def unsetMessage(self):
        """
        unsetMessage(self) -> int

        Unsets the 'message' subelement of this Constraint.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Constraint_unsetMessage(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Constraint_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Constraint_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.Constraint_replaceSIDWithFunction(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_CONSTRAINT
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Constraint_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Constraint, is
        always 'constraint'.

        Returns the name of this element, i.e., 'constraint'.

        """
        return _libsbml.Constraint_getElementName(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        Constraint object have been set.

        Note:

        The required elements for a Constraint object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.Constraint_hasRequiredElements(self)

Constraint_swigregister = _libsbml.Constraint_swigregister
Constraint_swigregister(Constraint)

class ListOfConstraints(ListOf):
    """
    Implementation of SBML's ListOfConstraints construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfConstraints, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfConstraints, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfConstraints
        __init__(self, SBMLNamespaces sbmlns) -> ListOfConstraints

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfConstraints(SBMLNamespaces sbmlns)

        Creates a new ListOfConstraints object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfConstraints object to be
        created.

        @par <hr> Method variant with the following signature:

            ListOfConstraints(long level, long version)

        Creates a new ListOfConstraints object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfConstraints(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfConstraints

        Creates and returns a deep copy of this ListOfConstraints instance.

        Returns a (deep) copy of this ListOfConstraints.

        """
        return _libsbml.ListOfConstraints_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Constraint objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf
        instance: libsbml.SBML_CONSTRAINT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfConstraints_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfConstraints, the XML element name is 'listOfConstraints'.

        Returns the name of this element, i.e., 'listOfConstraints'.

        """
        return _libsbml.ListOfConstraints_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Constraint
        get(self, unsigned int n) -> Constraint

        Get a Constraint from the ListOfConstraints.

        Parameter 'n' is the index number of the Constraint to get.

        Returns the nth Constraint in this ListOfConstraints.

        See also size().

        """
        return _libsbml.ListOfConstraints_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Constraint

        Removes the nth item from this ListOfConstraints items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        """
        return _libsbml.ListOfConstraints_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfConstraints
    __del__ = lambda self : None;
ListOfConstraints_swigregister = _libsbml.ListOfConstraints_swigregister
ListOfConstraints_swigregister(ListOfConstraints)

class Reaction(SBase):
    """
    Implementation of SBML's Reaction construct.

    A reaction represents any transformation, transport or binding
    process, typically a chemical reaction, that can change the quantity
    of one or more species.  In SBML, a reaction is defined primarily in
    terms of the participating reactants and products (and their
    corresponding stoichiometries), along with optional modifier species,
    an optional rate at which the reaction takes place, and optional
    parameters.

    As with other major objects in SBML, Reaction has a mandatory
    attribute, 'id', used to give the compartment type an identifier.  The
    identifier must be a text string conforming to the identifer syntax
    permitted in SBML.  In SBML Level 2 and Level 3, the reaction 'id'
    identifier can be used in mathematical formulas elsewhere in an SBML
    model to represent the rate of that reaction; this usage is explained
    below.  Reaction also has an optional 'name' attribute, of type
    string.  The 'id' and 'name' must be used according to the guidelines
    described in the SBML specification.

    The species participating as reactants, products, and/or modifiers in
    a reaction are declared using lists of SpeciesReference and/or
    ModifierSpeciesReference instances stored in subelements
    'listOfReactants', 'listOfProducts' and 'listOfModifiers'.  Certain
    restrictions are placed on the appearance of species in reaction
    definitions:

    * The ability of a species to appear as a reactant or product of any
    reaction in a model is governed by certain flags in that species'
    definition; see the definition of Species for more information.

    * Any species appearing in the mathematical formula of the subelement
    'kineticLaw' (described below) of a Reaction must be declared in at
    least one of that Reaction's lists of reactants, products, and/or
    modifiers.  Put another way, it is an error for a reaction's kinetic
    law formula to refer to species that have not been declared for that
    reaction.

    * A reaction definition can contain an empty list of reactants or an
    empty list of products, but it must have at least one reactant or
    product; in other words, a reaction without any reactant or product
    species is not permitted.  (This restriction does not apply to
    modifier species, which remain optional in all cases.) A reaction can
    contain up to one KineticLaw object in a subelement named
    'kineticLaw'.  It defines the speed at which the process defined by
    the reaction takes place.  The description of KineticLaw provides more
    details about its use.  Note that although the inclusion of a
    KineticLaw object in an instance of a Reaction component is optional,
    there is no useful default that can be substituted in place of a
    missing rate expression in a reaction.  Moreover, a reaction's rate
    cannot be defined in any other way in SBML -- InitialAssignment,
    AssignmentRule, RateRule, AlgebraicRule, Event, and other constructs
    in SBML cannot be used to set the reaction rate separately.
    Nevertheless, for some modeling applications, reactions without any
    defined rate can be perfectly acceptable.

    Reaction also has a boolean attribute named 'reversible' for
    indicating whether the reaction is reversible.  This attribute is
    optional in SBML Level 2, with a default of True; it is mandatory in
    SBML Level 3 (with no default value).  To say that a reaction is
    reversible is to say it can proceed in either the forward or the
    reverse direction.  Although the reversibility of a reaction can
    sometimes be deduced by inspecting its rate expression, this is not
    always the case, especially for complicated expressions.  Moreover,
    the need in SBML to allow rate expressions (i.e., KineticLaw) to be
    optional leads to the need for a separate flag indicating
    reversibility.  Note that labeling a reaction as irreversible is an
    assertion that the reaction always proceeds in the given forward
    direction.  (Why else would it be flagged as irreversible?)  This
    implies the rate expression in the KineticLaw always has a non-
    negative value during simulations.  Software tools could provide a
    means of optionally testing that this condition holds. The presence of
    reversibility information in two places (i.e., the rate expression and
    the 'reversible' attribute on Reaction) leaves open the possibility
    that a model could contain contradictory information, but the creation
    of such a model would be an error on the part of the software
    generating it.

    The Reaction object class has another boolean attribute called 'fast'.
    This attribute is optional in SBML Level 2, with a default of false;
    it is mandatory in SBML Level 3 (with no default value).  It is used
    to indicate that a reaction occurs on a vastly faster time scale than
    others in a system.  Readers are directed to the SBML Level 2 Version
    4 specification, which provides more detail about the conditions under
    which a reaction can be considered to be fast in this sense.  The
    attribute's default value is False.  SBML Level 1 and Level 2 Version
    1 incorrectly claimed that software tools could ignore this attribute
    if they did not implement support for the corresponding concept;
    however, further research in SBML has revealed that this is not true,
    and 'fast' cannot be ignored if it is set to True.  SBML Level 2
    Versions 2-4 therefore stipulate that if a model has any reactions
    with 'fast' set to True, a software tool must be able to respect the
    attribute or else indicate to the user that it does not have the
    capacity to do so.  Analysis software cannot ignore the value of the
    'fast' attribute because doing so may lead to different results as
    compared to a software system that does make use of 'fast'.

    In SBML Level 3 Version 1, the Reaction object has an additional
    optional attribute named 'compartment', whose value must be the
    identifier of a compartment defined in the enclosing Model object. The
    'compartment' attribute can be used to indicate the compartment in
    which the reaction is assumed to take place.  If the attribute is
    present, its value must be the identifier of a Compartment object
    defined in the enclosing Model object.  Similar to the 'reversible'
    attribute, the value of the 'compartment' attribute has no direct
    impact on the construction of mathematical equations for the SBML
    model.  When a kinetic law is given for a reaction, the compartment
    location may already be implicit in the kinetic law (although this
    cannot always be guaranteed).  Nevertheless, software tools may find
    the 'compartment' attribute value useful for such purposes as
    analyzing the structure of the model, guiding the modeler in
    constructing correct rate formulas, and visualization purposes.

    Readers are urged to read the SBML specification for more details
    about the proper use of Reaction.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reaction, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reaction, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Reaction
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Reaction
        __init__(self, SBMLNamespaces sbmlns) -> Reaction
        __init__(self, Reaction orig) -> Reaction

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Reaction(SBMLNamespaces sbmlns)

        Creates a new Reaction using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Reaction(long level, long version)

        Creates a new Reaction using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Reaction

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Reaction

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Reaction(Reaction orig)

        Copy constructor; creates a copy of this Reaction.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Reaction(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Reaction

        Creates and returns a deep copy of this Reaction.

        Returns a (deep) copy of this Reaction.

        """
        return _libsbml.Reaction_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find.

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.Reaction_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or None if no such object is found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns pointer to the first element found with the given 'metaid'.

        """
        return _libsbml.Reaction_getElementByMetaId(self, *args)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Reaction_renameSIdRefs(self, *args)

    def initDefaults(self):
        """
        initDefaults(self)

        Initializes the fields of this Reaction object to 'typical' default
        values.

        The SBML Reaction component has slightly different aspects and default
        attribute values in different SBML Levels and Versions. This method
        sets the values to certain common defaults, based mostly on what they
        are in SBML Level 2.  Specifically:

            * Sets the 'reversible' attribute to True

           * Sets the 'fast' attribute to False

           * Marks the 'fast' attribute as not having been set

        WARNING:

        SBML definitions before SBML Level 2 Version 2 incorrectly indicated
        that software tools could ignore the 'fast' attribute if they did not
        implement support for the corresponding concept; however, further
        research in SBML has revealed that this is not true, and 'fast' cannot
        be ignored if it is set to True. Beginning with SBML Level 2 Versions
        2, the SBML specifications therefore stipulate that if a model has any
        reactions with 'fast' set to True, a software tool must be able to
        respect the attribute or else indicate to the user that it does not
        have the capacity to do so.  Readers are directed to the SBML
        specifications, which provides more detail about the conditions under
        which a reaction can be considered to be fast in this sense.

        """
        return _libsbml.Reaction_initDefaults(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Reaction.

        Returns the id of this Reaction.

        """
        return _libsbml.Reaction_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Reaction.

        Returns the name of this Reaction.

        """
        return _libsbml.Reaction_getName(self)

    def getKineticLaw(self, *args):
        """
        getKineticLaw(self) -> KineticLaw
        getKineticLaw(self) -> KineticLaw

        Returns the KineticLaw object contained in this Reaction.

        Returns the KineticLaw instance.

        """
        return _libsbml.Reaction_getKineticLaw(self, *args)

    def getReversible(self):
        """
        getReversible(self) -> bool

        Returns the value of the 'reversible' attribute on the Reaction as a
        boolean value.

        Returns the reversibility status of this Reaction.

        """
        return _libsbml.Reaction_getReversible(self)

    def getFast(self):
        """
        getFast(self) -> bool

        Returns the value of the 'fast' attribute of this Reaction.

        Returns the 'fast' status of this Reaction.

        WARNING:

        SBML definitions before SBML Level 2 Version 2 incorrectly indicated
        that software tools could ignore the 'fast' attribute if they did not
        implement support for the corresponding concept; however, further
        research in SBML has revealed that this is not true, and 'fast' cannot
        be ignored if it is set to True. Beginning with SBML Level 2 Versions
        2, the SBML specifications therefore stipulate that if a model has any
        reactions with 'fast' set to True, a software tool must be able to
        respect the attribute or else indicate to the user that it does not
        have the capacity to do so.  Readers are directed to the SBML
        specifications, which provides more detail about the conditions under
        which a reaction can be considered to be fast in this sense.

        """
        return _libsbml.Reaction_getFast(self)

    def getCompartment(self):
        """
        getCompartment(self) -> string

        (SBML Level 3 only) Returns the value of the 'compartment' attribute
        on the Reaction.

        Returns the compartment of this Reaction.

        Note:

        The 'compartment' attribute is available in SBML Level 3 Version 1
        Core, but is not present on Reaction in lower Levels of SBML.

        """
        return _libsbml.Reaction_getCompartment(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this Reaction's 'id' attribute is set.

        Returns True if the 'id' attribute of this Reaction is set, False
        otherwise.

        """
        return _libsbml.Reaction_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this Reaction's 'name' attribute is set.

        Returns True if the 'name' attribute of this Reaction is set, False
        otherwise.

        """
        return _libsbml.Reaction_isSetName(self)

    def isSetKineticLaw(self):
        """
        isSetKineticLaw(self) -> bool

        Predicate returning True if this Reaction contains a kinetic law
        object.

        Returns True if a KineticLaw is present in this Reaction,, False
        otherwise.

        """
        return _libsbml.Reaction_isSetKineticLaw(self)

    def isSetFast(self):
        """
        isSetFast(self) -> bool

        Predicate returning True if the value of the 'fast' attribute on this
        Reaction.

        Returns True if the 'fast' attribute is true, False otherwise.

        WARNING:

        SBML definitions before SBML Level 2 Version 2 incorrectly indicated
        that software tools could ignore the 'fast' attribute if they did not
        implement support for the corresponding concept; however, further
        research in SBML has revealed that this is not true, and 'fast' cannot
        be ignored if it is set to True. Beginning with SBML Level 2 Versions
        2, the SBML specifications therefore stipulate that if a model has any
        reactions with 'fast' set to True, a software tool must be able to
        respect the attribute or else indicate to the user that it does not
        have the capacity to do so.  Readers are directed to the SBML
        specifications, which provides more detail about the conditions under
        which a reaction can be considered to be fast in this sense.

        """
        return _libsbml.Reaction_isSetFast(self)

    def isSetCompartment(self):
        """
        isSetCompartment(self) -> bool

        Predicate returning True if this Reaction's 'compartment' attribute is
        set.

        Returns True if the 'compartment' attribute of this Reaction is set,
        False otherwise.

        Note:

        The 'compartment' attribute is available in SBML Level 3 Version 1
        Core, but is not present on Reaction in lower Levels of SBML.

        """
        return _libsbml.Reaction_isSetCompartment(self)

    def isSetReversible(self):
        """
        isSetReversible(self) -> bool

        Predicate returning True if this Reaction's 'reversible' attribute is
        set.

        Returns True if the 'reversible' attribute of this Reaction is set,
        False otherwise.

        """
        return _libsbml.Reaction_isSetReversible(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this Reaction.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        Reaction

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Reaction_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Reaction.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the Reaction

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Reaction_setName(self, *args)

    def setKineticLaw(self, *args):
        """
        setKineticLaw(self, KineticLaw kl) -> int

        Sets the 'kineticLaw' subelement of this Reaction to a copy of the
        given KineticLaw object.

        Parameter 'kl' is the KineticLaw object to use.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

        """
        return _libsbml.Reaction_setKineticLaw(self, *args)

    def setReversible(self, *args):
        """
        setReversible(self, bool value) -> int

        Sets the value of the 'reversible' attribute of this Reaction.

        Parameter 'value' is the value of the 'reversible' attribute.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.Reaction_setReversible(self, *args)

    def setFast(self, *args):
        """
        setFast(self, bool value) -> int

        Sets the value of the 'fast' attribute of this Reaction.

        Parameter 'value' is the value of the 'fast' attribute.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        WARNING:

        SBML definitions before SBML Level 2 Version 2 incorrectly indicated
        that software tools could ignore the 'fast' attribute if they did not
        implement support for the corresponding concept; however, further
        research in SBML has revealed that this is not true, and 'fast' cannot
        be ignored if it is set to True. Beginning with SBML Level 2 Versions
        2, the SBML specifications therefore stipulate that if a model has any
        reactions with 'fast' set to True, a software tool must be able to
        respect the attribute or else indicate to the user that it does not
        have the capacity to do so.  Readers are directed to the SBML
        specifications, which provides more detail about the conditions under
        which a reaction can be considered to be fast in this sense.

        """
        return _libsbml.Reaction_setFast(self, *args)

    def setCompartment(self, *args):
        """
        setCompartment(self, string sid) -> int

        Sets the value of the 'compartment' attribute of this Reaction.

        The string 'sid' is copied.

        Parameter 'sid' is the string to use as the compartment of this
        Reaction

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The 'compartment' attribute is available in SBML Level 3 Version 1
        Core, but is not present on Reaction in lower Levels of SBML.

        """
        return _libsbml.Reaction_setCompartment(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Reaction.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Reaction_unsetName(self)

    def unsetKineticLaw(self):
        """
        unsetKineticLaw(self) -> int

        Unsets the 'kineticLaw' subelement of this Reaction.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Reaction_unsetKineticLaw(self)

    def unsetFast(self):
        """
        unsetFast(self) -> int

        Unsets the value of the 'fast' attribute of this Reaction.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        WARNING:

        SBML definitions before SBML Level 2 Version 2 incorrectly indicated
        that software tools could ignore the 'fast' attribute if they did not
        implement support for the corresponding concept; however, further
        research in SBML has revealed that this is not true, and 'fast' cannot
        be ignored if it is set to True. Beginning with SBML Level 2 Versions
        2, the SBML specifications therefore stipulate that if a model has any
        reactions with 'fast' set to True, a software tool must be able to
        respect the attribute or else indicate to the user that it does not
        have the capacity to do so.  Readers are directed to the SBML
        specifications, which provides more detail about the conditions under
        which a reaction can be considered to be fast in this sense.

        """
        return _libsbml.Reaction_unsetFast(self)

    def unsetCompartment(self):
        """
        unsetCompartment(self) -> int

        Unsets the value of the 'compartment' attribute of this Reaction.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The 'compartment' attribute is available in SBML Level 3 Version 1
        Core, but is not present on Reaction in lower Levels of SBML.

        """
        return _libsbml.Reaction_unsetCompartment(self)

    def addReactant(self, *args):
        """
        addReactant(self, SpeciesReference sr) -> int

        Adds a given SpeciesReference object as a reactant in this Reaction.

        The SpeciesReference instance in 'sr' is copied.

        Parameter 'sr' is a SpeciesReference object referring to a Species in
        the enclosing Model

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createReactant().

        """
        return _libsbml.Reaction_addReactant(self, *args)

    def addProduct(self, *args):
        """
        addProduct(self, SpeciesReference sr) -> int

        Adds a given SpeciesReference object as a product in this Reaction.

        The SpeciesReference instance in 'sr' is copied.

        Parameter 'sr' is a SpeciesReference object referring to a Species in
        the enclosing Model

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createProduct().

        """
        return _libsbml.Reaction_addProduct(self, *args)

    def addModifier(self, *args):
        """
        addModifier(self, ModifierSpeciesReference msr) -> int

        Adds a given ModifierSpeciesReference object as a product in this
        Reaction.

        The ModifierSpeciesReference instance in 'msr' is copied.

        Parameter 'msr' is a ModifierSpeciesReference object referring to a
        Species in the enclosing Model

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createModifier().

        """
        return _libsbml.Reaction_addModifier(self, *args)

    def createReactant(self):
        """
        createReactant(self) -> SpeciesReference

        Creates a new SpeciesReference, adds it to this Reaction's list of
        reactants, and returns it.

        Returns a new SpeciesReference object.

        """
        return _libsbml.Reaction_createReactant(self)

    def createProduct(self):
        """
        createProduct(self) -> SpeciesReference

        Creates a new SpeciesReference, adds it to this Reaction's list of
        products, and returns it.

        Returns a new SpeciesReference object.

        """
        return _libsbml.Reaction_createProduct(self)

    def createModifier(self):
        """
        createModifier(self) -> ModifierSpeciesReference

        Creates a new ModifierSpeciesReference, adds it to this Reaction's
        list of modifiers and returns it.

        Returns a new ModifierSpeciesReference object.

        """
        return _libsbml.Reaction_createModifier(self)

    def createKineticLaw(self):
        """
        createKineticLaw(self) -> KineticLaw

        Creates a new KineticLaw object, installs it as this Reaction's
        'kineticLaw' subelement, and returns it.

        If this Reaction had a previous KineticLaw, it will be destroyed.

        Returns the new KineticLaw object

        """
        return _libsbml.Reaction_createKineticLaw(self)

    def getListOfReactants(self, *args):
        """
        getListOfReactants(self) -> ListOfSpeciesReferences
        getListOfReactants(self) -> ListOfSpeciesReferences

        Returns the list of reactants in this Reaction object.

        Returns the ListOfSpeciesReferences containing the references to the
        species acting as reactants in this reaction

        """
        return _libsbml.Reaction_getListOfReactants(self, *args)

    def getListOfProducts(self, *args):
        """
        getListOfProducts(self) -> ListOfSpeciesReferences
        getListOfProducts(self) -> ListOfSpeciesReferences

        Returns the list of products in this Reaction object.

        Returns the ListOfSpeciesReferences containing the references to the
        species acting as products in this reaction

        """
        return _libsbml.Reaction_getListOfProducts(self, *args)

    def getListOfModifiers(self, *args):
        """
        getListOfModifiers(self) -> ListOfSpeciesReferences
        getListOfModifiers(self) -> ListOfSpeciesReferences

        Returns the list of modifiers in this Reaction object.

        Returns the ListOfSpeciesReferences containing the references to the
        species acting as modifiers in this reaction

        """
        return _libsbml.Reaction_getListOfModifiers(self, *args)

    def getReactant(self, *args):
        """
        getReactant(self, unsigned int n) -> SpeciesReference
        getReactant(self, unsigned int n) -> SpeciesReference
        getReactant(self, string species) -> SpeciesReference
        getReactant(self, string species) -> SpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getReactant(string species)

        Returns the reactant species (as a SpeciesReference object) having  a
        specific identifier in this Reaction.

        Parameter 'species' is the identifier of the reactant Species
        ('species'  attribute of the reactant SpeciesReference object)

        Returns a SpeciesReference object, or None if no species with the
        given identifier 'species' appears as a reactant in this Reaction.

        @par <hr> Method variant with the following signature:

            getReactant(long n)

        Returns the nth reactant species (as a SpeciesReference object)  in
        the list of reactants in this Reaction.

        Callers should first call getNumReactants() to find out how many
        reactants there are, to avoid using an invalid index number.

        Parameter 'n' is the index of the reactant sought.

        Returns the nth reactant (as a SpeciesReference object) of this
        Reaction.

        """
        return _libsbml.Reaction_getReactant(self, *args)

    def getProduct(self, *args):
        """
        getProduct(self, unsigned int n) -> SpeciesReference
        getProduct(self, unsigned int n) -> SpeciesReference
        getProduct(self, string species) -> SpeciesReference
        getProduct(self, string species) -> SpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getProduct(string species)

        Returns the product species (as a SpeciesReference object) having  a
        specific identifier in this Reaction.

        Parameter 'species' is the identifier of the product Species
        ('species' attribute of the product SpeciesReference object)

        Returns a SpeciesReference object, or None if no species with the
        given identifier 'species' appears as a product in this Reaction.

        @par <hr> Method variant with the following signature:

            getProduct(long n)

        Returns the nth product species (as a SpeciesReference object)  in the
        list of products in this Reaction.

        Callers should first call getNumProducts() to find out how many
        products there are, to avoid using an invalid index number.

        Parameter 'n' is the index of the product sought.

        Returns the nth product (as a SpeciesReference object) of this
        Reaction.

        """
        return _libsbml.Reaction_getProduct(self, *args)

    def getModifier(self, *args):
        """
        getModifier(self, unsigned int n) -> ModifierSpeciesReference
        getModifier(self, unsigned int n) -> ModifierSpeciesReference
        getModifier(self, string species) -> ModifierSpeciesReference
        getModifier(self, string species) -> ModifierSpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getModifier(string species)

        Returns the modifier species (as a ModifierSpeciesReference object)
        having a specific identifier in this Reaction.

        Parameter 'species' is the identifier of the modifier Species
        ('species'  attribute of the ModifierSpeciesReference object)

        Returns a ModifierSpeciesReference object, or None if no species with
        the given identifier 'species' appears as a modifier in this Reaction.

        @par <hr> Method variant with the following signature:

            getModifier(long n)

        Returns the nth modifier species (as a ModifierSpeciesReference
        object)  in the list of modifiers of this Reaction.

        Callers should first call getNumModifiers() to find out how many
        modifiers there are, to avoid using an invalid index number.

        Parameter 'n' is the index of the modifier species sought

        Returns the nth modifier (as a ModifierSpeciesReference object) of
        this Reaction.

        """
        return _libsbml.Reaction_getModifier(self, *args)

    def getNumReactants(self):
        """
        getNumReactants(self) -> unsigned int

        Returns the number of reactant species in this Reaction.

        Returns the number of reactants in this Reaction.

        """
        return _libsbml.Reaction_getNumReactants(self)

    def getNumProducts(self):
        """
        getNumProducts(self) -> unsigned int

        Returns the number of product species in this Reaction.

        Returns the number of products in this Reaction.

        """
        return _libsbml.Reaction_getNumProducts(self)

    def getNumModifiers(self):
        """
        getNumModifiers(self) -> unsigned int

        Returns the number of modifier species in this Reaction.

        Returns the number of modifiers in this Reaction.

        """
        return _libsbml.Reaction_getNumModifiers(self)

    def removeReactant(self, *args):
        """
        removeReactant(self, unsigned int n) -> SpeciesReference
        removeReactant(self, string species) -> SpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeReactant(string species)

        Removes the reactant species (SpeciesReference object) having the
        given   'species' attribute in this Reaction and returns a pointer to
        it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'species' is the 'species' attribute of the reactant
        SpeciesReference  object

        Returns the removed reactant SpeciesReference object, or None if no
        reactant SpeciesReference object with the given 'species' attribute
        'species' exists in this Reaction.

        @par <hr> Method variant with the following signature:

            removeReactant(long n)

        Removes the nth reactant species (SpeciesReference object) in the list
        of  reactants in this Reaction and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it. The caller should first call getNumReactants() to find out how
        many reactants there are, to avoid using an invalid index number.

        Parameter 'n' is the index of the reactant SpeciesReference object to
        remove

        Returns the removed reactant SpeciesReference object, or None if the
        given index is out of range.

        """
        return _libsbml.Reaction_removeReactant(self, *args)

    def removeProduct(self, *args):
        """
        removeProduct(self, unsigned int n) -> SpeciesReference
        removeProduct(self, string species) -> SpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeProduct(string species)

        Removes the product species (SpeciesReference object) having the given
        'species' attribute in this Reaction and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'species' is the 'species' attribute of the product
        SpeciesReference  object

        Returns the removed product SpeciesReference object, or None if no
        product SpeciesReference object with the given 'species' attribute
        'species' exists in this Reaction.

        @par <hr> Method variant with the following signature:

            removeProduct(long n)

        Removes the nth product species (SpeciesReference object) in the list
        of  products in this Reaction and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it. The caller should first call getNumProducts() to find out how many
        products there are, to avoid using an invalid index number.

        Parameter 'n' is the index of the product SpeciesReference object to
        remove

        Returns the removed product SpeciesReference object, or None if the
        given index is out of range.

        """
        return _libsbml.Reaction_removeProduct(self, *args)

    def removeModifier(self, *args):
        """
        removeModifier(self, unsigned int n) -> ModifierSpeciesReference
        removeModifier(self, string species) -> ModifierSpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeModifier(string species)

        Removes the modifier species (ModifierSpeciesReference object) having
        the given 'species' attribute in this Reaction and returns a pointer
        to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'species' is the 'species' attribute of the
        ModifierSpeciesReference  object

        Returns the removed ModifierSpeciesReference object, or None if no
        ModifierSpeciesReference object with the given 'species' attribute
        'species' exists in this Reaction.

        @par <hr> Method variant with the following signature:

            removeModifier(long n)

        Removes the nth modifier species (ModifierSpeciesReference object) in
        the list of  modifiers in this Reaction and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it. The caller should first call getNumModifiers() to find out how
        many modifiers there are, to avoid using an invalid index number.

        Parameter 'n' is the index of the ModifierSpeciesReference object to
        remove

        Returns the removed ModifierSpeciesReference object, or None if the
        given index is out of range.

        """
        return _libsbml.Reaction_removeModifier(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Reaction_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Reaction_enablePackageInternal(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_REACTION
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Reaction_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Reaction, is
        always 'reaction'.

        Returns the name of this element, i.e., 'reaction'.

        """
        return _libsbml.Reaction_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        Reaction object have been set.

        The required attributes for a Reaction object are:

           * 'id' (or 'name' in SBML Level 1)

           * 'fast' (in Level 3 only, where it is defined as a required
        attribute)

           * 'reversible' (in Level 3 only, where it is defined as a required
        attribute)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.Reaction_hasRequiredAttributes(self)

Reaction_swigregister = _libsbml.Reaction_swigregister
Reaction_swigregister(Reaction)

class ListOfReactions(ListOf):
    """
    Implementation of SBML's ListOfReactions construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfReactions, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfReactions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfReactions
        __init__(self, SBMLNamespaces sbmlns) -> ListOfReactions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfReactions(SBMLNamespaces sbmlns)

        Creates a new ListOfReactions object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfReactions object to be
        created.

        @par <hr> Method variant with the following signature:

            ListOfReactions(long level, long version)

        Creates a new ListOfReactions object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfReactions(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfReactions

        Creates and returns a deep copy of this ListOfReactions instance.

        Returns a (deep) copy of this ListOfReactions.

        """
        return _libsbml.ListOfReactions_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Reaction objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_REACTION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfReactions_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object

        For ListOfReactions, the XML element name is 'listOfReactions'.

        Returns the name of this element, i.e., 'listOfReactions'.

        """
        return _libsbml.ListOfReactions_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Reaction
        get(self, unsigned int n) -> Reaction
        get(self, string sid) -> Reaction
        get(self, string sid) -> Reaction

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Reaction from the ListOfReactions.

        Parameter 'n' is the index number of the Reaction to get.

        Returns the nth Reaction in this ListOfReactions.

        See also size(), size().

        """
        return _libsbml.ListOfReactions_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Reaction
        remove(self, string sid) -> Reaction

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfReactions items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfReactions items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfReactions_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfReactions
    __del__ = lambda self : None;
ListOfReactions_swigregister = _libsbml.ListOfReactions_swigregister
ListOfReactions_swigregister(ListOfReactions)

class KineticLaw(SBase):
    """
    Implementation of SBML's KineticLaw construct.

    An object of class KineticLaw is used to describe the rate at which
    the process defined by a given Reaction takes place.  KineticLaw has
    subelements called 'math' (for MathML content) and 'listOfParameters'
    (of class ListOfParameters), in addition to the attributes and
    subelements it inherits from SBase.

    KineticLaw's 'math' subelement for holding a MathML formula defines
    the rate of the reaction.  The formula may refer to other entities in
    a model as well as local parameter definitions within the scope of the
    Reaction (see below).  It is important to keep in mind, however, that
    the only Species identifiers that can be used in this formula are
    those declared in the lists of reactants, products and modifiers in
    the Reaction structure.  (In other words, before a species can be
    referenced in the KineticLaw, it must be declared in one of those
    lists.)

    KineticLaw provides a way to define local parameters whose identifiers
    can be used in the 'math' formula of that KineticLaw instance.  Prior
    to SBML Level 3, these parameter definitions are stored inside a
    'listOfParameters' subelement containing Parameter objects; in SBML
    Level 3, this is achieved using a specialized object class called
    LocalParameter and the containing subelement is called
    'listOfLocalParameters'.  In both cases, the parameters so defined are
    only visible within the KineticLaw; they cannot be accessed outside.
    A local parameter within one reaction is not visible from within
    another reaction, nor is it visible to any other construct outside of
    the KineticLaw in which it is defined.  In addition, another important
    feature is that if such a Parameter (or in Level 3, LocalParameter)
    object has the same identifier as another object in the scope of the
    enclosing Model, the definition inside the KineticLaw takes
    precedence.  In other words, within the KineticLaw's 'math' formula,
    references to local parameter identifiers shadow any identical global
    identifiers.

    The values of local parameters defined within KineticLaw objects
    cannot change.  In SBML Level 3, this quality is built into the
    LocalParameter construct.  In Level 2, where the same kind of
    Parameter object class is used as for global parameters, the Parameter
    objects' 'constant' attribute must always have a value of True (either
    explicitly or left to its default value).

    A warning about identifier shadowing
    ======================================================================

    A common misconception is that different classes of objects (e.g.,
    species, compartments, parameters) in SBML have different identifier
    scopes.  They do not.  The implication is that if a KineticLaw's local
    parameter definition uses an identifier identical to any other
    identifier defined in the model outside the KineticLaw, even if the
    other identifier does not belong to a parameter type of object, the
    local parameter's identifier takes precedence within that KineticLaw's
    'math' formula.  It is not an error in SBML for identifiers to shadow
    each other this way, but can lead to confusing and subtle errors.

    SBML Level/Version differences
    ======================================================================

    In SBML Level 2 Version 1, the SBML specification included two
    additional attributes on KineticLaw called 'substanceUnits' and
    'timeUnits'.  They were removed beginning with SBML Level 2 Version 2
    because further research determined they introduced many problems.
    The most significant problem was that their use could easily lead to
    the creation of valid models whose reactions nevertheless could not be
    integrated into a system of equations without outside knowledge for
    converting the quantities used.  Examination of real-life models
    revealed that a common reason for using 'substanceUnits' on KineticLaw
    was to set the units of all reactions to the same set of substance
    units, something that is better achieved by using UnitDefinition to
    redefine 'substance' for the whole Model.

    As mentioned above, in SBML Level 2 Versions 2-4, local parameters are
    of class Parameter.  In SBML Level 3, the class of object is
    LocalParameter.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KineticLaw, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KineticLaw, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_KineticLaw
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> KineticLaw
        __init__(self, SBMLNamespaces sbmlns) -> KineticLaw
        __init__(self, KineticLaw orig) -> KineticLaw

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            KineticLaw(SBMLNamespaces sbmlns)

        Creates a new KineticLaw using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            KineticLaw(long level, long version)

        Creates a new KineticLaw using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        KineticLaw

        Parameter 'version' is a long integer, the SBML Version to assign to
        this KineticLaw

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            KineticLaw(KineticLaw orig)

        Copy constructor; creates a copy of this KineticLaw.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_KineticLaw(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> KineticLaw

        Creates and returns a deep copy of this KineticLaw object.

        Returns a (deep) copy of this KineticLaw.

        """
        return _libsbml.KineticLaw_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find.

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.KineticLaw_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or None if no such object is found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns pointer to the first element found with the given 'metaid'.

        """
        return _libsbml.KineticLaw_getElementByMetaId(self, *args)

    def getFormula(self):
        """
        getFormula(self) -> string

        Returns the mathematical formula for this KineticLaw object and return
        it as as a text string.

        This is fundamentally equivalent to getMath(). This variant is
        provided principally for compatibility compatibility with SBML Level
        1.

        Returns a string representing the formula of this KineticLaw.

        Note:

        SBML Level 1 uses a text-string format for mathematical formulas. SBML
        Level 2 uses MathML, an XML format for representing mathematical
        expressions. LibSBML provides an Abstract Syntax Tree API for working
        with mathematical expressions; this API is more powerful than working
        with formulas directly in text form, and ASTs can be translated into
        either MathML or the text-string syntax. The libSBML methods that
        accept text-string formulas directly (such as this constructor) are
        provided for SBML Level 1 compatibility, but developers are encouraged
        to use the AST mechanisms.

        See also getMath().

        """
        return _libsbml.KineticLaw_getFormula(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Returns the mathematical formula for this KineticLaw object and return
        it as as an AST.

        This is fundamentally equivalent to getFormula(). The latter is
        provided principally for compatibility compatibility with SBML Level
        1, which represented mathematical formulas in text-string form.

        Returns the ASTNode representation of the mathematical formula.

        See also getFormula().

        """
        return _libsbml.KineticLaw_getMath(self)

    def getTimeUnits(self):
        """
        getTimeUnits(self) -> string

        (SBML Level 2 Version 1 only) Returns the value of the 'timeUnits'
        attribute of this KineticLaw object.

        Returns the 'timeUnits' attribute value.

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_getTimeUnits(self)

    def getSubstanceUnits(self):
        """
        getSubstanceUnits(self) -> string

        (SBML Level 2 Version 1 only) Returns the value of the
        'substanceUnits' attribute of this KineticLaw object.

        Returns the 'substanceUnits' attribute value.

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_getSubstanceUnits(self)

    def isSetFormula(self):
        """
        isSetFormula(self) -> bool

        Predicate returning True if this KineticLaw's 'formula' attribute is
        set.

        This is functionally identical to the method isSetMath().  It is
        provided in order to mirror the parallel between getFormula() and
        getMath().

        Returns True if the formula (meaning the math subelement) of this
        KineticLaw is set, False otherwise.

        Note:

        SBML Level 1 uses a text-string format for mathematical formulas. SBML
        Level 2 uses MathML, an XML format for representing mathematical
        expressions. LibSBML provides an Abstract Syntax Tree API for working
        with mathematical expressions; this API is more powerful than working
        with formulas directly in text form, and ASTs can be translated into
        either MathML or the text-string syntax. The libSBML methods that
        accept text-string formulas directly (such as this constructor) are
        provided for SBML Level 1 compatibility, but developers are encouraged
        to use the AST mechanisms.

        See also isSetMath().

        """
        return _libsbml.KineticLaw_isSetFormula(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate returning True if this Kinetic's 'math' subelement is set.

        This is identical to the method isSetFormula(). It is provided in
        order to mirror the parallel between getFormula() and getMath().

        Returns True if the formula (meaning the math subelement) of this
        KineticLaw is set, False otherwise.

        See also isSetFormula().

        """
        return _libsbml.KineticLaw_isSetMath(self)

    def isSetTimeUnits(self):
        """
        isSetTimeUnits(self) -> bool

        (SBML Level 2 Version 1 only) Predicate returning True if this
        SpeciesReference's 'timeUnits' attribute is set.

        Returns True if the 'timeUnits' attribute of this KineticLaw object is
        set, False otherwise.

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_isSetTimeUnits(self)

    def isSetSubstanceUnits(self):
        """
        isSetSubstanceUnits(self) -> bool

        (SBML Level 2 Version 1 only) Predicate returning True if this
        SpeciesReference's 'substanceUnits' attribute is set.

        Returns True if the 'substanceUnits' attribute of this KineticLaw
        object is set, False otherwise.

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_isSetSubstanceUnits(self)

    def setFormula(self, *args):
        """
        setFormula(self, string formula) -> int

        Sets the mathematical expression of this KineticLaw instance to the
        given 'formula'.

        The given 'formula' string is copied.  Internally, libSBML stores the
        mathematical expression as an ASTNode.

        Parameter 'formula' is the mathematical expression to use, represented
        in text-string form.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        SBML Level 1 uses a text-string format for mathematical formulas. SBML
        Level 2 uses MathML, an XML format for representing mathematical
        expressions. LibSBML provides an Abstract Syntax Tree API for working
        with mathematical expressions; this API is more powerful than working
        with formulas directly in text form, and ASTs can be translated into
        either MathML or the text-string syntax. The libSBML methods that
        accept text-string formulas directly (such as this constructor) are
        provided for SBML Level 1 compatibility, but developers are encouraged
        to use the AST mechanisms.

        See also setMath().

        """
        return _libsbml.KineticLaw_setFormula(self, *args)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the mathematical expression of this KineticLaw instance to a copy
        of the given ASTNode.

        This is fundamentally identical to getFormula(). The latter is
        provided principally for compatibility compatibility with SBML Level
        1, which represented mathematical formulas in text-string form.

        Parameter 'math' is an ASTNode representing a formula tree.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        See also setFormula().

        """
        return _libsbml.KineticLaw_setMath(self, *args)

    def setTimeUnits(self, *args):
        """
        setTimeUnits(self, string sid) -> int

        (SBML Level 2 Version 1 only) Sets the 'timeUnits' attribute of this
        KineticLaw object to a copy of the identifier in 'sid'.

        Parameter 'sid' is the identifier of the units to use.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_setTimeUnits(self, *args)

    def setSubstanceUnits(self, *args):
        """
        setSubstanceUnits(self, string sid) -> int

        (SBML Level 2 Version 1 only) Sets the 'substanceUnits' attribute of
        this KineticLaw object to a copy of the identifier given in 'sid'.

        Parameter 'sid' is the identifier of the units to use.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_setSubstanceUnits(self, *args)

    def unsetTimeUnits(self):
        """
        unsetTimeUnits(self) -> int

        (SBML Level 2 Version 1 only) Unsets the 'timeUnits' attribugte of
        this KineticLaw object.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_unsetTimeUnits(self)

    def unsetSubstanceUnits(self):
        """
        unsetSubstanceUnits(self) -> int

        (SBML Level 2 Version 1 only) Unsets the 'substanceUnits' attribute of
        this KineticLaw object.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attributes 'timeUnits' and 'substanceUnits' are present only in
        SBML Level 2 Version 1.  In SBML Level 2 Version 2, the 'timeUnits'
        and 'substanceUnits' attributes were removed.  For compatibility with
        new versions of SBML, users are cautioned to avoid these attributes.

        """
        return _libsbml.KineticLaw_unsetSubstanceUnits(self)

    def addParameter(self, *args):
        """
        addParameter(self, Parameter p) -> int

        Adds a copy of the given Parameter object to the list of local
        parameters in this KineticLaw.

        Parameter 'p' is the Parameter to add

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createParameter().

        """
        return _libsbml.KineticLaw_addParameter(self, *args)

    def addLocalParameter(self, *args):
        """
        addLocalParameter(self, LocalParameter p) -> int

        Adds a copy of the given LocalParameter object to the list of local
        parameters in this KineticLaw.

        Parameter 'p' is the LocalParameter to add

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createLocalParameter().

        """
        return _libsbml.KineticLaw_addLocalParameter(self, *args)

    def createParameter(self):
        """
        createParameter(self) -> Parameter

        Creates a new Parameter object, adds it to this KineticLaw's list of
        local parameters, and returns the Parameter object created.

        Returns a new Parameter object instance

        See also addParameter().

        """
        return _libsbml.KineticLaw_createParameter(self)

    def createLocalParameter(self):
        """
        createLocalParameter(self) -> LocalParameter

        Creates a new LocalParameter object, adds it to this KineticLaw's list
        of local parameters, and returns the LocalParameter object created.

        Returns a new LocalParameter object instance

        See also addLocalParameter().

        """
        return _libsbml.KineticLaw_createLocalParameter(self)

    def getListOfParameters(self, *args):
        """
        getListOfParameters(self) -> ListOfParameters
        getListOfParameters(self) -> ListOfParameters

        Returns the list of local parameters in this KineticLaw object.

        Returns the list of Parameters for this KineticLaw.

        """
        return _libsbml.KineticLaw_getListOfParameters(self, *args)

    def getListOfLocalParameters(self, *args):
        """
        getListOfLocalParameters(self) -> ListOfLocalParameters
        getListOfLocalParameters(self) -> ListOfLocalParameters

        Returns the list of local parameters in this KineticLaw object.

        Returns the list of LocalParameters for this KineticLaw.

        """
        return _libsbml.KineticLaw_getListOfLocalParameters(self, *args)

    def getParameter(self, *args):
        """
        getParameter(self, unsigned int n) -> Parameter
        getParameter(self, unsigned int n) -> Parameter
        getParameter(self, string sid) -> Parameter
        getParameter(self, string sid) -> Parameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getParameter(long n)

        Returns the nth Parameter object in the list of local parameters in
        this KineticLaw instance.

        Parameter 'n' is the index of the Parameter object sought

        Returns the nth Parameter of this KineticLaw.

        @par <hr> Method variant with the following signature:

            getParameter(string sid)

        Returns a local parameter based on its identifier.

        Parameter 'sid' is the identifier of the Parameter being sought.

        Returns the Parameter object in this KineticLaw instace having the
        given 'id', or None if no such Parameter exists.

        """
        return _libsbml.KineticLaw_getParameter(self, *args)

    def getLocalParameter(self, *args):
        """
        getLocalParameter(self, unsigned int n) -> LocalParameter
        getLocalParameter(self, unsigned int n) -> LocalParameter
        getLocalParameter(self, string sid) -> LocalParameter
        getLocalParameter(self, string sid) -> LocalParameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getLocalParameter(long n)

        Returns the nth LocalParameter object in the list of local parameters
        in this KineticLaw instance.

        Parameter 'n' is the index of the LocalParameter object sought

        Returns the nth LocalParameter of this KineticLaw.

        @par <hr> Method variant with the following signature:

            getLocalParameter(string sid)

        Returns a local parameter based on its identifier.

        Parameter 'sid' is the identifier of the LocalParameter being sought.

        Returns the LocalParameter object in this KineticLaw instace having
        the given 'id', or None if no such LocalParameter exists.

        """
        return _libsbml.KineticLaw_getLocalParameter(self, *args)

    def getNumParameters(self):
        """
        getNumParameters(self) -> unsigned int

        Returns the number of local parameters in this KineticLaw instance.

        Returns the number of Parameters in this KineticLaw.

        """
        return _libsbml.KineticLaw_getNumParameters(self)

    def getNumLocalParameters(self):
        """
        getNumLocalParameters(self) -> unsigned int

        Returns the number of local parameters in this KineticLaw instance.

        Returns the number of LocalParameters in this KineticLaw.

        """
        return _libsbml.KineticLaw_getNumLocalParameters(self)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Calculates and returns a UnitDefinition that expresses the units of
        measurement assumed for the 'math' expression of this KineticLaw.

        @par The units are calculated based on the mathematical expression in
        the KineticLaw and the model quantities referenced by <ci> elements
        used within that expression.  The getDerivedUnitDefinition() method
        returns the calculated units.

        Note:

        The functionality that facilitates unit analysis depends on the model
        as a whole.  Thus, in cases where the object has not been added to a
        model or the model itself is incomplete, unit analysis is not possible
        and this method will return None.

        WARNING:

        Note that it is possible the 'math' expression in the KineticLaw
        contains pure numbers or parameters with undeclared units.  In those
        cases, it is not possible to calculate the units of the overall
        expression without making assumptions.  LibSBML does not make
        assumptions about the units, and KineticLaw.getDerivedUnitDefinition()
        returns the units as far as it is able to determine them.  For
        example, in an expression X + Y, if X has unambiguously-defined units
        and Y does not, it will return the units of X.  It is important that
        callers also invoke the method KineticLaw.containsUndeclaredUnits()to
        determine whether this situation holds.  Callers may wish to take
        suitable actions in those scenarios.

        Returns a UnitDefinition that expresses the units of the math
        expression of this KineticLaw, or None if one cannot be constructed.

        See also containsUndeclaredUnits().

        """
        return _libsbml.KineticLaw_getDerivedUnitDefinition(self, *args)

    def containsUndeclaredUnits(self, *args):
        """
        containsUndeclaredUnits(self) -> bool
        containsUndeclaredUnits(self) -> bool

        Predicate returning True if the math expression of this KineticLaw
        contains parameters/numbers with undeclared units.

        Returns True if the math expression of this KineticLaw includes
        parameters/numbers  with undeclared units, False otherwise.

        Note:

        A return value of True indicates that the UnitDefinition returned by
        getDerivedUnitDefinition() may not accurately represent the units of
        the expression.

        See also getDerivedUnitDefinition().

        """
        return _libsbml.KineticLaw_containsUndeclaredUnits(self, *args)

    def removeParameter(self, *args):
        """
        removeParameter(self, unsigned int n) -> Parameter
        removeParameter(self, string sid) -> Parameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeParameter(long n)

        Removes the nth Parameter object in the list of local parameters  in
        this KineticLaw instance and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Parameter object to remove

        Returns the Parameter object removed.  As mentioned above,  the caller
        owns the returned item. None is returned if the given index  is out of
        range.

        @par <hr> Method variant with the following signature:

            removeParameter(string sid)

        Removes a Parameter object with the given identifier in the list of
        local parameters in this KineticLaw instance and returns a pointer to
        it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the Parameter to remove

        Returns the Parameter object removed.  As mentioned above, the  caller
        owns the returned object. None is returned if no Parameter object with
        the identifier exists in this KineticLaw instance.

        """
        return _libsbml.KineticLaw_removeParameter(self, *args)

    def removeLocalParameter(self, *args):
        """
        removeLocalParameter(self, unsigned int n) -> LocalParameter
        removeLocalParameter(self, string sid) -> LocalParameter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeLocalParameter(long n)

        Removes the nth LocalParameter object in the list of local parameters
        in this KineticLaw instance and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the LocalParameter object to remove

        Returns the LocalParameter object removed.  As mentioned above,  the
        caller owns the returned item. None is returned if the given index  is
        out of range.

        @par <hr> Method variant with the following signature:

            removeLocalParameter(string sid)

        Removes a LocalParameter object with the given identifier in the list
        of local parameters in this KineticLaw instance and returns a pointer
        to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the identifier of the LocalParameter to remove

        Returns the LocalParameter object removed.  As mentioned above, the
        caller owns the returned object. None is returned if no LocalParameter
        object with the identifier exists in this KineticLaw instance.

        """
        return _libsbml.KineticLaw_removeLocalParameter(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.KineticLaw_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.KineticLaw_enablePackageInternal(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_KINETIC_LAW
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.KineticLaw_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Species, is
        always 'kineticLaw'.

        Returns the name of this element, i.e., 'kineticLaw'.

        """
        return _libsbml.KineticLaw_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        KineticLaw object have been set.

        The required attributes for a KineticLaw object are:

           * 'formula' (SBML Level 1 only)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.KineticLaw_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        KineticLaw object have been set.

        Note:

        The required elements for a KineticLaw object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.KineticLaw_hasRequiredElements(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this KineticLaw's Reaction parent and calls unsetKineticLaw() on
        it, indirectly deleting itself.

        Overridden from the SBase function since the parent is not a ListOf.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.KineticLaw_removeFromParentAndDelete(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.KineticLaw_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.KineticLaw_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.KineticLaw_replaceSIDWithFunction(self, *args)

    def divideAssignmentsToSIdByFunction(self, *args):
        """
        divideAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.KineticLaw_divideAssignmentsToSIdByFunction(self, *args)

    def multiplyAssignmentsToSIdByFunction(self, *args):
        """
        multiplyAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.KineticLaw_multiplyAssignmentsToSIdByFunction(self, *args)

KineticLaw_swigregister = _libsbml.KineticLaw_swigregister
KineticLaw_swigregister(KineticLaw)

class SimpleSpeciesReference(SBase):
    """
    Implementation of SBML's SimpleSpeciesReference construct.

    As mentioned in the description of Reaction, every species that enters
    into a given reaction must appear in that reaction's lists of
    reactants, products and/or modifiers.  In an SBML model, all species
    that may participate in any reaction are listed in the 'listOfSpecies'
    element of the top-level Model object.  Lists of products, reactants
    and modifiers in Reaction objects do not introduce new species, but
    rather, they refer back to those listed in the model's top-level
    'listOfSpecies'.  For reactants and products, the connection is made
    using SpeciesReference objects; for modifiers, it is made using
    ModifierSpeciesReference objects.  SimpleSpeciesReference is an
    abstract type that serves as the parent class of both SpeciesReference
    and ModifierSpeciesReference.  It is used simply to hold the
    attributes and elements that are common to the latter two structures.

    The SimpleSpeciesReference structure has a mandatory attribute,
    'species', which must be a text string conforming to the identifer
    syntax permitted in SBML.  This attribute is inherited by the
    SpeciesReference and ModifierSpeciesReference subclasses derived from
    SimpleSpeciesReference.  The value of the 'species' attribute must be
    the identifier of a species defined in the enclosing Model.  The
    species is thereby declared as participating in the reaction being
    defined.  The precise role of that species as a reactant, product, or
    modifier in the reaction is determined by the subclass of
    SimpleSpeciesReference (i.e., either SpeciesReference or
    ModifierSpeciesReference) in which the identifier appears.

    SimpleSpeciesReference also contains an optional attribute, 'id',
    allowing instances to be referenced from other structures.  No SBML
    structures currently do this; however, such structures are anticipated
    in future SBML Levels.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleSpeciesReference, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleSpeciesReference, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SimpleSpeciesReference
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this
        SimpleSpeciesReference.

        Returns the id of this SimpleSpeciesReference.

        """
        return _libsbml.SimpleSpeciesReference_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this
        SimpleSpeciesReference.

        Returns the name of this SimpleSpeciesReference.

        """
        return _libsbml.SimpleSpeciesReference_getName(self)

    def getSpecies(self):
        """
        getSpecies(self) -> string

        Get the value of the 'species' attribute.

        Returns the value of the attribute 'species' for this
        SimpleSpeciesReference.

        """
        return _libsbml.SimpleSpeciesReference_getSpecies(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this SimpleSpeciesReference's 'id'
        attribute is set.

        Returns True if the 'id' attribute of this SimpleSpeciesReference is
        set, False otherwise.

        """
        return _libsbml.SimpleSpeciesReference_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this SimpleSpeciesReference's 'name'
        attribute is set.

        Returns True if the 'name' attribute of this SimpleSpeciesReference is
        set, False otherwise.

        """
        return _libsbml.SimpleSpeciesReference_isSetName(self)

    def isSetSpecies(self):
        """
        isSetSpecies(self) -> bool

        Predicate returning True if this SimpleSpeciesReference's 'species'
        attribute is set.

        Returns True if the 'species' attribute of this SimpleSpeciesReference
        is set, False otherwise.

        """
        return _libsbml.SimpleSpeciesReference_isSetSpecies(self)

    def setSpecies(self, *args):
        """
        setSpecies(self, string sid) -> int

        Sets the 'species' attribute of this SimpleSpeciesReference.

        The identifier string passed in 'sid' is copied.

        Parameter 'sid' is the identifier of a species defined in the
        enclosing Model's ListOfSpecies.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.SimpleSpeciesReference_setSpecies(self, *args)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this SimpleSpeciesReference.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this
        SimpleSpeciesReference

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.SimpleSpeciesReference_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this SimpleSpeciesReference.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the SimpleSpeciesReference

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.SimpleSpeciesReference_setName(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this SimpleSpeciesReference.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SimpleSpeciesReference_unsetId(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this
        SimpleSpeciesReference.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SimpleSpeciesReference_unsetName(self)

    def isModifier(self):
        """
        isModifier(self) -> bool

        Predicate returning True if this is a ModifierSpeciesReference.

        Returns True if this SimpleSpeciesReference's subclass is
        ModiferSpeciesReference, False if it is a plain SpeciesReference.

        """
        return _libsbml.SimpleSpeciesReference_isModifier(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.SimpleSpeciesReference_renameSIdRefs(self, *args)

SimpleSpeciesReference_swigregister = _libsbml.SimpleSpeciesReference_swigregister
SimpleSpeciesReference_swigregister(SimpleSpeciesReference)

class SpeciesReference(SimpleSpeciesReference):
    """
    Implementation of SBML's SpeciesReference construct.

    The Reaction structure provides a way to express which species act as
    reactants and which species act as products in a reaction.  In a given
    reaction, references to those species acting as reactants and/or
    products are made using instances of SpeciesReference structures in a
    Reaction object's lists of reactants and products.

    A species can occur more than once in the lists of reactants and
    products of a given Reaction instance.  The effective stoichiometry
    for a species in a reaction is the sum of the stoichiometry values
    given on the SpeciesReference object in the list of products minus the
    sum of stoichiometry values given on the SpeciesReference objects in
    the list of reactants.  A positive value indicates the species is
    effectively a product and a negative value indicates the species is
    effectively a reactant.  SBML places no restrictions on the effective
    stoichiometry of a species in a reaction; for example, it can be zero.
    In the following SBML fragment, the two reactions have the same
    effective stoichiometry for all their species:

       <reaction id='x'>
           <listOfReactants>
               <speciesReference species='a'/>
               <speciesReference species='a'/>
               <speciesReference species='b'/>
           </listOfReactants>
           <listOfProducts>
               <speciesReference species='c'/>
               <speciesReference species='b'/>
           </listProducts>
       </reaction>
       <reaction id='y'>
           <listOfReactants>
               <speciesReference species='a' stoichiometry='2'/>
           </listOfReactants>
           <listOfProducts>
               <speciesReference species='c'/>
           </listProducts>
       </reaction>

    The precise structure of SpeciesReference differs between SBML Level 2
    and Level 3.  We discuss the two variants in separate sections below.

    SpeciesReference in SBML Level 2
    ======================================================================

    The mandatory 'species' attribute of SpeciesReference must have as its
    value the identifier of an existing species defined in the enclosing
    Model.  The species is thereby designated as a reactant or product in
    the reaction.  Which one it is (i.e., reactant or product) is
    indicated by whether the SpeciesReference appears in the Reaction's
    'reactant' or 'product' lists.

    Product and reactant stoichiometries can be specified using either
    'stoichiometry' or 'stoichiometryMath' in a SpeciesReference object.
    The 'stoichiometry' attribute is of type double and should contain
    values greater than zero (0).  The 'stoichiometryMath' element is
    implemented as an element containing a MathML expression.  These two
    are mutually exclusive; only one of 'stoichiometry' or
    'stoichiometryMath' should be defined in a given SpeciesReference
    instance.  When neither the attribute nor the element is present, the
    value of 'stoichiometry' in the SpeciesReference instance defaults to
    1.

    For maximum interoperability, the 'stoichiometry' attribute should be
    used in preference to 'stoichiometryMath' when a species'
    stoichiometry is a simple scalar number (integer or decimal).  When
    the stoichiometry is a rational number, or when it is a more
    complicated formula, 'stoichiometryMath' must be used.  The MathML
    expression in 'stoichiometryMath' may also refer to identifiers of
    entities in a model (except reaction identifiers).  However, the only
    species identifiers that can be used in 'stoichiometryMath' are those
    referenced in the Reaction list of reactants, products and modifiers.

    The following is a simple example of a species reference for species
    X0, with stoichiometry 2, in a list of reactants within a reaction
    having the identifier J1:

       <model>
           ...
           <listOfReactions>
               <reaction id='J1'>
                   <listOfReactants>
                       <speciesReference species='X0' stoichiometry='2'>
                   </listOfReactants>
                   ...
               </reaction>
               ...
           </listOfReactions>
           ...
       </model>

    The following is a more complex example of a species reference for
    species X0, with a stoichiometry formula consisting of the parameter
    x:

       <model>
           ...
           <listOfReactions>
               <reaction id='J1'>
                   <listOfReactants>
                       <speciesReference species='X0'>
                           <stoichiometryMath>
                               <math xmlns='http://www.w3.org/1998/Math/MathML'>
                                   <ci>x</ci>
                               </math>
                           </stoichiometryMath>
                       </speciesReference>
                   </listOfReactants>
                   ...
               </reaction>
               ...
           </listOfReactions>
           ...
       </model>

     SpeciesReference in SBML Level 3
    ======================================================================

    In Level 2's definition of a reaction, the stoichiometry attribute of
    a SpeciesReference is actually a combination of two factors, the
    standard biochemical stoichiometry and a conversion factor that may be
    needed to translate the units of the species quantity to the units of
    the reaction rate. Unfortunately, Level 2 offers no direct way of
    decoupling these two factors, or for explicitly indicating the units.
    The only way to do it in Level 2 is to use the StoichiometryMath
    object associated with SpeciesReferences, and to reference SBML
    Parameter objects from within the StoichiometryMath formula. This
    works because Parameter offers a way to attach units to a numerical
    value, but the solution is indirect and awkward for something that
    should be a simple matter.  Moreover, the question of how to properly
    encode stoichiometries in SBML reactions has caused much confusion
    among implementors of SBML software.

    SBML Level 3 approaches this problem differently.  It (1) extends the
    the use of the SpeciesReference identifier to represent the value of
    the 'stoichiometry' attribute, (2) makes the 'stoichiometry' attribute
    optional, (3) removes StoichiometryMath, and (4) adds a new 'constant'
    boolean attribute on SpeciesReference.

    As in Level 2, the 'stoichiometry' attribute is of type double and
    should contain values greater than zero (0).  A missing
    'stoichiometry' implies that the stoichiometry is either unknown, or
    to be obtained from an external source, or determined by an
    InitialAssignment object or other SBML construct elsewhere in the
    model.

    A species reference's stoichiometry is set by its 'stoichiometry'
    attribute exactly once.  If the SpeciesReference object's 'constant'
    attribute has the value True, then the stoichiometry is fixed and
    cannot be changed except by an InitialAssignment object.  These two
    methods of setting the stoichiometry (i.e., using 'stoichiometry'
    directly, or using InitialAssignment) differ in that the
    'stoichiometry' attribute can only be set to a literal floating-point
    number, whereas InitialAssignment allows the value to be set using an
    arbitrary mathematical expression.  (As an example, the approach could
    be used to set the stoichiometry to a rational number of the form p/q,
    where p and q are integers, something that is occasionally useful in
    the context of biochemical reaction networks.)  If the species
    reference's 'constant' attribute has the value False, the species
    reference's value may be overridden by an InitialAssignment or changed
    by AssignmentRule or AlgebraicRule, and in addition, for simulation
    time t > 0, it may also be changed by a RateRule or Event objects.
    (However, some of these constructs are mutually exclusive; see the
    SBML Level 3 Version 1 Core specifiation for more details.)  It is not
    an error to define 'stoichiometry' on a species reference and also
    redefine the stoichiometry using an InitialAssignment, but the
    'stoichiometry' attribute in that case is ignored.

    The value of the 'id' attribute of a SpeciesReference can be used as
    the content of a <ci> element in MathML formulas elsewhere in the
    model.  When the identifier appears in a MathML <ci> element, it
    represents the stoichiometry of the corresponding species in the
    reaction where the SpeciesReference object instance appears.  More
    specifically, it represents the value of the 'stoichiometry' attribute
    on the SpeciesReference object.

    In SBML Level 3, the unit of measurement associated with the value of
    a species' stoichiometry is always considered to be dimensionless.
    This has the following implications:

    * When a species reference's identifier appears in mathematical
    formulas elsewhere in the model, the unit associated with that value
    is dimensionless.

    * The units of the 'math' elements of AssignmentRule,
    InitialAssignment and EventAssignment objects setting the
    stoichiometry of the species reference should be dimensionless.

    * If a species reference's identifier is the subject of a RateRule,
    the unit associated with the RateRule object's value should be
    dimensionless/time, where time is the model-wide unit of time set on
    the Model object.

    """
    __swig_setmethods__ = {}
    for _s in [SimpleSpeciesReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpeciesReference, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleSpeciesReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpeciesReference, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SpeciesReference
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> SpeciesReference
        __init__(self, SBMLNamespaces sbmlns) -> SpeciesReference
        __init__(self, SpeciesReference orig) -> SpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SpeciesReference(SBMLNamespaces sbmlns)

        Creates a new SpeciesReference using the given SBMLNamespaces object
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            SpeciesReference(long level, long version)

        Creates a new SpeciesReference using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        SpeciesReference

        Parameter 'version' is a long integer, the SBML Version to assign to
        this SpeciesReference

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            SpeciesReference(SpeciesReference orig)

        Copy constructor; creates a copy of this SpeciesReference.

        Parameter 'orig' is the SpeciesReference instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_SpeciesReference(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SpeciesReference

        Creates and returns a deep copy of this SpeciesReference instance.

        Returns a (deep) copy of this SpeciesReference.

        """
        return _libsbml.SpeciesReference_clone(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Initializes the fields of this SpeciesReference object to 'typical'
        default values.

        The SBML SpeciesReference component has slightly different aspects and
        default attribute values in different SBML Levels and Versions. This
        method sets the values to certain common defaults, based mostly on
        what they are in SBML Level 2.  Specifically:

        * Sets attribute 'stoichiometry' to 1.0

           * (Applies to Level 1 models only) Sets attribute 'denominator' to
        1 See also setStoichiometryMath().

        """
        return _libsbml.SpeciesReference_initDefaults(self)

    def getStoichiometry(self):
        """
        getStoichiometry(self) -> double

        Get the value of the 'stoichiometry' attribute.

        In SBML Level 2, product and reactant stoichiometries can be specified
        using either 'stoichiometry' or 'stoichiometryMath' in a
        SpeciesReference object.  The former is to be used when a
        stoichiometry is simply a scalar number, while the latter is for
        occasions when it needs to be a rational number or it needs to
        reference other mathematical expressions.  The 'stoichiometry'
        attribute is of type double and should contain values greater than
        zero (0).  The 'stoichiometryMath' element is implemented as an
        element containing a MathML expression.  These two are mutually
        exclusive; only one of 'stoichiometry' or 'stoichiometryMath' should
        be defined in a given SpeciesReference instance.  When neither the
        attribute nor the element is present, the value of 'stoichiometry' in
        the SpeciesReference instance defaults to 1.  For maximum
        interoperability between different software tools, the 'stoichiometry'
        attribute should be used in preference to 'stoichiometryMath' when a
        species' stoichiometry is a simple scalar number (integer or decimal).

        In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
        objects have only the 'stoichiometry' attribute.

        Returns the value of the (scalar) 'stoichiometry' attribute of this
        SpeciesReference.

        See also getStoichiometryMath().

        """
        return _libsbml.SpeciesReference_getStoichiometry(self)

    def getStoichiometryMath(self, *args):
        """
        getStoichiometryMath(self) -> StoichiometryMath
        getStoichiometryMath(self) -> StoichiometryMath

        Get the content of the 'stoichiometryMath' subelement as an ASTNode
        tree.

        The 'stoichiometryMath' element exists only in SBML Level 2.  There,
        product and reactant stoichiometries can be specified using either
        'stoichiometry' or 'stoichiometryMath' in a SpeciesReference object.
        The former is to be used when a stoichiometry is simply a scalar
        number, while the latter is for occasions when it needs to be a
        rational number or it needs to reference other mathematical
        expressions.  The 'stoichiometry' attribute is of type double and
        should contain values greater than zero (0).  The 'stoichiometryMath'
        element is implemented as an element containing a MathML expression.
        These two are mutually exclusive; only one of 'stoichiometry' or
        'stoichiometryMath' should be defined in a given SpeciesReference
        instance.  When neither the attribute nor the element is present, the
        value of 'stoichiometry' in the SpeciesReference instance defaults to
        1.  For maximum interoperability between different software tools, the
        'stoichiometry' attribute should be used in preference to
        'stoichiometryMath' when a species' stoichiometry is a simple scalar
        number (integer or decimal).

        Returns the content of the 'stoichiometryMath' subelement of this
        SpeciesReference.

        """
        return _libsbml.SpeciesReference_getStoichiometryMath(self, *args)

    def getDenominator(self):
        """
        getDenominator(self) -> int

        Get the value of the 'denominator' attribute, for the case of a
        rational-numbered stoichiometry or a model in SBML Level 1.

        The 'denominator' attribute is only actually written out in the case
        of an SBML Level 1 model.  In SBML Level 2, rational-number
        stoichiometries are written as MathML elements in the
        'stoichiometryMath' subelement.  However, as a convenience to users,
        libSBML allows the creation and manipulation of rational-number
        stoichiometries by supplying the numerator and denominator directly
        rather than having to manually create an ASTNode object.  LibSBML will
        write out the appropriate constructs (either a combination of
        'stoichiometry' and 'denominator' in the case of SBML Level 1, or a
        'stoichiometryMath' subelement in the case of SBML Level 2).

        Returns the value of the 'denominator' attribute of this
        SpeciesReference.

        """
        return _libsbml.SpeciesReference_getDenominator(self)

    def getConstant(self):
        """
        getConstant(self) -> bool

        Get the value of the 'constant' attribute.

        Returns the value of the 'constant' attribute of this
        SpeciesReference.

        """
        return _libsbml.SpeciesReference_getConstant(self)

    def isSetStoichiometryMath(self):
        """
        isSetStoichiometryMath(self) -> bool

        Predicate returning True if this SpeciesReference's
        'stoichiometryMath' subelement is set

        Returns True if the 'stoichiometryMath' subelement of this
        SpeciesReference is set, False otherwise.

        """
        return _libsbml.SpeciesReference_isSetStoichiometryMath(self)

    def isSetConstant(self):
        """
        isSetConstant(self) -> bool

        Predicate returning True if this SpeciesReference's 'constant'
        attribute is set

        Returns True if the 'constant' attribute of this SpeciesReference is
        set, False otherwise.

        """
        return _libsbml.SpeciesReference_isSetConstant(self)

    def isSetStoichiometry(self):
        """
        isSetStoichiometry(self) -> bool

        Predicate returning True if this SpeciesReference's 'stoichiometry'
        attribute is set.

        Returns True if the 'stoichiometry' attribute of this SpeciesReference
        is set, False otherwise.

        """
        return _libsbml.SpeciesReference_isSetStoichiometry(self)

    def setStoichiometry(self, *args):
        """
        setStoichiometry(self, double value) -> int

        Sets the value of the 'stoichiometry' attribute of this
        SpeciesReference.

        In SBML Level 2, product and reactant stoichiometries can be specified
        using either 'stoichiometry' or 'stoichiometryMath' in a
        SpeciesReference object.  The former is to be used when a
        stoichiometry is simply a scalar number, while the latter is for
        occasions when it needs to be a rational number or it needs to
        reference other mathematical expressions.  The 'stoichiometry'
        attribute is of type double and should contain values greater than
        zero (0).  The 'stoichiometryMath' element is implemented as an
        element containing a MathML expression.  These two are mutually
        exclusive; only one of 'stoichiometry' or 'stoichiometryMath' should
        be defined in a given SpeciesReference instance.  When neither the
        attribute nor the element is present, the value of 'stoichiometry' in
        the SpeciesReference instance defaults to 1.  For maximum
        interoperability between different software tools, the 'stoichiometry'
        attribute should be used in preference to 'stoichiometryMath' when a
        species' stoichiometry is a simple scalar number (integer or decimal).

        In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
        objects have only the 'stoichiometry' attribute.

        Parameter 'value' is the new value of the 'stoichiometry' attribute

        Note:

        In SBML Level 2, the 'stoichiometryMath' subelement of this
        SpeciesReference object will be unset because the 'stoichiometry'
        attribute and the stoichiometryMath' subelement are mutually
        exclusive.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.SpeciesReference_setStoichiometry(self, *args)

    def setStoichiometryMath(self, *args):
        """
        setStoichiometryMath(self, StoichiometryMath math) -> int

        Sets the 'stoichiometryMath' subelement of this SpeciesReference.

        The Abstract Syntax Tree in 'math' is copied.

        In SBML Level 2, product and reactant stoichiometries can be specified
        using either 'stoichiometry' or 'stoichiometryMath' in a
        SpeciesReference object.  The former is to be used when a
        stoichiometry is simply a scalar number, while the latter is for
        occasions when it needs to be a rational number or it needs to
        reference other mathematical expressions.  The 'stoichiometry'
        attribute is of type double and should contain values greater than
        zero (0).  The 'stoichiometryMath' element is implemented as an
        element containing a MathML expression.  These two are mutually
        exclusive; only one of 'stoichiometry' or 'stoichiometryMath' should
        be defined in a given SpeciesReference instance.  When neither the
        attribute nor the element is present, the value of 'stoichiometry' in
        the SpeciesReference instance defaults to 1.  For maximum
        interoperability between different software tools, the 'stoichiometry'
        attribute should be used in preference to 'stoichiometryMath' when a
        species' stoichiometry is a simple scalar number (integer or decimal).

        In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
        objects have only the 'stoichiometry' attribute.

        Parameter 'math' is the StoichiometryMath expression that is to be
        copied as the content of the 'stoichiometryMath' subelement.

        Note:

        In SBML Level 2, the 'stoichiometry' attribute of this
        SpeciesReference object will be unset (isSetStoichiometry() will
        return False although getStoichiometry() will return 1.0) if the given
        math is not null because the 'stoichiometry' attribute and the
        stoichiometryMath' subelement are mutually exclusive.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

        """
        return _libsbml.SpeciesReference_setStoichiometryMath(self, *args)

    def setDenominator(self, *args):
        """
        setDenominator(self, int value) -> int

        Set the value of the 'denominator' attribute, for the case of a
        rational-numbered stoichiometry or a model in SBML Level 1.

        The 'denominator' attribute is only actually written out in the case
        of an SBML Level 1 model.  In SBML Level 2, rational-number
        stoichiometries are written as MathML elements in the
        'stoichiometryMath' subelement.  However, as a convenience to users,
        libSBML allows the creation and manipulation of rational-number
        stoichiometries by supplying the numerator and denominator directly
        rather than having to manually create an ASTNode object.  LibSBML will
        write out the appropriate constructs (either a combination of
        'stoichiometry' and 'denominator' in the case of SBML Level 1, or a
        'stoichiometryMath' subelement in the case of SBML Level 2).

        Parameter 'value' is the scalar value

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.SpeciesReference_setDenominator(self, *args)

    def setConstant(self, *args):
        """
        setConstant(self, bool flag) -> int

        Sets the 'constant' attribute of this SpeciesReference to the given
        boolean 'flag'.

        Parameter 'flag' is a boolean, the value for the 'constant' attribute
        of this SpeciesReference instance

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.SpeciesReference_setConstant(self, *args)

    def unsetStoichiometryMath(self):
        """
        unsetStoichiometryMath(self) -> int

        Unsets the 'stoichiometryMath' subelement of this SpeciesReference.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        In SBML Level 2, product and reactant stoichiometries can be specified
        using either 'stoichiometry' or 'stoichiometryMath' in a
        SpeciesReference object.  The former is to be used when a
        stoichiometry is simply a scalar number, while the latter is for
        occasions when it needs to be a rational number or it needs to
        reference other mathematical expressions.  The 'stoichiometry'
        attribute is of type double and should contain values greater than
        zero (0).  The 'stoichiometryMath' element is implemented as an
        element containing a MathML expression.  These two are mutually
        exclusive; only one of 'stoichiometry' or 'stoichiometryMath' should
        be defined in a given SpeciesReference instance.  When neither the
        attribute nor the element is present, the value of 'stoichiometry' in
        the SpeciesReference instance defaults to 1.  For maximum
        interoperability between different software tools, the 'stoichiometry'
        attribute should be used in preference to 'stoichiometryMath' when a
        species' stoichiometry is a simple scalar number (integer or decimal).

        In SBML Level 3, there is no StoichiometryMath, and SpeciesReference
        objects have only the 'stoichiometry' attribute.

        Note:

        In SBML Level 2, the 'stoichiometry' attribute of this
        SpeciesReference object will be reset to a default value (1.0) if the
        'stoichiometry' attribute has not been set.

        """
        return _libsbml.SpeciesReference_unsetStoichiometryMath(self)

    def unsetStoichiometry(self):
        """
        unsetStoichiometry(self) -> int

        Unsets the 'stoichiometry' attribute of this SpeciesReference.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        In SBML Level 1, the 'stoichiometry' attribute of this
        SpeciesReference object will be just reset to a default value (1.0)
        and isSetStoichiometry() will still return True.  In SBML Level 2, the
        'stoichiometry' attribute of this object will be unset (which will
        result in isSetStoichiometry() returning False, although
        getStoichiometry() will return 1.0) if the 'stoichiometryMath'
        subelement is set, otherwise the attribute will be just reset to the
        default value (1.0) (and isSetStoichiometry() will still return True).
        In SBML Level 3, the 'stoichiometry' attribute of this object will be
        set to NaN and isSetStoichiometry() will return False.

        """
        return _libsbml.SpeciesReference_unsetStoichiometry(self)

    def createStoichiometryMath(self):
        """
        createStoichiometryMath(self) -> StoichiometryMath

        Creates a new, empty StoichiometryMath object, adds it to this
        SpeciesReference, and returns it.

        Returns the newly created StoichiometryMath object instance

        See also Reaction.addProduct().

        """
        return _libsbml.SpeciesReference_createStoichiometryMath(self)

    def setAnnotation(self, *args):
        """
        setAnnotation(self, XMLNode annotation) -> int
        setAnnotation(self, string annotation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setAnnotation(XMLNode annotation)

        Sets the value of the 'annotation' subelement of this SBML object to a
        copy of 'annotation'.

        Any existing content of the 'annotation' subelement is discarded.
        Unless you have taken steps to first copy and reconstitute any
        existing annotations into the 'annotation' that is about to be
        assigned, it is likely that performing such wholesale replacement is
        unfriendly towards other software applications whose annotations are
        discarded.  An alternative may be to use appendAnnotation().

        Parameter 'annotation' is an XML structure that is to be used as the
        content of the 'annotation' subelement of this object

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also appendAnnotation(), appendAnnotation().

        """
        return _libsbml.SpeciesReference_setAnnotation(self, *args)

    def appendAnnotation(self, *args):
        """
        appendAnnotation(self, XMLNode annotation) -> int
        appendAnnotation(self, string annotation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            appendAnnotation(XMLNode annotation)

        Appends annotation content to any existing content in the 'annotation'
        subelement of this object.

        The content in 'annotation' is copied.  Unlike
        SpeciesReference.setAnnotation(), this method allows other annotations
        to be preserved when an application adds its own data.

        Parameter 'annotation' is an XML structure that is to be copied and
        appended to the content of the 'annotation' subelement of this object

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also setAnnotation(), setAnnotation().

        """
        return _libsbml.SpeciesReference_appendAnnotation(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_SPECIES_REFERENCE (default).

        See also getPackageName().

        """
        return _libsbml.SpeciesReference_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        SpeciesReference, is always 'speciesReference'.

        Returns the name of this element, i.e., 'speciesReference'.

        """
        return _libsbml.SpeciesReference_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        SpeciesReference object have been set.

        The required attributes for a SpeciesReference object are:

           * 'species'

           * 'constant' (only available SBML Level 3)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.SpeciesReference_hasRequiredAttributes(self)

SpeciesReference_swigregister = _libsbml.SpeciesReference_swigregister
SpeciesReference_swigregister(SpeciesReference)

class ListOfSpeciesReferences(ListOf):
    """
    Implementation of SBML's ListOfSpeciesReferences construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfSpeciesReferences, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfSpeciesReferences, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfSpeciesReferences
        __init__(self, SBMLNamespaces sbmlns) -> ListOfSpeciesReferences

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesReferences(SBMLNamespaces sbmlns)

        Creates a new ListOfSpeciesReferences object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfSpeciesReferences object to
        be created.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesReferences(long level, long version)

        Creates a new, empty ListOfSpeciesReferences object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfSpeciesReferences(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfSpeciesReferences

        Creates and returns a deep copy of this ListOfSpeciesReferences
        instance.

        Returns a (deep) copy of this ListOfSpeciesReferences.

        """
        return _libsbml.ListOfSpeciesReferences_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., SpeciesReference objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_SPECIES_REFERENCE (default).

        See also getPackageName().

        """
        return _libsbml.ListOfSpeciesReferences_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfSpeciesReferences, the XML element name is
        'listOfSpeciesReferences'.

        Returns the name of this element, i.e., 'listOfSpeciesReferences'.

        """
        return _libsbml.ListOfSpeciesReferences_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> SimpleSpeciesReference
        get(self, unsigned int n) -> SimpleSpeciesReference
        get(self, string sid) -> SimpleSpeciesReference
        get(self, string sid) -> SimpleSpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a SpeciesReference from the ListOfSpeciesReferences.

        Parameter 'n' is the index number of the SpeciesReference to get.

        Returns the nth SpeciesReference in this ListOfSpeciesReferences.

        See also size(), size().

        """
        return _libsbml.ListOfSpeciesReferences_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> SimpleSpeciesReference
        remove(self, string sid) -> SimpleSpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfSpeciesReferences items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfSpeciesReferences items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfSpeciesReferences_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfSpeciesReferences
    __del__ = lambda self : None;
ListOfSpeciesReferences_swigregister = _libsbml.ListOfSpeciesReferences_swigregister
ListOfSpeciesReferences_swigregister(ListOfSpeciesReferences)

class ModifierSpeciesReference(SimpleSpeciesReference):
    """
    Implementation of SBML's ModifierSpeciesReference construct.

    Sometimes a species appears in the kinetic rate formula of a reaction
    but is itself neither created nor destroyed in that reaction (for
    example, because it acts as a catalyst or inhibitor).  In SBML, all
    such species are simply called modifiers without regard to the
    detailed role of those species in the model.  The Reaction structure
    provides a way to express which species act as modifiers in a given
    reaction.  This is the purpose of the list of modifiers available in
    Reaction.  The list contains instances of ModifierSpeciesReference
    structures.

    The ModifierSpeciesReference structure inherits the mandatory
    attribute 'species' and optional attributes 'id' and 'name' from the
    parent class SimpleSpeciesReference.  See the description of
    SimpleSpeciesReference for more information about these.

    The value of the 'species' attribute must be the identifier of a
    species defined in the enclosing Model; this species is designated as
    a modifier for the current reaction.  A reaction may have any number
    of modifiers. It is permissible for a modifier species to appear
    simultaneously in the list of reactants and products of the same
    reaction where it is designated as a modifier, as well as to appear in
    the list of reactants, products and modifiers of other reactions in
    the model.

    """
    __swig_setmethods__ = {}
    for _s in [SimpleSpeciesReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModifierSpeciesReference, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleSpeciesReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModifierSpeciesReference, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ModifierSpeciesReference
        __init__(self, SBMLNamespaces sbmlns) -> ModifierSpeciesReference

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ModifierSpeciesReference(SBMLNamespaces sbmlns)

        Creates a new ModifierSpeciesReference using the given SBMLNamespaces
        object 'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            ModifierSpeciesReference(long level, long version)

        Creates a new ModifierSpeciesReference using the given SBML 'level'
        and 'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        ModifierSpeciesReference

        Parameter 'version' is a long integer, the SBML Version to assign to
        this ModifierSpeciesReference

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        """
        this = _libsbml.new_ModifierSpeciesReference(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ModifierSpeciesReference
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> ModifierSpeciesReference

        Creates and returns a deep copy of this ModifierSpeciesReference
        instance.

        Returns a (deep) copy of this ModifierSpeciesReference.

        """
        return _libsbml.ModifierSpeciesReference_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code for this SBML object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_MODIFIER_SPECIES_REFERENCE (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ModifierSpeciesReference_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Species, is
        always 'modifierSpeciesReference'.

        Returns the name of this element, i.e., 'modifierSpeciesReference'.

        """
        return _libsbml.ModifierSpeciesReference_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        ModifierSpeciesReference object have been set.

        The required attributes for a ModifierSpeciesReference object are:
        species

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.ModifierSpeciesReference_hasRequiredAttributes(self)

ModifierSpeciesReference_swigregister = _libsbml.ModifierSpeciesReference_swigregister
ModifierSpeciesReference_swigregister(ModifierSpeciesReference)

class Event(SBase):
    """
    Implementation of SBML's Event construct.

    An SBML Event object defines when the event can occur, the variables
    that are affected by it, how the variables are affected, and the
    event's relationship to other events.  The effect of the event can
    optionally be delayed after the occurrence of the condition which
    invokes it.

    The operation of Event is divided into two phases (even when the event
    is not delayed): one when the event is triggered, and the other when
    the event is executed.  Trigger objects define the conditions for
    triggering an event, Delay objects define when the event is actually
    executed, EventAssignment objects define the effects of executing the
    event, and (in SBML Level 3) Priority objects influence the order of
    EventAssignment performance in cases of simultaneous events.  Please
    consult the descriptions of Trigger, Delay, EventAssignment and
    Priority for more information.

    SBML Level/Version differences
    ======================================================================

    SBML Level 3
    ......................................................................

    SBML Level 3 introduces several changes to the structure and
    components of Events compared to SBML Level 2.  These changes fall
    into two main categories: changes to what is optional or required, and
    additions of new attributes and elements.

    * The attribute 'useValuesFromTriggerTime' on Event is mandatory (it
    was optional in Level 2);

       * Event's 'listOfEventAssignments' element (of class
    ListOfEventAssignments) is optional (it was mandatory in Level 2);

       * Event's 'priority' element (of class Priority) is new in Level 3;
    and

       * The Trigger object gains new mandatory attributes (described as
    part of the definition of Trigger). The changes to the attributes of
    Event are described below; the changes to Trigger and Priority are
    described in their respective sections.

    SBML Level 2
    ......................................................................

    In SBML Level 2 versions before Version 4, the semantics of Event time
    delays were defined such that the expressions in the event's
    assignments were always evaluated at the time the event was triggered.
    This definition made it difficult to define an event whose assignment
    formulas were meant to be evaluated at the time the event was executed
    (i.e., after the time period defined by the value of the Delay
    element).  In SBML Level 2 Version 4 and in Level 3, the attribute
    'useValuesFromTriggerTime' on Event allows a model to indicate the
    time at which the event's assignments are intended the values of the
    assignment formulas are computed at the moment the event is triggered,
    not after the delay.  If 'useValuesFromTriggerTime'=false, it means
    that the formulas in the event's assignments are to be computed after
    the delay, at the time the event is executed.

    The definition of Event in SBML Level 2 Versions 1 and 2 includes an
    additional attribute called 'timeUnits', which allowed the time units
    of the Delay to be set explicitly.  Later Versions of SBML Level 2 as
    well as SBML Level 3 do not define this attribute.  LibSBML supports
    this attribute for compatibility with previous versions of SBML Level
    2; however, if a model in SBML Level 3 or Level 2 Versions 3-4 format
    sets the attribute, the consistency-checking method
    SBMLDocument.checkConsistency() will report an error.

    The attribute 'useValuesFromTriggerTime' was introduced in SBML Level
    2 Version 4.  Models defined in prior Versions of SBML Level 2 cannot
    use this attribute, and SBMLDocument.checkConsistency() will report an
    error if they do.

    Semantics of events in SBML Level 3 Version 1
    ======================================================================

    The detailed semantics of events are described in the specification
    documents for each SBML Level/Version.  Here we include the
    description from the SBML Level 1 Version 1. Any transition of a
    Trigger object's 'math' formula from the value false to True will
    cause the enclosing Event object to trigger.  Such a transition is not
    possible at the very start of a simulation (i.e., at time t = 0)
    unless the Trigger object's 'initialValue' attribute has a value of
    False; this defines the value of the trigger formula to be False
    immediately prior to the start of simulation, thereby giving it the
    potential to change in value from False to True when the formula is
    evaluated at t = 0.  If 'initialValue'=True, then the trigger
    expression cannot transition from False to True at t = 0 but may do so
    at some time t > 0.

    Consider an Event object definition E with delay d in which the
    Trigger object's 'math' formula makes a transition in value from False
    to True at times t_1 and t_2.  The EventAssignment within the Event
    object will have effect at t_1 + d and t_2 + d irrespective of the
    relative times of t_1 and t_2.  For example, events can 'overlap' so
    that t_1 < t_2 < t_1 + d still causes an event assignments to occur at
    t_1 + d and t_2 + d.

    It is entirely possible for two events to be executed simultaneously,
    and it is possible for events to trigger other events (i.e., an event
    assignment can cause an event to trigger).  This leads to several
    points:

    * A software package should retest all event triggers after executing
    an event assignment in order to account for the possibility that the
    assignment causes another event trigger to transition from False to
    True.  This check should be made after each individual Event object's
    execution, even when several events are to be executed simultaneously.

    * Any Event object whose Trigger 'persistent' attribute has the value
    False must have its trigger expression reevaluated continuously
    between when the event is triggered and when it is executed.  If its
    trigger expression ever evaluates to False, it must be removed from
    the queue of events pending execution and treated as any other event
    whose trigger expression evaluates to False.

    * Although the precise time at which events are executed is not
    resolved beyond the given execution point in simulated time, it is
    assumed that the order in which the events occur is resolved. This
    order can be significant in determining the overall outcome of a given
    simulation.  When an event X triggers another event Y and event Y has
    zero delay, then event Y is added to the existing set of simultaneous
    events that are pending execution.  Events X and Y form a cascade of
    events at the same point in simulation time.  An event such as Y may
    have a special priority if it contains a Priority subobject.

    * All events in a model are open to being in a cascade.  The position
    of an event in the event queue does not affect whether it can be in
    the cascade: event Y can be triggered whether it is before or after X
    in the queue of events pending execution.  A cascade of events can be
    potentially infinite (never terminate); when this occurs a simulator
    should indicate this has occurred -- it is incorrect for a simulator
    to break a cascade arbitrarily and continue the simulation without at
    least indicating that the infinite cascade occurred.

    * Simultaneous events having no defined priorities are executed in an
    undefined order.  This does not mean that the behavior of the
    simulation is completely undefined; merely that the order of execution
    of these particular events is undefined.  A given simulator may use
    any algorithm to choose an order as long as every event is executed
    exactly once.

    * Events with defined priorities are executed in the order implied by
    their Priority 'math' formula values, with events having higher
    priorities being executed ahead of events with lower priorities, and
    events with identical priorities being executed in a random order with
    respect to one another (as determined at run-time by some random
    algorithm equivalent to coin-flipping).  Newly-triggered events that
    are to be executed immediately (i.e., if they define no delays) should
    be inserted into the queue of events pending execution according to
    their priorities: events with higher priority values value must be
    inserted ahead of events with lower priority values and after any
    pending events with even higher priorities, and inserted randomly
    among pending events with the same priority values.  Events without
    Priority objects must be inserted into the queue in some fashion, but
    the algorithm used to place it in the queue is undefined.  Similarly,
    there is no restriction on the order of a newly-inserted event with a
    defined Priority with respect to any other pending Event without a
    defined Priority.

    * A model variable that is the target of one or more event assignments
    can change more than once when simultaneous events are processed at
    some time point t.  The model's behavior (output) for such a variable
    is the value of the variable at the end of processing all the
    simultaneous events at time t.

    See also EventAssignment.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Event
        __init__(self, SBMLNamespaces sbmlns) -> Event
        __init__(self, Event orig) -> Event

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Event(SBMLNamespaces sbmlns)

        Creates a new Event using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Event(long level, long version)

        Creates a new Event using the given SBML 'level' and 'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Event

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Event

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Event(Event orig)

        Copy constructor; creates a copy of this Event.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Event(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Event

        Creates and returns a deep copy of this Event.

        Returns a (deep) copy of this Event.

        """
        return _libsbml.Event_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.Event_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or None if no such object is found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns pointer to the first element found with the given 'metaid'.

        """
        return _libsbml.Event_getElementByMetaId(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Event.

        Returns the id of this Event.

        """
        return _libsbml.Event_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Event.

        Returns the name of this Event.

        """
        return _libsbml.Event_getName(self)

    def getTrigger(self, *args):
        """
        getTrigger(self) -> Trigger
        getTrigger(self) -> Trigger

        Get the event trigger portion of this Event.

        Returns the Trigger object of this Event.

        """
        return _libsbml.Event_getTrigger(self, *args)

    def getDelay(self, *args):
        """
        getDelay(self) -> Delay
        getDelay(self) -> Delay

        Get the assignment delay portion of this Event, if there is one.

        Returns the delay of this Event if one is defined, or None if none is
        defined.

        """
        return _libsbml.Event_getDelay(self, *args)

    def getPriority(self, *args):
        """
        getPriority(self) -> Priority
        getPriority(self) -> Priority

        (SBML Level 3 only) Get the event priority portion of this Event.

        Returns the Priority object of this Event.

        Note:

        The element 'priority' is available in SBML Level 3 Version 1 Core,
        but is not present in lower Levels of SBML.

        """
        return _libsbml.Event_getPriority(self, *args)

    def getTimeUnits(self):
        """
        getTimeUnits(self) -> string

        Get the value of the 'timeUnits' attribute of this Event, if it has
        one.

        Returns the value of the attribute 'timeUnits' as a string.

        WARNING:

        Definitions of Event in SBML Level 2 Versions 1 and 2 included the
        additional attribute called 'timeUnits', but it was removed in SBML
        Level 2 Version 3. LibSBML supports this attribute for compatibility
        with previous versions of SBML Level 2, but its use is discouraged
        since models in Level 2 Versions 3 and 4 cannot contain it.  If a
        Version 3 or 4 model sets the attribute, the consistency-checking
        method SBMLDocument.checkConsistency() will report an error.

        """
        return _libsbml.Event_getTimeUnits(self)

    def getUseValuesFromTriggerTime(self):
        """
        getUseValuesFromTriggerTime(self) -> bool

        Get the value of the 'useValuesFromTriggerTime' attribute of this
        Event.

        @par The optional Delay on Event means there are two times to consider
        when computing the results of an event: the time at which the event is
        triggered, and the time at which assignments are executed.  It is also
        possible to distinguish between the time at which the
        EventAssignment's expression is calculated, and the time at which the
        assignment is made: the expression could be evaluated at the same time
        the assignments are performed, i.e., when the event is executed, but
        it could also be defined to be evaluated at the time the event is
        triggered.

        In SBML Level 2 versions prior to Version 4, the semantics of Event
        time delays were defined such that the expressions in the event's
        assignments were always evaluated at the time the event was triggered.
        This definition made it difficult to define an event whose assignment
        formulas were meant to be evaluated at the time the event was executed
        (i.e., after the time period defined by the value of the Delay
        element).  In SBML Level 2 Version 4, the attribute
        'useValuesFromTriggerTime' on Event allows a model to indicate the
        time at which the event's assignments are intended to be evaluated.
        In SBML Level 2, the attribute has a default value of True, which
        corresponds to the interpretation of event assignments prior to
        Version 4: the values of the assignment formulas are computed at the
        moment the event is triggered, not after the delay.  If
        'useValuesFromTriggerTime'=False, it means that the formulas in the
        event's assignments are to be computed after the delay, at the time
        the event is executed.  In SBML Level 3, the attribute is mandatory,
        not optional, and all events must specify a value for it.

        Returns the value of the attribute 'useValuesFromTriggerTime' as a
        boolean.

        WARNING:

        The attribute 'useValuesFromTriggerTime' was introduced in SBML Level
        2 Version 4.  It is not valid in models defined using SBML Level 2
        versions prior to Version 4. If a Level 2 Version 1-3 model sets the
        attribute, the consistency-checking method
        SBMLDocument.checkConsistency() will report an error.

        """
        return _libsbml.Event_getUseValuesFromTriggerTime(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True if this Event's 'id' attribute is set.

        Returns True if the 'id' attribute of this Event is set, False
        otherwise.

        """
        return _libsbml.Event_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True if this Event's 'name' attribute is set.

        Returns True if the 'name' attribute of this Event is set, False
        otherwise.

        """
        return _libsbml.Event_isSetName(self)

    def isSetTrigger(self):
        """
        isSetTrigger(self) -> bool

        Predicate for testing whether the trigger for this Event is set.

        Returns True if the trigger of this Event is set, False otherwise.

        """
        return _libsbml.Event_isSetTrigger(self)

    def isSetDelay(self):
        """
        isSetDelay(self) -> bool

        Predicate for testing whether the delay for this Event is set.

        Returns True if the delay of this Event is set, False otherwise.

        """
        return _libsbml.Event_isSetDelay(self)

    def isSetPriority(self):
        """
        isSetPriority(self) -> bool

        (SBML Level 3 only) Predicate for testing whether the priority for
        this Event is set.

        Returns True if the priority of this Event is set, False otherwise.

        Note:

        The element 'priority' is available in SBML Level 3 Version 1 Core,
        but is not present in lower Levels of SBML.

        """
        return _libsbml.Event_isSetPriority(self)

    def isSetTimeUnits(self):
        """
        isSetTimeUnits(self) -> bool

        Predicate for testing whether the 'timeUnits' attribute of this Event
        is set.

        Returns True if the 'timeUnits' attribute of this Event is set, False
        otherwise.

        WARNING:

        Definitions of Event in SBML Level 2 Versions 1 and 2 included the
        additional attribute called 'timeUnits', but it was removed in SBML
        Level 2 Version 3. LibSBML supports this attribute for compatibility
        with previous versions of SBML Level 2, but its use is discouraged
        since models in Level 2 Versions 3 and 4 cannot contain it.  If a
        Version 3 or 4 model sets the attribute, the consistency-checking
        method SBMLDocument.checkConsistency() will report an error.

        """
        return _libsbml.Event_isSetTimeUnits(self)

    def isSetUseValuesFromTriggerTime(self):
        """
        isSetUseValuesFromTriggerTime(self) -> bool

        Predicate for testing whether the 'useValuesFromTriggerTime' attribute
        of this Event is set.

        Returns True if the 'useValuesFromTriggerTime' attribute of this Event
        is set, False otherwise.

        Note:

        In SBML Level 2, this attribute is optional and has a default value of
        True, whereas in Level 3 Version 1, this optional is mandatory and has
        no default value.

        """
        return _libsbml.Event_isSetUseValuesFromTriggerTime(self)

    def setId(self, *args):
        """
        setId(self, string sid) -> int

        Sets the value of the 'id' attribute of this Event.

        The string 'sid' is copied.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Parameter 'sid' is the string to use as the identifier of this Event

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Event_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Event.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the Event

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Event_setName(self, *args)

    def setTrigger(self, *args):
        """
        setTrigger(self, Trigger trigger) -> int

        Sets the trigger definition of this Event to a copy of the given
        Trigger object instance.

        Parameter 'trigger' is the Trigger object instance to use.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

        """
        return _libsbml.Event_setTrigger(self, *args)

    def setDelay(self, *args):
        """
        setDelay(self, Delay delay) -> int

        Sets the delay definition of this Event to a copy of the given Delay
        object instance.

        Parameter 'delay' is the Delay object instance to use

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

        """
        return _libsbml.Event_setDelay(self, *args)

    def setPriority(self, *args):
        """
        setPriority(self, Priority priority) -> int

        (SBML Level 3 only) Sets the priority definition of this Event to a
        copy of the given Priority object instance.

        Parameter 'priority' is the Priority object instance to use

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The element 'priority' is available in SBML Level 3 Version 1 Core,
        but is not present in lower Levels of SBML.

        """
        return _libsbml.Event_setPriority(self, *args)

    def setTimeUnits(self, *args):
        """
        setTimeUnits(self, string sid) -> int

        Sets the 'timeUnits' attribute of this Event to a copy of 'sid'.

        Parameter 'sid' is the identifier of the time units to use.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        WARNING:

        Definitions of Event in SBML Level 2 Versions 1 and 2 included the
        additional attribute called 'timeUnits', but it was removed in SBML
        Level 2 Version 3. LibSBML supports this attribute for compatibility
        with previous versions of SBML Level 2, but its use is discouraged
        since models in Level 2 Versions 3 and 4 cannot contain it.  If a
        Version 3 or 4 model sets the attribute, the consistency-checking
        method SBMLDocument.checkConsistency() will report an error.

        """
        return _libsbml.Event_setTimeUnits(self, *args)

    def setUseValuesFromTriggerTime(self, *args):
        """
        setUseValuesFromTriggerTime(self, bool value) -> int

        Sets the 'useValuesFromTriggerTime' attribute of this Event to a
        'value'.

        @par The optional Delay on Event means there are two times to consider
        when computing the results of an event: the time at which the event is
        triggered, and the time at which assignments are executed.  It is also
        possible to distinguish between the time at which the
        EventAssignment's expression is calculated, and the time at which the
        assignment is made: the expression could be evaluated at the same time
        the assignments are performed, i.e., when the event is executed, but
        it could also be defined to be evaluated at the time the event is
        triggered.

        In SBML Level 2 versions prior to Version 4, the semantics of Event
        time delays were defined such that the expressions in the event's
        assignments were always evaluated at the time the event was triggered.
        This definition made it difficult to define an event whose assignment
        formulas were meant to be evaluated at the time the event was executed
        (i.e., after the time period defined by the value of the Delay
        element).  In SBML Level 2 Version 4, the attribute
        'useValuesFromTriggerTime' on Event allows a model to indicate the
        time at which the event's assignments are intended to be evaluated.
        In SBML Level 2, the attribute has a default value of True, which
        corresponds to the interpretation of event assignments prior to
        Version 4: the values of the assignment formulas are computed at the
        moment the event is triggered, not after the delay.  If
        'useValuesFromTriggerTime'=False, it means that the formulas in the
        event's assignments are to be computed after the delay, at the time
        the event is executed.  In SBML Level 3, the attribute is mandatory,
        not optional, and all events must specify a value for it.

        Parameter 'value' is the value of useValuesFromTriggerTime to use.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        WARNING:

        The attribute 'useValuesFromTriggerTime' was introduced in SBML Level
        2 Version 4.  It is not valid in models defined using SBML Level 2
        versions prior to Version 4. If a Level 2 Version 1-3 model sets the
        attribute, the consistency-checking method
        SBMLDocument.checkConsistency() will report an error.

        """
        return _libsbml.Event_setUseValuesFromTriggerTime(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Event.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Event_unsetId(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Event.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Event_unsetName(self)

    def unsetDelay(self):
        """
        unsetDelay(self) -> int

        Unsets the Delay of this Event.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Event_unsetDelay(self)

    def unsetPriority(self):
        """
        unsetPriority(self) -> int

        (SBML Level 3 only) Unsets the Priority of this Event.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The element 'priority' is available in SBML Level 3 Version 1 Core,
        but is not present in lower Levels of SBML.

        """
        return _libsbml.Event_unsetPriority(self)

    def unsetTrigger(self):
        """
        unsetTrigger(self) -> int

        Unsets the Trigger of this Event.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        The element 'priority' is available in SBML Level 3 Version 1 Core,
        but is not present in lower Levels of SBML.

        """
        return _libsbml.Event_unsetTrigger(self)

    def unsetTimeUnits(self):
        """
        unsetTimeUnits(self) -> int

        Unsets the 'timeUnits' attribute of this Event.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        WARNING:

        Definitions of Event in SBML Level 2 Versions 1 and 2 included the
        additional attribute called 'timeUnits', but it was removed in SBML
        Level 2 Version 3. LibSBML supports this attribute for compatibility
        with previous versions of SBML Level 2, but its use is discouraged
        since models in Level 2 Versions 3 and 4 cannot contain it.  If a
        Version 3 or 4 model sets the attribute, the consistency-checking
        method SBMLDocument.checkConsistency() will report an error.

        """
        return _libsbml.Event_unsetTimeUnits(self)

    def addEventAssignment(self, *args):
        """
        addEventAssignment(self, EventAssignment ea) -> int

        Appends a copy of the given EventAssignment to this Event.

        Parameter 'ea' is the EventAssignment object to add.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        This method should be used with some caution.  The fact that this
        method copies the object passed to it means that the caller will be
        left holding a physically different object instance than the one
        contained inside this object.  Changes made to the original object
        instance (such as resetting attribute values) will not affect the
        instance in this object.  In addition, the caller should make sure to
        free the original object if it is no longer being used, or else a
        memory leak will result.  Please see other methods on this class
        (particularly a corresponding method whose name begins with the word
        create) for alternatives that do not lead to these issues.

        See also createEventAssignment().

        """
        return _libsbml.Event_addEventAssignment(self, *args)

    def createEventAssignment(self):
        """
        createEventAssignment(self) -> EventAssignment

        Creates a new, empty EventAssignment, adds it to this Event's list of
        event assignments and returns the EventAssignment.

        Returns the newly created EventAssignment object instance

        See also addEventAssignment().

        """
        return _libsbml.Event_createEventAssignment(self)

    def createTrigger(self):
        """
        createTrigger(self) -> Trigger

        Creates a new, empty Trigger, adds it to this Event and  returns the
        Trigger.

        Returns the newly created Trigger object instance

        """
        return _libsbml.Event_createTrigger(self)

    def createDelay(self):
        """
        createDelay(self) -> Delay

        Creates a new, empty Delay, adds it to this Event and  returns the
        Delay.

        Returns the newly created Delay object instance

        """
        return _libsbml.Event_createDelay(self)

    def createPriority(self):
        """
        createPriority(self) -> Priority

        (SBML Level 3 only) Creates a new, empty Priority, adds it to this
        Event and returns the Priority.

        Returns the newly created Priority object instance

        Note:

        The element 'priority' is available in SBML Level 3 Version 1 Core,
        but is not present in lower Levels of SBML.

        """
        return _libsbml.Event_createPriority(self)

    def getListOfEventAssignments(self, *args):
        """
        getListOfEventAssignments(self) -> ListOfEventAssignments
        getListOfEventAssignments(self) -> ListOfEventAssignments

        Returns the list of event assignments for this Event.

        Returns the list of EventAssignments for this Event.

        """
        return _libsbml.Event_getListOfEventAssignments(self, *args)

    def getEventAssignment(self, *args):
        """
        getEventAssignment(self, unsigned int n) -> EventAssignment
        getEventAssignment(self, unsigned int n) -> EventAssignment
        getEventAssignment(self, string variable) -> EventAssignment
        getEventAssignment(self, string variable) -> EventAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getEventAssignment(string variable)

        Return the event assignment indicated by the given 'variable'.

        Parameter 'variable' is a string, the identifier of the variable whose
        EventAssignment is being sought.

        Returns the EventAssignment for the given 'variable', or None if no
        such EventAssignment exits.

        @par <hr> Method variant with the following signature:

            getEventAssignment(long n)

        Return a specific EventAssignment object of this Event.

        Parameter 'n' is an integer, the index of the EventAssignment object
        to return

        Returns the nth EventAssignment of this Event.

        """
        return _libsbml.Event_getEventAssignment(self, *args)

    def getNumEventAssignments(self):
        """
        getNumEventAssignments(self) -> unsigned int

        Returns the number of EventAssignment objects attached to this Event.

        Returns the number of EventAssignments in this Event.

        """
        return _libsbml.Event_getNumEventAssignments(self)

    def removeEventAssignment(self, *args):
        """
        removeEventAssignment(self, unsigned int n) -> EventAssignment
        removeEventAssignment(self, string variable) -> EventAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeEventAssignment(string variable)

        Removes the EventAssignment object with the given 'variable' attribute
        from this Event object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it. If none of the EventAssignment objects in this Event object have
        the  'variable' attribute 'variable', then None is returned.

        Parameter 'variable' is the 'variable' attribute of the
        EventAssignment object  to remove

        Returns the EventAssignment object removed.  As mentioned above, the
        caller owns the returned object. None is returned if no
        EventAssignment object with the 'variable' attribute exists in this
        Event object.

        @par <hr> Method variant with the following signature:

            removeEventAssignment(long n)

        Removes the nth EventAssignment object from this Event object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the EventAssignment object to remove

        Returns the EventAssignment object removed.  As mentioned above,  the
        caller owns the returned item. None is returned if the given index  is
        out of range.

        """
        return _libsbml.Event_removeEventAssignment(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Event_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Event_enablePackageInternal(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_EVENT
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Event_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Event, is
        always 'event'.

        Returns the name of this element, i.e., 'event'.

        """
        return _libsbml.Event_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this Event
        object have been set.

        The required attributes for an Event object are:

           * 'useValuesfromTriggerTime' (required in SBML Level 3)

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.Event_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for the given
        Event_t structure have been set.

        Note:

        The required elements for an Event object are:

           * 'trigger'

           * 'listOfEventAssignments' (required in SBML Level 2, optional in
        Level 3)

        """
        return _libsbml.Event_hasRequiredElements(self)

Event_swigregister = _libsbml.Event_swigregister
Event_swigregister(Event)

class ListOfEvents(ListOf):
    """
    Implementation of SBML's ListOfEvents construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfEvents, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfEvents, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfEvents
        __init__(self, SBMLNamespaces sbmlns) -> ListOfEvents

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfEvents(SBMLNamespaces sbmlns)

        Creates a new ListOfEvents object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfEvents object to be
        created.

        @par <hr> Method variant with the following signature:

            ListOfEvents(long level, long version)

        Creates a new ListOfEvents object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfEvents(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfEvents

        Creates and returns a deep copy of this ListOfEvents.

        Returns a (deep) copy of this ListOfEvents.

        """
        return _libsbml.ListOfEvents_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Event objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf:
        libsbml.SBML_EVENT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfEvents_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfEvents, the XML element name is 'listOfEvents'.

        Returns the name of this element, i.e., 'listOfEvents'.

        """
        return _libsbml.ListOfEvents_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Event
        get(self, unsigned int n) -> Event
        get(self, string sid) -> Event
        get(self, string sid) -> Event

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get an Event from the ListOfEvents.

        Parameter 'n' is the index number of the Event to get.

        Returns the nth Event in this ListOfEvents.

        See also size(), size().

        """
        return _libsbml.ListOfEvents_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Event
        remove(self, string sid) -> Event

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfEvents items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfEvents items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfEvents_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfEvents
    __del__ = lambda self : None;
ListOfEvents_swigregister = _libsbml.ListOfEvents_swigregister
ListOfEvents_swigregister(ListOfEvents)

class EventAssignment(SBase):
    """
    Implementation of SBML's EventAssignment construct for Event.

    Event contains an optional element called 'listOfEventAssignments', of
    class ListOfEventAssignments.  In every instance of an event
    definition in a model, the object's 'listOfEventAssignments' element
    must have a non-empty list of one or more 'eventAssignment' elements
    of class EventAssignment.  The object class EventAssignment has one
    required attribute, 'variable', and a required element, 'math'.  Being
    derived from SBase, it also has all the usual attributes and elements
    of its parent class.

    An Event object defines when the event can occur, the variables that
    are affected by the event, and how the variables are affected.  The
    purpose of the EventAssignment object class is to define how variables
    are affected by an Event.  In SBML Level 2, every Event object
    instance must have a nonempty list of event assignments; in SBML Level
    3, the list of assignments is optional.

    The operation of an Event is divided into two phases (regardless of
    whether a delay is involved): one phase when the event is triggered,
    and the other when the event is executed.   EventAssignment objects
    are interpreted when an event is executed.  The effects are described
    below.

    The attribute 'variable'
    ======================================================================

    The EventAssignment attribute 'variable' must be the identifier of an
    existing Compartment, Species, SpeciesReference, or Parameter instance
    defined in the model.  When the event is executed, the value of the
    model component identified by 'variable' is changed by the
    EventAssignment to the value computed by the 'math' element; that is,
    a species' quantity, species reference's stoichiometry, compartment's
    size or parameter's value are reset to the value computed by 'math'.

    Certain restrictions are placed on what can appear in 'variable':

    * The object identified by the value of the EventAssignment attribute
    'variable' must not have its 'constant' attribute set to or default to
    True.  (Constants cannot be affected by events.)

    * The 'variable' attribute must not contain the identifier of a
    reaction; only species, species references, compartment and parameter
    values may be set by an Event.

    * The value of every 'variable' attribute must be unique among the set
    of EventAssignment structures within a given Event structure.  In
    other words, a single event cannot have multiple EventAssignment
    objects assigning the same variable.  (All of them would be performed
    at the same time when that particular Event triggers, resulting in
    indeterminacy.)  However, separate Event instances can refer to the
    same variable.

    * A variable cannot be assigned a value in an EventAssignment object
    instance and also be assigned a value by an AssignmentRule; i.e., the
    value of an EventAssignment's 'variable' attribute cannot be the same
    as the value of a AssignmentRule' 'variable' attribute.  (Assignment
    rules hold at all times, therefore it would be inconsistent to also
    define an event that reassigns the value of the same variable.) Note
    that the time of assignment of the object identified by the value of
    the 'variable' attribute is always the time at which the Event is
    executed, not when it is triggered.  The timing is controlled by the
    optional Delay in an Event.  The time of assignment is not affected by
    the 'useValuesFromTriggerTime' attribute on Eventmdash;that attribute
    affects the time at which the EventAssignment's 'math' expression is
    evaluated.  In other words, SBML allows decoupling the time at which
    the 'variable' is assigned from the time at which its value expression
    is calculated.

    The 'math' subelement in an EventAssignment
    ======================================================================

    The MathML expression contained in an EventAssignment defines the new
    value of the variable being assigned by the Event.

    As mentioned above, the time at which the expression in 'math' is
    evaluated is determined by the attribute 'useValuesFromTriggerTime' on
    Event.  If the attribute value is True, the expression must be
    evaluated when the event is triggered; more precisely, the values of
    identifiers occurring in MathML <ci> elements in the EventAssignment's
    'math' expression are the values they have at the point when the event
    triggered.  If, instead, 'useValuesFromTriggerTime''s value is False,
    it means the values at execution time should be used; that is, the
    values of identifiers occurring in MathML <ci> elements in the
    EventAssignment's 'math' expression are the values they have at the
    point when the event executed.

    SBML Level/Version differences
    ======================================================================

    Between Version 4 and previous versions of SBML Level 2, the
    requirements regarding the matching of units between an
    EvengAssignment's formula and the units of the object identified by
    the 'variable' attribute changed.  Previous versions required
    consistency, but in SBML Level 2 Version 4 and in SBML Level 3, unit
    consistency is only recommended.  More precisely:

    * In the case of a species, an EventAssignment sets the referenced
    species' quantity (concentration or amount of substance) to the value
    determined by the formula in the EventAssignment's 'math' subelement.
    The units of the 'math' formula should (in SBML Level 2 Version 4 and
    in Level 3) or must (in previous Versions of Level 2) be identical to
    the units of the species.

    * (SBML Level 3 only.) In the case of a species reference, an
    EventAssignment sets the stoichiometry of the reactant or product
    referenced by the SpeciesReference object to the value determined by
    the formula in the 'math' element.  The unit associated with the value
    produced by the 'math' formula should be dimensionless, because
    reactant and product stoichiometries in reactions are dimensionless
    quantities.

    * In the case of a compartment, an EventAssignment sets the referenced
    compartment's size to the size determined by the formula in the 'math'
    subelement of the EventAssignment.  The overall units of the formula
    should (in SBML Level 2 Version 4 and in Level 3) or must (in previous
    Versions of Level 2) be identical to the units specified for the size
    of the compartment identified by the EventAssignment's 'variable'
    attribute.

    * In the case of a parameter, an EventAssignment sets the referenced
    parameter's value to that determined by the formula in 'math'.  The
    overall units of the formula should (in SBML Level 2 Version 4 and
    Level 3) or must (in previous Versions of Level 2) be identical to the
    units defined for the parameter. Note that the formula placed in the
    'math' element has no assumed units.  The consistency of the units of
    the formula, and the units of the entity which the assignment affects,
    must be explicitly established just as in the case of the value of the
    Delay subelement. An approach similar to the one discussed in the
    context of Delay may be used for the formula of an EventAssignment.

    See also Event.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventAssignment, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventAssignment, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_EventAssignment
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> EventAssignment
        __init__(self, SBMLNamespaces sbmlns) -> EventAssignment
        __init__(self, EventAssignment orig) -> EventAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            EventAssignment(SBMLNamespaces sbmlns)

        Creates a new EventAssignment using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            EventAssignment(long level, long version)

        Creates a new EventAssignment using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        EventAssignment

        Parameter 'version' is a long integer, the SBML Version to assign to
        this EventAssignment

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            EventAssignment(EventAssignment orig)

        Copy constructor; creates a copy of this EventAssignment.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_EventAssignment(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> EventAssignment

        Creates and returns a deep copy of this EventAssignment.

        Returns a (deep) copy of this EventAssignment.

        """
        return _libsbml.EventAssignment_clone(self)

    def getVariable(self):
        """
        getVariable(self) -> string

        Get the value of this EventAssignment's 'variable' attribute.

        Returns the identifier stored in the 'variable' attribute of this
        EventAssignment.

        """
        return _libsbml.EventAssignment_getVariable(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical expression in this EventAssignment's 'math'
        subelement.

        Returns the top ASTNode of an abstract syntax tree representing the
        mathematical formula in this EventAssignment.

        """
        return _libsbml.EventAssignment_getMath(self)

    def isSetVariable(self):
        """
        isSetVariable(self) -> bool

        Predicate for testing whether the attribute 'variable' of this
        EventAssignment is set.

        Returns True if the 'variable' attribute of this EventAssignment is
        set, False otherwise.

        """
        return _libsbml.EventAssignment_isSetVariable(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate for testing whether the 'math' subelement of this
        EventAssignment is set.

        Returns True if this EventAssignment has a 'math' subelement, False
        otherwise.

        """
        return _libsbml.EventAssignment_isSetMath(self)

    def setVariable(self, *args):
        """
        setVariable(self, string sid) -> int

        Sets the attribute 'variable' of this EventAssignment to a copy of the
        given identifier string.

        Parameter 'sid' is the identifier of a Compartment, Species or
        (global) Parameter defined in this model.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.EventAssignment_setVariable(self, *args)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the 'math' subelement of this EventAssignment to a copy of the
        given ASTNode.

        Parameter 'math' is an ASTNode that will be copied and stored as the
        mathematical formula for this EventAssignment.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.EventAssignment_setMath(self, *args)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Calculates and returns a UnitDefinition that expresses the units of
        measurement assumed for the 'math' expression of this EventAssignment.

        @par The units are calculated based on the mathematical expression in
        the EventAssignment and the model quantities referenced by <ci>
        elements used within that expression.  The method
        EventAssignment.getDerivedUnitDefinition() returns the calculated
        units, to the extent that libSBML can compute them.

        Note:

        The functionality that facilitates unit analysis depends on the model
        as a whole.  Thus, in cases where the object has not been added to a
        model or the model itself is incomplete, unit analysis is not possible
        and this method will return None.

        WARNING:

        Note that it is possible the 'math' expression in the EventAssignment
        contains literal numbers or parameters with undeclared units.  In
        those cases, it is not possible to calculate the units of the overall
        expression without making assumptions.  LibSBML does not make
        assumptions about the units, and
        EventAssignment.getDerivedUnitDefinition() only returns the units as
        far as it is able to determine them.  For example, in an expression X
        + Y, if X has unambiguously-defined units and Y does not, it will
        return the units of X.  When using this method, it is critical that
        callers also invoke the method
        EventAssignment.containsUndeclaredUnits() to determine whether this
        situation holds.  Callers should take suitable action in those
        situations.

        Returns a UnitDefinition that expresses the units of the math
        expression of this EventAssignment, or None if one cannot be
        constructed.

        See also containsUndeclaredUnits().

        """
        return _libsbml.EventAssignment_getDerivedUnitDefinition(self, *args)

    def containsUndeclaredUnits(self, *args):
        """
        containsUndeclaredUnits(self) -> bool
        containsUndeclaredUnits(self) -> bool

        Predicate returning True if the math expression of this
        EventAssignment contains literal numbers or parameters with undeclared
        units.

        @par The units are calculated based on the mathematical expression in
        the EventAssignment and the model quantities referenced by <ci>
        elements used within that expression.  The method
        EventAssignment.getDerivedUnitDefinition() returns the calculated
        units, to the extent that libSBML can compute them.

        If the expression contains literal numbers or parameters with
        undeclared units, libSBML may not be able to compute the full units of
        the expression and will only return what it can compute.  Callers
        should always use EventAssignment.containsUndeclaredUnits() when using
        EventAssignment.getDerivedUnitDefinition() to decide whether the
        returned units may be incomplete.

        Returns True if the math expression of this EventAssignment includes
        parameters/numbers  with undeclared units, False otherwise.

        Note:

        A return value of True indicates that the UnitDefinition returned by
        EventAssignment.getDerivedUnitDefinition() may not accurately
        represent the units of the expression.

        See also getDerivedUnitDefinition().

        """
        return _libsbml.EventAssignment_containsUndeclaredUnits(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_EVENT_ASSIGNMENT (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.EventAssignment_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        EventAssignment, is always 'eventAssignment'.

        Returns the name of this element, i.e., 'eventAssignment'.

        """
        return _libsbml.EventAssignment_getElementName(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        EventAssignment object have been set.

        The required attributes for a EventAssignment object are:

           * 'variable'

        Returns True if the required attributes have been set, False
        otherwise.

        """
        return _libsbml.EventAssignment_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        EventAssignment object have been set.

        Note:

        The required elements for a EventAssignment object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.EventAssignment_hasRequiredElements(self)

    def getId(self):
        """
        getId(self) -> string

        Internal implementation method.

        """
        return _libsbml.EventAssignment_getId(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.EventAssignment_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.EventAssignment_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.EventAssignment_replaceSIDWithFunction(self, *args)

    def divideAssignmentsToSIdByFunction(self, *args):
        """
        divideAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.EventAssignment_divideAssignmentsToSIdByFunction(self, *args)

    def multiplyAssignmentsToSIdByFunction(self, *args):
        """
        multiplyAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.EventAssignment_multiplyAssignmentsToSIdByFunction(self, *args)

EventAssignment_swigregister = _libsbml.EventAssignment_swigregister
EventAssignment_swigregister(EventAssignment)

class ListOfEventAssignments(ListOf):
    """
    Implementation of SBML's ListOfEventAssignments construct.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfEventAssignments, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfEventAssignments, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> ListOfEventAssignments
        __init__(self, SBMLNamespaces sbmlns) -> ListOfEventAssignments

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfEventAssignments(SBMLNamespaces sbmlns)

        Creates a new ListOfEventAssignments object.

        The object is constructed such that it is valid for the SBML Level and
        Version combination determined by the SBMLNamespaces object in
        'sbmlns'.

        Parameter 'sbmlns' is an SBMLNamespaces object that is used to
        determine the characteristics of the ListOfEventAssignments object to
        be created.

        @par <hr> Method variant with the following signature:

            ListOfEventAssignments(long level, long version)

        Creates a new ListOfEventAssignments object.

        The object is constructed such that it is valid for the given SBML
        Level and Version combination.

        Parameter 'level' is the SBML Level

        Parameter 'version' is the Version within the SBML Level

        """
        this = _libsbml.new_ListOfEventAssignments(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfEventAssignments

        Creates and returns a deep copy of this ListOfEventAssignments.

        Returns a (deep) copy of this ListOfEventAssignments.

        """
        return _libsbml.ListOfEventAssignments_clone(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., EventAssignment objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for the objects contained in this ListOf:
        libsbml.SBML_EVENT_ASSIGNMENT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfEventAssignments_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object.

        For ListOfEventAssignments, the XML element name is
        'listOfEventAssignments'.

        Returns the name of this element, i.e., 'listOfEventAssignments'.

        """
        return _libsbml.ListOfEventAssignments_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> EventAssignment
        get(self, unsigned int n) -> EventAssignment
        get(self, string sid) -> EventAssignment
        get(self, string sid) -> EventAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a EventAssignment from the ListOfEventAssignments.

        Parameter 'n' is the index number of the EventAssignment to get.

        Returns the nth EventAssignment in this ListOfEventAssignments.

        See also size(), size().

        """
        return _libsbml.ListOfEventAssignments_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> EventAssignment
        remove(self, string sid) -> EventAssignment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfEventAssignments items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfEventAssignments items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfEventAssignments_remove(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Note that EventAssignments do not actually have IDs, but the libsbml
        interface pretends that they do: no event assignment is returned by
        this function.

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.ListOfEventAssignments_getElementBySId(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfEventAssignments
    __del__ = lambda self : None;
ListOfEventAssignments_swigregister = _libsbml.ListOfEventAssignments_swigregister
ListOfEventAssignments_swigregister(ListOfEventAssignments)

class Trigger(SBase):
    """
    Implementation of SBML's Trigger construct for Event.

    An Event object defines when the event can occur, the variables that
    are affected by the event, and how the variables are affected.  The
    Trigger construct in SBML is used to define a mathematical expression
    that determines when an Event is triggered.

    A Trigger object in SBML Level 2 and Level 3 contains one subelement
    named 'math' containing a MathML expression.  The expression must
    evaluate to a value of type boolean.  The exact moment at which the
    expression evaluates to True is the time point when the Event is
    triggered.  In SBML Level 3, Trigger has additional attributes that
    must be assigned values; they are discussed in a separate section
    below.

    An event only triggers when its Trigger expression makes the
    transition in value from False to True.  The event will also trigger
    at any subsequent time points when the trigger makes this transition;
    in other words, an event can be triggered multiple times during a
    simulation if its trigger condition makes the transition from False to
    True more than once.  In SBML Level 3, the behavior at the very start
    of simulation (i.e., at t = 0, where t stands for time) is determined
    in part by the boolean flag 'initialValue'.  This and other additional
    features introduced in SBML Level 3 are discussed further below.

    Version differences
    ======================================================================

    SBML Level 3 Version 1 introduces two required attributes on the
    Trigger object: 'persistent' and 'initialValue'.  The rest of this
    introduction describes these two attributes.

    The 'persistent' attribute on Trigger
    ......................................................................

    In the interval between when an Event object triggers (i.e., its
    Trigger object expression transitions in value from False to True) and
    when its assignments are to be executed, conditions in the model may
    change such that the trigger expression transitions back from True to
    False.  Should the event's assignments still be made if this happens?
    Answering this question is the purpose of the 'persistent' attribute
    on Trigger.

    If the boolean attribute 'persistent' has a value of True, then once
    the event is triggered, all of its assignments are always performed
    when the time of execution is reached.  The name persistent is meant
    to evoke the idea that the trigger expression does not have to be re-
    checked after it triggers if 'persistent'=True.  Conversely, if the
    attribute value is False, then the trigger expression is not assumed
    to persist: if the expression transitions in value back to false at
    any time between when the event triggered and when it is to be
    executed, the event is no longer considered to have triggered and its
    assignments are not executed.  (If the trigger expression transitions
    once more to True after that point, then the event is triggered, but
    this then constitutes a whole new event trigger-and-execute sequence.)

    The 'persistent' attribute can be especially useful when Event objects
    contain Delay objects, but it is relevant even in a model without
    delays if the model contains two or more events.  As explained in the
    introduction to this section, the operation of all events in SBML
    (delayed or not) is conceptually divided into two phases, triggering
    and execution; however, unless events have priorities associated with
    them, SBML does not mandate a particular ordering of event execution
    in the case of simultaneous events.  Models with multiple events can
    lead to situations where the execution of one event affects another
    event's trigger expression value.  If that other event has
    'persistent'=False, and its trigger expression evaluates to False
    before it is to be executed, the event must not be executed after all.

    The 'initialValue' attribute on Trigger
    ......................................................................

    As mentioned above, an event triggers when the mathematical expression
    in its Trigger object transitions in value from False to True.  An
    unanswered question concerns what happens at the start of a
    simulation: can event triggers make this transition at t = 0, where t
    stands for time?

    In order to determine whether an event may trigger at t = 0, it is
    necessary to know what value the Trigger object's 'math' expression
    had immediately prior to t = 0.  This starting value of the trigger
    expression is determined by the value of the boolean attribute
    'initialValue'.  A value of True means the trigger expression is taken
    to have the value True immediately prior to t = 0.  In that case, the
    trigger cannot transition in value from False to true at the moment
    simulation begins (because it has the value True both before and after
    t = 0), and can only make the transition from False to True sometime
    after t = 0.  (To do that, it would also first have to transition to
    False before it could make the transition from False back to True.)
    Conversely, if 'initialValue'=False, then the trigger expression is
    assumed to start with the value False, and therefore may trigger at t
    = 0 if the expression evaluates to True at that moment.

    See also EventAssignment.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trigger, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Trigger, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Trigger
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Trigger
        __init__(self, SBMLNamespaces sbmlns) -> Trigger
        __init__(self, Trigger orig) -> Trigger

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Trigger(SBMLNamespaces sbmlns)

        Creates a new Trigger using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        @par <hr> Method variant with the following signature:

            Trigger(long level, long version)

        Creates a new Trigger using the given SBML 'level' and 'version'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Trigger

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Trigger

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        @par <hr> Method variant with the following signature:

            Trigger(Trigger orig)

        Copy constructor; creates a copy of this Trigger.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Trigger(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Trigger

        Creates and returns a deep copy of this Trigger.

        Returns a (deep) copy of this Trigger.

        """
        return _libsbml.Trigger_clone(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical formula for the trigger and return it as an AST.

        Returns the math of this Trigger.

        """
        return _libsbml.Trigger_getMath(self)

    def getInitialValue(self):
        """
        getInitialValue(self) -> bool

        (SBML Level 3 only) Get the value of the 'initialValue' attribute of
        this Trigger.

        Returns the boolean value stored as the 'initialValue' attribute value
        in this Trigger.

        Note:

        The attribute 'initialValue' is available in SBML Level 3 Version 1
        Core, but is not present in lower Levels of SBML.

        """
        return _libsbml.Trigger_getInitialValue(self)

    def getPersistent(self):
        """
        getPersistent(self) -> bool

        (SBML Level 3 only) Get the value of the 'persistent' attribute of
        this Trigger.

        Returns the boolean value stored as the 'persistent' attribute value
        in this Trigger.

        Note:

        The attribute 'persistent' is available in SBML Level 3 Version 1
        Core, but is not present in lower Levels of SBML.

        """
        return _libsbml.Trigger_getPersistent(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate to test whether the math for this trigger is set.

        Returns True if the formula (meaning the 'math' subelement) of this
        Trigger is set, False otherwise.

        """
        return _libsbml.Trigger_isSetMath(self)

    def isSetInitialValue(self):
        """
        isSetInitialValue(self) -> bool

        (SBML Level 3 only) Predicate to test whether the 'initialValue'
        attribute for this trigger is set.

        Returns True if the initialValue attribute of this Trigger is set,
        False otherwise.

        Note:

        The attribute 'initialValue' is available in SBML Level 3 Version 1
        Core, but is not present in lower Levels of SBML.

        """
        return _libsbml.Trigger_isSetInitialValue(self)

    def isSetPersistent(self):
        """
        isSetPersistent(self) -> bool

        (SBML Level 3 only) Predicate to test whether the 'persistent'
        attribute for this trigger is set.

        Returns True if the persistent attribute of this Trigger is set, False
        otherwise.

        Note:

        The attribute 'persistent' is available in SBML Level 3 Version 1
        Core, but is not present in lower Levels of SBML.

        """
        return _libsbml.Trigger_isSetPersistent(self)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the trigger expression of this Trigger instance to a copy of the
        given ASTNode.

        Parameter 'math' is an ASTNode representing a formula tree.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.Trigger_setMath(self, *args)

    def setInitialValue(self, *args):
        """
        setInitialValue(self, bool initialValue) -> int

        (SBML Level 3 only) Sets the 'initialValue' attribute of this Trigger
        instance.

        Parameter 'initialValue' is a boolean representing the initialValue to
        be set.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attribute 'initialValue' is available in SBML Level 3 Version 1
        Core, but is not present in lower Levels of SBML.

        """
        return _libsbml.Trigger_setInitialValue(self, *args)

    def setPersistent(self, *args):
        """
        setPersistent(self, bool persistent) -> int

        (SBML Level 3 only) Sets the 'persistent' attribute of this Trigger
        instance.

        Parameter 'persistent' is a boolean representing the persistent value
        to be set.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        Note:

        The attribute 'persistent' is available in SBML Level 3 Version 1
        Core, but is not present in lower Levels of SBML.

        """
        return _libsbml.Trigger_setPersistent(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_TRIGGER
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Trigger_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Trigger, is
        always 'trigger'.

        Returns the name of this element, i.e., 'trigger'.

        """
        return _libsbml.Trigger_getElementName(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Trigger_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Trigger_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.Trigger_replaceSIDWithFunction(self, *args)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this Trigger
        object have been set.

        Note:

        The required elements for a Trigger object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.Trigger_hasRequiredElements(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        Trigger object have been set.

        The required attributes for a Trigger object are:

           * 'persistent' (required in SBML Level 3)

           * 'initialValue' (required in SBML Level 3)

        Returns a boolean value indicating whether all the required attributes
        for this object have been defined.

        """
        return _libsbml.Trigger_hasRequiredAttributes(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this Trigger's Event parent and calls unsetTrigger() on it,
        indirectly deleting itself.  Overridden from the SBase function since
        the parent is not a ListOf.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Trigger_removeFromParentAndDelete(self)

Trigger_swigregister = _libsbml.Trigger_swigregister
Trigger_swigregister(Trigger)

class Delay(SBase):
    """
    Implementation of SBML's Delay construct for Event.

    An Event object defines when the event can occur, the variables that
    are affected by the event, and how the variables are affected.  The
    effect of the event can optionally be delayed after the occurrence of
    the condition which invokes it.  An event delay is defined using an
    object of class Delay.

    The object class Delay is derived from SBase and adds a single
    subelement called 'math'.  This subelement is used to hold MathML
    content.  The mathematical formula represented by 'math' must evaluate
    to a numerical value.  It is used as the length of time between when
    the event is triggered and when the event's assignments are actually
    executed.  If no delay is present on a given Event, a time delay of
    zero is assumed.

    The expression in 'math' must be evaluated at the time the event is
    triggered.  The expression must always evaluate to a nonnegative
    number (otherwise, a nonsensical situation could arise where an event
    is defined to execute before it is triggered!).

    The units of the mathematical expression in a Delay
    ======================================================================

    In SBML Level 2 versions before Version 4, the units of the numerical
    value computed by the Delay's 'math' expression are required to be in
    units of time, or the model is considered to have a unit consistency
    error.  In Level 2 Version 4 as well as SBML Level 3 Version 1 Core,
    this requirement is relaxed; these specifications only stipulate that
    the units of the numerical value computed by a Delay instance's 'math'
    expression should match the model's units of time (meaning the
    definition of the time units in the model).  LibSBML respects these
    requirements, and depending on whether an earlier Version of SBML
    Level 2 is in use, libSBML may or may not flag unit inconsistencies as
    errors or merely warnings.

    Note that units are not predefined or assumed for the contents of
    'math' in a Delay object; rather, they must be defined explicitly for
    each instance of a Delay object in a model.  This is an important
    point to bear in mind when literal numbers are used in delay
    expressions.  For example, the following Event instance would result
    in a warning logged by SBMLDocument.checkConsistency() about the fact
    that libSBML cannot verify the consistency of the units of the
    expression.  The reason is that the formula inside the 'math' element
    does not have any declared units, whereas what is expected in this
    context is units of time:

      <model>
          ...
          <listOfEvents>
              <event useValuesFromTriggerTime='true'>
                  ...
                  <delay>
                      <math xmlns='http://www.w3.org/1998/Math/MathML'>
                          <cn> 1 </cn>
                      </math>
                  </delay>
                  ...
              </event>
          </listOfEvents>
          ...
      </model>

    The <cn> 1 </cn> within the mathematical formula of the delay above
    has no units declared.  To make the expression have the needed units
    of time, literal numbers should be avoided in favor of defining
    Parameter objects for each quantity, and declaring units for the
    Parameter values.  The following fragment of SBML illustrates this
    approach:

      <model>
          ...
          <listOfParameters>
              <parameter id='transcriptionDelay' value='10' units='second'/>
          </listOfParameters>
          ...
          <listOfEvents>
              <event useValuesFromTriggerTime='true'>
                  ...
                  <delay>
                      <math xmlns='http://www.w3.org/1998/Math/MathML'>
                          <ci> transcriptionDelay </ci>
                      </math>
                  </delay>
                  ...
              </event>
          </listOfEvents>
          ...
      </model>

    In SBML Level 3, an alternative approach is available in the form of
    the units attribute, which SBML Level 3 allows to appear on MathML cn
    elements.  The value of this attribute can be used to indicate the
    unit of measurement to be associated with the number in the content of
    a cn element.  The attribute is named units but, because it appears
    inside MathML element (which is in the XML namespace for MathML and
    not the namespace for SBML), it must always be prefixed with an XML
    namespace prefix for the SBML Level 3 Version 1 namespace.  The
    following is an example of this approach:

      <model timeUnits='second' ...>
          ...
          <listOfEvents>
              <event useValuesFromTriggerTime='true'>
                  ...
                  <delay>
                      <math xmlns='http://www.w3.org/1998/Math/MathML'
                            xmlns:sbml='http://www.sbml.org/sbml/level3/version1/core'>
                          <cn sbml:units='second'> 10 </cn>
                      </math>
                  </delay>
                  ...
              </event>
          </listOfEvents>
          ...
      </model>

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Delay, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Delay, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Delay
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Delay
        __init__(self, SBMLNamespaces sbmlns) -> Delay
        __init__(self, Delay orig) -> Delay

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Delay(SBMLNamespaces sbmlns)

        Creates a new Delay using the given SBMLNamespaces object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Delay(long level, long version)

        Creates a new Delay using the given SBML 'level' and 'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Delay

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Delay

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            Delay(Delay orig)

        Copy constructor; creates a copy of this Delay.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Delay(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Delay

        Creates and returns a deep copy of this Delay.

        Returns a (deep) copy of this Delay.

        """
        return _libsbml.Delay_clone(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical formula for the delay and return it as an AST.

        Returns the math of this Delay.

        """
        return _libsbml.Delay_getMath(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate to test whether the formula for this delay is set.

        Returns True if the formula (meaning the math subelement) of this
        Delay is set, False otherwise.

        """
        return _libsbml.Delay_isSetMath(self)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the delay expression of this Delay instance to a copy of the
        given ASTNode.

        Parameter 'math' is an ASTNode representing a formula tree.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.Delay_setMath(self, *args)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Calculates and returns a UnitDefinition that expresses the units of
        measurement assumed for the 'math' expression of this Delay.

        @par Delay elements in SBML express a time delay for an Event.
        Beginning with SBML Level 2 Version 2, the units of that time are
        calculated based on the mathematical expression and the model
        quantities referenced by <ci> elements used within that expression.
        (In SBML Level  2 Version 1, there exists an attribute on Event called
        'timeUnits'.  This attribute can be used to set the units of the Delay
        expression explicitly.)  The method Delay.getDerivedUnitDefinition()
        returns what libSBML computes the units to be, to the extent that
        libSBML can compute them.

        Note:

        The functionality that facilitates unit analysis depends on the model
        as a whole.  Thus, in cases where the object has not been added to a
        model or the model itself is incomplete, unit analysis is not possible
        and this method will return None.

        WARNING:

        Note that it is possible the 'math' expression in the Delay contains
        literal numbers or parameters with undeclared units.  In those cases,
        it is not possible to calculate the units of the overall expression
        without making assumptions.  LibSBML does not make assumptions about
        the units, and Delay.getDerivedUnitDefinition() only returns the units
        as far as it is able to determine them.  For example, in an expression
        X + Y, if X has unambiguously-defined units and Y does not, it will
        return the units of X.  When using this method, it is critical that
        callers also invoke the method Delay.containsUndeclaredUnits() to
        determine whether this situation holds.  Callers should take suitable
        action in those situations.

        Returns a UnitDefinition that expresses the units of the math
        expression of this Delay, or None if one cannot be constructed.

        See also containsUndeclaredUnits().

        """
        return _libsbml.Delay_getDerivedUnitDefinition(self, *args)

    def containsUndeclaredUnits(self, *args):
        """
        containsUndeclaredUnits(self) -> bool
        containsUndeclaredUnits(self) -> bool

        Predicate returning True if the 'math' expression in this Delay
        instance contains parameters with undeclared units or literal numbers.

        @par Delay elements in SBML express a time delay for an Event.
        Beginning with SBML Level 2 Version 2, the units of that time are
        calculated based on the mathematical expression and the model
        quantities referenced by <ci> elements used within that expression.
        (In SBML Level  2 Version 1, there exists an attribute on Event called
        'timeUnits'.  This attribute can be used to set the units of the Delay
        expression explicitly.)  The method Delay.getDerivedUnitDefinition()
        returns what libSBML computes the units to be, to the extent that
        libSBML can compute them.

        If the expression contains literal numbers or parameters with
        undeclared units, libSBML may not be able to compute the full units of
        the expression and will only return what it can compute.  Callers
        should always use Delay.containsUndeclaredUnits() when using
        Delay.getDerivedUnitDefinition() to decide whether the returned units
        may be incomplete.

        Returns True if the math expression of this Delay includes
        numbers/parameters with undeclared units, False otherwise.

        Note:

        A return value of True indicates that the UnitDefinition returned by
        Delay.getDerivedUnitDefinition() may not accurately represent the
        units of the expression.

        See also getDerivedUnitDefinition().

        """
        return _libsbml.Delay_containsUndeclaredUnits(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_DELAY
        (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Delay_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Delay, is
        always 'delay'.

        Returns the name of this element, i.e., 'delay'.

        See also getTypeCode().

        """
        return _libsbml.Delay_getElementName(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this Delay
        object have been set.

        Note:

        The required elements for a Delay object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.Delay_hasRequiredElements(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this Delay's Event parent and calls unsetDelay() on it,
        indirectly deleting itself.

        Overridden from the SBase function since the parent is not a ListOf.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Delay_removeFromParentAndDelete(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Delay_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Delay_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.Delay_replaceSIDWithFunction(self, *args)

Delay_swigregister = _libsbml.Delay_swigregister
Delay_swigregister(Delay)

class Priority(SBase):
    """
    Implementation of SBML Level 3's Priority construct for Event.

    The Priority object class (which was introduced in SBML Level 3
    Version 1), like Delay, is derived from SBase and contains a MathML
    formula stored in the element 'math'.  This formula is used to compute
    a dimensionless numerical value that influences the order in which a
    simulator is to perform the assignments of two or more events that
    happen to be executed simultaneously.  The formula may evaluate to any
    double value (and thus may be a positive or negative number, or zero),
    with positive numbers taken to signifying a higher priority than zero
    or negative numbers.  If no Priority object is present on a given
    Event object, no priority is defined for that event.

    The interpretation of priorities on events in a model
    ======================================================================

    For the purposes of SBML, simultaneous event execution is defined as
    the situation in which multiple events have identical times of
    execution.  The time of execution is calculated as the sum of the time
    at which a given event's Trigger is triggered plus its Delay duration,
    if any.  Here, identical times means mathematically equal instants in
    time.  (In practice, simulation software adhering to this
    specification may have to rely on numerical equality instead of strict
    mathematical equality; robust models will ensure that this difference
    will not cause significant discrepancies from expected behavior.)

    If no Priority subobjects are defined for two or more Event objects,
    then those events are still executed simultaneously but their order of
    execution is undefined by the SBML Level 3 Version 1 specification.  A
    software implementation may choose to execute such simultaneous events
    in any order, as long as each event is executed only once and the
    requirements of checking the 'persistent' attribute (and acting
    accordingly) are satisfied.

    If Priority subobjects are defined for two or more simultaneously-
    triggered events, the order in which those particular events must be
    executed is dictated by their Priority objects, as follows.  If the
    values calculated using the two Priority objects' 'math' expressions
    differ, then the event having the higher priority value must be
    executed before the event with the lower value.  If, instead, the two
    priority values are mathematically equal, then the two events must be
    triggered in a random order.  It is important to note that a random
    order is not the same as an undefined order: given multiple runs of
    the same model with identical conditions, an undefined ordering would
    permit a system to execute the events in (for example) the same order
    every time (according to whatever scheme may have been implemented by
    the system), whereas the explicit requirement for random ordering
    means that the order of execution in different simulation runs depends
    on random chance.  In other words, given two events A and B, a
    randomly-determined order must lead to an equal chance of executing A
    first or B first, every time those two events are executed
    simultaneously.

    A model may contain a mixture of events, some of which have Priority
    subobjects and some do not.  Should a combination of simultaneous
    events arise in which some events have priorities defined and others
    do not, the set of events with defined priorities must trigger in the
    order determined by their Priority objects, and the set of events
    without Priority objects must be executed in an undefined order with
    respect to each other and with respect to the events with Priority
    subobjects.  (Note that undefined order does not necessarily mean
    random order, although a random ordering would be a valid
    implementation of this requirement.)

    The following example may help further clarify these points. Suppose a
    model contains four events that should be executed simultaneously,
    with two of the events having Priority objects with the same value and
    the other two events having Priority objects with the same, but
    different, value.  The two events with the higher priorities must be
    executed first, in a random order with respect to each other, and the
    remaining two events must be executed after them, again in a random
    order, for a total of four possible and equally-likely event
    executions: A-B-C-D, A-B-D-C, B-A-C-D, and B-A-D-C.  If, instead, the
    model contains four events all having the same Priority values, there
    are 4! or 24 possible orderings, each of which must be equally likely
    to be chosen.  Finally, if none of the four events has a Priority
    subobject defined, or even if exactly one of the four events has a
    defined Priority, there are again 24 possible orderings, but the
    likelihood of choosing any particular ordering is undefined; the
    simulator can choose between events as it wishes.  (The SBML
    specification only defines the effects of priorities on Event objects
    with respect to other Event objects with priorities.  Putting a
    priority on a single Event object in a model does not cause it to fall
    within that scope.)

    Evaluation of Priority expressions
    ======================================================================

    An event's Priority object 'math' expression must be evaluated at the
    time the Event is to be executed.  During a simulation, all
    simultaneous events have their Priority values calculated, and the
    event with the highest priority is selected for next execution.  Note
    that it is possible for the execution of one Event object to cause the
    Priority value of another simultaneously-executing Event object to
    change (as well as to trigger other events, as already noted).  Thus,
    after executing one event, and checking whether any other events in
    the model have been triggered, all remaining simultaneous events that
    either (i) have Trigger objects with attributes 'persistent'=False or
    (ii) have Trigger expressions that did not transition from True to
    False, must have their Priority expression reevaluated. The highest-
    priority remaining event must then be selected for  execution next.

    Units of Priority object's mathematical expressions
    ======================================================================

    The unit associated with the value of a Priority object's 'math'
    expression should be dimensionless.  This is because the priority
    expression only serves to provide a relative ordering between
    different events, and only has meaning with respect to other Priority
    object expressions.  The value of Priority objects is not comparable
    to any other kind of object in an SBML model.

    Note:

    The Priority construct exists only in SBML Level 3; it cannot be used
    in SBML Level 2 or Level 1 models.

    See also EventAssignment.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Priority, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Priority, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Priority
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> Priority
        __init__(self, SBMLNamespaces sbmlns) -> Priority
        __init__(self, Priority orig) -> Priority

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Priority(SBMLNamespaces sbmlns)

        Creates a new Priority object using the given SBMLNamespaces object
        'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:   Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        Note:

        The Priority construct exists only in SBML Level 3; it cannot be used
        in SBML Level 2 or Level 1 models.

        @par <hr> Method variant with the following signature:

            Priority(long level, long version)

        Creates a new Priority object using the given SBML 'level' and
        'version' values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Priority

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Priority

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        Note:

        The Priority construct exists only in SBML Level 3; it cannot be used
        in SBML Level 2 or Level 1 models.

         @par <hr> Method variant with the following signature:

            Priority(Priority orig)

        Copy constructor; creates a copy of this Priority.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Priority(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Priority

        Creates and returns a deep copy of this Priority.

        Returns a (deep) copy of this Priority.

        """
        return _libsbml.Priority_clone(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Get the mathematical formula for the priority and return it as an AST.

        Returns the math of this Priority.

        """
        return _libsbml.Priority_getMath(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate to test whether the formula for this delay is set.

        Returns True if the formula (meaning the math subelement) of this
        Priority is set, False otherwise.

        """
        return _libsbml.Priority_isSetMath(self)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the math expression of this Priority instance to a copy of the
        given ASTNode.

        Parameter 'math' is an ASTNode representing a formula tree.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.Priority_setMath(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_PRIORITY
        (default).
        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Priority_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Priority, is
        always 'priority'.

        Returns the name of this element, i.e., 'priority'.

        See also getTypeCode().

        """
        return _libsbml.Priority_getElementName(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        Priority object have been set.

        Note:

        The required elements for a Priority object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.Priority_hasRequiredElements(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this Priority's Event parent and calls unsetPriority() on it,
        indirectly deleting itself.

        Overridden from the SBase function since the parent is not a ListOf.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Priority_removeFromParentAndDelete(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Priority_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Priority_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.Priority_replaceSIDWithFunction(self, *args)

Priority_swigregister = _libsbml.Priority_swigregister
Priority_swigregister(Priority)

class SBO(_object):
    """
    Methods for interacting with Systems Biology Ontology terms.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The values of 'id' attributes on SBML components allow the components
    to be cross-referenced within a model. The values of 'name' attributes
    on SBML components provide the opportunity to assign them meaningful
    labels suitable for display to humans.  The specific identifiers and
    labels used in a model necessarily must be unrestricted by SBML, so
    that software and users are free to pick whatever they need.  However,
    this freedom makes it more difficult for software tools to determine,
    without additional human intervention, the semantics of models more
    precisely than the semantics provided by the SBML object classes
    defined in other sections of this document.  For example, there is
    nothing inherent in a parameter with identifier k that would indicate
    to a software tool it is a first-order rate constant (if that's what k
    happened to be in some given model).  However, one may need to convert
    a model between different representations (e.g., Henri-Michaelis-
    Menten versus elementary steps), or to use it with different modeling
    approaches (discrete or continuous).  One may also need to relate the
    model components with other description formats such as SBGN
    (http://www.sbgn.org/) using deeper semantics.  Although an advanced
    software tool might be able to deduce the semantics of some model
    components through detailed analysis of the kinetic rate expressions
    and other parts of the model, this quickly becomes infeasible for any
    but the simplest of models.

    An approach to solving this problem is to associate model components
    with terms from carefully curated controlled vocabularies (CVs).  This
    is the purpose of the optional 'sboTerm' attribute provided on the
    SBML class SBase.  The 'sboTerm' attribute always refers to terms
    belonging to the Systems Biology Ontology (SBO).

    Use of SBO
    ======================================================================

    Labeling model components with terms from shared controlled
    vocabularies allows a software tool to identify each component using
    identifiers that are not tool-specific.  An example of where this is
    useful is the desire by many software developers to provide users with
    meaningful names for reaction rate equations.  Software tools with
    editing interfaces frequently provide these names in menus or lists of
    choices for users. However, without a standardized set of names or
    identifiers shared between developers, a given software package cannot
    reliably interpret the names or identifiers of reactions used in
    models written by other tools.

    The first solution that might come to mind is to stipulate that
    certain common reactions always have the same name (e.g., 'Michaelis-
    Menten'), but this is simply impossible to do: not only do humans
    often disagree on the names themselves, but it would not allow for
    correction of errors or updates to the list of predefined names except
    by issuing new releases of the SBML specification -- to say nothing of
    many other limitations with this approach.  Moreover, the parameters
    and variables that appear in rate expressions also need to be
    identified in a way that software tools can interpret mechanically,
    implying that the names of these entities would also need to be
    regulated.

    The Systems Biology Ontology (SBO) provides terms for identifying most
    elements of SBML. The relationship implied by an 'sboTerm' on an SBML
    model component is is-a between the characteristic of the component
    meant to be described by SBO on this element and the SBO term
    identified by the value of the 'sboTerm'. By adding SBO term
    references on the components of a model, a software tool can provide
    additional details using independent, shared vocabularies that can
    enable other software tools to recognize precisely what the component
    is meant to be.  Those tools can then act on that information. For
    example, if the SBO identifier 'SBO:0000049' is assigned to the
    concept of 'first-order irreversible mass-action kinetics, continuous
    framework', and a given KineticLaw object in a model has an 'sboTerm'
    attribute with this value, then regardless of the identifier and name
    given to the reaction itself, a software tool could use this to inform
    users that the reaction is a first-order irreversible mass-action
    reaction.  This kind of reverse engineering of the meaning of
    reactions in a model would be difficult to do otherwise, especially
    for more complex reaction types.

    The presence of SBO labels on Compartment, Species, and Reaction
    objects in SBML can help map those entities to equivalent concepts in
    other standards, such as (but not limited to) BioPAX
    (http://www.biopax.org/), PSI-MI (http://www.psidev.info), or the
    Systems Biology Graphical Notation (SBGN, http://www.sbgn.org/).  Such
    mappings can be used in conversion procedures, or to build interfaces,
    with SBO becoming a kind of 'glue' between standards of
    representation.

    The presence of the label on a kinetic expression can also allow
    software tools to make more intelligent decisions about reaction rate
    expressions.  For example, an application could recognize certain
    types of reaction formulas as being ones it knows how to solve with
    optimized procedures.  The application could then use internal,
    optimized code implementing the rate formula indexed by identifiers
    such as 'SBO:0000049' appearing in SBML models.

    Finally, SBO labels may be very valuable when it comes to model
    integration, by helping identify interfaces, convert mathematical
    expressions and parameters etc.

    Although the use of SBO can be beneficial, it is critical to keep in
    mind that the presence of an 'sboTerm' value on an object must not
    change the fundamental mathematical meaning of the model.  An SBML
    model must be defined such that it stands on its own and does not
    depend on additional information added by SBO terms for a correct
    mathematical interpretation.  SBO term definitions will not imply any
    alternative mathematical semantics for any SBML object labeled with
    that term.  Two important reasons motivate this principle.  First, it
    would be too limiting to require all software tools to be able to
    understand the SBO vocabularies in addition to understanding SBML.
    Supporting SBO is not only additional work for the software developer;
    for some kinds of applications, it may not make sense.  If SBO terms
    on a model are optional, it follows that the SBML model must remain
    unambiguous and fully interpretable without them, because an
    application reading the model may ignore the terms.  Second, we
    believe allowing the use of 'sboTerm' to alter the mathematical
    meaning of a model would allow too much leeway to shoehorn
    inconsistent concepts into SBML objects, ultimately reducing the
    interoperability of the models.

    Relationships between SBO and SBML
    ======================================================================

    The goal of SBO labeling for SBML is to clarify to the fullest extent
    possible the nature of each element in a model.  The approach taken in
    SBO begins with a hierarchically-structured set of controlled
    vocabularies with six main divisions: (1) entity, (2) participant
    role, (3) quantitative parameter, (4) modeling framework, (5)
    mathematical expression, and (6) interaction.  The web site for SBO
    (http://biomodels.net) should be consulted for the current version of
    the ontology.

    The Systems Biology Ontology (SBO) is not part of SBML; it is being
    developed separately, to allow the modeling community to evolve the
    ontology independently of SBML.  However, the terms in the ontology
    are being designed keeping SBML components in mind, and are classified
    into subsets that can be directly related with SBML components such as
    reaction rate expressions, parameters, and others.  The use of
    'sboTerm' attributes is optional, and the presence of 'sboTerm' on an
    element does not change the way the model is interpreted.  Annotating
    SBML elements with SBO terms adds additional semantic information that
    may be used to convert the model into another model, or another
    format.  Although SBO support provides an important source of
    information to understand the meaning of a model, software does not
    need to support 'sboTerm' to be considered SBML-compliant.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBO, name)
    __repr__ = _swig_repr
    def isQuantitativeParameter(*args):
        """
        isQuantitativeParameter(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'quantiative parameter', False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isQuantitativeParameter(*args)

    if _newclass:isQuantitativeParameter = staticmethod(isQuantitativeParameter)
    __swig_getmethods__["isQuantitativeParameter"] = lambda x: isQuantitativeParameter
    def isParticipantRole(*args):
        """
        isParticipantRole(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'participant role', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isParticipantRole(*args)

    if _newclass:isParticipantRole = staticmethod(isParticipantRole)
    __swig_getmethods__["isParticipantRole"] = lambda x: isParticipantRole
    def isModellingFramework(*args):
        """
        isModellingFramework(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'modeling framework', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isModellingFramework(*args)

    if _newclass:isModellingFramework = staticmethod(isModellingFramework)
    __swig_getmethods__["isModellingFramework"] = lambda x: isModellingFramework
    def isMathematicalExpression(*args):
        """
        isMathematicalExpression(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'mathematical expression', False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isMathematicalExpression(*args)

    if _newclass:isMathematicalExpression = staticmethod(isMathematicalExpression)
    __swig_getmethods__["isMathematicalExpression"] = lambda x: isMathematicalExpression
    def isKineticConstant(*args):
        """
        isKineticConstant(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'kinetic constant', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isKineticConstant(*args)

    if _newclass:isKineticConstant = staticmethod(isKineticConstant)
    __swig_getmethods__["isKineticConstant"] = lambda x: isKineticConstant
    def isReactant(*args):
        """
        isReactant(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'reactant', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isReactant(*args)

    if _newclass:isReactant = staticmethod(isReactant)
    __swig_getmethods__["isReactant"] = lambda x: isReactant
    def isProduct(*args):
        """
        isProduct(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'product', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isProduct(*args)

    if _newclass:isProduct = staticmethod(isProduct)
    __swig_getmethods__["isProduct"] = lambda x: isProduct
    def isModifier(*args):
        """
        isModifier(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'modifier', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isModifier(*args)

    if _newclass:isModifier = staticmethod(isModifier)
    __swig_getmethods__["isModifier"] = lambda x: isModifier
    def isRateLaw(*args):
        """
        isRateLaw(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'rate law', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isRateLaw(*args)

    if _newclass:isRateLaw = staticmethod(isRateLaw)
    __swig_getmethods__["isRateLaw"] = lambda x: isRateLaw
    def isEvent(*args):
        """
        isEvent(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'event', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isEvent(*args)

    if _newclass:isEvent = staticmethod(isEvent)
    __swig_getmethods__["isEvent"] = lambda x: isEvent
    def isPhysicalParticipant(*args):
        """
        isPhysicalParticipant(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'physical participant, False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isPhysicalParticipant(*args)

    if _newclass:isPhysicalParticipant = staticmethod(isPhysicalParticipant)
    __swig_getmethods__["isPhysicalParticipant"] = lambda x: isPhysicalParticipant
    def isParticipant(*args):
        """
        isParticipant(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'participant', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isParticipant(*args)

    if _newclass:isParticipant = staticmethod(isParticipant)
    __swig_getmethods__["isParticipant"] = lambda x: isParticipant
    def isInteraction(*args):
        """
        isInteraction(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'interaction', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isInteraction(*args)

    if _newclass:isInteraction = staticmethod(isInteraction)
    __swig_getmethods__["isInteraction"] = lambda x: isInteraction
    def isEntity(*args):
        """
        isEntity(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'entity', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isEntity(*args)

    if _newclass:isEntity = staticmethod(isEntity)
    __swig_getmethods__["isEntity"] = lambda x: isEntity
    def isFunctionalEntity(*args):
        """
        isFunctionalEntity(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'functional entity', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isFunctionalEntity(*args)

    if _newclass:isFunctionalEntity = staticmethod(isFunctionalEntity)
    __swig_getmethods__["isFunctionalEntity"] = lambda x: isFunctionalEntity
    def isMaterialEntity(*args):
        """
        isMaterialEntity(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'material entity', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isMaterialEntity(*args)

    if _newclass:isMaterialEntity = staticmethod(isMaterialEntity)
    __swig_getmethods__["isMaterialEntity"] = lambda x: isMaterialEntity
    def isConservationLaw(*args):
        """
        isConservationLaw(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'conservation law', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isConservationLaw(*args)

    if _newclass:isConservationLaw = staticmethod(isConservationLaw)
    __swig_getmethods__["isConservationLaw"] = lambda x: isConservationLaw
    def isSteadyStateExpression(*args):
        """
        isSteadyStateExpression(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'steady state expression', False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isSteadyStateExpression(*args)

    if _newclass:isSteadyStateExpression = staticmethod(isSteadyStateExpression)
    __swig_getmethods__["isSteadyStateExpression"] = lambda x: isSteadyStateExpression
    def isFunctionalCompartment(*args):
        """
        isFunctionalCompartment(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'functional compartment', False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isFunctionalCompartment(*args)

    if _newclass:isFunctionalCompartment = staticmethod(isFunctionalCompartment)
    __swig_getmethods__["isFunctionalCompartment"] = lambda x: isFunctionalCompartment
    def isContinuousFramework(*args):
        """
        isContinuousFramework(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'continuous framework', False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isContinuousFramework(*args)

    if _newclass:isContinuousFramework = staticmethod(isContinuousFramework)
    __swig_getmethods__["isContinuousFramework"] = lambda x: isContinuousFramework
    def isDiscreteFramework(*args):
        """
        isDiscreteFramework(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'discrete framework', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isDiscreteFramework(*args)

    if _newclass:isDiscreteFramework = staticmethod(isDiscreteFramework)
    __swig_getmethods__["isDiscreteFramework"] = lambda x: isDiscreteFramework
    def isLogicalFramework(*args):
        """
        isLogicalFramework(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'logical framework', False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isLogicalFramework(*args)

    if _newclass:isLogicalFramework = staticmethod(isLogicalFramework)
    __swig_getmethods__["isLogicalFramework"] = lambda x: isLogicalFramework
    def isMetadataRepresentation(*args):
        """
        isMetadataRepresentation(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'metadata representation', False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isMetadataRepresentation(*args)

    if _newclass:isMetadataRepresentation = staticmethod(isMetadataRepresentation)
    __swig_getmethods__["isMetadataRepresentation"] = lambda x: isMetadataRepresentation
    def isOccurringEntityRepresentation(*args):
        """
        isOccurringEntityRepresentation(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'occurring entity representation',
        False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isOccurringEntityRepresentation(*args)

    if _newclass:isOccurringEntityRepresentation = staticmethod(isOccurringEntityRepresentation)
    __swig_getmethods__["isOccurringEntityRepresentation"] = lambda x: isOccurringEntityRepresentation
    def isPhysicalEntityRepresentation(*args):
        """
        isPhysicalEntityRepresentation(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'physical entity representation',
        False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isPhysicalEntityRepresentation(*args)

    if _newclass:isPhysicalEntityRepresentation = staticmethod(isPhysicalEntityRepresentation)
    __swig_getmethods__["isPhysicalEntityRepresentation"] = lambda x: isPhysicalEntityRepresentation
    def isSystemsDescriptionParameter(*args):
        """
        isSystemsDescriptionParameter(unsigned int term) -> bool

        Returns True if the given term identifier comes from the stated branch
        of SBO.

        Returns True if 'term' is-a SBO 'systems description parameter', False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isSystemsDescriptionParameter(*args)

    if _newclass:isSystemsDescriptionParameter = staticmethod(isSystemsDescriptionParameter)
    __swig_getmethods__["isSystemsDescriptionParameter"] = lambda x: isSystemsDescriptionParameter
    def isObselete(*args):
        """
        isObselete(unsigned int term) -> bool

        Predicate for checking whether the given term is obsolete.

        Returns True if 'term' is-a SBO 'obsolete' term, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_isObselete(*args)

    if _newclass:isObselete = staticmethod(isObselete)
    __swig_getmethods__["isObselete"] = lambda x: isObselete
    def intToString(*args):
        """
        intToString(int sboTerm) -> string

        Returns the integer as a correctly formatted SBO identifier string.

        Returns the given integer sboTerm as a zero-padded seven digit string.

        Note:

        If the sboTerm is not in the correct range (0000000-9999999), an empty
        string is returned.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_intToString(*args)

    if _newclass:intToString = staticmethod(intToString)
    __swig_getmethods__["intToString"] = lambda x: intToString
    def stringToInt(*args):
        """
        stringToInt(string sboTerm) -> int

        Returns the string as a correctly formatted SBO integer portion.

        Returns the given string sboTerm as an integer.  If the sboTerm is not
        in the correct format (a zero-padded, seven digit string), -1 is
        returned.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_stringToInt(*args)

    if _newclass:stringToInt = staticmethod(stringToInt)
    __swig_getmethods__["stringToInt"] = lambda x: stringToInt
    def checkTerm(*args):
        """
        checkTerm(string sboTerm) -> bool
        checkTerm(int sboTerm) -> bool

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            checkTerm(string sboTerm)

        Checks the format of the given SBO identifier string.

        Returns True if sboTerm is in the correct format (a zero-padded, seven
        digit string), False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @par <hr> Method variant with the following signature:

            checkTerm(int sboTerm)

        Checks the format of the given SBO identifier, given in the form of
        the integer portion alone.

        Returns True if sboTerm is in the range (0000000-9999999), False
        otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBO_checkTerm(*args)

    if _newclass:checkTerm = staticmethod(checkTerm)
    __swig_getmethods__["checkTerm"] = lambda x: checkTerm
    def __init__(self): 
        """__init__(self) -> SBO"""
        this = _libsbml.new_SBO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBO
    __del__ = lambda self : None;
SBO_swigregister = _libsbml.SBO_swigregister
SBO_swigregister(SBO)

def SBO_isQuantitativeParameter(*args):
  """
    SBO_isQuantitativeParameter(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'quantiative parameter', False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isQuantitativeParameter(*args)

def SBO_isParticipantRole(*args):
  """
    SBO_isParticipantRole(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'participant role', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isParticipantRole(*args)

def SBO_isModellingFramework(*args):
  """
    SBO_isModellingFramework(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'modeling framework', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isModellingFramework(*args)

def SBO_isMathematicalExpression(*args):
  """
    SBO_isMathematicalExpression(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'mathematical expression', False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isMathematicalExpression(*args)

def SBO_isKineticConstant(*args):
  """
    SBO_isKineticConstant(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'kinetic constant', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isKineticConstant(*args)

def SBO_isReactant(*args):
  """
    SBO_isReactant(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'reactant', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isReactant(*args)

def SBO_isProduct(*args):
  """
    SBO_isProduct(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'product', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isProduct(*args)

def SBO_isModifier(*args):
  """
    SBO_isModifier(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'modifier', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isModifier(*args)

def SBO_isRateLaw(*args):
  """
    SBO_isRateLaw(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'rate law', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isRateLaw(*args)

def SBO_isEvent(*args):
  """
    SBO_isEvent(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'event', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isEvent(*args)

def SBO_isPhysicalParticipant(*args):
  """
    SBO_isPhysicalParticipant(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'physical participant, False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isPhysicalParticipant(*args)

def SBO_isParticipant(*args):
  """
    SBO_isParticipant(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'participant', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isParticipant(*args)

def SBO_isInteraction(*args):
  """
    SBO_isInteraction(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'interaction', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isInteraction(*args)

def SBO_isEntity(*args):
  """
    SBO_isEntity(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'entity', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isEntity(*args)

def SBO_isFunctionalEntity(*args):
  """
    SBO_isFunctionalEntity(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'functional entity', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isFunctionalEntity(*args)

def SBO_isMaterialEntity(*args):
  """
    SBO_isMaterialEntity(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'material entity', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isMaterialEntity(*args)

def SBO_isConservationLaw(*args):
  """
    SBO_isConservationLaw(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'conservation law', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isConservationLaw(*args)

def SBO_isSteadyStateExpression(*args):
  """
    SBO_isSteadyStateExpression(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'steady state expression', False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isSteadyStateExpression(*args)

def SBO_isFunctionalCompartment(*args):
  """
    SBO_isFunctionalCompartment(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'functional compartment', False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isFunctionalCompartment(*args)

def SBO_isContinuousFramework(*args):
  """
    SBO_isContinuousFramework(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'continuous framework', False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isContinuousFramework(*args)

def SBO_isDiscreteFramework(*args):
  """
    SBO_isDiscreteFramework(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'discrete framework', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isDiscreteFramework(*args)

def SBO_isLogicalFramework(*args):
  """
    SBO_isLogicalFramework(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'logical framework', False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isLogicalFramework(*args)

def SBO_isMetadataRepresentation(*args):
  """
    SBO_isMetadataRepresentation(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'metadata representation', False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isMetadataRepresentation(*args)

def SBO_isOccurringEntityRepresentation(*args):
  """
    SBO_isOccurringEntityRepresentation(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'occurring entity representation',
    False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isOccurringEntityRepresentation(*args)

def SBO_isPhysicalEntityRepresentation(*args):
  """
    SBO_isPhysicalEntityRepresentation(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'physical entity representation',
    False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isPhysicalEntityRepresentation(*args)

def SBO_isSystemsDescriptionParameter(*args):
  """
    SBO_isSystemsDescriptionParameter(unsigned int term) -> bool

    Returns True if the given term identifier comes from the stated branch
    of SBO.

    Returns True if 'term' is-a SBO 'systems description parameter', False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isSystemsDescriptionParameter(*args)

def SBO_isObselete(*args):
  """
    SBO_isObselete(unsigned int term) -> bool

    Predicate for checking whether the given term is obsolete.

    Returns True if 'term' is-a SBO 'obsolete' term, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_isObselete(*args)

def SBO_intToString(*args):
  """
    SBO_intToString(int sboTerm) -> string

    Returns the integer as a correctly formatted SBO identifier string.

    Returns the given integer sboTerm as a zero-padded seven digit string.

    Note:

    If the sboTerm is not in the correct range (0000000-9999999), an empty
    string is returned.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_intToString(*args)

def SBO_stringToInt(*args):
  """
    SBO_stringToInt(string sboTerm) -> int

    Returns the string as a correctly formatted SBO integer portion.

    Returns the given string sboTerm as an integer.  If the sboTerm is not
    in the correct format (a zero-padded, seven digit string), -1 is
    returned.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_stringToInt(*args)

def SBO_checkTerm(*args):
  """
    checkTerm(string sboTerm) -> bool
    SBO_checkTerm(int sboTerm) -> bool

    This method has multiple variants that differ in the arguments  they
    accept.  Each is described separately below.

    @par <hr> Method variant with the following signature:

        checkTerm(string sboTerm)

    Checks the format of the given SBO identifier string.

    Returns True if sboTerm is in the correct format (a zero-padded, seven
    digit string), False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @par <hr> Method variant with the following signature:

        checkTerm(int sboTerm)

    Checks the format of the given SBO identifier, given in the form of
    the integer portion alone.

    Returns True if sboTerm is in the range (0000000-9999999), False
    otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBO_checkTerm(*args)

class SyntaxChecker(_object):
    """
    Methods for checking syntax of SBML identifiers and other strings.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    This utility class provides static methods for checking the syntax of
    identifiers and other text used in an SBML model.  The methods allow
    callers to verify that strings such as SBML identifiers and XHTML
    notes text conform to the SBML specifications.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SyntaxChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SyntaxChecker, name)
    __repr__ = _swig_repr
    def isValidSBMLSId(*args):
        """
        isValidSBMLSId(string sid) -> bool

        Returns true True or False depending on whether the argument string
        conforms to the syntax of SBML identifiers.

        @par In SBML, identifiers that are the values of 'id' attributes on
        objects must conform to a data type called SId in the SBML
        specifications.  LibSBML does not provide an explicit SId data type;
        it uses ordinary character strings, which is easier for applications
        to support.  (LibSBML does, however, test for identifier validity at
        various times, such as when reading in models from files and data
        streams.)

        This method provides programs with the ability to test explicitly that
        the identifier strings they create conform to the SBML identifier
        syntax.

        Parameter 'sid' is string to be checked for conformance to SBML
        identifier syntax.

        Returns True if the string conforms to type SBML data type SId, False
        otherwise.

        @par SBML has strict requirements for the syntax of identifiers, that
        is, the values of the 'id' attribute present on most types of SBML
        objects. The following is a summary of the definition of the SBML
        identifier type  SId, which defines the permitted syntax of
        identifiers.  We express the syntax using an extended form of BNF
        notation:

          letter ::= 'a'..'z','A'..'Z'
          digit  ::= '0'..'9'
          idChar ::= letter | digit | '_'
          SId    ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * 'zero or
        more times', and the character | indicates logical 'or'.  The equality
        of SBML identifiers is determined by an exact character sequence
        match; i.e., comparisons must be performed in a case-sensitive manner.
        In addition, there are a few conditions for the uniqueness of
        identifiers in an SBML model.  Please consult the SBML specifications
        for the exact details of the uniqueness requirements.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SyntaxChecker.isValidUnitSId()  @see SyntaxChecker.isValidXMLID()

        """
        return _libsbml.SyntaxChecker_isValidSBMLSId(*args)

    if _newclass:isValidSBMLSId = staticmethod(isValidSBMLSId)
    __swig_getmethods__["isValidSBMLSId"] = lambda x: isValidSBMLSId
    def isValidXMLID(*args):
        """
        isValidXMLID(string id) -> bool

        Returns True or False depending on whether the argument string
        conforms to the XML data type ID.

        @par The optional attribute named 'metaid', present on every major
        SBML component type, is for supporting metadata annotations using RDF
        (Resource Description Format).  The attribute value has the data type
        XML ID, the XML identifier type, which means each 'metaid' value must
        be globally unique within an SBML file.  The latter point is
        important, because the uniqueness criterion applies across any
        attribute with type ID anywhere in the file, not just the 'metaid'
        attribute used by SBML -- something to be aware of if your
        application-specific XML content inside the 'annotation' subelement
        happens to use the XML ID type.  Although SBML itself specifies the
        use of XML ID only for the 'metaid' attribute, SBML-compatible
        applications should be careful if they use XML ID's in XML portions of
        a model that are not defined by SBML, such as in the application-
        specific content of the 'annotation' subelement.  Finally, note that
        LibSBML does not provide an explicit XML ID data type; it uses
        ordinary character strings, which is easier for applications to
        support.

        This method provides programs with the ability to test explicitly that
        the identifier strings they create conform to the SBML identifier
        syntax.

        Parameter 'id' is string to be checked for conformance to the syntax
        of XML ID.

        Returns True if the string is a syntactically-valid value for the XML
        type ID, False otherwise.

        Note:

        The following is a summary of the definition of the XML 1.0 data type
        ID. We express the syntax using an extended form of BNF notation:

        NCNameChar ::= letter | digit | '.' | '-' | '_' | ':' | CombiningChar
        | Extender ID ::= ( letter | '_' | ':' ) NCNameChar*

        The characters ( and ) are used for grouping, the character * means
        "zero or more times", and the character | indicates logical "or".
        The production letter consists of the basic upper and lower case
        alphabetic characters of the Latin alphabet along with a large number
        of related characters defined by Unicode 2.0; similarly, the
        production digit consists of the numerals 0..9 along with related
        Unicode 2.0 characters. The CombiningChar production is a list of
        characters that add such things as accents to the preceding character.
        (For example, the Unicode character \#x030A when combined with a
        produces a.) The Extender production is a list of characters that
        extend the shape of the preceding character. Please consult the XML
        1.0 specification for the complete definitions of letter, digit,
        CombiningChar, and Extender.

         Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SyntaxChecker.isValidSBMLSId()  @see
        SyntaxChecker.isValidUnitSId()

        """
        return _libsbml.SyntaxChecker_isValidXMLID(*args)

    if _newclass:isValidXMLID = staticmethod(isValidXMLID)
    __swig_getmethods__["isValidXMLID"] = lambda x: isValidXMLID
    def isValidXMLanyURI(*args):
        """
        isValidXMLanyURI(string uri) -> bool

        Returns True or False depending on whether the 'uri' argument string
        conforms to the XML data type anyURI.

        Type anyURI is defined by XML Schema 1.0. It is a character string
        data type whose values are interpretable as URIs (Universal Resource
        Identifiers) as described by the W3C document RFC 3986.  LibSBML does
        not provide an explicit XML anyURI data type; it uses ordinary
        character strings, which is easier for applications to support.
        LibSBML does, however, test for anyURI validity at various times, such
        as when reading in models from files and data streams.

        This method provides programs with the ability to test explicitly that
        the strings they create conform to the XML anyURI syntax.

        Parameter 'uri' is string to be checked for conformance to the syntax
        of anyURI.

        Returns True if the string is a syntactically-valid value for the XML
        type anyURI,  False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SyntaxChecker_isValidXMLanyURI(*args)

    if _newclass:isValidXMLanyURI = staticmethod(isValidXMLanyURI)
    __swig_getmethods__["isValidXMLanyURI"] = lambda x: isValidXMLanyURI
    def isValidUnitSId(*args):
        """
        isValidUnitSId(string units) -> bool

        Returns True or False depending on whether the argument string
        conforms to the syntax of SBML unit identifiers.

        In SBML, the identifiers of units (of both the predefined units and
        user-defined units) must conform to a data type called UnitSId in the
        SBML specifications.  LibSBML does not provide an explicit UnitSId
        data type; it uses ordinary character strings, which is easier for
        applications to support. LibSBML does, however, test for identifier
        validity at various times, such as when reading in models from files
        and data streams.

        This method provides programs with the ability to test explicitly that
        the identifier strings they create conform to the SBML identifier
        syntax.

        Parameter 'units' is string to be checked for conformance to SBML unit
        identifier syntax.

        Returns True if the string conforms to type SBML data type UnitSId,
        False otherwise.

        Note:

        The following is a summary of the definition of the SBML identifier
        type UnitSId, which defines the permitted syntax of identifiers. We
        express the syntax using an extended form of BNF notation:

        letter ::= 'a'..'z','A'..'Z' digit ::= '0'..'9' idChar ::= letter |
        digit | '_' SId ::= ( letter | '_' ) idChar*

        The characters ( and ) are used for grouping, the character * "zero
        or more times", and the character | indicates logical "or". The
        equality of SBML unit identifiers is determined by an exact character
        sequence match; i.e., comparisons must be performed in a case-
        sensitive manner. In addition, there are a few conditions for the
        uniqueness of unit identifiers in an SBML model. Please consult the
        SBML specifications for the exact formulations.

         Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see SyntaxChecker.isValidSBMLSId()  @see SyntaxChecker.isValidXMLID()

        """
        return _libsbml.SyntaxChecker_isValidUnitSId(*args)

    if _newclass:isValidUnitSId = staticmethod(isValidUnitSId)
    __swig_getmethods__["isValidUnitSId"] = lambda x: isValidUnitSId
    def hasExpectedXHTMLSyntax(*args):
        """
        hasExpectedXHTMLSyntax(XMLNode xhtml, SBMLNamespaces sbmlns = None) -> bool
        hasExpectedXHTMLSyntax(XMLNode xhtml) -> bool

        Returns True or False depending on whether the given XMLNode object
        contains valid XHTML content.

        @par The optional SBML element named 'notes', present on every major
        SBML component type (and in SBML Level 3, the 'message' subelement of
        Constraint), is intended as a place for storing optional information
        intended to be seen by humans.  An example use of the 'notes' element
        would be to contain formatted user comments about the model element in
        which the 'notes' element is enclosed.  Every object derived directly
        or indirectly from type SBase can have a separate value for 'notes',
        allowing users considerable freedom when adding comments to their
        models.

        The format of 'notes' elements conform to the definition of XHTML 1.0.
        However, the content cannot be entirely free-form; it must satisfy
        certain requirements defined in the SBML specifications for specific
        SBML Levels.  To help verify the formatting of 'notes' content,
        libSBML provides the static utility method
        SyntaxChecker.hasExpectedXHTMLSyntax(); The method implements a
        verification process that lets callers check whether the content of a
        given XMLNode object conforms to the SBML requirements for 'notes' and
        'message' structure.  Developers are urged to consult the appropriate
        SBML specification document for the Level and Version of their model
        for more in-depth explanations of using 'notes' in SBML.  The SBML
        Level 2 and  3 specifications have considerable detail about how
        'notes' element content must be structured.

        An aspect of XHTML validity is that the content is declared to be in
        the XML namespace for XHTML 1.0.  There is more than one way in which
        this can be done in XML.  In particular, a model might not contain the
        declaration within the 'notes' or 'message' subelement itself, but
        might instead place the declaration on an enclosing element and use an
        XML namespace prefix within the 'notes' element to refer to it.  In
        other words, the following is valid:

          <sbml xmlns='http://www.sbml.org/sbml/level2/version3' level='2' version='3'
                xmlns:xhtml='http://www.w3.org/1999/xhtml'>
            <model>
              <notes>
                <xhtml:body>
                  <xhtml:center><xhtml:h2>A Simple Mitotic Oscillator</xhtml:h2></xhtml:center>
                  <xhtml:p>A minimal cascade model for the mitotic oscillator.</xhtml:p>
                </xhtml:body>
              </notes>
            ... rest of model ...
          </sbml>

        Contrast the above with the following, self-contained version, which
        places the XML namespace declaration within the <notes> element
        itself:

          <sbml xmlns='http://www.sbml.org/sbml/level2/version3' level='2' version='3'>
            <model>
              <notes>
                <html xmlns='http://www.w3.org/1999/xhtml'>
                  <head>
                    <title/>
                  </head>
                  <body>
                    <center><h2>A Simple Mitotic Oscillator</h2></center>
                    <p>A minimal cascade model for the mitotic oscillator.</p>
                  </body>
                </html>
              </notes>
            ... rest of model ...
          </sbml>

        Both of the above are valid XML.  The purpose of the 'sbmlns' argument
        to this method is to allow callers to check the validity of 'notes'
        and 'message' subelements whose XML namespace declarations have been
        put elsewhere in the manner illustrated above.  Callers can can pass
        in the SBMLNamespaces object of a higher-level model component if the
        XMLNode object does not itself have the XML namespace declaration for
        XHTML 1.0.

        Parameter 'xhtml' is the XMLNode to be checked for conformance.
        Parameter 'sbmlns' is the SBMLNamespaces associated with the object.

        Returns True if the XMLNode content conforms, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.SyntaxChecker_hasExpectedXHTMLSyntax(*args)

    if _newclass:hasExpectedXHTMLSyntax = staticmethod(hasExpectedXHTMLSyntax)
    __swig_getmethods__["hasExpectedXHTMLSyntax"] = lambda x: hasExpectedXHTMLSyntax
    def isValidInternalSId(*args):
        """
        isValidInternalSId(string sid) -> bool

        Internal implementation method.

        """
        return _libsbml.SyntaxChecker_isValidInternalSId(*args)

    if _newclass:isValidInternalSId = staticmethod(isValidInternalSId)
    __swig_getmethods__["isValidInternalSId"] = lambda x: isValidInternalSId
    def isValidInternalUnitSId(*args):
        """
        isValidInternalUnitSId(string sid) -> bool

        Internal implementation method.

        """
        return _libsbml.SyntaxChecker_isValidInternalUnitSId(*args)

    if _newclass:isValidInternalUnitSId = staticmethod(isValidInternalUnitSId)
    __swig_getmethods__["isValidInternalUnitSId"] = lambda x: isValidInternalUnitSId
    def __init__(self): 
        """__init__(self) -> SyntaxChecker"""
        this = _libsbml.new_SyntaxChecker()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SyntaxChecker
    __del__ = lambda self : None;
SyntaxChecker_swigregister = _libsbml.SyntaxChecker_swigregister
SyntaxChecker_swigregister(SyntaxChecker)

def SyntaxChecker_isValidSBMLSId(*args):
  """
    SyntaxChecker_isValidSBMLSId(string sid) -> bool

    Returns true True or False depending on whether the argument string
    conforms to the syntax of SBML identifiers.

    @par In SBML, identifiers that are the values of 'id' attributes on
    objects must conform to a data type called SId in the SBML
    specifications.  LibSBML does not provide an explicit SId data type;
    it uses ordinary character strings, which is easier for applications
    to support.  (LibSBML does, however, test for identifier validity at
    various times, such as when reading in models from files and data
    streams.)

    This method provides programs with the ability to test explicitly that
    the identifier strings they create conform to the SBML identifier
    syntax.

    Parameter 'sid' is string to be checked for conformance to SBML
    identifier syntax.

    Returns True if the string conforms to type SBML data type SId, False
    otherwise.

    @par SBML has strict requirements for the syntax of identifiers, that
    is, the values of the 'id' attribute present on most types of SBML
    objects. The following is a summary of the definition of the SBML
    identifier type  SId, which defines the permitted syntax of
    identifiers.  We express the syntax using an extended form of BNF
    notation:

      letter ::= 'a'..'z','A'..'Z'
      digit  ::= '0'..'9'
      idChar ::= letter | digit | '_'
      SId    ::= ( letter | '_' ) idChar*

    The characters ( and ) are used for grouping, the character * 'zero or
    more times', and the character | indicates logical 'or'.  The equality
    of SBML identifiers is determined by an exact character sequence
    match; i.e., comparisons must be performed in a case-sensitive manner.
    In addition, there are a few conditions for the uniqueness of
    identifiers in an SBML model.  Please consult the SBML specifications
    for the exact details of the uniqueness requirements.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SyntaxChecker.isValidUnitSId()  @see SyntaxChecker.isValidXMLID()

    """
  return _libsbml.SyntaxChecker_isValidSBMLSId(*args)

def SyntaxChecker_isValidXMLID(*args):
  """
    SyntaxChecker_isValidXMLID(string id) -> bool

    Returns True or False depending on whether the argument string
    conforms to the XML data type ID.

    @par The optional attribute named 'metaid', present on every major
    SBML component type, is for supporting metadata annotations using RDF
    (Resource Description Format).  The attribute value has the data type
    XML ID, the XML identifier type, which means each 'metaid' value must
    be globally unique within an SBML file.  The latter point is
    important, because the uniqueness criterion applies across any
    attribute with type ID anywhere in the file, not just the 'metaid'
    attribute used by SBML -- something to be aware of if your
    application-specific XML content inside the 'annotation' subelement
    happens to use the XML ID type.  Although SBML itself specifies the
    use of XML ID only for the 'metaid' attribute, SBML-compatible
    applications should be careful if they use XML ID's in XML portions of
    a model that are not defined by SBML, such as in the application-
    specific content of the 'annotation' subelement.  Finally, note that
    LibSBML does not provide an explicit XML ID data type; it uses
    ordinary character strings, which is easier for applications to
    support.

    This method provides programs with the ability to test explicitly that
    the identifier strings they create conform to the SBML identifier
    syntax.

    Parameter 'id' is string to be checked for conformance to the syntax
    of XML ID.

    Returns True if the string is a syntactically-valid value for the XML
    type ID, False otherwise.

    Note:

    The following is a summary of the definition of the XML 1.0 data type
    ID. We express the syntax using an extended form of BNF notation:

    NCNameChar ::= letter | digit | '.' | '-' | '_' | ':' | CombiningChar
    | Extender ID ::= ( letter | '_' | ':' ) NCNameChar*

    The characters ( and ) are used for grouping, the character * means
    "zero or more times", and the character | indicates logical "or".
    The production letter consists of the basic upper and lower case
    alphabetic characters of the Latin alphabet along with a large number
    of related characters defined by Unicode 2.0; similarly, the
    production digit consists of the numerals 0..9 along with related
    Unicode 2.0 characters. The CombiningChar production is a list of
    characters that add such things as accents to the preceding character.
    (For example, the Unicode character \#x030A when combined with a
    produces a.) The Extender production is a list of characters that
    extend the shape of the preceding character. Please consult the XML
    1.0 specification for the complete definitions of letter, digit,
    CombiningChar, and Extender.

     Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SyntaxChecker.isValidSBMLSId()  @see
    SyntaxChecker.isValidUnitSId()

    """
  return _libsbml.SyntaxChecker_isValidXMLID(*args)

def SyntaxChecker_isValidXMLanyURI(*args):
  """
    SyntaxChecker_isValidXMLanyURI(string uri) -> bool

    Returns True or False depending on whether the 'uri' argument string
    conforms to the XML data type anyURI.

    Type anyURI is defined by XML Schema 1.0. It is a character string
    data type whose values are interpretable as URIs (Universal Resource
    Identifiers) as described by the W3C document RFC 3986.  LibSBML does
    not provide an explicit XML anyURI data type; it uses ordinary
    character strings, which is easier for applications to support.
    LibSBML does, however, test for anyURI validity at various times, such
    as when reading in models from files and data streams.

    This method provides programs with the ability to test explicitly that
    the strings they create conform to the XML anyURI syntax.

    Parameter 'uri' is string to be checked for conformance to the syntax
    of anyURI.

    Returns True if the string is a syntactically-valid value for the XML
    type anyURI,  False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SyntaxChecker_isValidXMLanyURI(*args)

def SyntaxChecker_isValidUnitSId(*args):
  """
    SyntaxChecker_isValidUnitSId(string units) -> bool

    Returns True or False depending on whether the argument string
    conforms to the syntax of SBML unit identifiers.

    In SBML, the identifiers of units (of both the predefined units and
    user-defined units) must conform to a data type called UnitSId in the
    SBML specifications.  LibSBML does not provide an explicit UnitSId
    data type; it uses ordinary character strings, which is easier for
    applications to support. LibSBML does, however, test for identifier
    validity at various times, such as when reading in models from files
    and data streams.

    This method provides programs with the ability to test explicitly that
    the identifier strings they create conform to the SBML identifier
    syntax.

    Parameter 'units' is string to be checked for conformance to SBML unit
    identifier syntax.

    Returns True if the string conforms to type SBML data type UnitSId,
    False otherwise.

    Note:

    The following is a summary of the definition of the SBML identifier
    type UnitSId, which defines the permitted syntax of identifiers. We
    express the syntax using an extended form of BNF notation:

    letter ::= 'a'..'z','A'..'Z' digit ::= '0'..'9' idChar ::= letter |
    digit | '_' SId ::= ( letter | '_' ) idChar*

    The characters ( and ) are used for grouping, the character * "zero
    or more times", and the character | indicates logical "or". The
    equality of SBML unit identifiers is determined by an exact character
    sequence match; i.e., comparisons must be performed in a case-
    sensitive manner. In addition, there are a few conditions for the
    uniqueness of unit identifiers in an SBML model. Please consult the
    SBML specifications for the exact formulations.

     Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see SyntaxChecker.isValidSBMLSId()  @see SyntaxChecker.isValidXMLID()

    """
  return _libsbml.SyntaxChecker_isValidUnitSId(*args)

def SyntaxChecker_hasExpectedXHTMLSyntax(*args):
  """
    hasExpectedXHTMLSyntax(XMLNode xhtml, SBMLNamespaces sbmlns = None) -> bool
    SyntaxChecker_hasExpectedXHTMLSyntax(XMLNode xhtml) -> bool

    Returns True or False depending on whether the given XMLNode object
    contains valid XHTML content.

    @par The optional SBML element named 'notes', present on every major
    SBML component type (and in SBML Level 3, the 'message' subelement of
    Constraint), is intended as a place for storing optional information
    intended to be seen by humans.  An example use of the 'notes' element
    would be to contain formatted user comments about the model element in
    which the 'notes' element is enclosed.  Every object derived directly
    or indirectly from type SBase can have a separate value for 'notes',
    allowing users considerable freedom when adding comments to their
    models.

    The format of 'notes' elements conform to the definition of XHTML 1.0.
    However, the content cannot be entirely free-form; it must satisfy
    certain requirements defined in the SBML specifications for specific
    SBML Levels.  To help verify the formatting of 'notes' content,
    libSBML provides the static utility method
    SyntaxChecker.hasExpectedXHTMLSyntax(); The method implements a
    verification process that lets callers check whether the content of a
    given XMLNode object conforms to the SBML requirements for 'notes' and
    'message' structure.  Developers are urged to consult the appropriate
    SBML specification document for the Level and Version of their model
    for more in-depth explanations of using 'notes' in SBML.  The SBML
    Level 2 and  3 specifications have considerable detail about how
    'notes' element content must be structured.

    An aspect of XHTML validity is that the content is declared to be in
    the XML namespace for XHTML 1.0.  There is more than one way in which
    this can be done in XML.  In particular, a model might not contain the
    declaration within the 'notes' or 'message' subelement itself, but
    might instead place the declaration on an enclosing element and use an
    XML namespace prefix within the 'notes' element to refer to it.  In
    other words, the following is valid:

      <sbml xmlns='http://www.sbml.org/sbml/level2/version3' level='2' version='3'
            xmlns:xhtml='http://www.w3.org/1999/xhtml'>
        <model>
          <notes>
            <xhtml:body>
              <xhtml:center><xhtml:h2>A Simple Mitotic Oscillator</xhtml:h2></xhtml:center>
              <xhtml:p>A minimal cascade model for the mitotic oscillator.</xhtml:p>
            </xhtml:body>
          </notes>
        ... rest of model ...
      </sbml>

    Contrast the above with the following, self-contained version, which
    places the XML namespace declaration within the <notes> element
    itself:

      <sbml xmlns='http://www.sbml.org/sbml/level2/version3' level='2' version='3'>
        <model>
          <notes>
            <html xmlns='http://www.w3.org/1999/xhtml'>
              <head>
                <title/>
              </head>
              <body>
                <center><h2>A Simple Mitotic Oscillator</h2></center>
                <p>A minimal cascade model for the mitotic oscillator.</p>
              </body>
            </html>
          </notes>
        ... rest of model ...
      </sbml>

    Both of the above are valid XML.  The purpose of the 'sbmlns' argument
    to this method is to allow callers to check the validity of 'notes'
    and 'message' subelements whose XML namespace declarations have been
    put elsewhere in the manner illustrated above.  Callers can can pass
    in the SBMLNamespaces object of a higher-level model component if the
    XMLNode object does not itself have the XML namespace declaration for
    XHTML 1.0.

    Parameter 'xhtml' is the XMLNode to be checked for conformance.
    Parameter 'sbmlns' is the SBMLNamespaces associated with the object.

    Returns True if the XMLNode content conforms, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    Documentation note: The native C++ implementation of this method
    defines a default argument value. In the documentation generated for
    different libSBML language bindings, you may or may not see
    corresponding arguments in the method declarations. For example, in
    Java and C#, a default argument is handled by declaring two separate
    methods, with one of them having the argument and the other one
    lacking the argument. However, the libSBML documentation will be
    identical for both methods. Consequently, if you are reading this and
    do not see an argument even though one is described, please look for
    descriptions of other variants of this method near where this one
    appears in the documentation.

    """
  return _libsbml.SyntaxChecker_hasExpectedXHTMLSyntax(*args)

def SyntaxChecker_isValidInternalSId(*args):
  """
    SyntaxChecker_isValidInternalSId(string sid) -> bool

    Internal implementation method.

    """
  return _libsbml.SyntaxChecker_isValidInternalSId(*args)

def SyntaxChecker_isValidInternalUnitSId(*args):
  """
    SyntaxChecker_isValidInternalUnitSId(string sid) -> bool

    Internal implementation method.

    """
  return _libsbml.SyntaxChecker_isValidInternalUnitSId(*args)

class StoichiometryMath(SBase):
    """
    Implementation of SBML Level 2's StoichiometryMath construct.

    Stoichiometries in SBML Level 2
    ======================================================================

    In SBML Level 2, product and reactant stoichiometries can be specified
    using either the 'stoichiometry' attribute or a 'stoichiometryMath'
    element in a SpeciesReference object.  The 'stoichiometry' attribute
    is of type double and should contain values greater than zero (0).
    The 'stoichiometryMath' element is implemented as an element
    containing a MathML expression.  These two are mutually exclusive;
    only one of 'stoichiometry' or 'stoichiometryMath' should be defined
    in a given SpeciesReference instance.  When neither the attribute nor
    the element is present, the value of 'stoichiometry' in the enclosing
    SpeciesReference instance defaults to 1.

    For maximum interoperability, SpeciesReference's 'stoichiometry'
    attribute should be used in preference to 'stoichiometryMath' when a
    species' stoichiometry is a simple scalar number (integer or decimal).
    When the stoichiometry is a rational number, or when it is a more
    complicated formula, 'stoichiometryMath' must be used.  The MathML
    expression in 'stoichiometryMath' may also refer to identifiers of
    entities in a model (except reaction identifiers).  However, the only
    species identifiers that can be used in 'stoichiometryMath' are those
    referenced in the enclosing Reaction's list of reactants, products and
    modifiers.

    The 'stoichiometry' attribute and the 'stoichiometryMath' element,
    when either is used, is each interpreted as a factor applied to the
    reaction rate to produce the rate of change of the species identified
    by the 'species' attribute in the enclosing SpeciesReference.  This is
    the normal interpretation of a stoichiometry, but in SBML, one
    additional consideration has to be taken into account.  The reaction
    rate, which is the result of the KineticLaw's 'math' element, is
    always in the model's substance per time units.  However, the rate of
    change of the species will involve the species' substance units (i.e.,
    the units identified by the Species object's 'substanceUnits'
    attribute), and these units may be different from the model's default
    substance units.  If the units are different, the stoichiometry must
    incorporate a conversion factor for converting the model's substance
    units to the species' substance units.  The conversion factor is
    assumed to be included in the scalar value of the 'stoichiometry'
    attribute if 'stoichiometry' is used.  If instead 'stoichiometryMath'
    is used, then the product of the model's 'substance' units times the
    'stoichiometryMath' units must match the substance units of the
    species.  Note that in either case, if the species' units and the
    model's default substance units are the same, the stoichiometry ends
    up being a dimensionless number and equivalent to the standard
    chemical stoichiometry found in textbooks.  Examples and more
    explanations of this are given in the SBML specification.

    The following is a simple example of a species reference for species
    'X0', with stoichiometry 2, in a list of reactants within a reaction
    having the identifier 'J1':

       <model>
           ...
           <listOfReactions>
               <reaction id='J1'>
                   <listOfReactants>
                       <speciesReference species='X0' stoichiometry='2'>
                   </listOfReactants>
                   ...
               </reaction>
               ...
           </listOfReactions>
           ...
       </model>

    The following is a more complex example of a species reference for
    species 'X0', with a stoichiometry formula consisting of a rational
    number:

       <model>
           ...
           <listOfReactions>
               <reaction id='J1'>
                   <listOfReactants>
                       <speciesReference species='X0'>
                           <stoichiometryMath>
                               <math xmlns='http://www.w3.org/1998/Math/MathML'> 
                                   <cn type='rational'> 3 <sep/> 2 </cn>
                               </math>
                           </stoichiometryMath>
                       </speciesReference>
                   </listOfReactants>
                   ...
               </reaction>
               ...
           </listOfReactions>
           ...
       </model>

    Additional discussions of stoichiometries and implications for species
    and reactions are included in the documentation of SpeciesReference
    class.

    Stoichiometries in SBML Level 3
    ======================================================================

    The StoichiometryMath construct is not defined in SBML Level 3 Version
    1 Core.  Instead, Level 3 defines the identifier of SpeciesReference
    objects as a stand-in for the stoichiometry of the reactant or product
    being referenced, and allows that identifier to be used elsewhere in
    SBML models, including (for example) InitialAssignment objects.  This
    makes it possible to achieve the same effect as StoichiometryMath, but
    with other SBML objects.  For instance, to produce a stoichiometry
    value that is a rational number, a model can use InitialAssignment to
    assign the identifier of a SpeciesReference object to a MathML
    expression evaluating to a rational number.  This is analogous to the
    same way that, in Level 2, the model would use StoichiometryMath with
    a MathML expression evaluating to a rational number.

    In SBML Level 2, the stoichiometry of a reactant or product is a
    combination of both a biochemical stoichiometry (meaning, the standard
    stoichiometry of a species in a reaction) and any necessary unit
    conversion factors. The introduction of an explicit attribute on the
    Species object for a conversion factor allows Level 3 to avoid having
    to overload the meaning of stoichiometry.  In Level 3, the
    stoichiometry given by a SpeciesReference object in a reaction is a
    'proper' biochemical stoichiometry, meaning a dimensionless number
    free of unit conversions.

    See also Reaction.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoichiometryMath, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StoichiometryMath, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_StoichiometryMath
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level, unsigned int version) -> StoichiometryMath
        __init__(self, SBMLNamespaces sbmlns) -> StoichiometryMath
        __init__(self, StoichiometryMath orig) -> StoichiometryMath

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            StoichiometryMath(SBMLNamespaces sbmlns)

        Creates a new StoichiometryMath object using the given SBMLNamespaces
        object 'sbmlns'.

        @par  The SBMLNamespaces object encapsulates SBML
        Level/Version/namespaces information.  It is used to communicate the
        SBML Level, Version, and (in Level 3) packages used in addition to
        SBML Level 3 Core.  A common approach to using libSBML's
        SBMLNamespaces facilities is to create an SBMLNamespaces object
        somewhere in a program once, then hand that object as needed to object
        constructors that accept SBMLNamespaces as arguments.

        Parameter 'sbmlns' is an SBMLNamespaces object.

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        The StoichiometryMath construct exists only in SBML Level 2. It is an
        optional construct available for defining the stoichiometries of
        reactants and products in Reaction objects.  Note that a different
        mechanism is used in SBML Level 3, where StoichiometryMath is not
        available.  Please consult the top of this libSBML StoichiometryMath
        documentation for more information about the differences between SBML
        Level 2 and 3 with respect to stoichiometries.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            StoichiometryMath(long level, long version)

        Creates a new StoichiometryMath object using the given SBML 'level'
        values.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        StoichiometryMath

        Parameter 'version' is a long integer, the SBML Version to assign to
        this StoichiometryMath

        Throws ValueError:  Thrown if the given 'level' and 'version'
        combination, or this kind of SBML object, are either invalid or
        mismatched with respect to the parent SBMLDocument object.

        Note:

        The StoichiometryMath construct exists only in SBML Level 2. It is an
        optional construct available for defining the stoichiometries of
        reactants and products in Reaction objects.  Note that a different
        mechanism is used in SBML Level 3, where StoichiometryMath is not
        available.  Please consult the top of this libSBML StoichiometryMath
        documentation for more information about the differences between SBML
        Level 2 and 3 with respect to stoichiometries.

        Note:

        Attempting to add an object to an SBMLDocument having a different
        combination of SBML Level, Version and XML namespaces than the object
        itself will result in an error at the time a caller attempts to make
        the addition.  A parent object must have compatible Level, Version and
        XML namespaces.  (Strictly speaking, a parent may also have more XML
        namespaces than a child, but the reverse is not permitted.)  The
        restriction is necessary to ensure that an SBML model has a consistent
        overall structure.  This requires callers to manage their objects
        carefully, but the benefit is increased flexibility in how models can
        be created by permitting callers to create objects bottom-up if
        desired.  In situations where objects are not yet attached to parents
        (e.g., SBMLDocument), knowledge of the intented SBML Level and Version
        help libSBML determine such things as whether it is valid to assign a
        particular value to an attribute.

        @par <hr> Method variant with the following signature:

            StoichiometryMath(StoichiometryMath orig)

        Copy constructor; creates a copy of this StoichiometryMath.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_StoichiometryMath(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> StoichiometryMath

        Creates and returns a deep copy of this StoichiometryMath object.

        Returns a (deep) copy of this StoichiometryMath.

        """
        return _libsbml.StoichiometryMath_clone(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Retrieves the mathematical formula within this StoichiometryMath and
        return it as an AST.

        Returns the math of this StoichiometryMath.

        Note:

        The StoichiometryMath construct exists only in SBML Level 2. It is an
        optional construct available for defining the stoichiometries of
        reactants and products in Reaction objects.  Note that a different
        mechanism is used in SBML Level 3, where StoichiometryMath is not
        available.  Please consult the top of this libSBML StoichiometryMath
        documentation for more information about the differences between SBML
        Level 2 and 3 with respect to stoichiometries.

        """
        return _libsbml.StoichiometryMath_getMath(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate to test whether the math for this StoichiometryMath object
        is set.

        Returns True if the formula (meaning the math subelement) of this
        StoichiometryMath is set, False otherwise.

        Note:

        The StoichiometryMath construct exists only in SBML Level 2. It is an
        optional construct available for defining the stoichiometries of
        reactants and products in Reaction objects.  Note that a different
        mechanism is used in SBML Level 3, where StoichiometryMath is not
        available.  Please consult the top of this libSBML StoichiometryMath
        documentation for more information about the differences between SBML
        Level 2 and 3 with respect to stoichiometries.

        """
        return _libsbml.StoichiometryMath_isSetMath(self)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the 'math' expression of this StoichiometryMath instance to a
        copy of the given ASTNode.

        Parameter 'math' is an ASTNode representing a formula tree.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        The StoichiometryMath construct exists only in SBML Level 2. It is an
        optional construct available for defining the stoichiometries of
        reactants and products in Reaction objects.  Note that a different
        mechanism is used in SBML Level 3, where StoichiometryMath is not
        available.  Please consult the top of this libSBML StoichiometryMath
        documentation for more information about the differences between SBML
        Level 2 and 3 with respect to stoichiometries.

        """
        return _libsbml.StoichiometryMath_setMath(self, *args)

    def getDerivedUnitDefinition(self, *args):
        """
        getDerivedUnitDefinition(self) -> UnitDefinition
        getDerivedUnitDefinition(self) -> UnitDefinition

        Calculates and returns a UnitDefinition object that expresses the
        units returned by the math expression in this StoichiometryMath
        object.

        The units are calculated based on the mathematical expression in the
        StoichiometryMath and the model quantities referenced by <ci> elements
        used within that expression.  The
        StoichiometryMath.getDerivedUnitDefinition() method returns the
        calculated units.

        Note that the functionality that facilitates unit analysis depends  on
        the model as a whole.  Thus, in cases where the object has not  been
        added to a model or the model itself is incomplete, unit analysis is
        not possible and this method will return None.

        Returns a UnitDefinition that expresses the units of the math,  or
        None if one cannot be constructed.

        WARNING:

        Note that it is possible the 'math' expression in the
        StoichiometryMath instance contains literal numbers or parameters with
        undeclared units.  In those cases, it is not possible to calculate the
        units of the overall expression without making assumptions.  LibSBML
        does not make assumptions about the units, and
        StoichiometryMath.getDerivedUnitDefinition() only returns the units as
        far as it is able to determine them.  For example, in an expression X
        + Y, if X has unambiguously-defined units and Y does not, it will
        return the units of X.  When using this method, it is critical that
        callers also invoke the method
        StoichiometryMath.containsUndeclaredUnits() to determine whether this
        situation holds.  Callers should take suitable action in those
        situations.

        See also containsUndeclaredUnits().

        """
        return _libsbml.StoichiometryMath_getDerivedUnitDefinition(self, *args)

    def containsUndeclaredUnits(self, *args):
        """
        containsUndeclaredUnits(self) -> bool
        containsUndeclaredUnits(self) -> bool

        Predicate returning True if the math expression of this
        StoichiometryMath object contains literal numbers or parameters with
        undeclared units.

        The StoichiometryMath.getDerivedUnitDefinition() method returns what
        libSBML computes the units of the Stoichiometry to be, to the extent
        that libSBML can compute them.  However, if the expression contains
        literal numbers or parameters with undeclared units, libSBML may not
        be able to compute the full units of the expression and will only
        return what it can compute.  Callers should always use
        StoichiometryMath.containsUndeclaredUnits() when using
        StoichiometryMath.getDerivedUnitDefinition() to decide whether the
        returned units may be incomplete.

        Returns True if the math expression of this StoichiometryMath includes
        numbers/parameters with undeclared units, False otherwise.

        Note:

        A return value of True indicates that the UnitDefinition returned by
        StoichiometryMath.getDerivedUnitDefinition() may not accurately
        represent the units of the expression.

        See also getDerivedUnitDefinition().

        """
        return _libsbml.StoichiometryMath_containsUndeclaredUnits(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_STOICHIOMETRY_MATH (default).

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.StoichiometryMath_getTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        StoichiometryMath, is always 'stoichiometryMath'.

        Returns the name of this element, i.e., 'stoichiometryMath'.

        """
        return _libsbml.StoichiometryMath_getElementName(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        StoichiometryMath object have been set.

        Note:

        The required elements for a StoichiometryMath object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.StoichiometryMath_hasRequiredElements(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this StoichiometryMath's SpeciesReference parent and calls
        unsetStoichiometryMath() on it, indirectly deleting itself.

        Overridden from the SBase function since the parent is not a ListOf.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.StoichiometryMath_removeFromParentAndDelete(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.StoichiometryMath_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.StoichiometryMath_renameUnitSIdRefs(self, *args)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.StoichiometryMath_replaceSIDWithFunction(self, *args)

StoichiometryMath_swigregister = _libsbml.StoichiometryMath_swigregister
StoichiometryMath_swigregister(StoichiometryMath)

class SBMLNamespaces(_object):
    """
    Class to store SBML Level, Version and namespace information.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    There are differences in the definitions of components between
    different SBML Levels, as well as Versions within Levels.  For
    example, the 'sboTerm' attribute was not introduced until Level 2
    Version 2, and then only on certain component classes; the SBML Level
    2 Version 3 specification moved the 'sboTerm' attribute to the SBase
    class, thereby allowing nearly all components to have SBO annotations.
    As a result of differences such as those, libSBML needs to track the
    SBML Level and Version of every object created.

    The purpose of the SBMLNamespaces object class is to make it easier to
    communicate SBML Level and Version data between libSBML constructors
    and other methods.  The SBMLNamespaces object class tracks 3-tuples
    (triples) consisting of SBML Level, Version, and the corresponding
    SBML XML namespace.

    The plural name (SBMLNamespaces) is not a mistake, because in SBML
    Level 3, objects may have extensions added by Level 3 packages used by
    a given model and therefore may have multiple namespaces associated
    with them; however, until the introduction of SBML Level 3, the
    SBMLNamespaces object only records one SBML Level/Version/namespace
    combination at a time.  Most constructors for SBML objects in libSBML
    take a SBMLNamespaces object as an argument, thereby allowing the
    constructor to produce the proper combination of attributes and other
    internal data structures for the given SBML Level and Version.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLNamespaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SBMLNamespaces
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) -> SBMLNamespaces
        __init__(self, unsigned int level = SBML_DEFAULT_LEVEL) -> SBMLNamespaces
        __init__(self) -> SBMLNamespaces
        __init__(self, unsigned int level, unsigned int version, string pkgName, 
            unsigned int pkgVersion, string pkgPrefix = "") -> SBMLNamespaces
        __init__(self, unsigned int level, unsigned int version, string pkgName, 
            unsigned int pkgVersion) -> SBMLNamespaces
        __init__(self, SBMLNamespaces orig) -> SBMLNamespaces

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLNamespaces(SBMLNamespaces orig)

        Copy constructor; creates a copy of a SBMLNamespaces.

        Parameter 'orig' is the SBMLNamespaces instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            SBMLNamespaces(long level = SBML_DEFAULT_LEVEL, long version =
        SBML_DEFAULT_VERSION)

        Creates a new SBMLNamespaces object corresponding to the given SBML
        'level' and 'version'.

        @par SBMLNamespaces objects are used in libSBML to communicate SBML
        Level and Version data between constructors and other methods.  The
        SBMLNamespaces object class holds triples consisting of SBML Level,
        Version, and the corresponding SBML XML namespace.  Most constructors
        for SBML objects in libSBML take a SBMLNamespaces object as an
        argument, thereby allowing the constructor to produce the proper
        combination of attributes and other internal data structures for the
        given SBML Level and Version.

        The plural name (SBMLNamespaces) is not a mistake, because in SBML
        Level 3, objects may have extensions added by Level 3 packages used by
        a given model and therefore may have multiple namespaces associated
        with them.  In SBML Levels below Level 3, the SBMLNamespaces object
        only records one SBML Level/Version/namespace combination at a time.
        Most constructors for SBML objects in libSBML take a SBMLNamespaces
        object as an argument, thereby allowing the constructor to produce the
        proper combination of attributes and other internal data structures
        for the given SBML Level and Version.

        Parameter 'level' is the SBML level Parameter 'version' is the SBML
        version

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            SBMLNamespaces(long level, long version, string &pkgName, long
        pkgVersion, string pkgPrefix = '')

        (For extensions) Creates a new SBMLNamespaces object corresponding to
        the combination of (1) the given SBML 'level' and 'version', and (2)
        the given 'package' with the 'package' 'version'.

        @par SBMLNamespaces objects are used in libSBML to communicate SBML
        Level and Version data between constructors and other methods.  The
        SBMLNamespaces object class holds triples consisting of SBML Level,
        Version, and the corresponding SBML XML namespace.  Most constructors
        for SBML objects in libSBML take a SBMLNamespaces object as an
        argument, thereby allowing the constructor to produce the proper
        combination of attributes and other internal data structures for the
        given SBML Level and Version.

        The plural name (SBMLNamespaces) is not a mistake, because in SBML
        Level 3, objects may have extensions added by Level 3 packages used by
        a given model and therefore may have multiple namespaces associated
        with them.  In SBML Levels below Level 3, the SBMLNamespaces object
        only records one SBML Level/Version/namespace combination at a time.
        Most constructors for SBML objects in libSBML take a SBMLNamespaces
        object as an argument, thereby allowing the constructor to produce the
        proper combination of attributes and other internal data structures
        for the given SBML Level and Version.

        Parameter 'level' is the SBML Level Parameter 'version' is the SBML
        Version Parameter 'pkgName' is the string of package name (e.g.
        'layout', 'multi') Parameter 'pkgVersion' is the package version
        Parameter 'pkgPrefix' is the prefix of the package namespace (e.g.
        'layout', 'multi') to be added. The package's name will be used if the
        given string is empty (default).

        Throws SBMLExtensionException: if the extension module that supports
        the combination of the given SBML Level, SBML Version, package name,
        and package version has not been registered with libSBML.

        """
        this = _libsbml.new_SBMLNamespaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLNamespaces

        Creates and returns a deep copy of this SBMLNamespaces.

        Returns a (deep) copy of this SBMLNamespaces.

        """
        return _libsbml.SBMLNamespaces_clone(self)

    def getSBMLNamespaceURI(*args):
        """
        getSBMLNamespaceURI(unsigned int level, unsigned int version) -> string

        Returns a string representing the SBML XML namespace for the  given
        'level' and 'version' of SBML.

        Parameter 'level' is the SBML level Parameter 'version' is the SBML
        version

        Returns a string representing the SBML namespace that reflects the
        SBML Level and Version specified.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBMLNamespaces_getSBMLNamespaceURI(*args)

    if _newclass:getSBMLNamespaceURI = staticmethod(getSBMLNamespaceURI)
    __swig_getmethods__["getSBMLNamespaceURI"] = lambda x: getSBMLNamespaceURI
    def getSupportedNamespaces():
        """
        getSupportedNamespaces() -> List

        Returns a list of all supported SBMLNamespaces in this version of
        libsbml.

        Returns a list with supported SBML namespaces.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBMLNamespaces_getSupportedNamespaces()

    if _newclass:getSupportedNamespaces = staticmethod(getSupportedNamespaces)
    __swig_getmethods__["getSupportedNamespaces"] = lambda x: getSupportedNamespaces
    def freeSBMLNamespaces(*args):
        """
        freeSBMLNamespaces(List supportedNS)

        Frees the list of supported namespaces as generated by
        getSupportedNamespaces().

        Parameter 'supportedNS' is the list to be freed.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBMLNamespaces_freeSBMLNamespaces(*args)

    if _newclass:freeSBMLNamespaces = staticmethod(freeSBMLNamespaces)
    __swig_getmethods__["freeSBMLNamespaces"] = lambda x: freeSBMLNamespaces
    def getURI(self):
        """
        getURI(self) -> string

        Returns a string representing the SBML XML namespace of this object.

        Returns a string representing the SBML namespace that reflects the
        SBML Level and Version of this object.

        """
        return _libsbml.SBMLNamespaces_getURI(self)

    def getLevel(self, *args):
        """
        getLevel(self) -> unsigned int
        getLevel(self) -> unsigned int

        Get the SBML Level of this SBMLNamespaces object.

        Returns the SBML Level of this SBMLNamespaces object.

        """
        return _libsbml.SBMLNamespaces_getLevel(self, *args)

    def getVersion(self, *args):
        """
        getVersion(self) -> unsigned int
        getVersion(self) -> unsigned int

        Get the SBML Version of this SBMLNamespaces object.

        Returns the SBML Version of this SBMLNamespaces object.

        """
        return _libsbml.SBMLNamespaces_getVersion(self, *args)

    def getNamespaces(self, *args):
        """
        getNamespaces(self) -> XMLNamespaces
        getNamespaces(self) -> XMLNamespaces

        Get the XML namespaces list for this SBMLNamespaces object.

        @par SBMLNamespaces objects are used in libSBML to communicate SBML
        Level and Version data between constructors and other methods.  The
        SBMLNamespaces object class holds triples consisting of SBML Level,
        Version, and the corresponding SBML XML namespace.  Most constructors
        for SBML objects in libSBML take a SBMLNamespaces object as an
        argument, thereby allowing the constructor to produce the proper
        combination of attributes and other internal data structures for the
        given SBML Level and Version.

        The plural name (SBMLNamespaces) is not a mistake, because in SBML
        Level 3, objects may have extensions added by Level 3 packages used by
        a given model and therefore may have multiple namespaces associated
        with them.  In SBML Levels below Level 3, the SBMLNamespaces object
        only records one SBML Level/Version/namespace combination at a time.
        Most constructors for SBML objects in libSBML take a SBMLNamespaces
        object as an argument, thereby allowing the constructor to produce the
        proper combination of attributes and other internal data structures
        for the given SBML Level and Version.

        Returns the XML namespaces of this SBMLNamespaces object.

        """
        return _libsbml.SBMLNamespaces_getNamespaces(self, *args)

    def addNamespaces(self, *args):
        """
        addNamespaces(self, XMLNamespaces xmlns) -> int

        Add the given XML namespaces list to the set of namespaces within this
        SBMLNamespaces object.

        The following code gives an example of how one could add the XHTML
        namespace to the list of namespaces recorded by the top-level <sbml>
        element of a model.  It gives the new namespace a prefix of html.

          sbmlDoc = None
          try:
            sbmlDoc = SBMLDocument(3, 1)
          except ValueError:
            # Do something to handle exceptional situation.  Candidate
            # causes include invalid combinations of SBML Level and Version
            # (impossible if hardwired as given here), running out of memory, and
            # unknown system exceptions.
          
          namespaces = sbmlDoc.getNamespaces()
          if namespaces == None:
            # Do something to handle case of no namespaces.
          
          status = namespaces.add('http://www.w3.org/1999/xhtml', 'html')
          if status != LIBSBML_OPERATION_SUCCESS:
            # Do something to handle failure.

          Parameter 'xmlns' is the XML namespaces to be added.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.SBMLNamespaces_addNamespaces(self, *args)

    def addNamespace(self, *args):
        """
        addNamespace(self, string uri, string prefix) -> int

        Add an XML namespace (a pair of URI and prefix) to the set of
        namespaces within this SBMLNamespaces object.

        Parameter 'uri' is the XML namespace to be added. Parameter 'prefix'
        is the prefix of the namespace to be added.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.SBMLNamespaces_addNamespace(self, *args)

    def removeNamespace(self, *args):
        """
        removeNamespace(self, string uri) -> int

        Removes an XML namespace from the set of namespaces within this
        SBMLNamespaces object.

        Parameter 'uri' is the XML namespace to be added.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        """
        return _libsbml.SBMLNamespaces_removeNamespace(self, *args)

    def addPackageNamespace(self, *args):
        """
        addPackageNamespace(self, string pkgName, unsigned int pkgVersion, string prefix = "") -> int
        addPackageNamespace(self, string pkgName, unsigned int pkgVersion) -> int

        Add an XML namespace (a pair of URI and prefix) of a package extension
        to the set of namespaces within this SBMLNamespaces object.

        The SBML Level and SBML Version of this object is used.

        Parameter 'pkgName' is the string of package name (e.g. 'layout',
        'multi') Parameter 'pkgVersion' is the package version Parameter
        'prefix' is the prefix of the package namespace to be added. The
        package's name will be used if the given string is empty (default).

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        An XML namespace of a non-registered package extension can't be added
        by this function (libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE  will be
        returned).

        See also addNamespace().

        """
        return _libsbml.SBMLNamespaces_addPackageNamespace(self, *args)

    def addPackageNamespaces(self, *args):
        """
        addPackageNamespaces(self, XMLNamespaces xmlns) -> int

        Add the XML namespaces of package extensions in the given XMLNamespace
        object to the set of namespaces within this SBMLNamespaces object
        (Non-package XML namespaces are not added by this function).

        Parameter 'xmlns' is the XML namespaces to be added.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        XML namespaces of a non-registered package extensions are not added
        (just ignored) by this function.
        libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE will be returned if the given
        xmlns is null.

        """
        return _libsbml.SBMLNamespaces_addPackageNamespaces(self, *args)

    def removePackageNamespace(self, *args):
        """
        removePackageNamespace(self, unsigned int level, unsigned int version, string pkgName, 
            unsigned int pkgVersion) -> int

        Removes an XML namespace of a package extension from the set of
        namespaces  within this SBMLNamespaces object.

        Parameter 'level' is the SBML level Parameter 'version' is the SBML
        version Parameter 'pkgName' is the string of package name (e.g.
        'layout', 'multi') Parameter 'pkgVersion' is the package version

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        """
        return _libsbml.SBMLNamespaces_removePackageNamespace(self, *args)

    def addPkgNamespace(self, *args):
        """
        addPkgNamespace(self, string pkgName, unsigned int pkgVersion, string prefix = "") -> int
        addPkgNamespace(self, string pkgName, unsigned int pkgVersion) -> int

        Internal implementation method.

        """
        return _libsbml.SBMLNamespaces_addPkgNamespace(self, *args)

    def addPkgNamespaces(self, *args):
        """
        addPkgNamespaces(self, XMLNamespaces xmlns) -> int

        Internal implementation method.

        """
        return _libsbml.SBMLNamespaces_addPkgNamespaces(self, *args)

    def removePkgNamespace(self, *args):
        """
        removePkgNamespace(self, unsigned int level, unsigned int version, string pkgName, 
            unsigned int pkgVersion) -> int

        Internal implementation method.

        """
        return _libsbml.SBMLNamespaces_removePkgNamespace(self, *args)

    def isSBMLNamespace(*args):
        """
        isSBMLNamespace(string uri) -> bool

        Predicate returning True if the given URL is one of SBML XML
        namespaces.

        Parameter 'uri' is the URI of namespace

        Returns True if the 'uri' is one of SBML namespaces, False otherwise.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.SBMLNamespaces_isSBMLNamespace(*args)

    if _newclass:isSBMLNamespace = staticmethod(isSBMLNamespace)
    __swig_getmethods__["isSBMLNamespace"] = lambda x: isSBMLNamespace
    def isValidCombination(self):
        """
        isValidCombination(self) -> bool

        Predicate returning True if the given set of namespaces represent a
        valid set

        Returns True if the set of namespaces is valid, False otherwise.

        """
        return _libsbml.SBMLNamespaces_isValidCombination(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the name of the main package for this namespace.

        Returns the name of the main package for this namespace. 'core' will
        be returned if this namespace is defined in the SBML  core.

        """
        return _libsbml.SBMLNamespaces_getPackageName(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

SBMLNamespaces_swigregister = _libsbml.SBMLNamespaces_swigregister
SBMLNamespaces_swigregister(SBMLNamespaces)

def SBMLNamespaces_getSBMLNamespaceURI(*args):
  """
    SBMLNamespaces_getSBMLNamespaceURI(unsigned int level, unsigned int version) -> string

    Returns a string representing the SBML XML namespace for the  given
    'level' and 'version' of SBML.

    Parameter 'level' is the SBML level Parameter 'version' is the SBML
    version

    Returns a string representing the SBML namespace that reflects the
    SBML Level and Version specified.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBMLNamespaces_getSBMLNamespaceURI(*args)

def SBMLNamespaces_getSupportedNamespaces():
  """
    SBMLNamespaces_getSupportedNamespaces() -> List

    Returns a list of all supported SBMLNamespaces in this version of
    libsbml.

    Returns a list with supported SBML namespaces.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBMLNamespaces_getSupportedNamespaces()

def SBMLNamespaces_freeSBMLNamespaces(*args):
  """
    SBMLNamespaces_freeSBMLNamespaces(List supportedNS)

    Frees the list of supported namespaces as generated by
    getSupportedNamespaces().

    Parameter 'supportedNS' is the list to be freed.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBMLNamespaces_freeSBMLNamespaces(*args)

def SBMLNamespaces_isSBMLNamespace(*args):
  """
    SBMLNamespaces_isSBMLNamespace(string uri) -> bool

    Predicate returning True if the given URL is one of SBML XML
    namespaces.

    Parameter 'uri' is the URI of namespace

    Returns True if the 'uri' is one of SBML namespaces, False otherwise.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.SBMLNamespaces_isSBMLNamespace(*args)

class SBMLTransforms(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLTransforms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLTransforms, name)
    __repr__ = _swig_repr
    def clearComponentValues():
        """clearComponentValues()"""
        return _libsbml.SBMLTransforms_clearComponentValues()

    if _newclass:clearComponentValues = staticmethod(clearComponentValues)
    __swig_getmethods__["clearComponentValues"] = lambda x: clearComponentValues
    def __init__(self): 
        """__init__(self) -> SBMLTransforms"""
        this = _libsbml.new_SBMLTransforms()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLTransforms
    __del__ = lambda self : None;
SBMLTransforms_swigregister = _libsbml.SBMLTransforms_swigregister
SBMLTransforms_swigregister(SBMLTransforms)

def SBMLTransforms_clearComponentValues():
  """SBMLTransforms_clearComponentValues()"""
  return _libsbml.SBMLTransforms_clearComponentValues()

CNV_TYPE_BOOL = _libsbml.CNV_TYPE_BOOL
CNV_TYPE_DOUBLE = _libsbml.CNV_TYPE_DOUBLE
CNV_TYPE_INT = _libsbml.CNV_TYPE_INT
CNV_TYPE_SINGLE = _libsbml.CNV_TYPE_SINGLE
CNV_TYPE_STRING = _libsbml.CNV_TYPE_STRING
class ConversionOption(_object):
    """
    Class of object that encapsulates a conversion option.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    LibSBML provides a number of converters that can perform
    transformations on SBML documents.  These converters allow their
    behaviors to be controlled by setting property values.  Converter
    properties are communicated using objects of class
    ConversionProperties, and within such objects, individual options are
    encapsulated using ConversionOption objects.

    A ConversionOption object consists of four parts:

       * A key, acting as the name of the option.

       * A value of this option.

       * A type for the value; the type code is chosen from a set of
    integer constants whose names all begin with the prefix CNV_TYPE_.
    (See the separate subsection below for more information.)

       * A description consisting of a text string that describes the
    option in some way.

    There are no constraints on the values of keys or descriptions;
    authors of SBML converters are free to choose them as they see fit.

    Conversion option data types
    ======================================================================

    An option in ConversionOption must have a data type declared, to
    indicate whether it is a string value, an integer, and so forth.  The
    possible types of values are taken from a set of constants whose
    symbol names begin with the prefix CNV_TYPE_. The following are the
    possible values:

    <center>

      Enumerator               Meaning                                            
      libsbml.CNV_TYPE_BOOL    Indicates the value type is a Boolean.             
      libsbml.CNV_TYPE_DOUBLE  Indicates the value type is a double-sized float.  
      libsbml.CNV_TYPE_INT     Indicates the value type is an integer.            
      libsbml.CNV_TYPE_SINGLE  Indicates the value type is a float.               
      libsbml.CNV_TYPE_STRING  Indicates the value type is a string.

     </center>

    See also ConversionProperties.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConversionOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConversionOption, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string key, string value = "", ConversionOptionType_t type = CNV_TYPE_STRING, 
            string description = "") -> ConversionOption
        __init__(self, string key, string value = "", ConversionOptionType_t type = CNV_TYPE_STRING) -> ConversionOption
        __init__(self, string key, string value = "") -> ConversionOption
        __init__(self, string key) -> ConversionOption
        __init__(self, string key, char value, string description = "") -> ConversionOption
        __init__(self, string key, char value) -> ConversionOption
        __init__(self, string key, bool value, string description = "") -> ConversionOption
        __init__(self, string key, bool value) -> ConversionOption
        __init__(self, string key, double value, string description = "") -> ConversionOption
        __init__(self, string key, double value) -> ConversionOption
        __init__(self, string key, float value, string description = "") -> ConversionOption
        __init__(self, string key, float value) -> ConversionOption
        __init__(self, string key, int value, string description = "") -> ConversionOption
        __init__(self, string key, int value) -> ConversionOption
        __init__(self, ConversionOption orig) -> ConversionOption

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ConversionOption(string key, double value, string description='')

        Creates a new ConversionOption specialized for double-type options.

        Parameter 'key' is the key for this option Parameter 'value' is the
        value for this option Parameter 'description' is an optional
        description

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            ConversionOption(string key, int value, string description='')

        Creates a new ConversionOption specialized for integer-type options.

        Parameter 'key' is the key for this option Parameter 'value' is the
        value for this option Parameter 'description' is an optional
        description

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            ConversionOption(string key, float value, string description='')

        Creates a new ConversionOption specialized for float-type options.

        Parameter 'key' is the key for this option Parameter 'value' is the
        value for this option Parameter 'description' is an optional
        description

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            ConversionOption(string key, string value, string description='')

        Creates a new ConversionOption specialized for string-type options.

        Parameter 'key' is the key for this option Parameter 'value' is the
        value for this option Parameter 'description' is an optional
        description

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            ConversionOption(string key, bool value, string description='')

        Creates a new ConversionOption specialized for Boolean-type options.

        Parameter 'key' is the key for this option Parameter 'value' is the
        value for this option Parameter 'description' is an optional
        description

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            ConversionOption(string key, string value='',
        ConversionOptionType_t type=CNV_TYPE_STRING, string description='')

        Creates a new ConversionOption.

        This is the general constructor, taking arguments for all aspects of
        an option.  Other constructors exist with different arguments.

        @par The conversion 'type' argument value must be one of the constants
        whose names begin with the characters CNV_TYPE_ in the interface class
        libsbml.

        Parameter 'key' is the key for this option Parameter 'value' is an
        optional value for this option Parameter 'type' is the type of this
        option Parameter 'description' is the description for this option

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            ConversionOption(ConversionOption orig)

        Copy constructor; creates a copy of an ConversionOption object.

        Parameter 'orig' is the ConversionOption object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_ConversionOption(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ConversionOption
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> ConversionOption

        Creates and returns a deep copy of this ConversionOption object.

        Returns a (deep) copy of this ConversionOption object.

        """
        return _libsbml.ConversionOption_clone(self)

    def getKey(self):
        """
        getKey(self) -> string

        Returns the key for this option.

        Returns the key, as a string.

        """
        return _libsbml.ConversionOption_getKey(self)

    def setKey(self, *args):
        """
        setKey(self, string key)

        Sets the key for this option.

        Parameter 'key' is a string representing the key to set.

        """
        return _libsbml.ConversionOption_setKey(self, *args)

    def getValue(self):
        """
        getValue(self) -> string

        Returns the value of this option.

        Returns the value of this option, as a string.

        """
        return _libsbml.ConversionOption_getValue(self)

    def setValue(self, *args):
        """
        setValue(self, string value)

        Sets the value for this option.

        Parameter 'value' is the value to set, as a string.

        """
        return _libsbml.ConversionOption_setValue(self, *args)

    def getDescription(self):
        """
        getDescription(self) -> string

        Returns the description string for this option.

        Returns the description of this option.

        """
        return _libsbml.ConversionOption_getDescription(self)

    def setDescription(self, *args):
        """
        setDescription(self, string description)

        Sets the description text for this option.

        Parameter 'description' is the description to set for this option.

        """
        return _libsbml.ConversionOption_setDescription(self, *args)

    def getType(self):
        """
        getType(self) -> ConversionOptionType_t

        Returns the type of this option

        Returns the type of this option.

        """
        return _libsbml.ConversionOption_getType(self)

    def setType(self, *args):
        """
        setType(self, ConversionOptionType_t type)

        Sets the type of this option.

        @par The conversion 'type' argument value must be one of the constants
        whose names begin with the characters CNV_TYPE_ in the interface class
        libsbml.

        Parameter 'type' is the type value to use.

        """
        return _libsbml.ConversionOption_setType(self, *args)

    def getBoolValue(self):
        """
        getBoolValue(self) -> bool

        Returns the value of this option as a Boolean.

        Returns the value of this option.

        """
        return _libsbml.ConversionOption_getBoolValue(self)

    def setBoolValue(self, *args):
        """
        setBoolValue(self, bool value)

        Set the value of this option to a given Boolean value.

        Invoking this method will also set the type of the option to
        libsbml.CNV_TYPE_BOOL.

        Parameter 'value' is the Boolean value to set

        """
        return _libsbml.ConversionOption_setBoolValue(self, *args)

    def getDoubleValue(self):
        """
        getDoubleValue(self) -> double

        Returns the value of this option as a double.

        Returns the value of this option.

        """
        return _libsbml.ConversionOption_getDoubleValue(self)

    def setDoubleValue(self, *args):
        """
        setDoubleValue(self, double value)

        Set the value of this option to a given double value.

        Invoking this method will also set the type of the option to
        libsbml.CNV_TYPE_DOUBLE.

        Parameter 'value' is the value to set

        """
        return _libsbml.ConversionOption_setDoubleValue(self, *args)

    def getFloatValue(self):
        """
        getFloatValue(self) -> float

        Returns the value of this option as a float.

        Returns the value of this option as a float

        """
        return _libsbml.ConversionOption_getFloatValue(self)

    def setFloatValue(self, *args):
        """
        setFloatValue(self, float value)

        Set the value of this option to a given float value.

        Invoking this method will also set the type of the option to
        libsbml.CNV_TYPE_SINGLE.

        Parameter 'value' is the value to set

        """
        return _libsbml.ConversionOption_setFloatValue(self, *args)

    def getIntValue(self):
        """
        getIntValue(self) -> int

        Returns the value of this option as an integer.

        Returns the value of this option, as an int

        """
        return _libsbml.ConversionOption_getIntValue(self)

    def setIntValue(self, *args):
        """
        setIntValue(self, int value)

        Set the value of this option to a given int value.

        Invoking this method will also set the type of the option to
        libsbml.CNV_TYPE_INT.

        Parameter 'value' is the value to set

        """
        return _libsbml.ConversionOption_setIntValue(self, *args)

ConversionOption_swigregister = _libsbml.ConversionOption_swigregister
ConversionOption_swigregister(ConversionOption)

class ConversionProperties(_object):
    """
    Class of object that encapsulates the properties of an SBML
    converter.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    LibSBML provides a number of converters that can perform
    transformations on SBML documents. The properties of SBML converters
    are communicated using objects of class ConversionProperties, and
    within such objects, individual options are encapsulated using
    ConversionOption objects.  The ConversionProperties class provides
    numerous methods for setting and getting options.

    ConversionProperties objects are also used to determine the target
    SBML namespace when an SBML converter's behavior depends on the
    intended Level+Version combination of SBML.  In addition, it is
    conceivable that conversions may be affected by SBML Level 3 packages
    being used by an SBML document; consequently, the packages in use are
    also communicated by the values of the SBML namespaces set on a
    ConversionProperties object.

    See also SBMLNamespaces.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConversionProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConversionProperties, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, SBMLNamespaces targetNS = None) -> ConversionProperties
        __init__(self) -> ConversionProperties
        __init__(self, ConversionProperties orig) -> ConversionProperties

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ConversionProperties(ConversionProperties orig)

        Copy constructor.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            ConversionProperties(SBMLNamespaces targetNS=None)

        Constructor that initializes the conversion properties with a specific
        SBML target namespace.

        Parameter 'targetNS' is the target namespace to convert to

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        this = _libsbml.new_ConversionProperties(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ConversionProperties

        Creates and returns a deep copy of this ConversionProperties object.

        Returns a (deep) copy of this ConversionProperties object.

        """
        return _libsbml.ConversionProperties_clone(self)

    __swig_destroy__ = _libsbml.delete_ConversionProperties
    __del__ = lambda self : None;
    def getTargetNamespaces(self):
        """
        getTargetNamespaces(self) -> SBMLNamespaces

        Returns the current target SBML namespace.

        Returns the SBMLNamepaces object expressing the target namespace.

        """
        return _libsbml.ConversionProperties_getTargetNamespaces(self)

    def hasTargetNamespaces(self):
        """
        hasTargetNamespaces(self) -> bool

        Returns True if the target SBML namespace has been set.

        Returns True if the target namespace has been set, False otherwise.

        """
        return _libsbml.ConversionProperties_hasTargetNamespaces(self)

    def setTargetNamespaces(self, *args):
        """
        setTargetNamespaces(self, SBMLNamespaces targetNS)

        Sets the target namespace.

        Parameter 'targetNS' is the target namespace to use.

        """
        return _libsbml.ConversionProperties_setTargetNamespaces(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, string key) -> string

        Returns the description string for a given option in this properties
        object.

        Parameter 'key' is the key for the option.

        Returns the description text of the option with the given key.

        """
        return _libsbml.ConversionProperties_getDescription(self, *args)

    def getType(self, *args):
        """
        getType(self, string key) -> ConversionOptionType_t

        Returns the type of a given option in this properties object.

        Parameter 'key' is the key for the option.

        Returns the type of the option with the given key.

        """
        return _libsbml.ConversionProperties_getType(self, *args)

    def getOption(self, *args):
        """
        getOption(self, string key) -> ConversionOption
        getOption(self, int index) -> ConversionOption

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getOption(string key)

        Returns the ConversionOption object for a given key.

        Parameter 'key' is the key for the option.

        Returns the option with the given key.

        @par <hr> Method variant with the following signature:

            getOption(int index)

        Returns the ConversionOption object for the given index.

        Parameter 'index' is the index for the option.

        Returns the option with the given index.

        """
        return _libsbml.ConversionProperties_getOption(self, *args)

    def addOption(self, *args):
        """
        addOption(self, ConversionOption option)
        addOption(self, string key, string value = "", ConversionOptionType_t type = CNV_TYPE_STRING, 
            string description = "")
        addOption(self, string key, string value = "", ConversionOptionType_t type = CNV_TYPE_STRING)
        addOption(self, string key, string value = "")
        addOption(self, string key)
        addOption(self, string key, char value, string description = "")
        addOption(self, string key, char value)
        addOption(self, string key, bool value, string description = "")
        addOption(self, string key, bool value)
        addOption(self, string key, double value, string description = "")
        addOption(self, string key, double value)
        addOption(self, string key, float value, string description = "")
        addOption(self, string key, float value)
        addOption(self, string key, int value, string description = "")
        addOption(self, string key, int value)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            addOption(ConversionOption option)

        Adds a copy of the given option to this properties object.

        Parameter 'option' is the option to add

        @par <hr> Method variant with the following signature:

            addOption(string key, double value, string description='')

        Adds a new ConversionOption object with the given parameters.

        Parameter 'key' is the key for the new option Parameter 'value' is the
        double value of that option Parameter 'description' is (optional) the
        description for the option

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            addOption(string key, int value, string description='')

        Adds a new ConversionOption object with the given parameters.

        Parameter 'key' is the key for the new option Parameter 'value' is the
        integer value of that option Parameter 'description' is (optional) the
        description for the option

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            addOption(string key, float value, string description='')

        Adds a new ConversionOption object with the given parameters.

        Parameter 'key' is the key for the new option Parameter 'value' is the
        float value of that option Parameter 'description' is (optional) the
        description for the option

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            addOption(string key, string value, string description='')

        Adds a new ConversionOption object with the given parameters.

        Parameter 'key' is the key for the new option Parameter 'value' is the
        string value of that option Parameter 'description' is (optional) the
        description for the option

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            addOption(string key, bool value, string description='')

        Adds a new ConversionOption object with the given parameters.

        Parameter 'key' is the key for the new option Parameter 'value' is the
        boolean value of that option Parameter 'description' is (optional) the
        description for the option

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            addOption(string key, string value='', ConversionOptionType_t
        type=CNV_TYPE_STRING, string description='')

        Adds a new ConversionOption object with the given parameters.

        Parameter 'key' is the key for the new option Parameter 'value' is
        (optional) the value of that option Parameter 'type' is (optional) the
        type of the option (see the documentation for ConversionOption for
        more information about the types) Parameter 'description' is
        (optional) the description for the option

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.ConversionProperties_addOption(self, *args)

    def removeOption(self, *args):
        """
        removeOption(self, string key) -> ConversionOption

        Removes the option with the given key from this properties object.

        Parameter 'key' is the key for the new option to remove Returns the
        removed option

        """
        return _libsbml.ConversionProperties_removeOption(self, *args)

    def hasOption(self, *args):
        """
        hasOption(self, string key) -> bool

        Returns True if this properties object contains an option with the
        given key.

        Parameter 'key' is the key of the option to find.

        Returns True if an option with the given 'key' exists in this
        properties object, False otherwise.

        """
        return _libsbml.ConversionProperties_hasOption(self, *args)

    def getValue(self, *args):
        """
        getValue(self, string key) -> string

        Returns the value of the given option as a string.

        Parameter 'key' is the key for the option.

        Returns the string value of the option with the given key.

        """
        return _libsbml.ConversionProperties_getValue(self, *args)

    def setValue(self, *args):
        """
        setValue(self, string key, string value)

        Sets the value of the given option to a string.

        Parameter 'key' is the key for the option Parameter 'value' is the new
        value

        """
        return _libsbml.ConversionProperties_setValue(self, *args)

    def getBoolValue(self, *args):
        """
        getBoolValue(self, string key) -> bool

        Returns the value of the given option as a Boolean.

        Parameter 'key' is the key for the option.

        Returns the boolean value of the option with the given key.

        """
        return _libsbml.ConversionProperties_getBoolValue(self, *args)

    def setBoolValue(self, *args):
        """
        setBoolValue(self, string key, bool value)

        Sets the value of the given option to a Boolean.

        Parameter 'key' is the key for the option.

        Parameter 'value' is the new Boolean value.

        """
        return _libsbml.ConversionProperties_setBoolValue(self, *args)

    def getDoubleValue(self, *args):
        """
        getDoubleValue(self, string key) -> double

        Returns the value of the given option as a double.

        Parameter 'key' is the key for the option.

        Returns the double value of the option with the given key.

        """
        return _libsbml.ConversionProperties_getDoubleValue(self, *args)

    def setDoubleValue(self, *args):
        """
        setDoubleValue(self, string key, double value)

        Sets the value of the given option to a double.

        Parameter 'key' is the key for the option.

        Parameter 'value' is the new double value.

        """
        return _libsbml.ConversionProperties_setDoubleValue(self, *args)

    def getFloatValue(self, *args):
        """
        getFloatValue(self, string key) -> float

        Returns the value of the given option as a float.

        Parameter 'key' is the key for the option.

        Returns the float value of the option with the given key.

        """
        return _libsbml.ConversionProperties_getFloatValue(self, *args)

    def setFloatValue(self, *args):
        """
        setFloatValue(self, string key, float value)

        Sets the value of the given option to a float.

        Parameter 'key' is the key for the option.

        Parameter 'value' is the new float value.

        """
        return _libsbml.ConversionProperties_setFloatValue(self, *args)

    def getIntValue(self, *args):
        """
        getIntValue(self, string key) -> int

        Returns the value of the given option as an integer.

        Parameter 'key' is the key for the option.

        Returns the int value of the option with the given key.

        """
        return _libsbml.ConversionProperties_getIntValue(self, *args)

    def setIntValue(self, *args):
        """
        setIntValue(self, string key, int value)

        Sets the value of the given option to an integer.

        Parameter 'key' is the key for the option.

        Parameter 'value' is the new integer value.

        """
        return _libsbml.ConversionProperties_setIntValue(self, *args)

    def getNumOptions(self):
        """
        getNumOptions(self) -> int

        Returns the number of options in this Conversion Properties object

        Returns the number of options in this properties object

        """
        return _libsbml.ConversionProperties_getNumOptions(self)

ConversionProperties_swigregister = _libsbml.ConversionProperties_swigregister
ConversionProperties_swigregister(ConversionProperties)

class SBMLConverter(_object):
    """
    Base class for SBML converters.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    The SBMLConverter class is the base class for the various SBML
    converters: classes of objects that transform or convert SBML
    documents. These transformations can involve essentially anything that
    can be written algorithmically; examples include converting the units
    of measurement in a model, or converting from one Level+Version
    combination of SBML to another.  Applications can also create their
    own converters by subclassing SBMLConverter and following the examples
    of the existing converters.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLConverter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLConverter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLConverter
        __init__(self, string name) -> SBMLConverter
        __init__(self, SBMLConverter c) -> SBMLConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLConverter()

        Creates a new SBMLConverter object.

        @par <hr> Method variant with the following signature:

            SBMLConverter(string name)

        Creates a new SBMLConverter object with a given name.

        Parameter 'name' is the name for the converter to create

        @par <hr> Method variant with the following signature:

            SBMLConverter(SBMLConverter c)

        Copy constructor; creates a copy of an SBMLConverter object.

        Parameter 'c' is the SBMLConverter object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        if self.__class__ == SBMLConverter:
            _self = None
        else:
            _self = self
        this = _libsbml.new_SBMLConverter(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLConverter
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this SBMLConverter object.

        Returns a (deep) copy of this SBMLConverter object.

        """
        return _libsbml.SBMLConverter_clone(self)

    def getDocument(self, *args):
        """
        getDocument(self) -> SBMLDocument
        getDocument(self) -> SBMLDocument

        Returns the SBML document that is the subject of the conversions.

        Returns the current SBMLDocument object.

        """
        return _libsbml.SBMLConverter_getDocument(self, *args)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.  The run-time properties of the converter object can be
        adjusted by using the method SBMLConverter.setProperties().

        Returns the default properties for the converter.

        See also matchesProperties().

        """
        return _libsbml.SBMLConverter_getDefaultProperties(self)

    def getTargetNamespaces(self):
        """
        getTargetNamespaces(self) -> SBMLNamespaces

        Returns the target SBML namespaces of the currently set properties.

        SBML namespaces are used by libSBML to express the Level+Version of
        the SBML document (and, possibly, any SBML Level 3 packages in use).
        Some converters' behavior is affected by the SBML namespace configured
        in the converter.  For example, the actions of
        SBMLLevelVersionConverter, the converter for converting SBML documents
        from one Level+Version combination to another, are fundamentally
        dependent on the SBML namespaces being targeted.

        Returns the SBMLNamespaces object that describes the SBML namespaces
        in effect.

        """
        return _libsbml.SBMLConverter_getTargetNamespaces(self)

    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Predicate returning True if this converter's properties matches a
        given set of configuration properties.

        Parameter 'props' is the configuration properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLConverter_matchesProperties(self, *args)

    def setDocument(self, *args):
        """
        setDocument(self, SBMLDocument doc) -> int
        setDocument(self, SBMLDocument doc) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setDocument(SBMLDocument doc)

        Sets the current SBML document to the given SBMLDocument object.

        Parameter 'doc' is the document to use for this conversion.

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned ultimately depends on
        the specific subclass of SBMLConverter being used, but the default
        method can return the following values:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        WARNING:

        Even though the argument 'doc' is 'const', it is immediately cast to a
        non-const version, which is then usually changed by the converter upon
        a successful conversion.  This variant of the setDocument() method is
        here solely to preserve backwards compatibility.

        @par <hr> Method variant with the following signature:

            setDocument(SBMLDocument doc)

        Sets the current SBML document to the given SBMLDocument object.

        Parameter 'doc' is the document to use for this conversion.

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned ultimately depends on
        the specific subclass of SBMLConverter being used, but the default
        method can return the following values:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.SBMLConverter_setDocument(self, *args)

    def setProperties(self, *args):
        """
        setProperties(self, ConversionProperties props) -> int

        Sets the configuration properties to be used by this converter.

        Parameter 'props' is the ConversionProperties object defining the
        properties to set.

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned ultimately depends on
        the specific subclass of SBMLConverter being used, but the default
        method can return the following values:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also matchesProperties().

        """
        return _libsbml.SBMLConverter_setProperties(self, *args)

    def getProperties(self):
        """
        getProperties(self) -> ConversionProperties

        Returns the current properties in effect for this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the current properties for this converter; in other words, the
        settings in effect at this moment.  To change the property values, you
        can use SBMLConverter.setProperties().

        Returns the currently set configuration properties.

        See also matchesProperties().

        """
        return _libsbml.SBMLConverter_getProperties(self)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned depends on the
        converter subclass; please consult the documentation for the relevant
        class to find out what the possibilities are.

        """
        return _libsbml.SBMLConverter_convert(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the name of this converter.

        Returns a name for this converter

        """
        return _libsbml.SBMLConverter_getName(self)

    def __disown__(self):
        self.this.disown()
        _libsbml.disown_SBMLConverter(self)
        return weakref_proxy(self)
SBMLConverter_swigregister = _libsbml.SBMLConverter_swigregister
SBMLConverter_swigregister(SBMLConverter)

class SBMLConverterRegistry(_object):
    """
    Registry of all SBML converters.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    LibSBML provides facilities for transforming and converting SBML
    documents in various ways.  These transformations can involve
    essentially anything that can be written algorithmically; examples
    include converting the units of measurement in a model, or converting
    from one Level+Version combination of SBML to another.  Converters are
    implemented as objects derived from the class SBMLConverter.

    The converter registry, implemented as a singleton object of class
    SBMLConverterRegistry, maintains a list of known converters and
    provides methods for discovering them.  Callers can use the method
    SBMLConverterRegistry.getNumConverters() to find out how many
    converters are registered, then use
    SBMLConverterRegistry.getConverterByIndex() to iterate over each one;
    alternatively, callers can use SBMLConverterRegistry.getConverterFor()
    to search for a converter having specific properties.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLConverterRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLConverterRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getInstance():
        """
        getInstance() -> SBMLConverterRegistry

        Returns the singleton instance for the converter registry.

        Prior to using the registry, callers have to obtain a copy of the
        registry.  This static method provides the means for doing that.

        Returns the singleton for the converter registry.

        """
        return _libsbml.SBMLConverterRegistry_getInstance()

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
    def addConverter(self, *args):
        """
        addConverter(self, SBMLConverter converter) -> int

        Adds the given converter to the registry of SBML converters.

        Parameter 'converter' is the converter to add to the registry.

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.SBMLConverterRegistry_addConverter(self, *args)

    def getConverterByIndex(self, *args):
        """
        getConverterByIndex(self, int index) -> SBMLConverter

        Returns the converter with the given index number.

        Converters are given arbitrary index numbers by the registry.  Callers
        can use the method SBMLConverterRegistry.getNumConverters() to find
        out how many converters are registered, then use this method to
        iterate over the list and obtain each one in turn.

        Parameter 'index' is the zero-based index of the converter to fetch.

        Returns the converter with the given index number, or None if the
        number is less than 0 or there is no converter at the given index
        position.

        """
        return _libsbml.SBMLConverterRegistry_getConverterByIndex(self, *args)

    def getConverterFor(self, *args):
        """
        getConverterFor(self, ConversionProperties props) -> SBMLConverter

        Returns the converter that best matches the given configuration
        properties.

        Many converters provide the ability to configure their behavior.  This
        is realized through the use of properties that offer different
        options.  The present method allows callers to search for converters
        that have specific property values.  Callers can do this by creating a
        ConversionProperties object, adding the desired option(s) to the
        object, then passing the object to this method.

        Parameter 'props' is a ConversionProperties object defining the
        properties to match against.

        Returns the converter matching the properties, or None if no suitable
        converter is found.

        See also getConverterByIndex().

        """
        return _libsbml.SBMLConverterRegistry_getConverterFor(self, *args)

    def getNumConverters(self):
        """
        getNumConverters(self) -> int

        Returns the number of converters known by the registry.

        Returns the number of registered converters.

        See also getConverterByIndex().

        """
        return _libsbml.SBMLConverterRegistry_getNumConverters(self)

    __swig_destroy__ = _libsbml.delete_SBMLConverterRegistry
    __del__ = lambda self : None;
SBMLConverterRegistry_swigregister = _libsbml.SBMLConverterRegistry_swigregister
SBMLConverterRegistry_swigregister(SBMLConverterRegistry)

def SBMLConverterRegistry_getInstance():
  """
    SBMLConverterRegistry_getInstance() -> SBMLConverterRegistry

    Returns the singleton instance for the converter registry.

    Prior to using the registry, callers have to obtain a copy of the
    registry.  This static method provides the means for doing that.

    Returns the singleton for the converter registry.

    """
  return _libsbml.SBMLConverterRegistry_getInstance()

class SBMLFunctionDefinitionConverter(SBMLConverter):
    """
    SBML converter for replacing function definitions.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This converter manipulates user-defined functions in an SBML file.
    When invoked on a model, it performs the following operations:

        * Reads the list of user-defined functions in the model (i.e., the
    list of FunctionDefinition objects);

       * Looks for invocations of the function in mathematical expressions
    throughout the model; and

       * For each invocation found, replaces the invocation with a in-line
    copy of the function's body, similar to how macro expansions might be
    performed in scripting and programming languages.

    For example, suppose the model contains a function definition
    representing the function f(x, y) = x * y.  Further suppose this
    functions invoked somewhere else in the model, in a mathematical
    formula, as f(s, p).  The outcome of running
    SBMLFunctionDefinitionConverter on the model will be to replace the
    call to f with the expression s * p.

    Configuration and use of SBMLFunctionDefinitionConverter
    ======================================================================

    SBMLFunctionDefinitionConverter is enabled by creating a
    ConversionProperties object with the option
    'expandFunctionDefinitions', and passing this properties object to
    SBMLDocument.convert().  The converter accepts one option:

        * 'skipIds': if set, it should be a string containing a comma-
    separated list of identifiers (SBML 'id' values) that are to be
    skipped during function conversion.  Functions whose identifiers are
    found in this list will not be converted.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLFunctionDefinitionConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLFunctionDefinitionConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLFunctionDefinitionConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLFunctionDefinitionConverter
        __init__(self, SBMLFunctionDefinitionConverter obj) -> SBMLFunctionDefinitionConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLFunctionDefinitionConverter()

        Creates a new SBMLFunctionDefinitionConverter object.

        @par <hr> Method variant with the following signature:

            SBMLFunctionDefinitionConverter(SBMLFunctionDefinitionConverter
        obj)

        Copy constructor; creates a copy of an SBMLFunctionDefinitionConverter
        object.

        Parameter 'obj' is the SBMLFunctionDefinitionConverter object to copy.

        """
        this = _libsbml.new_SBMLFunctionDefinitionConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this
        SBMLFunctionDefinitionConverter object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLFunctionDefinitionConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_SBMLFunctionDefinitionConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLFunctionDefinitionConverter object to find out if the object's
        property values match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLFunctionDefinitionConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_CONV_INVALID_SRC_DOCUMENT

        """
        return _libsbml.SBMLFunctionDefinitionConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLFunctionDefinitionConverter_getDefaultProperties(self)

SBMLFunctionDefinitionConverter_swigregister = _libsbml.SBMLFunctionDefinitionConverter_swigregister
SBMLFunctionDefinitionConverter_swigregister(SBMLFunctionDefinitionConverter)

def SBMLFunctionDefinitionConverter_init():
  """SBMLFunctionDefinitionConverter_init()"""
  return _libsbml.SBMLFunctionDefinitionConverter_init()

class SBMLIdConverter(SBMLConverter):
    """
    SBML converter for replacing identifiers.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This converter translates all instances of a given identifier (i.e.,
    SBML object 'id' attribute value) of type 'SId' in a Model to another
    identifier.  It does this based on a list of source identifiers,
    translating each one to its corresponding replacement value in a list
    of replacement identifiers.  It also updates all references to the
    identifiers so replaced.  (More technically, it replaces all values
    known as type SIdRef in the SBML Level 3 specifications.)

    This converter only searches the global SId namespace for the Model
    child of the  SBMLDocument.  It does not replace any IDs or SIdRefs
    for LocalParameters, nor does it replace any UnitSIds or UnitSIdRefs.
    It likewise does not replace any IDs in a new namespace introduced by
    a package, such as the PortSId namespace from the Hierarchical Model
    Composition package, nor any Model objects that are not the direct
    child of the SBMLDocument, such as the ModelDefinitions from  the
    Hierarchical Model Composition package.

    If, however, a package introduces a new element with an 'id' attribute
    of type SId, any attribute of type SIdRef, or child of type SIdRef
    (such as  a new Math child of a package element), those IDs will be
    replaced if they match a source identifier.

    Configuration and use of SBMLIdConverter
    ======================================================================

    SBMLIdConverter is enabled by creating a ConversionProperties object
    with the option 'renameSIds', and passing this properties object to
    SBMLDocument.convert().  The converter accepts two options, and both
    must be set or else no conversion is performed:

        * 'currentIds': A comma-separated list of identifiers to replace.

       * 'newIds': A comma-separated list of identifiers to use as the
    replacements.  The values should correspond one-to-one with the
    identifiers in 'currentIds' that should be replaced.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLIdConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLIdConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLIdConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLIdConverter
        __init__(self, SBMLIdConverter obj) -> SBMLIdConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLIdConverter(SBMLIdConverter obj)

        Copy constructor; creates a copy of an SBMLIdConverter object.

        Parameter 'obj' is the SBMLIdConverter object to copy.

        @par <hr> Method variant with the following signature:

            SBMLIdConverter()

        Creates a new SBMLIdConverter object.

        """
        this = _libsbml.new_SBMLIdConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this SBMLIdConverter object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLIdConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_SBMLIdConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLIdConverter object to find out if the object's property values
        match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLIdConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.SBMLIdConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLIdConverter_getDefaultProperties(self)

SBMLIdConverter_swigregister = _libsbml.SBMLIdConverter_swigregister
SBMLIdConverter_swigregister(SBMLIdConverter)

def SBMLIdConverter_init():
  """SBMLIdConverter_init()"""
  return _libsbml.SBMLIdConverter_init()

class SBMLInferUnitsConverter(SBMLConverter):
    """
    This method has multiple variants that differ in the arguments  they
    accept.  Each is described separately below.

    @par <hr> Method variant with the following signature:

        SBMLInferUnitsConverter()

    Creates a new SBMLInferUnitsConverter object.

    @par <hr> Method variant with the following signature:

        SBMLInferUnitsConverter(SBMLInferUnitsConverter obj)

    Copy constructor; creates a copy of an SBMLInferUnitsConverter object.

    Parameter 'obj' is the SBMLInferUnitsConverter object to copy.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLInferUnitsConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLInferUnitsConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLInferUnitsConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLInferUnitsConverter
        __init__(self, SBMLInferUnitsConverter obj) -> SBMLInferUnitsConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLInferUnitsConverter()

        Creates a new SBMLInferUnitsConverter object.

        @par <hr> Method variant with the following signature:

            SBMLInferUnitsConverter(SBMLInferUnitsConverter obj)

        Copy constructor; creates a copy of an SBMLInferUnitsConverter object.

        Parameter 'obj' is the SBMLInferUnitsConverter object to copy.

        """
        this = _libsbml.new_SBMLInferUnitsConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLInferUnitsConverter
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLInferUnitsConverter

        Creates and returns a deep copy of this SBMLConverter object.

        Returns a (deep) copy of this SBMLConverter object.

        """
        return _libsbml.SBMLInferUnitsConverter_clone(self)

    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Predicate returning True if this converter's properties matches a
        given set of configuration properties.

        Parameter 'props' is the configuration properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLInferUnitsConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned depends on the
        converter subclass; please consult the documentation for the relevant
        class to find out what the possibilities are.

        """
        return _libsbml.SBMLInferUnitsConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.  The run-time properties of the converter object can be
        adjusted by using the method SBMLConverter.setProperties().

        Returns the default properties for the converter.

        See also matchesProperties().

        """
        return _libsbml.SBMLInferUnitsConverter_getDefaultProperties(self)

SBMLInferUnitsConverter_swigregister = _libsbml.SBMLInferUnitsConverter_swigregister
SBMLInferUnitsConverter_swigregister(SBMLInferUnitsConverter)

def SBMLInferUnitsConverter_init():
  """SBMLInferUnitsConverter_init()"""
  return _libsbml.SBMLInferUnitsConverter_init()

class SBMLInitialAssignmentConverter(SBMLConverter):
    """
    SBML converter for replacing initial assignments.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This is an SBML converter for replacing InitialAssignment objects,
    when possible, by setting the initial value attributes on the model
    objects being assigned.  In other words, for every object that is the
    target of an initial assignment in the model, the converter evaluates
    the mathematical expression of the assignment to get a numerical
    value, and then sets the corresponding attribute of the object to the
    value.  The effects for different kinds of SBML components are as
    follows:

    <center>

      +------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
      |Component         |Effect                                                                                                                                                              |
      +------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
      |Compartment       |Sets the value of the size attribute.                                                                                                                               |
      |Species           |Sets the value of either the initialAmount or the initialConcentration attributes, depending on the value of the Species object's hasOnlySubstanceUnits attribute.  |
      |Parameter         |Sets the value of the value attribute.                                                                                                                              |
      |SpeciesReference  |Sets the value of the stoichiometry attribute in the Reaction object where the SpeciesReference object appears.                                                     |
      +------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

     </center>

    Configuration and use of SBMLInitialAssignmentConverter
    ======================================================================

    SBMLInitialAssignmentConverter is enabled by creating a
    ConversionProperties object with the option
    'expandInitialAssignments', and passing this properties object to
    SBMLDocument.convert().  The converter offers no other options.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLInitialAssignmentConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLInitialAssignmentConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLInitialAssignmentConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLInitialAssignmentConverter
        __init__(self, SBMLInitialAssignmentConverter obj) -> SBMLInitialAssignmentConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLInitialAssignmentConverter(SBMLInitialAssignmentConverter obj)

        Copy constructor; creates a copy of an SBMLInitialAssignmentConverter
        object.

        Parameter 'obj' is the SBMLInitialAssignmentConverter object to copy.

        @par <hr> Method variant with the following signature:

            SBMLInitialAssignmentConverter()

        Creates a new SBMLInitialAssignmentConverter object.

        """
        this = _libsbml.new_SBMLInitialAssignmentConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this SBMLInitialAssignmentConverter
        object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLInitialAssignmentConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_SBMLInitialAssignmentConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLInitialAssignmentConverter object to find out if the object's
        property values match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLInitialAssignmentConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.SBMLInitialAssignmentConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLInitialAssignmentConverter_getDefaultProperties(self)

SBMLInitialAssignmentConverter_swigregister = _libsbml.SBMLInitialAssignmentConverter_swigregister
SBMLInitialAssignmentConverter_swigregister(SBMLInitialAssignmentConverter)

def SBMLInitialAssignmentConverter_init():
  """SBMLInitialAssignmentConverter_init()"""
  return _libsbml.SBMLInitialAssignmentConverter_init()

class SBMLLevelVersionConverter(SBMLConverter):
    """
    This method has multiple variants that differ in the arguments  they
    accept.  Each is described separately below.

    @par <hr> Method variant with the following signature:

        SBMLLevelVersionConverter()

    Creates a new SBMLLevelVersionConverter object.

    @par <hr> Method variant with the following signature:

        SBMLLevelVersionConverter(SBMLLevelVersionConverter obj)

    Copy constructor; creates a copy of an SBMLLevelVersionConverter
    object.

    Parameter 'obj' is the SBMLLevelVersionConverter object to copy.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLLevelVersionConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLLevelVersionConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLLevelVersionConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLLevelVersionConverter
        __init__(self, SBMLLevelVersionConverter obj) -> SBMLLevelVersionConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLLevelVersionConverter()

        Creates a new SBMLLevelVersionConverter object.

        @par <hr> Method variant with the following signature:

            SBMLLevelVersionConverter(SBMLLevelVersionConverter obj)

        Copy constructor; creates a copy of an SBMLLevelVersionConverter
        object.

        Parameter 'obj' is the SBMLLevelVersionConverter object to copy.

        """
        this = _libsbml.new_SBMLLevelVersionConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLLevelVersionConverter
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLLevelVersionConverter

        Creates and returns a deep copy of this SBMLConverter object.

        Returns a (deep) copy of this SBMLConverter object.

        """
        return _libsbml.SBMLLevelVersionConverter_clone(self)

    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Predicate returning True if this converter's properties matches a
        given set of configuration properties.

        Parameter 'props' is the configuration properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLLevelVersionConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned depends on the
        converter subclass; please consult the documentation for the relevant
        class to find out what the possibilities are.

        """
        return _libsbml.SBMLLevelVersionConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.  The run-time properties of the converter object can be
        adjusted by using the method SBMLConverter.setProperties().

        Returns the default properties for the converter.

        See also matchesProperties().

        """
        return _libsbml.SBMLLevelVersionConverter_getDefaultProperties(self)

    def getTargetLevel(self):
        """
        getTargetLevel(self) -> unsigned int

        Returns the target SBML Level for the conversion.

        Returns an integer indicating the SBML Level.

        """
        return _libsbml.SBMLLevelVersionConverter_getTargetLevel(self)

    def getTargetVersion(self):
        """
        getTargetVersion(self) -> unsigned int

        Returns the target SBML Version for the conversion.

        Returns an integer indicating the Version within the SBML Level.

        """
        return _libsbml.SBMLLevelVersionConverter_getTargetVersion(self)

    def getValidityFlag(self):
        """
        getValidityFlag(self) -> bool

        Returns the flag indicating whether the conversion has been set to
        'strict'.

        Returns True if strict validity has been requested, False otherwise.

        """
        return _libsbml.SBMLLevelVersionConverter_getValidityFlag(self)

SBMLLevelVersionConverter_swigregister = _libsbml.SBMLLevelVersionConverter_swigregister
SBMLLevelVersionConverter_swigregister(SBMLLevelVersionConverter)

def SBMLLevelVersionConverter_init():
  """SBMLLevelVersionConverter_init()"""
  return _libsbml.SBMLLevelVersionConverter_init()

class SBMLLocalParameterConverter(SBMLConverter):
    """
    SBML converter to replace local parameters with global ones.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This converter essentially promotes local parameters to global
    parameters. It works by examining every Reaction object for
    LocalParameter objects, then creating Parameter objects on the model
    for each one found, and finally removing the original LocalParameter
    objects.  It creates new identifiers for the fresh Parameter objects
    by concatenating the identifier of the reaction with the identifier of
    the original LocalParameter object.

    This converter can be useful for software applications that do not
    have the ability to handle local parameters on reactions.  Such
    applications could check incoming models for local parameters and run
    those models through this converter before proceeding with other
    steps.

    Configuration and use of SBMLLocalParameterConverter
    ======================================================================

    SBMLLocalParameterConverter is enabled by creating a
    ConversionProperties object with the option 'promoteLocalParameters',
    and passing this properties object to SBMLDocument.convert().  The
    converter offers no other options.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLLocalParameterConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLLocalParameterConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLLocalParameterConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLLocalParameterConverter
        __init__(self, SBMLLocalParameterConverter obj) -> SBMLLocalParameterConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLLocalParameterConverter(SBMLLocalParameterConverter obj)

        Copy constructor; creates a copy of an SBMLLocalParameterConverter
        object.

        Parameter 'obj' is the SBMLLocalParameterConverter object to copy.

        @par <hr> Method variant with the following signature:

            SBMLLocalParameterConverter()

        Creates a new SBMLLocalParameterConverter object.

        """
        this = _libsbml.new_SBMLLocalParameterConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this SBMLLocalParameterConverter
        object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLLocalParameterConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_SBMLLocalParameterConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLLocalParameterConverter object to find out if the object's
        property values match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLLocalParameterConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.SBMLLocalParameterConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLLocalParameterConverter_getDefaultProperties(self)

SBMLLocalParameterConverter_swigregister = _libsbml.SBMLLocalParameterConverter_swigregister
SBMLLocalParameterConverter_swigregister(SBMLLocalParameterConverter)

def SBMLLocalParameterConverter_init():
  """SBMLLocalParameterConverter_init()"""
  return _libsbml.SBMLLocalParameterConverter_init()

class SBMLReactionConverter(SBMLConverter):
    """
    SBML converter for replacing reactions with SBML rate rules.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This converter will take an SBML model and replace the definitions of
    reactions in the model with definitions of SBML rate rules.
    Equivalent RateRule objects are only created for species mentioned in
    reactions that have KineticLaw subobjects, since those are the only
    reactions that have an effect on the rates of change of species in the
    model; however, the converter removes all Reaction objects in the
    model after it is done.

    Configuration and use of SBMLReactionConverter
    ======================================================================

    SBMLReactionConverter is enabled by creating a ConversionProperties
    object with the option 'replaceReactions', and passing this properties
    object to SBMLDocument.convert().  This converter does not offer any
    additional configuration options.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLReactionConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLReactionConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLReactionConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLReactionConverter
        __init__(self, SBMLReactionConverter obj) -> SBMLReactionConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLReactionConverter(SBMLReactionConverter obj)

        Copy constructor; creates a copy of an SBMLReactionConverter object.

        Parameter 'obj' is the SBMLReactionConverter object to copy.

        @par <hr> Method variant with the following signature:

            SBMLReactionConverter()

        Creates a new SBMLReactionConverter object.

        """
        this = _libsbml.new_SBMLReactionConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this SBMLReactionConverter object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLReactionConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_SBMLReactionConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLReactionConverter object to find out if the object's property
        values match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLReactionConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_CONV_INVALID_SRC_DOCUMENT

        """
        return _libsbml.SBMLReactionConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLReactionConverter_getDefaultProperties(self)

    def setDocument(self, *args):
        """
        setDocument(self, SBMLDocument doc) -> int
        setDocument(self, SBMLDocument doc) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setDocument(SBMLDocument doc)

        Sets the current SBML document to the given SBMLDocument object.

        Parameter 'doc' is the document to use for this conversion.

        WARNING:

        Even though the 'doc' is 'const', it is immediately cast to a non-
        const version, which is then usually changed by the converter upon a
        successful conversion.  This function is here solely to preserve
        backwards compatibility.

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned ultimately depends on
        the specific subclass of SBMLConverter being used, but the default
        method can return the following values:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        @par <hr> Method variant with the following signature:

            setDocument(SBMLDocument doc)

        Sets the current SBML document to the given SBMLDocument object.

        Parameter 'doc' is the document to use for this conversion.

        Returns integer value indicating the success/failure of the operation.
        The set of possible values that may be returned ultimately depends on
        the specific subclass of SBMLConverter being used, but the default
        method can return the following values:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.SBMLReactionConverter_setDocument(self, *args)

SBMLReactionConverter_swigregister = _libsbml.SBMLReactionConverter_swigregister
SBMLReactionConverter_swigregister(SBMLReactionConverter)

def SBMLReactionConverter_init():
  """SBMLReactionConverter_init()"""
  return _libsbml.SBMLReactionConverter_init()

class SBMLRuleConverter(SBMLConverter):
    """
    SBML converter for reordering rules and assignments in a model.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This converter reorders assignments in a model.  Specifically, it
    sorts the list of assignment rules (i.e., the AssignmentRule objects
    contained in the ListOfAssignmentRules within the Model object) and
    the initial assignments (i.e., the InitialAssignment objects contained
    in the ListOfInitialAssignments) such that, within each set,
    assignments that depend on prior values are placed after the values
    are set.  For example, if there is an assignment rule stating a = b +
    1, and another rule stating b = 3, the list of rules is sorted and the
    rules are arranged so that the rule for b = 3 appears before the rule
    for a = b + 1.  Similarly, if dependencies of this sort exist in the
    list of initial assignments in the model, the initial assignments are
    sorted as well.

    Beginning with SBML Level 2, assignment rules have no ordering
    required -- the order in which the rules appear in an SBML file has no
    significance.  Software tools, however, may need to reorder
    assignments for purposes of evaluating them.  For example, for
    simulators that use time integration methods, it would be a good idea
    to reorder assignment rules such as the following,

    b = a + 10 seconds a = time

    so that the evaluation of the rules is independent of integrator step
    sizes. (This is due to the fact that, in this case, the order in which
    the rules are evaluated changes the result.)  SBMLRuleConverter can be
    used to reorder the SBML objects regardless of whether the input file
    contained them in the desired order.

    Note:

    The two sets of assignments (list of assignment rules on the one hand,
    and list of initial assignments on the other hand) are handled
    independently.  In an SBML model, these entities are treated
    differently and no amount of sorting can deal with inter-dependencies
    between assignments of the two kinds. Configuration and use of SBMLRuleConverter
    ======================================================================

    SBMLRuleConverter is enabled by creating a ConversionProperties object
    with the option 'sortRules', and passing this properties object to
    SBMLDocument.convert().  This converter offers no other options.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLRuleConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLRuleConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLRuleConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLRuleConverter
        __init__(self, SBMLRuleConverter obj) -> SBMLRuleConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLRuleConverter(SBMLRuleConverter obj)

        Copy constructor; creates a copy of an SBMLLevelVersionConverter
        object.

        Parameter 'obj' is the SBMLLevelVersionConverter object to copy.

        @par <hr> Method variant with the following signature:

            SBMLRuleConverter()

        Creates a new SBMLLevelVersionConverter object.

        """
        this = _libsbml.new_SBMLRuleConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this SBMLLevelVersionConverter
        object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLRuleConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_SBMLRuleConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLLevelVersionConverter object to find out if the object's
        property values match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLRuleConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_CONV_INVALID_SRC_DOCUMENT

        """
        return _libsbml.SBMLRuleConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLRuleConverter_getDefaultProperties(self)

SBMLRuleConverter_swigregister = _libsbml.SBMLRuleConverter_swigregister
SBMLRuleConverter_swigregister(SBMLRuleConverter)

def SBMLRuleConverter_init():
  """SBMLRuleConverter_init()"""
  return _libsbml.SBMLRuleConverter_init()

class SBMLStripPackageConverter(SBMLConverter):
    """
    SBML converter for removing SBML Level 3 packages.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This SBML converter takes an SBML document and removes (strips) an
    SBML Level 3 package from it.  No conversion is performed; the package
    constructs are simply removed from the SBML document.  The package to
    be stripped is determined by the value of the option 'package' on the
    conversion properties.

    Configuration and use of SBMLStripPackageConverter
    ======================================================================

    SBMLStripPackageConverter is enabled by creating a
    ConversionProperties object with the option 'stripPackage', and
    passing this properties object to SBMLDocument.convert().  This
    converter takes one required option:

        * 'package': the value of this option should be a text string, the
    nickname of the SBML Level 3 package to be stripped from the model.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLStripPackageConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLStripPackageConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLStripPackageConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLStripPackageConverter
        __init__(self, SBMLStripPackageConverter obj) -> SBMLStripPackageConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLStripPackageConverter()

        Creates a new SBMLStripPackageConverter object.

        @par <hr> Method variant with the following signature:

            SBMLStripPackageConverter(SBMLStripPackageConverter obj)

        Copy constructor; creates a copy of an SBMLStripPackageConverter
        object.

        Parameter 'obj' is the SBMLStripPackageConverter object to copy.

        """
        this = _libsbml.new_SBMLStripPackageConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLStripPackageConverter
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLStripPackageConverter

        Creates and returns a deep copy of this SBMLStripPackageConverter
        object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLStripPackageConverter_clone(self)

    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLStripPackageConverter object to find out if the object's
        property values match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLStripPackageConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_CONV_PKG_CONSIDERED_UNKNOWN

        """
        return _libsbml.SBMLStripPackageConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLStripPackageConverter_getDefaultProperties(self)

SBMLStripPackageConverter_swigregister = _libsbml.SBMLStripPackageConverter_swigregister
SBMLStripPackageConverter_swigregister(SBMLStripPackageConverter)

def SBMLStripPackageConverter_init():
  """SBMLStripPackageConverter_init()"""
  return _libsbml.SBMLStripPackageConverter_init()

class SBMLUnitsConverter(SBMLConverter):
    """
    SBML converter to convert a model's units to SI units.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This SBML converter converts the units in a model to base SI units,
    that is, using only the units metre, kilogram, second, ampere, kelvin,
    mole and candela.

    Unit conversion will only be performed on models that are fully unit
    consistent, meaning that all objects have units associated with them
    and there are no literal numbers with unspecified units.  In the case
    of an SBML Level 3 model involving math expressions, this means that
    the timeUnits attribute on the Model object must be set, and if there
    are any reactions in the model, the extentUnits attribute on the Model
    object must also be set.

    Configuration and use of SBMLUnitsConverter
    ======================================================================

    SBMLUnitsConverter is enabled by creating a ConversionProperties
    object with the option 'units', and passing this properties object to
    SBMLDocument.convert().  This converter takes one optional option:

        * 'removeUnusedUnits': the value of this property should be a
    Boolean.  If it is True, it tells the unit convert to remove any
    unused UnitDefinition objects after conversion is complete.  ('Unused'
    units are units that are not referenced by any object in the model.)
    If the value is False, unused UnitDefinition objects are not removed
    from the model. The default is True.

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLUnitsConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLUnitsConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.SBMLUnitsConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLUnitsConverter
        __init__(self, SBMLUnitsConverter obj) -> SBMLUnitsConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLUnitsConverter()

        Creates a new SBMLUnitsConverter object.

        @par <hr> Method variant with the following signature:

            SBMLUnitsConverter(SBMLUnitsConverter obj)

        Copy constructor; creates a copy of an SBMLUnitsConverter object.

        Parameter 'obj' is the SBMLUnitsConverter object to copy.

        """
        this = _libsbml.new_SBMLUnitsConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLUnitsConverter
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLUnitsConverter

        Creates and returns a deep copy of this SBMLUnitsConverter object.

        Returns a (deep) copy of this converter.

        """
        return _libsbml.SBMLUnitsConverter_clone(self)

    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        Returns True if this converter object's properties match the given
        properties.

        A typical use of this method involves creating a ConversionProperties
        object, setting the options desired, and then calling this method on
        an SBMLUnitsConverter object to find out if the object's property
        values match the given ones.  This method is also used by
        SBMLConverterRegistry.getConverterFor() to search across all
        registered converters for one matching particular properties.

        Parameter 'props' is the properties to match.

        Returns True if this converter's properties match, False otherwise.

        """
        return _libsbml.SBMLUnitsConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Perform the conversion.

        This method causes the converter to do the actual conversion work,
        that is, to convert the SBMLDocument object set by
        SBMLConverter.setDocument() and with the configuration options set by
        SBMLConverter.setProperties().

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_CONV_CONVERSION_NOT_AVAILABLE

           * libsbml.LIBSBML_CONV_INVALID_SRC_DOCUMENT

        """
        return _libsbml.SBMLUnitsConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.SBMLUnitsConverter_getDefaultProperties(self)

SBMLUnitsConverter_swigregister = _libsbml.SBMLUnitsConverter_swigregister
SBMLUnitsConverter_swigregister(SBMLUnitsConverter)

def SBMLUnitsConverter_init():
  """SBMLUnitsConverter_init()"""
  return _libsbml.SBMLUnitsConverter_init()

class SBMLValidator(_object):
    """
    Base class for SBML validators

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    LibSBML implements facilities for verifying that a given SBML document
    is valid according to the SBML specifications; it also exposes the
    validation interface so that user programs and SBML Level 3 package
    authors may use the facilities to implement new validators.  There are
    two main interfaces to libSBML's validation facilities, based on the
    classes Validator and SBMLValidator.

    The Validator class is the basis of the system for validating an SBML
    document against the validation rules defined in the SBML
    specifications.  The scheme used by Validator relies is compact and
    uses the visitor programming pattern, but it relies on C/C++ features
    and is not directly accessible from language bindings.  SBMLValidator
    offers a framework for straightforward class-based extensibility, so
    that user code can subclass SBMLValidator to implement new validation
    systems, different validators can be introduced or turned off at run-
    time, and interfaces can be provided in the libSBML language bindings.
    SBMLValidator can call Validator functionality internally (as is the
    case in the current implementation of SBMLInternalValidator) or use
    entirely different implementation approaches, as necessary.

    Users of libSBML may already be familiar with the facilities
    encompassed by the validation system, in the form of the consistency-
    checking methods defined on SBMLDocument.  The methods
    SBMLDocument.setConsistencyChecks(), SBMLDocument.checkConsistency(),
    SBMLDocument.checkInternalConsistency() and other method of that sort
    are in fact implemented via SBMLValidator, specifically as methods on
    the class SBMLInternalValidator.

    Authors may use SBMLValidator as the base class for their own
    validator extensions to libSBML.  The class SBMLInternalValidator may
    serve as a code example for how to implement such things.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLValidator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLValidator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLValidator
        __init__(self, SBMLValidator orig) -> SBMLValidator

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLValidator()

        Creates a new SBMLValidator.

        @par <hr> Method variant with the following signature:

            SBMLValidator(SBMLValidator orig)

        Copy constructor; creates a copy of an SBMLValidator object.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        if self.__class__ == SBMLValidator:
            _self = None
        else:
            _self = self
        this = _libsbml.new_SBMLValidator(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLValidator
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLValidator

        Creates and returns a deep copy of this SBMLValidator.

        Returns a (deep) copy of this SBMLValidator.

        """
        return _libsbml.SBMLValidator_clone(self)

    def getDocument(self, *args):
        """
        getDocument(self) -> SBMLDocument
        getDocument(self) -> SBMLDocument

        Returns the current SBML document in use by this validator.

        Returns the current SBML document

        See also setDocument().

        """
        return _libsbml.SBMLValidator_getDocument(self, *args)

    def setDocument(self, *args):
        """
        setDocument(self, SBMLDocument doc) -> int

        Sets the current SBML document to the given SBMLDocument object.

        Parameter 'doc' is the document to use for this validation

        Returns an integer value indicating the success/failure of the
        validation.   The possible values returned by this function are

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also getDocument().

        """
        return _libsbml.SBMLValidator_setDocument(self, *args)

    def clearFailures(self):
        """
        clearFailures(self)

        Clears this validator's list of failures.

        If you are validating multiple SBML documents with the same validator,
        call this method after you have processed the list of failures from
        the last validation run and before validating the next document.

        """
        return _libsbml.SBMLValidator_clearFailures(self)

    def logFailure(self, *args):
        """
        logFailure(self, SBMLError err)

        Adds the given failure to this list of Validators failures.

        Parameter 'err' is an SBMLError object representing an error or
        warning

        """
        return _libsbml.SBMLValidator_logFailure(self, *args)

    def validate(self, *args):
        """
        validate(self) -> unsigned int
        validate(self, SBMLDocument d) -> unsigned int
        validate(self, string filename) -> unsigned int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            validate(string filename)

        Validates the SBML document located at the given 'filename'.

        This is a convenience method that saves callers the trouble of using
        SBMLReader to read the document first.

        Parameter 'filename' is the path to the file to be read and validated.

        Returns the number of validation failures that occurred.  The objects
        describing the actual failures can be retrieved using getFailures().

        @par <hr> Method variant with the following signature:

            validate()

        Runs this validator on the current SBML document.

        Returns an integer value indicating the success/failure of the
        validation.   The possible values returned by this function are
        determined by the specific subclasses of this class.

        @par <hr> Method variant with the following signature:

            validate(SBMLDocument d)

        Validates the given SBMLDocument object.

        This is identical to calling setDocument() followed by validate().

        Parameter 'd' is the SBML document to validate

        Returns the number of validation failures that occurred.  The objects
        describing the actual failures can be retrieved using getFailures().

        """
        return _libsbml.SBMLValidator_validate(self, *args)

    def getErrorLog(self):
        """
        getErrorLog(self) -> SBMLErrorLog

        Returns the list of errors or warnings logged during parsing,
        consistency checking, or attempted translation of this model.

        Note that this refers to the SBMLDocument object's error log (i.e.,
        the list returned by SBMLDocument.getErrorLog()).  That list of errors
        and warnings is separate from the validation failures tracked by this
        validator (i.e., the list returned by getFailures()).

        Returns the SBMLErrorLog used for the SBMLDocument

        """
        return _libsbml.SBMLValidator_getErrorLog(self)

    def getModel(self, *args):
        """
        getModel(self) -> Model
        getModel(self) -> Model

        Returns the Model object stored in the SBMLDocument.

        It is important to note that this method does not create a Model
        instance.  The model in the SBMLDocument must have been created at
        some prior time, for example using SBMLDocument.createModel()  or
        SBMLDocument.setModel(). This method returns None if a model does not
        yet exist.

        Returns the Model contained in this validator's SBMLDocument object.

        See also SBMLDocument.createModel().

        """
        return _libsbml.SBMLValidator_getModel(self, *args)

    def getNumFailures(self):
        """
        getNumFailures(self) -> unsigned int

        Returns the number of failures encountered in the last validation run.

        This method returns the number of failures logged by this validator.
        This number only reflects this validator's actions; the number may not
        be the same as the number of errors and warnings logged on the
        SBMLDocument object's error log (i.e., the object returned by
        SBMLDocument.getErrorLog()), because other parts of libSBML may log
        errors and warnings beyond those found by this validator.

        Returns the number of errors logged by this validator.

        """
        return _libsbml.SBMLValidator_getNumFailures(self)

    def getFailure(self, *args):
        """
        getFailure(self, unsigned int n) -> SBMLError

        Returns the failure object at index n in this validator's list of
        failures logged during the last run.

        Callers should use getNumFailures() first, to find out the number of
        entries in this validator's list of failures.

        Parameter 'n' is an integer indicating the index of the object to
        return from the failures list; index values start at 0.

        Returns the failure at the given index number.

        See also getNumFailures().

        """
        return _libsbml.SBMLValidator_getFailure(self, *args)

    def __disown__(self):
        self.this.disown()
        _libsbml.disown_SBMLValidator(self)
        return weakref_proxy(self)
SBMLValidator_swigregister = _libsbml.SBMLValidator_swigregister
SBMLValidator_swigregister(SBMLValidator)

class SBMLExternalValidator(SBMLValidator):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLValidator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLExternalValidator, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLValidator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLExternalValidator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLExternalValidator
        __init__(self, SBMLExternalValidator arg0) -> SBMLExternalValidator

        Internal implementation method.

        """
        this = _libsbml.new_SBMLExternalValidator(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLValidator

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_clone(self)

    __swig_destroy__ = _libsbml.delete_SBMLExternalValidator
    __del__ = lambda self : None;
    def validate(self):
        """
        validate(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_validate(self)

    def getProgram(self):
        """
        getProgram(self) -> string

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_getProgram(self)

    def setProgram(self, *args):
        """
        setProgram(self, string program)

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_setProgram(self, *args)

    def getOutputFileName(self):
        """
        getOutputFileName(self) -> string

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_getOutputFileName(self)

    def setOutputFileName(self, *args):
        """
        setOutputFileName(self, string outputFileName)

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_setOutputFileName(self, *args)

    def getSBMLFileName(self):
        """
        getSBMLFileName(self) -> string

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_getSBMLFileName(self)

    def setSBMLFileName(self, *args):
        """
        setSBMLFileName(self, string sbmlFileName)

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_setSBMLFileName(self, *args)

    def clearArguments(self):
        """
        clearArguments(self)

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_clearArguments(self)

    def addArgument(self, *args):
        """
        addArgument(self, string arg)

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_addArgument(self, *args)

    def getNumArguments(self):
        """
        getNumArguments(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_getNumArguments(self)

    def getArgument(self, *args):
        """
        getArgument(self, unsigned int n) -> string

        Internal implementation method.

        """
        return _libsbml.SBMLExternalValidator_getArgument(self, *args)

SBMLExternalValidator_swigregister = _libsbml.SBMLExternalValidator_swigregister
SBMLExternalValidator_swigregister(SBMLExternalValidator)

class XMLAttributes(_object):
    """
    Representation of attributes on an XML node.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLAttributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLAttributes, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_XMLAttributes
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> XMLAttributes
        __init__(self, XMLAttributes orig) -> XMLAttributes

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            XMLAttributes()

        Creates a new empty XMLAttributes set.

        @par <hr> Method variant with the following signature:

            XMLAttributes(XMLAttributes orig)

        Copy constructor; creates a copy of this XMLAttributes set.

        'orig' the XMLAttributes object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_XMLAttributes(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> XMLAttributes

        Creates and returns a deep copy of this XMLAttributes set.

        Returns a (deep) copy of this XMLAttributes set.

        """
        return _libsbml.XMLAttributes_clone(self)

    def add(self, *args):
        """
        add(self, string name, string value, string namespaceURI = "", 
            string prefix = "") -> int
        add(self, string name, string value, string namespaceURI = "") -> int
        add(self, string name, string value) -> int
        add(self, XMLTriple triple, string value) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            add( XMLTriple triple, string value)

        Adds an attribute with the given XMLTriple/value pair to this
        XMLAttributes set.

        Note:

        if local name with the same namespace URI already exists in this
        attribute set,  its value and prefix will be replaced.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute.
        Parameter 'value' is a string, the value of the attribute.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        @par <hr> Method variant with the following signature:

            add(  string name , string value , string namespaceURI = '' ,
        string prefix = '')

        Adds an attribute (a name/value pair) to this XMLAttributes object,
        optionally with a prefix and URI defining a namespace.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'value' is a string, the value of the attribute. Parameter
        'namespaceURI' is a string, the namespace URI of the attribute.
        Parameter 'prefix' is a string, the prefix of the namespace

        Returns an integer code indicating the success or failure of the
        function.  The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        Note:

        if local name with the same namespace URI already exists in this
        attribute set, its value and prefix will be replaced.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLAttributes_add(self, *args)

    def removeResource(self, *args):
        """
        removeResource(self, int n) -> int

        Removes an attribute with the given index from this XMLAttributes set.

        Parameter 'n' is an integer the index of the resource to be deleted
        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        """
        return _libsbml.XMLAttributes_removeResource(self, *args)

    def remove(self, *args):
        """
        remove(self, int n) -> int
        remove(self, string name, string uri = "") -> int
        remove(self, string name) -> int
        remove(self, XMLTriple triple) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(XMLTriple triple)

        Removes an attribute with the given XMLTriple from this XMLAttributes
        set.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        @par <hr> Method variant with the following signature:

            remove(int n)

        Removes an attribute with the given index from this XMLAttributes set.
        (This function is an alias of XMLAttributes.removeResource() ).

        Parameter 'n' is an integer the index of the resource to be deleted

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        @par <hr> Method variant with the following signature:

            remove(string name, string uri = '')

        Removes an attribute with the given local name and namespace URI from
        this XMLAttributes set.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'uri' is a string, the namespace URI of the attribute.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        """
        return _libsbml.XMLAttributes_remove(self, *args)

    def clear(self):
        """
        clear(self) -> int

        Clears (deletes) all attributes in this XMLAttributes object.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.XMLAttributes_clear(self)

    def getIndex(self, *args):
        """
        getIndex(self, string name) -> int
        getIndex(self, string name, string uri) -> int
        getIndex(self, XMLTriple triple) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getIndex(XMLTriple triple)

        Return the index of an attribute with the given XMLTriple.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute
        for which  the index is required.

        Returns the index of an attribute with the given XMLTriple, or -1 if
        not present.

        @par <hr> Method variant with the following signature:

            getIndex(string name, string uri)

        Return the index of an attribute with the given local name and
        namespace URI.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'uri' is a string, the namespace URI of the attribute.

        Returns the index of an attribute with the given local name and
        namespace URI,  or -1 if not present.

        @par <hr> Method variant with the following signature:

            getIndex(string name)

        Return the index of an attribute with the given name.

        Note:

        A namespace bound to the name is not checked by this function. Thus,
        if there are multiple attributes with the given local name and
        different namespaces, the smallest index among those attributes will
        be returned.  XMLAttributes.getIndex() const or
        XMLAttributes.getIndex() const should be used to get an index of an
        attribute with the given local name and namespace.

        Parameter 'name' is a string, the local name of the attribute for
        which the  index is required.

        Returns the index of an attribute with the given local name, or -1 if
        not present.

        """
        return _libsbml.XMLAttributes_getIndex(self, *args)

    def getLength(self):
        """
        getLength(self) -> int

        Return the number of attributes in the set.

        Returns the number of attributes in this XMLAttributes set.

        """
        return _libsbml.XMLAttributes_getLength(self)

    def getNumAttributes(self):
        """
        getNumAttributes(self) -> int

        Return the number of attributes in the set.

        Returns the number of attributes in this XMLAttributes set.

        This function is an alias for getLength introduced for consistency
        with other XML classes.

        """
        return _libsbml.XMLAttributes_getNumAttributes(self)

    def getName(self, *args):
        """
        getName(self, int index) -> string

        Return the local name of an attribute in this XMLAttributes set (by
        position).

        Parameter 'index' is an integer, the position of the attribute whose
        local name is  required.

        Returns the local name of an attribute in this list (by position).

        Note:

        If index is out of range, an empty string will be returned.  Use
        XMLAttributes.hasAttribute() const to test for the attribute
        existence.

        """
        return _libsbml.XMLAttributes_getName(self, *args)

    def getPrefix(self, *args):
        """
        getPrefix(self, int index) -> string

        Return the prefix of an attribute in this XMLAttributes set (by
        position).

        Parameter 'index' is an integer, the position of the attribute whose
        prefix is  required.

        Returns the namespace prefix of an attribute in this list (by
        position).

        Note:

        If index is out of range, an empty string will be returned. Use
        XMLAttributes.hasAttribute() const to test for the attribute
        existence.

        """
        return _libsbml.XMLAttributes_getPrefix(self, *args)

    def getPrefixedName(self, *args):
        """
        getPrefixedName(self, int index) -> string

        Return the prefixed name of an attribute in this XMLAttributes set (by
        position).

        Parameter 'index' is an integer, the position of the attribute whose
        prefixed  name is required.

        Returns the prefixed name of an attribute in this list (by position).

        Note:

        If index is out of range, an empty string will be returned.  Use
        XMLAttributes.hasAttribute() const to test for attribute existence.

        """
        return _libsbml.XMLAttributes_getPrefixedName(self, *args)

    def getURI(self, *args):
        """
        getURI(self, int index) -> string

        Return the namespace URI of an attribute in this XMLAttributes set (by
        position).

        Parameter 'index' is an integer, the position of the attribute whose
        namespace URI is  required.

        Returns the namespace URI of an attribute in this list (by position).

        Note:

        If index is out of range, an empty string will be returned.  Use
        XMLAttributes.hasAttribute() const to test for attribute existence.

        """
        return _libsbml.XMLAttributes_getURI(self, *args)

    def getValue(self, *args):
        """
        getValue(self, int index) -> string
        getValue(self, string name) -> string
        getValue(self, string name, string uri) -> string
        getValue(self, XMLTriple triple) -> string

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getValue(XMLTriple triple)

        Return a value of an attribute with the given XMLTriple.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute
        whose  value is required.

        Returns The attribute value as a string.

        Note:

        If an attribute with the given XMLTriple does not exist, an empty
        string will be returned.  Use XMLAttributes.hasAttribute() const to
        test for attribute existence.

        @par <hr> Method variant with the following signature:

            getValue(int index)

        Return the value of an attribute in this XMLAttributes set (by
        position).

        Parameter 'index' is an integer, the position of the attribute whose
        value is  required.

        Returns the value of an attribute in the list (by position).

        Note:

        If index is out of range, an empty string will be returned.  Use
        XMLAttributes.hasAttribute() const to test for attribute existence.

        @par <hr> Method variant with the following signature:

            getValue(string name)

        Return an attribute's value by name.

        Parameter 'name' is a string, the local name of the attribute whose
        value is required.

        Returns The attribute value as a string.

        Note:

        If an attribute with the given local name does not exist, an empty
        string will be returned.  Use XMLAttributes.hasAttribute() const to
        test for attribute existence.  A namespace bound to the local name is
        not checked by this function.  Thus, if there are multiple attributes
        with the given local name and different namespaces, the value of an
        attribute with the smallest index among those attributes will be
        returned.  XMLAttributes.getValue() const or XMLAttributes.getValue()
        const should be used to get a value of an attribute with the given
        local name and namespace.

        @par <hr> Method variant with the following signature:

            getValue(string name, string uri)

        Return a value of an attribute with the given local name and namespace
        URI.

        Parameter 'name' is a string, the local name of the attribute whose
        value is required. Parameter 'uri' is a string, the namespace URI of
        the attribute.

        Returns The attribute value as a string.

        Note:

        If an attribute with the given local name and namespace URI does not
        exist, an empty string will be returned.  Use
        XMLAttributes.hasAttribute() const to test for attribute existence.

        """
        return _libsbml.XMLAttributes_getValue(self, *args)

    def hasAttribute(self, *args):
        """
        hasAttribute(self, int index) -> bool
        hasAttribute(self, string name, string uri = "") -> bool
        hasAttribute(self, string name) -> bool
        hasAttribute(self, XMLTriple triple) -> bool

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            hasAttribute(XMLTriple triple)

        Predicate returning True or False depending on whether an attribute
        with the given XML triple exists in this XMLAttributes.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute

        Returns True if an attribute with the given XML triple exists in this
        XMLAttributes, False otherwise.

         @par <hr> Method variant with the following signature:

            hasAttribute(int index)

        Predicate returning True or False depending on whether an attribute
        with the given index exists in this XMLAttributes.

        Parameter 'index' is an integer, the position of the attribute.

        Returns True if an attribute with the given index exists in this
        XMLAttributes, False otherwise.

        @par <hr> Method variant with the following signature:

            hasAttribute(string name, string uri='')

        Predicate returning True or False depending on whether an attribute
        with the given local name and namespace URI exists in this
        XMLAttributes.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'uri' is a string, the namespace URI of the attribute.

        Returns True if an attribute with the given local name and namespace
        URI exists in this XMLAttributes, False otherwise.

        """
        return _libsbml.XMLAttributes_hasAttribute(self, *args)

    def isEmpty(self):
        """
        isEmpty(self) -> bool

        Predicate returning True or False depending on whether  this
        XMLAttributes set is empty.

        Returns True if this XMLAttributes set is empty, False otherwise.

        """
        return _libsbml.XMLAttributes_isEmpty(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLAttributes_swigregister = _libsbml.XMLAttributes_swigregister
XMLAttributes_swigregister(XMLAttributes)

class XMLNamespaces(_object):
    """
    Representation of XML Namespaces.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    This class serves to organize functionality for tracking XML
    namespaces in a document or data stream.  The namespace declarations
    are stored as a list of pairs of XML namespace URIs and prefix
    strings.  These correspond to the parts of a namespace declaration on
    an XML element. For example, in the following XML fragment,

      <annotation>
          <mysim:nodecolors xmlns:mysim='urn:lsid:mysim.org'
               mysim:bgcolor='green' mysim:fgcolor='white'/>
      </annotation>

    there is one namespace declaration.  Its URI is urn:lsid:mysim.org and
    its prefix is mysim. This pair could be stored as one item in an
    XMLNamespaces list.

    XMLNamespaces provides various methods for manipulating the list of
    prefix-URI pairs.  Individual namespaces stored in a given
    XMLNamespace object instance can be retrieved based on their index
    using XMLNamespaces.getPrefix(), or by their characteristics such as
    their URI or position in the list.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLNamespaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_XMLNamespaces
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> XMLNamespaces
        __init__(self, XMLNamespaces orig) -> XMLNamespaces

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            XMLNamespaces()

        Creates a new empty list of XML namespace declarations.

        @par <hr> Method variant with the following signature:

            XMLNamespaces(XMLNamespaces orig)

        Copy constructor; creates a copy of this XMLNamespaces list.

        Parameter 'orig' is the XMLNamespaces object to copy

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_XMLNamespaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> XMLNamespaces

        Creates and returns a deep copy of this XMLNamespaces list.

        Returns a (deep) copy of this XMLNamespaces list.

        """
        return _libsbml.XMLNamespaces_clone(self)

    def add(self, *args):
        """
        add(self, string uri, string prefix = "") -> int
        add(self, string uri) -> int

        Appends an XML namespace prefix and URI pair to this list of namespace
        declarations.

        An XMLNamespaces object stores a list of pairs of namespaces and their
        prefixes.  If there is an XML namespace with the given 'uri' prefix in
        this list, then its corresponding URI will be overwritten by the new
        'uri' unless the uri represents the core sbml namespace. Calling
        programs could use one of the other XMLNamespaces methods, such as
        XMLNamespaces.hasPrefix() and  XMLNamespaces.hasURI() to inquire
        whether a given prefix and/or URI is already present in this
        XMLNamespaces object. If the 'uri' represents the sbml namespaces then
        it will not be overwritten, as this has potentially serious
        consequences. If it is necessary to replace the sbml namespace the
        namespace should be removed prior to adding the new namespace.

        Parameter 'uri' is a string, the uri for the namespace Parameter
        'prefix' is a string, the prefix for the namespace

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLNamespaces_add(self, *args)

    def remove(self, *args):
        """
        remove(self, int index) -> int
        remove(self, string prefix) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(int index)

        Removes an XML Namespace stored in the given position of this list.

        Parameter 'index' is an integer, position of the namespace to remove.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        @par <hr> Method variant with the following signature:

            remove(string prefix)

        Removes an XML Namespace with the given prefix.

        Parameter 'prefix' is a string, prefix of the required namespace.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        See also remove().

        """
        return _libsbml.XMLNamespaces_remove(self, *args)

    def clear(self):
        """
        clear(self) -> int

        Clears (deletes) all XML namespace declarations in this XMLNamespaces
        object.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also remove().

        """
        return _libsbml.XMLNamespaces_clear(self)

    def getIndex(self, *args):
        """
        getIndex(self, string uri) -> int

        Look up the index of an XML namespace declaration by URI.

        An XMLNamespaces object stores a list of pairs of namespaces and their
        prefixes.  If this XMLNamespaces object contains a pair with the given
        URI 'uri', this method returns its index in the list.

        Parameter 'uri' is a string, the URI of the sought-after namespace.

        Returns the index of the given declaration, or -1 if not present.

        """
        return _libsbml.XMLNamespaces_getIndex(self, *args)

    def containsUri(self, *args):
        """
        containsUri(self, string uri) -> bool

        Tests whether the given uri is contained in this set of namespaces.

        """
        return _libsbml.XMLNamespaces_containsUri(self, *args)

    def getIndexByPrefix(self, *args):
        """
        getIndexByPrefix(self, string prefix) -> int

        Look up the index of an XML namespace declaration by prefix.

        An XMLNamespaces object stores a list of pairs of namespaces and their
        prefixes.  If this XMLNamespaces object contains a pair with the given
        prefix 'prefix', this method returns its index in the list.

        Parameter 'prefix' is a string, the prefix string of the sought-after
        namespace

        Returns the index of the given declaration, or -1 if not present.

        """
        return _libsbml.XMLNamespaces_getIndexByPrefix(self, *args)

    def getLength(self):
        """
        getLength(self) -> int

        Returns the total number of URI-and-prefix pairs stored in this
        particular XMLNamespaces instance.

        Returns the number of namespaces in this list.

        """
        return _libsbml.XMLNamespaces_getLength(self)

    def getNumNamespaces(self):
        """
        getNumNamespaces(self) -> int

        Returns the total number of URI-and-prefix pairs stored in this
        particular XMLNamespaces instance.

        Returns the number of namespaces in this list.

        This function is an alias for getLength introduced for consistency
        with other XML classes.

        """
        return _libsbml.XMLNamespaces_getNumNamespaces(self)

    def getPrefix(self, *args):
        """
        getPrefix(self, int index) -> string
        getPrefix(self, string uri) -> string

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getPrefix(int index)

        Look up the prefix of an XML namespace declaration by its position.

        An XMLNamespaces object stores a list of pairs of namespaces and their
        prefixes.  This method returns the prefix of the nth element in that
        list (if it exists).  Callers should use XMLAttributes.getLength()
        first to find out how many namespaces are stored in the list.

        Parameter 'index' is an integer, position of the sought-after prefix

        Returns the prefix of an XML namespace declaration in this list (by
        position), or an empty string if the 'index' is out of range

        See also getLength().

        @par <hr> Method variant with the following signature:

            getPrefix(string uri)

        Look up the prefix of an XML namespace declaration by its URI.

        An XMLNamespaces object stores a list of pairs of namespaces and their
        prefixes.  This method returns the prefix for a pair that has the
        given 'uri'.

        Parameter 'uri' is a string, the URI of the prefix being sought

        Returns the prefix of an XML namespace declaration given its URI, or
        an empty string if no such 'uri' exists in this XMLNamespaces object

        """
        return _libsbml.XMLNamespaces_getPrefix(self, *args)

    def getURI(self, *args):
        """
        getURI(self, int index) -> string
        getURI(self, string prefix = "") -> string
        getURI(self) -> string

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getURI(int index)

        Look up the URI of an XML namespace declaration by its position.

        An XMLNamespaces object stores a list of pairs of namespaces and their
        prefixes.  This method returns the URI of the nth element in that list
        (if it exists).  Callers should use XMLAttributes.getLength() first to
        find out how many namespaces are stored in the list.

        Parameter 'index' is an integer, position of the required URI.

        Returns the URI of an XML namespace declaration in this list (by
        position), or an empty string if the 'index' is out of range.

        See also getLength(), getURI().

        """
        return _libsbml.XMLNamespaces_getURI(self, *args)

    def isEmpty(self):
        """
        isEmpty(self) -> bool

        Predicate returning True or False depending on whether this
        XMLNamespaces list is empty.

        Returns True if this XMLNamespaces list is empty, False otherwise.

        """
        return _libsbml.XMLNamespaces_isEmpty(self)

    def hasURI(self, *args):
        """
        hasURI(self, string uri) -> bool

        Predicate returning True or False depending on whether an XML
        Namespace with the given URI is contained in this XMLNamespaces list.

        Parameter 'uri' is a string, the uri for the namespace

        Returns True if an XML Namespace with the given URI is contained in
        this XMLNamespaces list, False otherwise.

        """
        return _libsbml.XMLNamespaces_hasURI(self, *args)

    def hasPrefix(self, *args):
        """
        hasPrefix(self, string prefix) -> bool

        Predicate returning True or False depending on whether an XML
        Namespace with the given prefix is contained in this XMLNamespaces
        list.

        Parameter 'prefix' is a string, the prefix for the namespace

        Returns True if an XML Namespace with the given URI is contained in
        this XMLNamespaces list, False otherwise.

        """
        return _libsbml.XMLNamespaces_hasPrefix(self, *args)

    def hasNS(self, *args):
        """
        hasNS(self, string uri, string prefix) -> bool

        Predicate returning True or False depending on whether an XML
        Namespace with the given URI and prefix pair is contained in this
        XMLNamespaces list.

        Parameter 'uri' is a string, the URI for the namespace Parameter
        'prefix' is a string, the prefix for the namespace

        Returns True if an XML Namespace with the given uri/prefix pair is
        contained in this XMLNamespaces list, False otherwise.

        """
        return _libsbml.XMLNamespaces_hasNS(self, *args)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLNamespaces_swigregister = _libsbml.XMLNamespaces_swigregister
XMLNamespaces_swigregister(XMLNamespaces)

class XMLToken(_object):
    """
    Representation of a token in an XML stream.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLToken, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLToken, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_XMLToken
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> XMLToken
        __init__(self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, 
            unsigned int line = 0, unsigned int column = 0) -> XMLToken
        __init__(self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, 
            unsigned int line = 0) -> XMLToken
        __init__(self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces) -> XMLToken
        __init__(self, XMLTriple triple, XMLAttributes attributes, unsigned int line = 0, 
            unsigned int column = 0) -> XMLToken
        __init__(self, XMLTriple triple, XMLAttributes attributes, unsigned int line = 0) -> XMLToken
        __init__(self, XMLTriple triple, XMLAttributes attributes) -> XMLToken
        __init__(self, XMLTriple triple, unsigned int line = 0, unsigned int column = 0) -> XMLToken
        __init__(self, XMLTriple triple, unsigned int line = 0) -> XMLToken
        __init__(self, XMLTriple triple) -> XMLToken
        __init__(self, string chars, unsigned int line = 0, unsigned int column = 0) -> XMLToken
        __init__(self, string chars, unsigned int line = 0) -> XMLToken
        __init__(self, string chars) -> XMLToken
        __init__(self, XMLToken orig) -> XMLToken

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            XMLToken()

        Creates a new empty XMLToken.

        @par <hr> Method variant with the following signature:

            XMLToken(XMLToken orig)

        Copy constructor; creates a copy of this XMLToken.

        Parameter 'orig' is the XMLToken object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            XMLToken(  XMLTriple      triple , XMLAttributes  attributes ,
        const long    line   = 0 , const long    column = 0 )

        Creates a start element XMLToken with the given set of attributes.

        Parameter 'triple' is XMLTriple. Parameter 'attributes' is
        XMLAttributes, the attributes to set. Parameter 'line' is a long
        integer, the line number (default = 0). Parameter 'column' is a long
        integer, the column number (default = 0).

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            XMLToken(  XMLTriple    triple , const long  line   = 0 , const
        long  column = 0 )

        Creates an end element XMLToken.

        Parameter 'triple' is XMLTriple. Parameter 'line' is a long integer,
        the line number (default = 0). Parameter 'column' is a long integer,
        the column number (default = 0).

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            XMLToken(  XMLTriple      triple , XMLAttributes  attributes ,
        XMLNamespaces  namespaces , const long    line   = 0 , const long
        column = 0 )

        Creates a start element XMLToken with the given set of attributes and
        namespace declarations.

        Parameter 'triple' is XMLTriple. Parameter 'attributes' is
        XMLAttributes, the attributes to set. Parameter 'namespaces' is
        XMLNamespaces, the namespaces to set. Parameter 'line' is a long
        integer, the line number (default = 0). Parameter 'column' is a long
        integer, the column number (default = 0).

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            XMLToken(  string  chars , const long  line   = 0 , const long
        column = 0 )

        Creates a text XMLToken.

        Parameter 'chars' is a string, the text to be added to the XMLToken
        Parameter 'line' is a long integer, the line number (default = 0).
        Parameter 'column' is a long integer, the column number (default = 0).

        Throws ValueError:  Thrown if the argument 'orig' is None.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        this = _libsbml.new_XMLToken(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> XMLToken

        Creates and returns a deep copy of this XMLToken.

        Returns a (deep) copy of this XMLToken set.

        """
        return _libsbml.XMLToken_clone(self)

    def getAttributes(self):
        """
        getAttributes(self) -> XMLAttributes

        Returns the attributes of this element.

        Returns the XMLAttributes of this XML element.

        """
        return _libsbml.XMLToken_getAttributes(self)

    def setAttributes(self, *args):
        """
        setAttributes(self, XMLAttributes attributes) -> int

        Sets an XMLAttributes to this XMLToken. Nothing will be done if this
        XMLToken is not a start element.

        Parameter 'attributes' is XMLAttributes to be set to this XMLToken.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        This function replaces the existing XMLAttributes with the new one.

        """
        return _libsbml.XMLToken_setAttributes(self, *args)

    def addAttr(self, *args):
        """
        addAttr(self, string name, string value, string namespaceURI = "", 
            string prefix = "") -> int
        addAttr(self, string name, string value, string namespaceURI = "") -> int
        addAttr(self, string name, string value) -> int
        addAttr(self, XMLTriple triple, string value) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            addAttr( XMLTriple triple, string value)

        Adds an attribute with the given XMLTriple/value pair to the attribute
        set in this XMLToken. Nothing will be done if this XMLToken is not a
        start element.

        Note:

        if local name with the same namespace URI already exists in the
        attribute set, its value and prefix will be replaced.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute.
        Parameter 'value' is a string, the value of the attribute.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

        @par <hr> Method variant with the following signature:

            addAttr(  string name , string value , string namespaceURI = '' ,
        string prefix = '')

        Adds an attribute to the attribute set in this XMLToken optionally
        with a prefix and URI defining a namespace. Nothing will be done if
        this XMLToken is not a start element.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'value' is a string, the value of the attribute. Parameter
        'namespaceURI' is a string, the namespace URI of the attribute.
        Parameter 'prefix' is a string, the prefix of the namespace

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

        Note:

        if local name with the same namespace URI already exists in the
        attribute set, its value and prefix will be replaced.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLToken_addAttr(self, *args)

    def removeAttr(self, *args):
        """
        removeAttr(self, int n) -> int
        removeAttr(self, string name, string uri = "") -> int
        removeAttr(self, string name) -> int
        removeAttr(self, XMLTriple triple) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeAttr(XMLTriple triple)

        Removes an attribute with the given XMLTriple from the attribute set
        in this XMLToken.   Nothing will be done if this XMLToken is not a
        start element.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        @par <hr> Method variant with the following signature:

            removeAttr(int n)

        Removes an attribute with the given index from the attribute set in
        this XMLToken. Nothing will be done if this XMLToken is not a start
        element.

        Parameter 'n' is an integer the index of the resource to be deleted

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        @par <hr> Method variant with the following signature:

            removeAttr(string name, string uri = '')

        Removes an attribute with the given local name and namespace URI from
        the attribute set in this XMLToken. Nothing will be done if this
        XMLToken is not a start element.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'uri' is a string, the namespace URI of the attribute.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        """
        return _libsbml.XMLToken_removeAttr(self, *args)

    def clearAttributes(self):
        """
        clearAttributes(self) -> int

        Clears (deletes) all attributes in this XMLToken. Nothing will be done
        if this XMLToken is not a start element.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

        """
        return _libsbml.XMLToken_clearAttributes(self)

    def getAttrIndex(self, *args):
        """
        getAttrIndex(self, string name, string uri = "") -> int
        getAttrIndex(self, string name) -> int
        getAttrIndex(self, XMLTriple triple) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getAttrIndex(XMLTriple triple)

        Return the index of an attribute with the given XMLTriple.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute
        for which  the index is required.

        Returns the index of an attribute with the given XMLTriple, or -1 if
        not present.

        @par <hr> Method variant with the following signature:

            getAttrIndex(string name, string uri='')

        Return the index of an attribute with the given local name and
        namespace URI.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'uri' is a string, the namespace URI of the attribute.

        Returns the index of an attribute with the given local name and
        namespace URI,  or -1 if not present.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLToken_getAttrIndex(self, *args)

    def getAttributesLength(self):
        """
        getAttributesLength(self) -> int

        Return the number of attributes in the attributes set.

        Returns the number of attributes in the attributes set in this
        XMLToken.

        """
        return _libsbml.XMLToken_getAttributesLength(self)

    def getAttrName(self, *args):
        """
        getAttrName(self, int index) -> string

        Return the local name of an attribute in the attributes set in this
        XMLToken (by position).

        Parameter 'index' is an integer, the position of the attribute whose
        local name  is required.

        Returns the local name of an attribute in this list (by position).

        Note:

        If index is out of range, an empty string will be returned.  Use
        XMLToken.hasAttr() to test for the attribute existence.

        """
        return _libsbml.XMLToken_getAttrName(self, *args)

    def getAttrPrefix(self, *args):
        """
        getAttrPrefix(self, int index) -> string

        Return the prefix of an attribute in the attribute set in this
        XMLToken (by position).

        Parameter 'index' is an integer, the position of the attribute whose
        prefix is  required.

        Returns the namespace prefix of an attribute in the attribute set (by
        position).

        Note:

        If index is out of range, an empty string will be returned. Use
        XMLToken.hasAttr() to test for the attribute existence.

        """
        return _libsbml.XMLToken_getAttrPrefix(self, *args)

    def getAttrPrefixedName(self, *args):
        """
        getAttrPrefixedName(self, int index) -> string

        Return the prefixed name of an attribute in the attribute set in this
        XMLToken (by position).

        Parameter 'index' is an integer, the position of the attribute whose
        prefixed  name is required.

        Returns the prefixed name of an attribute in the attribute set  (by
        position).

        Note:

        If index is out of range, an empty string will be returned.  Use
        XMLToken.hasAttr() to test for attribute existence.

        """
        return _libsbml.XMLToken_getAttrPrefixedName(self, *args)

    def getAttrURI(self, *args):
        """
        getAttrURI(self, int index) -> string

        Return the namespace URI of an attribute in the attribute set in this
        XMLToken (by position).

        Parameter 'index' is an integer, the position of the attribute whose
        namespace  URI is required.

        Returns the namespace URI of an attribute in the attribute set (by
        position).

        Note:

        If index is out of range, an empty string will be returned.  Use
        XMLToken.hasAttr() to test for attribute existence.

        """
        return _libsbml.XMLToken_getAttrURI(self, *args)

    def getAttrValue(self, *args):
        """
        getAttrValue(self, int index) -> string
        getAttrValue(self, string name, string uri = "") -> string
        getAttrValue(self, string name) -> string
        getAttrValue(self, XMLTriple triple) -> string

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getAttrValue(XMLTriple triple)

        Return a value of an attribute with the given XMLTriple.

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute
        whose  value is required.

        Returns The attribute value as a string.

        Note:

        If an attribute with the given XMLTriple does not exist, an empty
        string will be returned.   Use XMLToken.hasAttr() to test for
        attribute existence.

        @par <hr> Method variant with the following signature:

            getAttrValue(int index)

        Return the value of an attribute in the attribute set in this XMLToken
        (by position).

        Parameter 'index' is an integer, the position of the attribute whose
        value is  required.

        Returns the value of an attribute in the attribute set (by position).

        Note:

        If index is out of range, an empty string will be returned. Use
        XMLToken.hasAttr() to test for attribute existence.

        @par <hr> Method variant with the following signature:

            getAttrValue(string name, string uri='')

        Return a value of an attribute with the given local name and namespace
        URI.

        Parameter 'name' is a string, the local name of the attribute whose
        value is required. Parameter 'uri' is a string, the namespace URI of
        the attribute.

        Returns The attribute value as a string.

        Note:

        If an attribute with the  given local name and namespace URI does not
        exist, an empty string will be  returned.   Use XMLToken.hasAttr() to
        test for attribute existence.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLToken_getAttrValue(self, *args)

    def hasAttr(self, *args):
        """
        hasAttr(self, int index) -> bool
        hasAttr(self, string name, string uri = "") -> bool
        hasAttr(self, string name) -> bool
        hasAttr(self, XMLTriple triple) -> bool

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            hasAttr(XMLTriple triple)

        Predicate returning True or False depending on whether an attribute
        with the given XML triple exists in the attribute set in  this
        XMLToken

        Parameter 'triple' is an XMLTriple, the XML triple of the attribute

        Returns True if an attribute with the given XML triple exists in the
        attribute set in this XMLToken, False otherwise.

         @par <hr> Method variant with the following signature:

            hasAttr(int index)

        Predicate returning True or False depending on whether an attribute
        with the given index exists in the attribute set in this  XMLToken.

        Parameter 'index' is an integer, the position of the attribute.

        Returns True if an attribute with the given index exists in the
        attribute  set in this XMLToken, False otherwise.

        @par <hr> Method variant with the following signature:

            hasAttr(string name, string uri='')

        Predicate returning True or False depending on whether an attribute
        with the given local name and namespace URI exists  in the attribute
        set in this XMLToken.

        Parameter 'name' is a string, the local name of the attribute.
        Parameter 'uri' is a string, the namespace URI of the attribute.

        Returns True if an attribute with the given local name and namespace
        URI exists in the attribute set in this XMLToken, False otherwise.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLToken_hasAttr(self, *args)

    def isAttributesEmpty(self):
        """
        isAttributesEmpty(self) -> bool

        Predicate returning True or False depending on whether  the attribute
        set in this XMLToken set is empty.

        Returns True if the attribute set in this XMLToken is empty,  False
        otherwise.

        """
        return _libsbml.XMLToken_isAttributesEmpty(self)

    def getNamespaces(self):
        """
        getNamespaces(self) -> XMLNamespaces

        Returns the XML namespace declarations for this XML element.

        Returns the XML namespace declarations for this XML element.

        """
        return _libsbml.XMLToken_getNamespaces(self)

    def setNamespaces(self, *args):
        """
        setNamespaces(self, XMLNamespaces namespaces) -> int

        Sets an XMLnamespaces to this XML element. Nothing will be done if
        this XMLToken is not a start element.

        Parameter 'namespaces' is XMLNamespaces to be set to this XMLToken.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INVALID_OBJECT

        Note:

        This function replaces the existing XMLNamespaces with the new one.

        """
        return _libsbml.XMLToken_setNamespaces(self, *args)

    def addNamespace(self, *args):
        """
        addNamespace(self, string uri, string prefix = "") -> int
        addNamespace(self, string uri) -> int

        Appends an XML namespace prefix and URI pair to this XMLToken. If
        there is an XML namespace with the given prefix in this XMLToken,
        then the existing XML namespace will be overwritten by the new one.

        Nothing will be done if this XMLToken is not a start element.

        Parameter 'uri' is a string, the uri for the namespace Parameter
        'prefix' is a string, the prefix for the namespace

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLToken_addNamespace(self, *args)

    def removeNamespace(self, *args):
        """
        removeNamespace(self, int index) -> int
        removeNamespace(self, string prefix) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeNamespace(int index)

        Removes an XML Namespace stored in the given position of the
        XMLNamespaces of this XMLToken. Nothing will be done if this XMLToken
        is not a start element.

        Parameter 'index' is an integer, position of the removed namespace.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        @par <hr> Method variant with the following signature:

            removeNamespace(string prefix)

        Removes an XML Namespace with the given prefix. Nothing will be done
        if this XMLToken is not a start element.

        Parameter 'prefix' is a string, prefix of the required namespace.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        """
        return _libsbml.XMLToken_removeNamespace(self, *args)

    def clearNamespaces(self):
        """
        clearNamespaces(self) -> int

        Clears (deletes) all XML namespace declarations in the XMLNamespaces
        of this XMLToken. Nothing will be done if this XMLToken is not a start
        element.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

        """
        return _libsbml.XMLToken_clearNamespaces(self)

    def getNamespaceIndex(self, *args):
        """
        getNamespaceIndex(self, string uri) -> int

        Look up the index of an XML namespace declaration by URI.

        Parameter 'uri' is a string, uri of the required namespace.

        Returns the index of the given declaration, or -1 if not present.

        """
        return _libsbml.XMLToken_getNamespaceIndex(self, *args)

    def getNamespaceIndexByPrefix(self, *args):
        """
        getNamespaceIndexByPrefix(self, string prefix) -> int

        Look up the index of an XML namespace declaration by prefix.

        Parameter 'prefix' is a string, prefix of the required namespace.

        Returns the index of the given declaration, or -1 if not present.

        """
        return _libsbml.XMLToken_getNamespaceIndexByPrefix(self, *args)

    def getNamespacesLength(self):
        """
        getNamespacesLength(self) -> int

        Returns the number of XML namespaces stored in the XMLNamespaces  of
        this XMLToken.

        Returns the number of namespaces in this list.

        """
        return _libsbml.XMLToken_getNamespacesLength(self)

    def getNamespacePrefix(self, *args):
        """
        getNamespacePrefix(self, int index) -> string
        getNamespacePrefix(self, string uri) -> string

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getNamespacePrefix(int index)

        Look up the prefix of an XML namespace declaration by position.

        Callers should use getNamespacesLength() to find out how many
        namespaces are stored in the XMLNamespaces.

        Parameter 'index' is an integer, position of the required prefix.

        Returns the prefix of an XML namespace declaration in the
        XMLNamespaces  (by position).

        Note:

        If index is out of range, an empty string will be returned.

        See also getNamespacesLength().

        @par <hr> Method variant with the following signature:

            getNamespacePrefix(string uri)

        Look up the prefix of an XML namespace declaration by its URI.

        Parameter 'uri' is a string, the URI of the prefix being sought

        Returns the prefix of an XML namespace declaration given its URI.

        Note:

        If 'uri' does not exist, an empty string will be returned.

        """
        return _libsbml.XMLToken_getNamespacePrefix(self, *args)

    def getNamespaceURI(self, *args):
        """
        getNamespaceURI(self, int index) -> string
        getNamespaceURI(self, string prefix = "") -> string
        getNamespaceURI(self) -> string

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getNamespaceURI(int index)

        Look up the URI of an XML namespace declaration by its position.

        Parameter 'index' is an integer, position of the required URI.

        Returns the URI of an XML namespace declaration in the XMLNamespaces
        (by position).

        Note:

        If 'index' is out of range, an empty string will be returned.

        See also getNamespacesLength().

        @par <hr> Method variant with the following signature:

            getNamespaceURI(string prefix = '')

        Look up the URI of an XML namespace declaration by its prefix.

        Parameter 'prefix' is a string, the prefix of the required URI

        Returns the URI of an XML namespace declaration given its prefix.

        Note:

        If 'prefix' does not exist, an empty string will be returned.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLToken_getNamespaceURI(self, *args)

    def isNamespacesEmpty(self):
        """
        isNamespacesEmpty(self) -> bool

        Predicate returning True or False depending on whether  the
        XMLNamespaces of this XMLToken is empty.

        Returns True if the XMLNamespaces of this XMLToken is empty,  False
        otherwise.

        """
        return _libsbml.XMLToken_isNamespacesEmpty(self)

    def hasNamespaceURI(self, *args):
        """
        hasNamespaceURI(self, string uri) -> bool

        Predicate returning True or False depending on whether  an XML
        Namespace with the given URI is contained in the XMLNamespaces of this
        XMLToken.

        Parameter 'uri' is a string, the uri for the namespace

        Returns True if an XML Namespace with the given URI is contained in
        the XMLNamespaces of this XMLToken,  False otherwise.

        """
        return _libsbml.XMLToken_hasNamespaceURI(self, *args)

    def hasNamespacePrefix(self, *args):
        """
        hasNamespacePrefix(self, string prefix) -> bool

        Predicate returning True or False depending on whether  an XML
        Namespace with the given prefix is contained in the XMLNamespaces of
        this XMLToken.

        Parameter 'prefix' is a string, the prefix for the namespace

        Returns True if an XML Namespace with the given URI is contained in
        the XMLNamespaces of this XMLToken, False otherwise.

        """
        return _libsbml.XMLToken_hasNamespacePrefix(self, *args)

    def hasNamespaceNS(self, *args):
        """
        hasNamespaceNS(self, string uri, string prefix) -> bool

        Predicate returning True or False depending on whether  an XML
        Namespace with the given uri/prefix pair is contained in the
        XMLNamespaces ofthis XMLToken.

        Parameter 'uri' is a string, the uri for the namespace Parameter
        'prefix' is a string, the prefix for the namespace

        Returns True if an XML Namespace with the given uri/prefix pair is
        contained in the XMLNamespaces of this XMLToken,  False otherwise.

        """
        return _libsbml.XMLToken_hasNamespaceNS(self, *args)

    def setTriple(self, *args):
        """
        setTriple(self, XMLTriple triple) -> int

        Sets the XMLTripe (name, uri and prefix) of this XML element. Nothing
        will be done if this XML element is a text node.

        Parameter 'triple' is XMLTriple to be added to this XML element.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_XML_OPERATION

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.XMLToken_setTriple(self, *args)

    def getName(self):
        """
        getName(self) -> string

        Returns the (unqualified) name of this XML element.

        Returns the (unqualified) name of this XML element.

        """
        return _libsbml.XMLToken_getName(self)

    def getPrefix(self):
        """
        getPrefix(self) -> string

        Returns the namespace prefix of this XML element.

        Returns the namespace prefix of this XML element.

        Note:

        If no prefix exists, an empty string will be return.

        """
        return _libsbml.XMLToken_getPrefix(self)

    def getURI(self):
        """
        getURI(self) -> string

        Returns the namespace URI of this XML element.

        Returns the namespace URI of this XML element.

        """
        return _libsbml.XMLToken_getURI(self)

    def getCharacters(self):
        """
        getCharacters(self) -> string

        Returns the text of this element.

        Returns the characters of this XML text.

        """
        return _libsbml.XMLToken_getCharacters(self)

    def append(self, *args):
        """
        append(self, string chars) -> int

        Appends characters to this XML text content.

        Parameter 'chars' is string, characters to append

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.XMLToken_append(self, *args)

    def getColumn(self):
        """
        getColumn(self) -> unsigned int

        Returns the column at which this XMLToken occurred in the input
        document or data stream.

        Returns the column at which this XMLToken occurred.

        """
        return _libsbml.XMLToken_getColumn(self)

    def getLine(self):
        """
        getLine(self) -> unsigned int

        Returns the line at which this XMLToken occurred in the input document
        or data stream.

        Returns the line at which this XMLToken occurred.

        """
        return _libsbml.XMLToken_getLine(self)

    def isElement(self):
        """
        isElement(self) -> bool

        Predicate returning True or False depending on whether  this XMLToken
        is an XML element.

        Returns True if this XMLToken is an XML element, False otherwise.

        """
        return _libsbml.XMLToken_isElement(self)

    def isEnd(self):
        """
        isEnd(self) -> bool

        Predicate returning True or False depending on whether  this XMLToken
        is an XML end element.

        Returns True if this XMLToken is an XML end element, False otherwise.

        """
        return _libsbml.XMLToken_isEnd(self)

    def isEndFor(self, *args):
        """
        isEndFor(self, XMLToken element) -> bool

        Predicate returning True or False depending on whether  this XMLToken
        is an XML end element for the given start element.

        Parameter 'element' is XMLToken, element for which query is made.

        Returns True if this XMLToken is an XML end element for the given
        XMLToken start element, False otherwise.

        """
        return _libsbml.XMLToken_isEndFor(self, *args)

    def isEOF(self):
        """
        isEOF(self) -> bool

        Predicate returning True or False depending on whether  this XMLToken
        is an end of file marker.

        Returns True if this XMLToken is an end of file (input) marker, False
        otherwise.

        """
        return _libsbml.XMLToken_isEOF(self)

    def isStart(self):
        """
        isStart(self) -> bool

        Predicate returning True or False depending on whether  this XMLToken
        is an XML start element.

        Returns True if this XMLToken is an XML start element, False
        otherwise.

        """
        return _libsbml.XMLToken_isStart(self)

    def isText(self):
        """
        isText(self) -> bool

        Predicate returning True or False depending on whether  this XMLToken
        is an XML text element.

        Returns True if this XMLToken is an XML text element, False otherwise.

        """
        return _libsbml.XMLToken_isText(self)

    def setEnd(self):
        """
        setEnd(self) -> int

        Declares this XML start element is also an end element.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.XMLToken_setEnd(self)

    def setEOF(self):
        """
        setEOF(self) -> int

        Declares this XMLToken is an end-of-file (input) marker.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.XMLToken_setEOF(self)

    def unsetEnd(self):
        """
        unsetEnd(self) -> int

        Declares this XML start/end element is no longer an end element.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.XMLToken_unsetEnd(self)

    def toString(self):
        """
        toString(self) -> string

        Prints a string representation of the underlying token stream, for
        debugging purposes.

        """
        return _libsbml.XMLToken_toString(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLToken_swigregister = _libsbml.XMLToken_swigregister
XMLToken_swigregister(XMLToken)

class XMLNode(XMLToken):
    """
    Representation of a node in an XML document tree.

    Beginning with version 3.0.0, libSBML implements an XML abstraction
    layer.  This layer presents a uniform XML interface to calling
    programs regardless of which underlying XML parser libSBML has
    actually been configured to use.  The basic data object in the XML
    abstraction is a node, represented by XMLNode.

    An XMLNode can contain any number of children.  Each child is another
    XMLNode, thereby forming a tree.  The methods XMLNode.getNumChildren()
    and XMLNode.getChild() can be used to access the tree structure
    starting from a given node.

    Each XMLNode is subclassed from XMLToken, and thus has the same
    methods available as XMLToken.  These methods include
    XMLToken.getNamespaces(), XMLToken.getPrefix(), XMLToken.getName(),
    XMLToken.getURI(), and XMLToken.getAttributes().

    Conversion between an XML string and an XMLNode
    ======================================================================

    LibSBML provides the following utility functions for converting an XML
    string (e.g., <annotation>...</annotation>) to/from an XMLNode object.

    * XMLNode.toXMLString() returns a string representation of the XMLNode
    object.

    * XMLNode.convertXMLNodeToString() (static function) returns a string
    representation  of the given XMLNode object.

    * XMLNode.convertStringToXMLNode() (static function) returns an
    XMLNode object converted  from the given XML string. The returned
    XMLNode object by XMLNode.convertStringToXMLNode() is a dummy root
    (container) XMLNode if the given XML string has two or more top-level
    elements (e.g., " ... ..."). In the dummy root node, each top-level
    element in the given XML string is contained as a child XMLNode.
    XMLToken.isEOF() can be used to identify if the returned XMLNode
    object is a dummy node or not.  Here is an example:

      xn = XMLNode.convertStringToXMLNode('<p></p>')
      if xn == None:
        # Do something to handle exceptional situation.
      
      elif xn.isEOF():
        # Node is a dummy node.
      
      else:
        # None is not a dummy node.

    """
    __swig_setmethods__ = {}
    for _s in [XMLToken]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLNode, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLToken]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLNode, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_XMLNode
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> XMLNode
        __init__(self, XMLToken token) -> XMLNode
        __init__(self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, 
            unsigned int line = 0, unsigned int column = 0) -> XMLNode
        __init__(self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces, 
            unsigned int line = 0) -> XMLNode
        __init__(self, XMLTriple triple, XMLAttributes attributes, XMLNamespaces namespaces) -> XMLNode
        __init__(self, XMLTriple triple, XMLAttributes attributes, unsigned int line = 0, 
            unsigned int column = 0) -> XMLNode
        __init__(self, XMLTriple triple, XMLAttributes attributes, unsigned int line = 0) -> XMLNode
        __init__(self, XMLTriple triple, XMLAttributes attributes) -> XMLNode
        __init__(self, XMLTriple triple, unsigned int line = 0, unsigned int column = 0) -> XMLNode
        __init__(self, XMLTriple triple, unsigned int line = 0) -> XMLNode
        __init__(self, XMLTriple triple) -> XMLNode
        __init__(self, string chars, unsigned int line = 0, unsigned int column = 0) -> XMLNode
        __init__(self, string chars, unsigned int line = 0) -> XMLNode
        __init__(self, string chars) -> XMLNode
        __init__(self, XMLInputStream stream) -> XMLNode
        __init__(self, XMLNode orig) -> XMLNode

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            XMLNode(XMLToken token)

        Creates a new XMLNode by copying token.

        Parameter 'token' is XMLToken to be copied to XMLNode

        @par <hr> Method variant with the following signature:

            XMLNode(  XMLTriple     triple , XMLAttributes attributes ,
        XMLNamespaces namespaces , const long   line   = 0 , const long
        column = 0 )

        Creates a new start element XMLNode with the given set of attributes
        and namespace declarations.

        Parameter 'triple' is XMLTriple. Parameter 'attributes' is
        XMLAttributes, the attributes to set. Parameter 'namespaces' is
        XMLNamespaces, the namespaces to set. Parameter 'line' is a long
        integer, the line number (default = 0). Parameter 'column' is a long
        integer, the column number (default = 0).

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            XMLNode(XMLNode orig)

        Copy constructor; creates a copy of this XMLNode.

        Parameter 'orig' is the XMLNode instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            XMLNode()

        Creates a new empty XMLNode with no children.

        @par <hr> Method variant with the following signature:

            XMLNode(  XMLTriple      triple , XMLAttributes  attributes ,
        const long    line   = 0 , const long    column = 0 )

        Creates a start element XMLNode with the given set of attributes.

        Parameter 'triple' is XMLTriple. Parameter 'attributes' is
        XMLAttributes, the attributes to set. Parameter 'line' is a long
        integer, the line number (default = 0). Parameter 'column' is a long
        integer, the column number (default = 0).

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            XMLNode(  XMLTriple    triple , const long  line   = 0 , const
        long  column = 0 )

        Creates an end element XMLNode.

        Parameter 'triple' is XMLTriple. Parameter 'line' is a long integer,
        the line number (default = 0). Parameter 'column' is a long integer,
        the column number (default = 0).

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            XMLNode(  string  chars , const long  line   = 0 , const long
        column = 0 )

        Creates a text XMLNode.

        Parameter 'chars' is a string, the text to be added to the XMLToken
        Parameter 'line' is a long integer, the line number (default = 0).
        Parameter 'column' is a long integer, the column number (default = 0).

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        this = _libsbml.new_XMLNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> XMLNode

        Creates and returns a deep copy of this XMLNode.

        Returns a (deep) copy of this XMLNode.

        """
        return _libsbml.XMLNode_clone(self)

    def addChild(self, *args):
        """
        addChild(self, XMLNode node) -> int

        Adds a copy of 'node' as a child of this XMLNode.

        The given 'node' is added at the end of the list of children.

        Parameter 'node' is the XMLNode to be added as child.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_XML_OPERATION

        Note:

        The given node is added at the end of the children list.

        """
        return _libsbml.XMLNode_addChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(self, unsigned int n, XMLNode node) -> XMLNode

        Inserts a copy of the given node as the nth child of this XMLNode.

        If the given index 'n' is out of range for this XMLNode instance, the
        'node' is added at the end of the list of children.  Even in that
        situation, this method does not throw an error.

        Parameter 'n' is an integer, the index at which the given node is
        inserted Parameter 'node' is an XMLNode to be inserted as nth child.

        Returns a reference to the newly-inserted child 'node'

        """
        return _libsbml.XMLNode_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, unsigned int n) -> XMLNode

        Removes the nth child of this XMLNode and returns the removed node.

        It is important to keep in mind that a given XMLNode may have more
        than one child.  Calling this method erases all existing references to
        child nodes after the given position 'n'.  If the index 'n' is greater
        than the number of child nodes in this XMLNode, this method takes no
        action (and returns None).

        Parameter 'n' is an integer, the index of the node to be removed

        Returns the removed child, or None if 'n' is greater than the number
        of children in this node

        Note:

        The caller owns the returned node and is responsible for deleting it.

        """
        return _libsbml.XMLNode_removeChild(self, *args)

    def removeChildren(self):
        """
        removeChildren(self) -> int

        Removes all children from this node. Returns integer value indicating
        success/failure of the function.   The possible values returned by
        this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.XMLNode_removeChildren(self)

    def getChild(self, *args):
        """
        getChild(self, unsigned int n) -> XMLNode
        getChild(self, unsigned int n) -> XMLNode
        getChild(self, string name) -> XMLNode
        getChild(self, string name) -> XMLNode

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getChild(long n)

        Returns the  nth child of this XMLNode.

        If the index 'n' is greater than the number of child nodes, this
        method returns an empty node.

        Parameter 'n' is a long integereger, the index of the node to return

        Returns the nth child of this XMLNode.

        @par <hr> Method variant with the following signature:

            getChild(string  name)

        Returns the first child of this XMLNode with the corresponding name.

        If no child with corrsponding name can be found,  this method returns
        an empty node.

        Parameter 'name' is the name of the node to return

        Returns the first child of this XMLNode with given name.

        """
        return _libsbml.XMLNode_getChild(self, *args)

    def getIndex(self, *args):
        """
        getIndex(self, string name) -> int

        Return the index of the first child of this XMLNode with the given
        name.

        Parameter 'name' is a string, the name of the child for which the
        index is required.

        Returns the index of the first child of this XMLNode with the given
        name, or -1 if not present.

        """
        return _libsbml.XMLNode_getIndex(self, *args)

    def hasChild(self, *args):
        """
        hasChild(self, string name) -> bool

        Return a boolean indicating whether this XMLNode has a child with the
        given name.

        Parameter 'name' is a string, the name of the child to be checked.

        Returns boolean indicating whether this XMLNode has a child with the
        given name.

        """
        return _libsbml.XMLNode_hasChild(self, *args)

    def equals(self, *args):
        """
        equals(self, XMLNode other, bool ignoreURI = False) -> bool
        equals(self, XMLNode other) -> bool

        Compare this XMLNode against another XMLNode returning true if both
        nodes represent the same XML tree, or false otherwise.

        Parameter 'other' is another XMLNode to compare against.

        Parameter 'ignoreURI' is whether to ignore the namespace URI when
        doing the comparison.

        Returns boolean indicating whether this XMLNode represents the same
        XML tree as another.

        """
        return _libsbml.XMLNode_equals(self, *args)

    def getNumChildren(self):
        """
        getNumChildren(self) -> unsigned int

        Returns the number of children for this XMLNode.

        Returns the number of children for this XMLNode.

        """
        return _libsbml.XMLNode_getNumChildren(self)

    def toXMLString(self):
        """
        toXMLString(self) -> string

        Returns a string representation of this XMLNode.

        Returns a string derived from this XMLNode.

        """
        return _libsbml.XMLNode_toXMLString(self)

    def convertXMLNodeToString(*args):
        """
        convertXMLNodeToString(XMLNode node) -> string

        Returns a string representation of a given XMLNode.

        Parameter 'node' is the XMLNode to be represented as a string

        Returns a string-form representation of 'node'

        """
        return _libsbml.XMLNode_convertXMLNodeToString(*args)

    if _newclass:convertXMLNodeToString = staticmethod(convertXMLNodeToString)
    __swig_getmethods__["convertXMLNodeToString"] = lambda x: convertXMLNodeToString
    def convertStringToXMLNode(*args):
        """
        convertStringToXMLNode(string xmlstr, XMLNamespaces xmlns = None) -> XMLNode
        convertStringToXMLNode(string xmlstr) -> XMLNode

        Returns an XMLNode which is derived from a string containing XML
        content.

        The XML namespace must be defined using argument 'xmlns' if the
        corresponding XML namespace attribute is not part of the string of the
        first argument.

        Parameter 'xmlstr' is string to be converted to a XML node. Parameter
        'xmlns' is XMLNamespaces the namespaces to set (default value is
        None).

        Note:

        The caller owns the returned XMLNode and is reponsible for deleting
        it.  The returned XMLNode object is a dummy root (container) XMLNode
        if the top-level element in the given XML string is NOT <html>,
        <body>, <annotation>, or <notes>.  In the dummy root node, each top-
        level element in the given XML string is contained as a child XMLNode.
        XMLToken.isEOF() can be used to identify if the returned XMLNode
        object is a dummy node.

        Returns a XMLNode which is converted from string 'xmlstr'.  If the
        conversion failed, this method returns None.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLNode_convertStringToXMLNode(*args)

    if _newclass:convertStringToXMLNode = staticmethod(convertStringToXMLNode)
    __swig_getmethods__["convertStringToXMLNode"] = lambda x: convertStringToXMLNode
XMLNode_swigregister = _libsbml.XMLNode_swigregister
XMLNode_swigregister(XMLNode)

def XMLNode_convertXMLNodeToString(*args):
  """
    XMLNode_convertXMLNodeToString(XMLNode node) -> string

    Returns a string representation of a given XMLNode.

    Parameter 'node' is the XMLNode to be represented as a string

    Returns a string-form representation of 'node'

    """
  return _libsbml.XMLNode_convertXMLNodeToString(*args)

def XMLNode_convertStringToXMLNode(*args):
  """
    convertStringToXMLNode(string xmlstr, XMLNamespaces xmlns = None) -> XMLNode
    XMLNode_convertStringToXMLNode(string xmlstr) -> XMLNode

    Returns an XMLNode which is derived from a string containing XML
    content.

    The XML namespace must be defined using argument 'xmlns' if the
    corresponding XML namespace attribute is not part of the string of the
    first argument.

    Parameter 'xmlstr' is string to be converted to a XML node. Parameter
    'xmlns' is XMLNamespaces the namespaces to set (default value is
    None).

    Note:

    The caller owns the returned XMLNode and is reponsible for deleting
    it.  The returned XMLNode object is a dummy root (container) XMLNode
    if the top-level element in the given XML string is NOT <html>,
    <body>, <annotation>, or <notes>.  In the dummy root node, each top-
    level element in the given XML string is contained as a child XMLNode.
    XMLToken.isEOF() can be used to identify if the returned XMLNode
    object is a dummy node.

    Returns a XMLNode which is converted from string 'xmlstr'.  If the
    conversion failed, this method returns None.

    Documentation note: The native C++ implementation of this method
    defines a default argument value. In the documentation generated for
    different libSBML language bindings, you may or may not see
    corresponding arguments in the method declarations. For example, in
    Java and C#, a default argument is handled by declaring two separate
    methods, with one of them having the argument and the other one
    lacking the argument. However, the libSBML documentation will be
    identical for both methods. Consequently, if you are reading this and
    do not see an argument even though one is described, please look for
    descriptions of other variants of this method near where this one
    appears in the documentation.

    """
  return _libsbml.XMLNode_convertStringToXMLNode(*args)

class XMLTriple(_object):
    """
    Representation of a qualified XML name.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    A 'triple' in the libSBML XML layer encapsulates the notion of
    qualified name, meaning an element name or an attribute name with an
    optional namespace qualifier.  An XMLTriple instance carries up to
    three data items:

        * The name of the attribute or element; that is, the attribute
    name as it appears in an XML document or data stream;

    * The XML namespace prefix (if any) of the attribute.  For example, in
    the following fragment of XML, the namespace prefix is the string
    mysim and it appears on both the element someelement and the attribute
    attribA.  When both the element and the attribute are stored as
    XMLTriple objects, their prefix is mysim.

      <mysim:someelement mysim:attribA='value' />

        * The XML namespace URI with which the prefix is associated.  In
    XML, every namespace used must be declared and mapped to a URI.

    XMLTriple objects are the lowest-level data item in the XML layer of
    libSBML.  Other objects such as XMLToken make use of XMLTriple
    objects.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLTriple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLTriple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> XMLTriple
        __init__(self, string name, string uri, string prefix) -> XMLTriple
        __init__(self, string triplet, char sepchar = ' ') -> XMLTriple
        __init__(self, string triplet) -> XMLTriple
        __init__(self, XMLTriple orig) -> XMLTriple

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            XMLTriple(  string  name , string  uri , string  prefix )

        Creates a new XMLTriple with the given 'name', 'uri' and and 'prefix'.

        Parameter 'name' is a string, name for the XMLTriple. Parameter 'uri'
        is a string, URI of the XMLTriple. Parameter 'prefix' is a string,
        prefix for the URI of the XMLTriple,

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            XMLTriple(string triplet, const char sepchar = ' ')

        Creates a new XMLTriple by splitting the given 'triplet' on the
        separator character 'sepchar'.

        Triplet may be in one of the following formats:

        * name

           * URI sepchar name

           * URI sepchar name sepchar prefix Parameter 'triplet' is a string
        representing the triplet as above Parameter 'sepchar' is a character,
        the sepchar used in the triplet

        Throws ValueError:  Thrown if the argument 'orig' is None.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            XMLTriple()

        Creates a new, empty XMLTriple.

        @par <hr> Method variant with the following signature:

            XMLTriple(XMLTriple orig)

        Copy constructor; creates a copy of this XMLTriple set.

        Parameter 'orig' is the XMLTriple object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_XMLTriple(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> XMLTriple

        Creates and returns a deep copy of this XMLTriple set.

        Returns a (deep) copy of this XMLTriple set.

        """
        return _libsbml.XMLTriple_clone(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the name portion of this XMLTriple.

        Returns a string, the name from this XMLTriple.

        """
        return _libsbml.XMLTriple_getName(self)

    def getPrefix(self):
        """
        getPrefix(self) -> string

        Returns the prefix portion of this XMLTriple.

        Returns a string, the prefix portion of this XMLTriple.

        """
        return _libsbml.XMLTriple_getPrefix(self)

    def getURI(self):
        """
        getURI(self) -> string

        Returns the URI portion of this XMLTriple.

        Returns URI a string, the prefix portion of this XMLTriple.

        """
        return _libsbml.XMLTriple_getURI(self)

    def getPrefixedName(self):
        """
        getPrefixedName(self) -> string

        Returns the prefixed name from this XMLTriple.

        Returns a string, the prefixed name from this XMLTriple.

        """
        return _libsbml.XMLTriple_getPrefixedName(self)

    def isEmpty(self):
        """
        isEmpty(self) -> bool

        Predicate returning True or False depending on whether  this XMLTriple
        is empty.

        Returns True if this XMLTriple is empty, False otherwise.

        """
        return _libsbml.XMLTriple_isEmpty(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

    __swig_destroy__ = _libsbml.delete_XMLTriple
    __del__ = lambda self : None;
XMLTriple_swigregister = _libsbml.XMLTriple_swigregister
XMLTriple_swigregister(XMLTriple)

class XMLOutputStream(_object):
    """
    Interface to an XML output stream.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    SBML content is serialized using XML; the resulting data can be stored
    and read to/from a file or data stream.  Low-level XML parsers such as
    Xerces provide facilities to read XML data.  To permit the use of
    different XML parsers (Xerces, Expat or libxml2), libSBML implements
    an abstraction layer.  XMLInputStream and XMLOutputStream are two
    parts of that abstraction layer.

    XMLOutputStream provides a wrapper above a standard ostream to
    facilitate writing XML.  XMLOutputStream keeps track of start and end
    elements, indentation, XML namespace prefixes, and more.  The
    interface provides features for converting non-text data types into
    appropriate textual form; this takes the form of overloaded
    writeAttribute methods that allow users to simply use the same method
    with any data type.  For example,

      double size = 3.2;
      string id = 'id';

    can be written out using

      writeAttribute('size', size);
      writeAttribute('id', id);

    Other classes in SBML take XMLOutputStream objects as arguments, and
    use that to write elements and attributes seamlessly to the XML output
    stream.

    It is also worth noting that unlike XMLInputStream, XMLOutputStream is
    actually independent of the underlying XML parsers.  It does not use
    the XML parser libraries at all.

    Note:

    The convenience of the XMLInputStream and XMLOutputStream abstraction
    may be useful for developers interested in creating parsers for other
    XML formats besides SBML.  It can provide developers with a layer
    above more basic XML parsers, as well as some useful programmatic
    elements such as XMLToken, XMLError, etc.

    See also XMLInputStream.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLOutputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLOutputStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ostream stream, string encoding = "UTF-8", bool writeXMLDecl = True, 
            string programName = "", string programVersion = "") -> XMLOutputStream
        __init__(self, ostream stream, string encoding = "UTF-8", bool writeXMLDecl = True, 
            string programName = "") -> XMLOutputStream
        __init__(self, ostream stream, string encoding = "UTF-8", bool writeXMLDecl = True) -> XMLOutputStream
        __init__(self, ostream stream, string encoding = "UTF-8") -> XMLOutputStream
        __init__(self, ostream stream) -> XMLOutputStream

        Interface to an XML output stream.

        This class of objects is defined by libSBML only and has no direct
        equivalent in terms of SBML components. This class is not prescribed
        by the SBML specifications, although it is used to implement features
        defined in SBML.

        SBML content is serialized using XML; the resulting data can be stored
        and read to/from a file or data stream.  Low-level XML parsers such as
        Xerces provide facilities to read XML data.  To permit the use of
        different XML parsers (Xerces, Expat or libxml2), libSBML implements
        an abstraction layer.  XMLInputStream and XMLOutputStream are two
        parts of that abstraction layer.

        XMLOutputStream provides a wrapper above a standard ostream to
        facilitate writing XML.  XMLOutputStream keeps track of start and end
        elements, indentation, XML namespace prefixes, and more.  The
        interface provides features for converting non-text data types into
        appropriate textual form; this takes the form of overloaded
        writeAttribute methods that allow users to simply use the same method
        with any data type.  For example,

          double size = 3.2;
          string id = 'id';

        can be written out using

          writeAttribute('size', size);
          writeAttribute('id', id);

        Other classes in SBML take XMLOutputStream objects as arguments, and
        use that to write elements and attributes seamlessly to the XML output
        stream.

        It is also worth noting that unlike XMLInputStream, XMLOutputStream is
        actually independent of the underlying XML parsers.  It does not use
        the XML parser libraries at all.

        Note:

        The convenience of the XMLInputStream and XMLOutputStream abstraction
        may be useful for developers interested in creating parsers for other
        XML formats besides SBML.  It can provide developers with a layer
        above more basic XML parsers, as well as some useful programmatic
        elements such as XMLToken, XMLError, etc.

        See also XMLInputStream.

        """
        this = _libsbml.new_XMLOutputStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_XMLOutputStream
    __del__ = lambda self : None;
    def endElement(self, *args):
        """
        endElement(self, string name, string prefix = "")
        endElement(self, string name)
        endElement(self, XMLTriple triple)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            endElement(XMLTriple triple)

        Writes the given element to the stream.

        Parameter 'triple' is the XML element to write.

        @par <hr> Method variant with the following signature:

            endElement(string name, string prefix = '')

        Writes the given XML end element name to this XMLOutputStream.

        Parameter 'name' is the name of the element.

        Parameter 'prefix' is an optional XML namespace prefix to write in
        front of the 'element' name.  (The result has the form prefix:name.)

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLOutputStream_endElement(self, *args)

    def setAutoIndent(self, *args):
        """
        setAutoIndent(self, bool indent)

        Turns automatic indentation on or off for this XMLOutputStream.

        Parameter 'indent' is if True, automatic indentation is turned on.

        """
        return _libsbml.XMLOutputStream_setAutoIndent(self, *args)

    def startElement(self, *args):
        """
        startElement(self, string name, string prefix = "")
        startElement(self, string name)
        startElement(self, XMLTriple triple)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            startElement(XMLTriple triple)

        Writes the given XML start element prefix:name on this output stream.

        Parameter 'triple' is the start element to write.

        @par <hr> Method variant with the following signature:

            startElement(string name, string prefix = '')

        Writes the given XML start element name to this XMLOutputStream.

        Parameter 'name' is the name of the element.

        Parameter 'prefix' is an optional XML namespace prefix to write in
        front of the 'element' name.  (The result has the form prefix:name.)

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLOutputStream_startElement(self, *args)

    def startEndElement(self, *args):
        """
        startEndElement(self, string name, string prefix = "")
        startEndElement(self, string name)
        startEndElement(self, XMLTriple triple)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            startEndElement(XMLTriple triple)

        Writes the given start element to this output stream.

        Parameter 'triple' is the XML element to write.

        @par <hr> Method variant with the following signature:

            startEndElement(string name, string prefix = '')

        Writes the given XML start and end element name to this
        XMLOutputStream.

        Parameter 'name' is the name of the element.

        Parameter 'prefix' is an optional XML namespace prefix to write in
        front of the 'element' name.  (The result has the form prefix:name.)

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLOutputStream_startEndElement(self, *args)

    def writeAttribute(self, *args):
        """
        writeAttribute(self, string name, string value)
        writeAttribute(self, string name, string prefix, string value)
        writeAttribute(self, XMLTriple triple, string value)
        writeAttribute(self, string name, char value)
        writeAttribute(self, string name, string prefix, char value)
        writeAttribute(self, XMLTriple triple, char value)
        writeAttribute(self, string name, bool value)
        writeAttribute(self, string name, string prefix, bool value)
        writeAttribute(self, XMLTriple triple, bool value)
        writeAttribute(self, string name, double value)
        writeAttribute(self, string name, string prefix, double value)
        writeAttribute(self, XMLTriple triple, double value)
        writeAttribute(self, string name, long value)
        writeAttribute(self, string name, string prefix, long value)
        writeAttribute(self, XMLTriple triple, long value)
        writeAttribute(self, string name, int value)
        writeAttribute(self, string name, string prefix, int value)
        writeAttribute(self, XMLTriple triple, int value)
        writeAttribute(self, string name, string prefix, unsigned int value)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            writeAttribute(XMLTriple triple, string value)

        Writes the given attribute and value to this output stream.

        Parameter 'triple' is the attribute, in the form of an XMLTriple.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string prefix, const double& value)

        Writes the given namespace-prefixed attribute value to this output
        stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'prefix' is an XML namespace prefix to write in front of the
        'element' name.  (The result has the form prefix:name.)  See other
        versions of this method for a variant that does not require a prefix.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string prefix, string value)

        Writes the given namespace-prefixed attribute value to this output
        stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'prefix' is an XML namespace prefix to write in front of the
        'element' name.  (The result has the form prefix:name.)  See other
        versions of this method for a variant that does not require a prefix.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(XMLTriple triple, const bool& value)

        Writes the given attribute and value to this output stream.

        Parameter 'triple' is the attribute, in the form of an XMLTriple.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, const double& value)

        Writes the given attribute and value to this output stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(XMLTriple triple, const long& value)

        Writes the given attribute and value to this output stream.

        Parameter 'triple' is the attribute, in the form of an XMLTriple.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(XMLTriple triple, const double& value)

        Writes the given attribute and value to this output stream.

        Parameter 'triple' is the attribute, in the form of an XMLTriple.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, const long& value)

        Writes the given attribute and value to this output stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string value)

        Writes the given attribute and value to this output stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string value)

        Writes the given attribute and value to this output stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string prefix, const long& value)

        Writes the given namespace-prefixed attribute value to this output
        stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'prefix' is an XML namespace prefix to write in front of the
        'element' name.  (The result has the form prefix:name.)  See other
        versions of this method for a variant that does not require a prefix.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string prefix, const long& value)

        Writes the given namespace-prefixed attribute value to this output
        stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'prefix' is an XML namespace prefix to write in front of the
        'element' name.  (The result has the form prefix:name.)  See other
        versions of this method for a variant that does not require a prefix.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string prefix, const int& value)

        Writes the given namespace-prefixed attribute value to this output
        stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'prefix' is an XML namespace prefix to write in front of the
        'element' name.  (The result has the form prefix:name.)  See other
        versions of this method for a variant that does not require a prefix.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(XMLTriple triple, const long& value)

        Writes the given attribute and value to this output stream.

        Parameter 'triple' is the attribute, in the form of an XMLTriple.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, const int& value)

        Writes the given attribute and value to this output stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(XMLTriple triple, const int& value)

        Writes the given attribute and value to this output stream.

        Parameter 'triple' is the attribute, in the form of an XMLTriple.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, const bool& value)

        Writes the given attribute and value to this output stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(XMLTriple triple, string value)

        Writes the given attribute and value to this output stream.

        Parameter 'triple' is the attribute, in the form of an XMLTriple.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, const long& value)

        Writes the given attribute and value to this output stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string prefix, string value)

        Writes the given namespace-prefixed attribute value to this output
        stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'prefix' is an XML namespace prefix to write in front of the
        'element' name.  (The result has the form prefix:name.)  See other
        versions of this method for a variant that does not require a prefix.

        Parameter 'value' is the value of the attribute.

        @par <hr> Method variant with the following signature:

            writeAttribute(string name, string &prefix, const bool& value)

        Writes the given namespace-prefixed attribute value to this output
        stream.

        Parameter 'name' is the name of the attribute.

        Parameter 'prefix' is an XML namespace prefix to write in front of the
        'element' name.  (The result has the form prefix:name.)  See other
        versions of this method for a variant that does not require a prefix.

        Parameter 'value' is the value of the attribute.

        """
        if type(args[1]) == type(True): return _libsbml.XMLOutputStream_writeAttributeBool(self, *args)


        return _libsbml.XMLOutputStream_writeAttribute(self, *args)

    def writeXMLDecl(self):
        """
        writeXMLDecl(self)

        Writes a standard XML declaration to this output stream.

        @par The XML declaration has the form

          <?xml version='1.0' encoding='UTF-8'?>

        Note that the SBML specifications require the use of UTF-8 encoding
        and version 1.0, so for SBML documents, the above is the standard XML
        declaration.

        """
        return _libsbml.XMLOutputStream_writeXMLDecl(self)

    def writeComment(self, *args):
        """
        writeComment(self, string programName, string programVersion)

        Writes an XML comment with the name and version of this program.

        The XML comment has the following form:

          <!-- Created by <program name> version <program version>
          on yyyy-MM-dd HH:mm with libSBML version <libsbml version>. -->

        See the class constructor for more information about this program
        comment.

        Parameter 'programName' is an optional program name to write as a
        comment in the output stream.

        Parameter 'programVersion' is an optional version identification
        string to write as a comment in the output stream.

        """
        return _libsbml.XMLOutputStream_writeComment(self, *args)

    def downIndent(self):
        """
        downIndent(self)

        Decreases the indentation level for this XMLOutputStream.

        """
        return _libsbml.XMLOutputStream_downIndent(self)

    def upIndent(self):
        """
        upIndent(self)

        Increases the indentation level for this XMLOutputStream.

        """
        return _libsbml.XMLOutputStream_upIndent(self)

    def getSBMLNamespaces(self):
        """
        getSBMLNamespaces(self) -> SBMLNamespaces

        Returns the SBMLNamespaces object attached to this output stream.

        Returns the SBMLNamespaces object, or None if none has been set.

        """
        return _libsbml.XMLOutputStream_getSBMLNamespaces(self)

    def setSBMLNamespaces(self, *args):
        """
        setSBMLNamespaces(self, SBMLNamespaces sbmlns)

        Sets the SBMLNamespaces object associated with this output stream.

        Parameter 'sbmlns' is the namespace object.

        """
        return _libsbml.XMLOutputStream_setSBMLNamespaces(self, *args)

    def writeAttributeBool(self, *args):
        """
        writeAttributeBool(self, string name, bool value)
        writeAttributeBool(self, XMLTriple name, bool value)
        """
        return _libsbml.XMLOutputStream_writeAttributeBool(self, *args)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLOutputStream_swigregister = _libsbml.XMLOutputStream_swigregister
XMLOutputStream_swigregister(XMLOutputStream)

class XMLInputStream(_object):
    """
    An interface to an XML input stream.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    SBML content is serialized using XML; the resulting data can be stored
    and read to/from a file or data stream.  Low-level XML parsers such as
    Xerces provide facilities to read XML data.  To permit the use of
    different XML parsers (Xerces, Expat or libxml2), libSBML implements
    an abstraction layer.  XMLInputStream and XMLOutputStream are two
    parts of that abstraction layer.

    XMLInputStream is an interface to a file or text string containing
    XML. It wraps the content to be read, as well as the low-level XML
    parser to be used and an XMLErrorLog to record errors and other issues
    (if any arise). Internally, the content will be in the form of either
    a pointer to a file name or a character string; XMLInputStream knows
    the form of the content and acts appropriately.  Other libSBML object
    classes use XMLInputStream as their interface for all read operations
    on the XML data. XMLInputStream provides the functionality to extract
    data in the form of XMLToken objects.  It logs any errors encountered
    while reading.  It also keeps track of whether a read operation has
    failed irrecoverably or determines whether it is safe to continue
    reading.

    SBMLNamespaces objects can be associated with an XMLInputStream; this
    facilitates logging errors related to reading XML attributes and
    elements that may only be relevant to particular Level and Version
    combinations of SBML.

    Note:

    The convenience of the XMLInputStream and XMLOutputStream abstraction
    may be useful for developers interested in creating parsers for other
    XML formats besides SBML.  It can provide developers with a layer
    above more basic XML parsers, as well as some useful programmatic
    elements such as XMLToken, XMLError, etc.

    See also XMLOutputStream.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLInputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLInputStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char content, bool isFile = True, string library = "", 
            XMLErrorLog errorLog = None) -> XMLInputStream
        __init__(self, char content, bool isFile = True, string library = "") -> XMLInputStream
        __init__(self, char content, bool isFile = True) -> XMLInputStream
        __init__(self, char content) -> XMLInputStream

        An interface to an XML input stream.

        This class of objects is defined by libSBML only and has no direct
        equivalent in terms of SBML components. This class is not prescribed
        by the SBML specifications, although it is used to implement features
        defined in SBML.

        SBML content is serialized using XML; the resulting data can be stored
        and read to/from a file or data stream.  Low-level XML parsers such as
        Xerces provide facilities to read XML data.  To permit the use of
        different XML parsers (Xerces, Expat or libxml2), libSBML implements
        an abstraction layer.  XMLInputStream and XMLOutputStream are two
        parts of that abstraction layer.

        XMLInputStream is an interface to a file or text string containing
        XML. It wraps the content to be read, as well as the low-level XML
        parser to be used and an XMLErrorLog to record errors and other issues
        (if any arise). Internally, the content will be in the form of either
        a pointer to a file name or a character string; XMLInputStream knows
        the form of the content and acts appropriately.  Other libSBML object
        classes use XMLInputStream as their interface for all read operations
        on the XML data. XMLInputStream provides the functionality to extract
        data in the form of XMLToken objects.  It logs any errors encountered
        while reading.  It also keeps track of whether a read operation has
        failed irrecoverably or determines whether it is safe to continue
        reading.

        SBMLNamespaces objects can be associated with an XMLInputStream; this
        facilitates logging errors related to reading XML attributes and
        elements that may only be relevant to particular Level and Version
        combinations of SBML.

        Note:

        The convenience of the XMLInputStream and XMLOutputStream abstraction
        may be useful for developers interested in creating parsers for other
        XML formats besides SBML.  It can provide developers with a layer
        above more basic XML parsers, as well as some useful programmatic
        elements such as XMLToken, XMLError, etc.

        See also XMLOutputStream.

        """
        this = _libsbml.new_XMLInputStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_XMLInputStream
    __del__ = lambda self : None;
    def getEncoding(self):
        """
        getEncoding(self) -> string

        Returns the encoding of the XML stream.

        @par The encoding is indicated by the xml declaration at the beginning
        of an XML document or data stream.  The form of this declaration is

          <?xml version='1.0' encoding='UTF-8'?>

        Note that the SBML specifications require the use of UTF-8 encoding,
        so for SBML documents, the value returned by this method will always
        be the string 'UTF-8'.

        Returns the encoding of the XML stream.

        See also getVersion().

        """
        return _libsbml.XMLInputStream_getEncoding(self)

    def getVersion(self):
        """
        getVersion(self) -> string

        Returns the version of the XML stream.

        @par The version is indicated by the xml declaration at the beginning
        of an XML document or data stream.  The form of this declaration is

           <?xml version='1.0' encoding='UTF-8'?>

        Note that the SBML specifications require the use of version 1.0, so
        for SBML documents, the value returned by this method will always be
        the string '1.0'.

        Returns the version of the XML stream.

        See also getEncoding().

        """
        return _libsbml.XMLInputStream_getVersion(self)

    def getErrorLog(self):
        """
        getErrorLog(self) -> XMLErrorLog

        Returns the XMLErrorLog used to log parsing problems.

        Returns the XMLErrorLog used to log XML parse errors and other
        validation errors (and messages).

        """
        return _libsbml.XMLInputStream_getErrorLog(self)

    def isEOF(self):
        """
        isEOF(self) -> bool

        Returns True if end of file (stream) has been reached.

        Returns True if end of file (stream) has been reached, False
        otherwise.

        """
        return _libsbml.XMLInputStream_isEOF(self)

    def isError(self):
        """
        isError(self) -> bool

        Returns True if a fatal error occurred while reading from this stream.

        Returns True if a fatal error occurred while reading from this stream.

        """
        return _libsbml.XMLInputStream_isError(self)

    def isGood(self):
        """
        isGood(self) -> bool

        Returns True if the stream is in a good state.

        The definition of 'good state' is that isEOF() and isError() both
        return False.

        Returns True if the stream is in a good state, False otherwise.

        """
        return _libsbml.XMLInputStream_isGood(self)

    def next(self):
        """
        next(self) -> XMLToken

        Returns the next token on this XML input stream.

        The token is consumed in the process.

        Returns the next XMLToken, or an EOF token (i.e., XMLToken.isEOF() ==
        true).

        See also peek().

        """
        return _libsbml.XMLInputStream_next(self)

    def peek(self):
        """
        peek(self) -> XMLToken

        Returns the next token without consuming it.

        A subsequent call to either peek() or next() will return the same
        token.

        Returns the next XMLToken or EOF (XMLToken.isEOF() == true).

        See also next().

        """
        return _libsbml.XMLInputStream_peek(self)

    def skipPastEnd(self, *args):
        """
        skipPastEnd(self, XMLToken element)

        Consume zero or more tokens up to and including the corresponding end
        element or EOF.

        Parameter 'element' is the element whose end will be sought in the
        input stream.

        """
        return _libsbml.XMLInputStream_skipPastEnd(self, *args)

    def skipText(self):
        """
        skipText(self)

        Consume zero or more tokens up to but not including the next XML
        element or EOF.

        """
        return _libsbml.XMLInputStream_skipText(self)

    def setErrorLog(self, *args):
        """
        setErrorLog(self, XMLErrorLog log) -> int

        Sets the XMLErrorLog this stream will use to log errors.

        Returns integer value indicating success/failure of the operation.
        The possible values returned by this method are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.XMLInputStream_setErrorLog(self, *args)

    def toString(self):
        """
        toString(self) -> string

        Prints a string representation of the underlying token stream.

        Returns a string representing the underlying XML token stream.

        Note:

        This method is intended for debugging purposes.

        """
        return _libsbml.XMLInputStream_toString(self)

    def getSBMLNamespaces(self):
        """
        getSBMLNamespaces(self) -> SBMLNamespaces

        Returns the SBMLNamespaces object attached to this XMLInputStream.

        Returns the SBMLNamespaces object or None if none has been set.

        """
        return _libsbml.XMLInputStream_getSBMLNamespaces(self)

    def setSBMLNamespaces(self, *args):
        """
        setSBMLNamespaces(self, SBMLNamespaces sbmlns)

        Sets the SBML namespaces associated with this XML input stream.

        This allows this stream to reference the available SBML namespaces
        being read.

        Parameter 'sbmlns' is the list of namespaces to use.

        """
        return _libsbml.XMLInputStream_setSBMLNamespaces(self, *args)

    def determineNumberChildren(self, elementName = ""):
        """
        determineNumberChildren(self, string elementName = "") -> unsigned int
        determineNumberChildren(self) -> unsigned int

        Returns the number of child tokens of the given element in this
        stream.

        This method allows information from the input stream to be determined
        without the need to actually read and consume the tokens in the
        stream. It returns the number of child elements of the element
        represented by the 'elementName', i.e., the number of child elements
        encountered before the closing tag for the 'elementName' supplied.

        If no 'elementName' is supplied or it is an empty string, then as a
        special case, this method assumes the element is a MathML apply
        element followed by a function name.

        Parameter 'elementName' is a string representing the name of the
        element for which the number of children are to be determined.

        Returns a long integer giving the number of children of the
        'elementName' specified.

        Note:

        This method assumes the stream has been read up to and including the
        element 'elementName'.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLInputStream_determineNumberChildren(self, elementName)

    def determineNumSpecificChildren(self, *args):
        """
        determineNumSpecificChildren(self, string childName, string container) -> unsigned int

        Returns the number of child tokens of the specified type within a
        given container element.

        This method allows information from the input stream to be determined
        without the need to actually read and consume the tokens in the
        stream. It returns the number of child elements of the 'childName'
        element within the element specified by 'container'.  In other words,
        it counts the number of 'childName' elements encountered before the
        closing tag for the 'container' supplied.

        Parameter 'childName' is a string representing the name of the child
        element whose number is to be determined.

        Parameter 'container' is a string representing the name of the element
        for which the number of children are to be determined.

        Returns a long integer giving the number of children of type
        'childName' within the 'container' element.

        Note:

        This method assumes the stream has been read up to and including the
        element 'container'.

        """
        return _libsbml.XMLInputStream_determineNumSpecificChildren(self, *args)

XMLInputStream_swigregister = _libsbml.XMLInputStream_swigregister
XMLInputStream_swigregister(XMLInputStream)

XMLUnknownError = _libsbml.XMLUnknownError
XMLOutOfMemory = _libsbml.XMLOutOfMemory
XMLFileUnreadable = _libsbml.XMLFileUnreadable
XMLFileUnwritable = _libsbml.XMLFileUnwritable
XMLFileOperationError = _libsbml.XMLFileOperationError
XMLNetworkAccessError = _libsbml.XMLNetworkAccessError
InternalXMLParserError = _libsbml.InternalXMLParserError
UnrecognizedXMLParserCode = _libsbml.UnrecognizedXMLParserCode
XMLTranscoderError = _libsbml.XMLTranscoderError
MissingXMLDecl = _libsbml.MissingXMLDecl
MissingXMLEncoding = _libsbml.MissingXMLEncoding
BadXMLDecl = _libsbml.BadXMLDecl
BadXMLDOCTYPE = _libsbml.BadXMLDOCTYPE
InvalidCharInXML = _libsbml.InvalidCharInXML
BadlyFormedXML = _libsbml.BadlyFormedXML
UnclosedXMLToken = _libsbml.UnclosedXMLToken
InvalidXMLConstruct = _libsbml.InvalidXMLConstruct
XMLTagMismatch = _libsbml.XMLTagMismatch
DuplicateXMLAttribute = _libsbml.DuplicateXMLAttribute
UndefinedXMLEntity = _libsbml.UndefinedXMLEntity
BadProcessingInstruction = _libsbml.BadProcessingInstruction
BadXMLPrefix = _libsbml.BadXMLPrefix
BadXMLPrefixValue = _libsbml.BadXMLPrefixValue
MissingXMLRequiredAttribute = _libsbml.MissingXMLRequiredAttribute
XMLAttributeTypeMismatch = _libsbml.XMLAttributeTypeMismatch
XMLBadUTF8Content = _libsbml.XMLBadUTF8Content
MissingXMLAttributeValue = _libsbml.MissingXMLAttributeValue
BadXMLAttributeValue = _libsbml.BadXMLAttributeValue
BadXMLAttribute = _libsbml.BadXMLAttribute
UnrecognizedXMLElement = _libsbml.UnrecognizedXMLElement
BadXMLComment = _libsbml.BadXMLComment
BadXMLDeclLocation = _libsbml.BadXMLDeclLocation
XMLUnexpectedEOF = _libsbml.XMLUnexpectedEOF
BadXMLIDValue = _libsbml.BadXMLIDValue
BadXMLIDRef = _libsbml.BadXMLIDRef
UninterpretableXMLContent = _libsbml.UninterpretableXMLContent
BadXMLDocumentStructure = _libsbml.BadXMLDocumentStructure
InvalidAfterXMLContent = _libsbml.InvalidAfterXMLContent
XMLExpectedQuotedString = _libsbml.XMLExpectedQuotedString
XMLEmptyValueNotPermitted = _libsbml.XMLEmptyValueNotPermitted
XMLBadNumber = _libsbml.XMLBadNumber
XMLBadColon = _libsbml.XMLBadColon
MissingXMLElements = _libsbml.MissingXMLElements
XMLContentEmpty = _libsbml.XMLContentEmpty
XMLErrorCodesUpperBound = _libsbml.XMLErrorCodesUpperBound
LIBSBML_CAT_INTERNAL = _libsbml.LIBSBML_CAT_INTERNAL
LIBSBML_CAT_SYSTEM = _libsbml.LIBSBML_CAT_SYSTEM
LIBSBML_CAT_XML = _libsbml.LIBSBML_CAT_XML
LIBSBML_SEV_INFO = _libsbml.LIBSBML_SEV_INFO
LIBSBML_SEV_WARNING = _libsbml.LIBSBML_SEV_WARNING
LIBSBML_SEV_ERROR = _libsbml.LIBSBML_SEV_ERROR
LIBSBML_SEV_FATAL = _libsbml.LIBSBML_SEV_FATAL
LIBSBML_OVERRIDE_DISABLED = _libsbml.LIBSBML_OVERRIDE_DISABLED
LIBSBML_OVERRIDE_DONT_LOG = _libsbml.LIBSBML_OVERRIDE_DONT_LOG
LIBSBML_OVERRIDE_WARNING = _libsbml.LIBSBML_OVERRIDE_WARNING
class XMLError(_object):
    """
    Representation of errors, warnings and other diagnostics

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    LibSBML can be configured to use any of a number of XML parsers; at
    the time of this writing, libSBML supports Xerces versions 2.4 through
    3.1, Expat version 1.95.x and higher, and libxml2 version 2.6.16 and
    higher. These parsers each report different status codes for the
    various exceptions that can occur during XML processing.  The XMLError
    object class abstracts away from the particular diagnostics reported
    by the different parsers and presents a single uniform interface and
    set of status codes, along with operations for manipulating the error
    objects.

    When the libSBML XML parser layer encounters an error in the XML
    content being processed, or when there is something else wrong (such
    as an out-of-memory condition), the problems are reported as XMLError
    objects. Each XMLError object instance has an identification number
    that identifies the nature of the problem. This error identifier is
    one of the constants listed in the next section below. Applications
    can use the error identifiers as a means of recognizing the error
    encountered and changing their behavior if desired.

    Integer error codes are useful for software, but not so much for
    telling humans what happened.  For this reason, XMLError also provides
    two text messages describing the nature of the error.  These messages
    are accessible by means of the methods XMLError.getShortMessage() and
    XMLError.getMessage().  The method XMLError.getShortMessage() returns
    a very brief synopsis of the warning or error condition, whereas
    XMLError.getMessage() returns a longer explanation.  These text
    strings are suitable for displaying to human users.

    Each XMLError object also contains a category code; its value may be
    retrieved using the method XMLError.getCategory().  Category values
    are drawn from a set of constants whose names begin with the
    characters LIBSBML_CAT_, described below.  Categories are used by
    libSBML to provide more information to calling programs about the
    nature of a given error.

    In addition to category codes, each XMLError object also has a
    severity code; its value may be retrieved using the method
    XMLError.getSeverity().  Severity code values are drawn from a set of
    constants whose names begin with the characters LIBSBML_SEV_,
    described below. Severity levels range from informational
    (libsbml.LIBSBML_SEV_INFO) to fatal errors
    (libsbml.LIBSBML_SEV_FATAL).

    Finally, XMLError objects record the line and column near where the
    problem occurred in the XML content.  The values can be retrieved
    using the methods XMLError.getLine() and XMLError.getColumn().  We say
    'near where the problem occurred', because many factors affect how
    accurate the line/column information ultimately is.  For example,
    sometimes, the underlying XML parsers can only report such information
    for the parent XML element where an error occurs, and not for the
    specific point where the problem occurs.  In other situations, some
    parsers report invalid line and/or column numbers altogether.  If this
    occurs, libSBML sets the line and/or column number in the XMLError
    object to either 0 or the value of the maximum unsigned long integer
    representable on the platform where libSBML is running.  The
    probability that a true line or column number in an SBML model would
    equal this value is vanishingly small; thus, if an application
    encounters these values in an XMLError object, it can assume no valid
    line/column number could be provided by libSBML in that situation.

      <center>

      +-------------------------------------+---------------------------------------------------------------+----------+----------+
      |Enumerator                           |Meaning                                                        |Category  |Severity  |
      +-------------------------------------+---------------------------------------------------------------+----------+----------+
      |libsbml.XMLUnknownError              |Unrecognized error encountered internally                      |INTERNAL  |FATAL     |
      |libsbml.XMLOutOfMemory               |Out of memory                                                  |SYSTEM    |FATAL     |
      |libsbml.XMLFileUnreadable            |File unreadable                                                |SYSTEM    |ERROR     |
      |libsbml.XMLFileUnwritable            |File unwritable                                                |SYSTEM    |ERROR     |
      |libsbml.XMLFileOperationError        |Error encountered while attempting file operation              |SYSTEM    |ERROR     |
      |libsbml.XMLNetworkAccessError        |Network access error                                           |SYSTEM    |ERROR     |
      |libsbml.InternalXMLParserError       |Internal XML parser state error                                |INTERNAL  |FATAL     |
      |libsbml.UnrecognizedXMLParserCode    |XML parser returned an unrecognized error code                 |INTERNAL  |FATAL     |
      |libsbml.XMLTranscoderError           |Character transcoder error                                     |INTERNAL  |FATAL     |
      |libsbml.MissingXMLDecl               |Missing XML declaration at beginning of XML input              |XML       |ERROR     |
      |libsbml.MissingXMLEncoding           |Missing encoding attribute in XML declaration                  |XML       |ERROR     |
      |libsbml.BadXMLDecl                   |Invalid or unrecognized XML declaration or XML encoding        |XML       |ERROR     |
      |libsbml.BadXMLDOCTYPE                |Invalid, malformed or unrecognized XML DOCTYPE declaration     |XML       |ERROR     |
      |libsbml.InvalidCharInXML             |Invalid character in XML content                               |XML       |ERROR     |
      |libsbml.BadlyFormedXML               |XML content is not well-formed                                 |XML       |ERROR     |
      |libsbml.UnclosedXMLToken             |Unclosed XML token                                             |XML       |ERROR     |
      |libsbml.InvalidXMLConstruct          |XML construct is invalid or not permitted                      |XML       |ERROR     |
      |libsbml.XMLTagMismatch               |Element tag mismatch or missing tag                            |XML       |ERROR     |
      |libsbml.DuplicateXMLAttribute        |Duplicate XML attribute                                        |XML       |ERROR     |
      |libsbml.UndefinedXMLEntity           |Undefined XML entity                                           |XML       |ERROR     |
      |libsbml.BadProcessingInstruction     |Invalid, malformed or unrecognized XML processing instruction  |XML       |ERROR     |
      |libsbml.BadXMLPrefix                 |Invalid or undefined XML namespace prefix                      |XML       |ERROR     |
      |libsbml.BadXMLPrefixValue            |Invalid XML namespace prefix value                             |XML       |ERROR     |
      |libsbml.MissingXMLRequiredAttribute  |Missing a required XML attribute                               |XML       |ERROR     |
      |libsbml.XMLAttributeTypeMismatch     |Data type mismatch for the value of an attribute               |XML       |ERROR     |
      |libsbml.XMLBadUTF8Content            |Invalid UTF8 content                                           |XML       |ERROR     |
      |libsbml.MissingXMLAttributeValue     |Missing or improperly formed attribute value                   |XML       |ERROR     |
      |libsbml.BadXMLAttributeValue         |Invalid or unrecognizable attribute value                      |XML       |ERROR     |
      |libsbml.BadXMLAttribute              |Invalid, unrecognized or malformed attribute                   |XML       |ERROR     |
      |libsbml.UnrecognizedXMLElement       |Element either not recognized or not permitted                 |XML       |ERROR     |
      |libsbml.BadXMLComment                |Badly formed XML comment                                       |XML       |ERROR     |
      |libsbml.BadXMLDeclLocation           |XML declaration not permitted in this location                 |XML       |ERROR     |
      |libsbml.XMLUnexpectedEOF             |Reached end of input unexpectedly                              |XML       |ERROR     |
      |libsbml.BadXMLIDValue                |Value is invalid for XML ID, or has already been used          |XML       |ERROR     |
      |libsbml.BadXMLIDRef                  |XML ID value was never declared                                |XML       |ERROR     |
      |libsbml.UninterpretableXMLContent    |Unable to interpret content                                    |XML       |ERROR     |
      |libsbml.BadXMLDocumentStructure      |Bad XML document structure                                     |XML       |ERROR     |
      |libsbml.InvalidAfterXMLContent       |Encountered invalid content after expected content             |XML       |ERROR     |
      |libsbml.XMLExpectedQuotedString      |Expected to find a quoted string                               |XML       |ERROR     |
      |libsbml.XMLEmptyValueNotPermitted    |An empty value is not permitted in this context                |XML       |ERROR     |
      |libsbml.XMLBadNumber                 |Invalid or unrecognized number                                 |XML       |ERROR     |
      |libsbml.XMLBadColon                  |Colon characters are invalid in this context                   |XML       |ERROR     |
      |libsbml.MissingXMLElements           |One or more expected elements are missing                      |XML       |ERROR     |
      |libsbml.XMLContentEmpty              |Main XML content is empty                                      |XML       |ERROR     |
      +-------------------------------------+---------------------------------------------------------------+----------+----------+

     </center>

      <center>

      +------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
      |Enumerator                    |Meaning                                                                                                                                                                                                               |
      +------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
      |libsbml.LIBSBML_CAT_INTERNAL  |A problem involving the libSBML software itself or the underlying XML parser.  This almost certainly indicates a software defect (i.e., bug) in libSBML.  Please report instances of this to the libSBML developers.  |
      |libsbml.LIBSBML_CAT_SYSTEM    |A problem reported by the operating system, such as an inability to read or write a file.  This indicates something that is not a program error but is outside of the control of libSBML.                             |
      |libsbml.LIBSBML_CAT_XML       |A problem in the XML content itself.  This usually arises from malformed XML or the use of constructs not permitted in SBML.                                                                                          |
      +------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

     </center>

      <center>

      +-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
      |Enumerator                   |Meaning                                                                                                                                                                                        |
      +-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
      |libsbml.LIBSBML_SEV_INFO     |The error is actually informational and not necessarily a serious problem.                                                                                                                     |
      |libsbml.LIBSBML_SEV_WARNING  |The error object represents a problem that is not serious enough to necessarily stop the problem, but applications should take note of the problem and evaluate what its implications may be.  |
      |libsbml.LIBSBML_SEV_ERROR    |The error object represents a serious error.  The application may continue running but it is unlikely to be able to continue processing the same XML file or data stream.                      |
      |libsbml.LIBSBML_SEV_FATAL    |A serious error occurred, such as an out-of-memory condition, and the software should terminate immediately.                                                                                   |
      +-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

     </center>

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int errorId = 0, string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_FATAL, 
            unsigned int category = LIBSBML_CAT_INTERNAL) -> XMLError
        __init__(self, int errorId = 0, string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_FATAL) -> XMLError
        __init__(self, int errorId = 0, string details = "", unsigned int line = 0, 
            unsigned int column = 0) -> XMLError
        __init__(self, int errorId = 0, string details = "", unsigned int line = 0) -> XMLError
        __init__(self, int errorId = 0, string details = "") -> XMLError
        __init__(self, int errorId = 0) -> XMLError
        __init__(self) -> XMLError
        __init__(self, XMLError orig) -> XMLError

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            XMLError(XMLError orig)

        Copy constructor; creates a copy of this XMLError.

        'orig' the XMLError object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            XMLError( const int errorId           = 0 , string details  = '' ,
        const long line     = 0 , const long column   = 0 , const long
        severity = LIBSBML_SEV_FATAL , const long category =
        LIBSBML_CAT_INTERNAL )

        Creates a new XMLError to report that something occurred during XML
        processing.

        XMLError objects have identification numbers to indicate the nature of
        the exception.  These numbers are defined as unsigned  integer
        constants in the file 'libsbmlConstants.java'.  See the top of this
        documentation for a table listing the possible values and their
        meanings.  The argument 'errorId' to this constructor can be (but does
        not have to be) a value from this set of constants.  If it is one of
        the predefined error identifiers, the XMLError class assumes the error
        is a low-level system or XML layer error and prepends a built-in,
        predefined error message to any string passed in the argument
        'details' to this constructor.  In addition, all the predefined error
        identifiers have associated values for the 'severity' and 'category'
        codes, and these fields are filled-in as well.

        If the error identifier 'errorId' is a number greater than 9999, this
        constructor assumes that the error was generated from another part of
        the software, and does not do additional filling in of values beyond
        the defaults in the constructor itself.  This allows XMLError to serve
        as a base class for other errors (and is used in this way elsewhere in
        libSBML).  Callers should fill in all the parameters with suitable
        values if generating errors with codes greater than 9999 to make
        maximum use of the XMLError facilities.

        As mentioned above,  there are additional constants defined for
        standard severity and standard category codes, and every predefined
        error in libSBML has an associated value for severity and category
        taken from these predefined sets.  These constants have symbol names
        prefixed with LIBSBML_SEV_ and LIBSBML_CAT_, respectively.  If the
        value of 'errorId' is one of the standard error codes, callers do not
        need to fill in 'severity' and 'category' in a call to this
        constructor.  Conversely, if 'errorId' is not an existing XML-level
        error code, callers can use other values for 'severity' and
        'category'.

        Parameter 'errorId' is a long integer, the identification number of
        the error.

        Parameter 'details' is a string containing additional details about
        the error. If the error code in 'errorId' is one that is recognized by
        XMLError, the given message is appended to a predefined message
        associated with the given code.  If the error code is not recognized,
        the message is stored as-is as the text of the error.

        Parameter 'line' is a long integer, the line number at which the error
        occured.

        Parameter 'column' is a long integer, the column number at which the
        error occured.

        Parameter 'severity' is an integer indicating severity of the error.

        Parameter 'category' is an integer indicating the category to which
        the error belongs.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        this = _libsbml.new_XMLError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_XMLError
    __del__ = lambda self : None;
    def getErrorId(self):
        """
        getErrorId(self) -> unsigned int

        Returns the identifier of this error.

        Returns the error code for this error.

        See also getSeverity().

        """
        return _libsbml.XMLError_getErrorId(self)

    def getMessage(self):
        """
        getMessage(self) -> string

        Returns the message text of this error.

        The message associated with an error object describes the nature of
        the problem.  The message returned by this method is generally longer
        and clearer than the message returned by XMLError.getShortMessage(),
        but not in all cases.

        Callers may use XMLError.getCategory() and XMLError.getSeverity() to
        obtain additional information about the nature and severity of the
        problem.

        Returns the message text

        See also getSeverity().

        """
        return _libsbml.XMLError_getMessage(self)

    def getShortMessage(self):
        """
        getShortMessage(self) -> string

        Returns a brief message for this error.

        This is an alternative error message that, in general, is as short as
        the authors could make it.  However, brevity is often inversely
        proportional to clarity, so this short message may not be sufficiently
        informative to understand the nature of the error.  Calling
        applications may wish to check XMLError.getMessage() in addition or
        instead.

        Returns the short error message text

        See also getSeverity().

        """
        return _libsbml.XMLError_getShortMessage(self)

    def getLine(self):
        """
        getLine(self) -> unsigned int

        Returns the line number in the XML input near where the error, warning
        or other diagnostic occurred.

        We say 'near where the problem occurred', because many factors affect
        how accurate the line/column information ultimately is.  For example,
        sometimes, the underlying XML parsers can only report such information
        for the parent XML element where an error occurs, and not for the
        specific point where the problem occurs.  In other situations, some
        parsers report invalid line and/or column numbers altogether.  If this
        occurs, libSBML sets the line and/or column number in the XMLError
        object to either 0 or the value of the maximum unsigned long integer
        representable on the platform where libSBML is running. The
        probability that a true line or column number in an SBML model would
        equal this value is vanishingly small; thus, if an application
        encounters these values in an XMLError object, it can assume no valid
        line/column number could be provided by libSBML in that situation.

        Returns the line number

        See also getColumn().

        """
        return _libsbml.XMLError_getLine(self)

    def getColumn(self):
        """
        getColumn(self) -> unsigned int

        Returns the column number in the XML input near where the error,
        warning or other diagnostic occurred.

        We say 'near where the problem occurred', because many factors affect
        how accurate the line/column information ultimately is.  For example,
        sometimes, the underlying XML parsers can only report such information
        for the parent XML element where an error occurs, and not for the
        specific point where the problem occurs.  In other situations, some
        parsers report invalid line and/or column numbers altogether.  If this
        occurs, libSBML sets the line and/or column number in the XMLError
        object to either 0 or the value of the maximum unsigned long integer
        representable on the platform where libSBML is running. The
        probability that a true line or column number in an SBML model would
        equal this value is vanishingly small; thus, if an application
        encounters these values in an XMLError object, it can assume no valid
        line/column number could be provided by libSBML in that situation.

        Returns the column number

        See also getLine().

        """
        return _libsbml.XMLError_getColumn(self)

    def getSeverity(self):
        """
        getSeverity(self) -> unsigned int

        Returns the severity of this error.

        XMLError defines an enumeration of severity codes for the XML layer.
        Applications that build on XMLError by subclassing it may add their
        own severity codes with numbers higher than those in the predefined
        set of severity codes.

        Returns the severity of this XMLError.

        See also getCategory().

        """
        return _libsbml.XMLError_getSeverity(self)

    def getSeverityAsString(self):
        """
        getSeverityAsString(self) -> string

        Returns a string describing the severity level of this error.

        XMLError defines an enumeration of severity codes for the XML layer.
        Applications that build on XMLError by subclassing it may add their
        own severity codes with numbers higher than those in the predefined
        set of severity codes.

        Returns string representing the severity of this XMLError.

        See also getCategoryAsString().

        """
        return _libsbml.XMLError_getSeverityAsString(self)

    def getCategory(self):
        """
        getCategory(self) -> unsigned int

        Returns the category of this error.

        XMLError defines an enumeration of category codes for the XML layer.
        Applications that build on XMLError by subclassing it may add their
        own categories with numbers higher than those in the predefined set of
        category codes.

        Categories can be used to partition errors into distinct groups. Among
        other things, this can be used to prevent id conflicts by uniquely
        identifying an XMLError by both id and category.

        Returns the category of this XMLError.

        See also getCategoryAsString().

        """
        return _libsbml.XMLError_getCategory(self)

    def getCategoryAsString(self):
        """
        getCategoryAsString(self) -> string

        Returns a string describing the category of this error.

        XMLError defines an enumeration of category codes for the XML layer.
        Applications that build on XMLError by subclassing it may add their
        own categories with numbers higher than those in the predefined set of
        category codes.

        Categories can be used to partition errors into distinct groups. Among
        other things, this can be used to prevent id conflicts by uniquely
        identifying an XMLError by both id and category.

        Returns string representing the category of this XMLError.

        See also getSeverityAsString().

        """
        return _libsbml.XMLError_getCategoryAsString(self)

    def isInfo(self):
        """
        isInfo(self) -> bool

        Predicate returning True or False depending on whether this error
        object is for information purposes only.

        This is equivalent to obtaining the severity code from an XMLError
        object (via XMLError.getSeverity()) and then comparing it to the value
        libsbml.LIBSBML_SEV_INFO from the set of predefined severity codes.

        Returns True if this XMLError is for informational purposes only,
        False otherwise.

        See also isFatal().

        """
        return _libsbml.XMLError_isInfo(self)

    def isWarning(self):
        """
        isWarning(self) -> bool

        Predicate returning True or False depending on whether  this error
        object is a warning.

        This is equivalent to obtaining the severity code from an XMLError
        object (via XMLError.getSeverity()) and then comparing it to the value
        libsbml.LIBSBML_SEV_WARNING from the set of predefined severity codes.

        Returns True if this error is a warning, False otherwise.

        See also isFatal().

        """
        return _libsbml.XMLError_isWarning(self)

    def isError(self):
        """
        isError(self) -> bool

        Predicate returning True or False depending on whether this error is a
        significant error.

        This is equivalent to obtaining the severity code from an XMLError
        object (via XMLError.getSeverity()) and then comparing it to the value
        libsbml.LIBSBML_SEV_ERROR from the set of predefined severity codes.

        Returns True if this error is an error, False otherwise.

        See also isFatal().

        """
        return _libsbml.XMLError_isError(self)

    def isFatal(self):
        """
        isFatal(self) -> bool

        Predicate returning True or False depending on whether this error is a
        fatal run-time error.

        This is equivalent to obtaining the severity code from an XMLError
        object (via XMLError.getSeverity()) and then comparing it to the value
        libsbml.LIBSBML_SEV_FATAL from the set of predefined severity codes.

        Returns True if this error is a fatal error, False otherwise.

        See also isError().

        """
        return _libsbml.XMLError_isFatal(self)

    def isInternal(self):
        """
        isInternal(self) -> bool

        Predicate returning True or False depending on whether this error
        resulted from an internal program error.

        This is equivalent to obtaining the category identifier from an
        XMLError object (via XMLError.getCategory()) and then comparing it to
        the value libsbml.LIBSBML_CAT_INTERNAL from the set of predefined
        category codes.

        Returns True or False

        See also isXML().

        """
        return _libsbml.XMLError_isInternal(self)

    def isSystem(self):
        """
        isSystem(self) -> bool

        Predicate returning True or False depending on whether this error was
        generated by the operating system.

        This is equivalent to obtaining the category identifier from an
        XMLError object (via XMLError.getCategory()) and then comparing it to
        the value libsbml.LIBSBML_CAT_SYSTEM from the set of predefined
        category codes.

        Returns True or False

        See also isXML().

        """
        return _libsbml.XMLError_isSystem(self)

    def isXML(self):
        """
        isXML(self) -> bool

        Predicate returning True or False depending on whether this error
        resulted from a problem in the XML input (e.g., an XML syntax error).

        This is equivalent to obtaining the category identifier from an
        XMLError object (via XMLError.getCategory()) and then comparing it to
        the value libsbml.LIBSBML_CAT_XML from the set of predefined category
        codes.

        Returns True or False

        See also isSystem().

        """
        return _libsbml.XMLError_isXML(self)

    def isValid(self):
        """
        isValid(self) -> bool

        Predicate returning True or False depending on whether this error
        resulted from a problem or whether it was logged as an unknown error.

        This is equivalent to obtaining the error identifier from an XMLError
        object (via XMLError.getErrorId()) and then comparing it to the value
        XMLUnknownError or UnknownError from the set of predefined error
        codes.

        Returns True or False

        """
        return _libsbml.XMLError_isValid(self)

    def setLine(self, *args):
        """
        setLine(self, unsigned int line) -> int

        Sets the line number where this error occurred.

        Parameter 'line' is a long integer, the line number to set.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also setColumn().

        """
        return _libsbml.XMLError_setLine(self, *args)

    def setColumn(self, *args):
        """
        setColumn(self, unsigned int column) -> int

        Sets the column number where this error occurred.

        Parameter 'column' is a long integer, the column number to set.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also setLine().

        """
        return _libsbml.XMLError_setColumn(self, *args)

    def getStandardMessage(*args):
        """
        getStandardMessage(int code) -> string

        Returns a copy of the message string associated with the given
        predefined XMLError code.

        Parameter 'code' is the error code whose message is sought; it must be
        a predefined value from the set of predefined error identifiers.

        """
        return _libsbml.XMLError_getStandardMessage(*args)

    if _newclass:getStandardMessage = staticmethod(getStandardMessage)
    __swig_getmethods__["getStandardMessage"] = lambda x: getStandardMessage
    def getPackage(self):
        """
        getPackage(self) -> string

        Returns the SBML Level 3 package extension (if any) that logged this
        error.

        Each error logged by an libSBML extension for SBML Level 3 packages
        includes a record of the package that logged it.  The field is a
        simple text string.  If the string is empty or has the value 'core',
        then the error came from libSBML core; otherwise, the string will be
        the short-form name of the package (e.g., 'comp' for the Hierarchical
        Model Composition package).

        Returns a string representing the name of the package that logged this
        error.  If the error did not come from a package extension, the value
        will be the empty string or 'core'.

        """
        return _libsbml.XMLError_getPackage(self)

    def getErrorIdOffset(self):
        """
        getErrorIdOffset(self) -> unsigned int

        Returns libSBML's internal numerical offset for the error code
        associated with this error.

        In the SBML Level 3 package specifications, package validation rules
        are identified by 5-digit numbers prefixed with the nickname of the
        package itself -- e.g., &ldquo;comp-10101&rdquo;,
        &ldquo;fbc-20301&rdquo;, etc.  Historically, libSBML reported error
        codes as pure integers, and some application software systems make
        decisions based on the numerical values of the error codes.  To permit
        these applications to continue to function in this fashion, libSBML
        internally continues to maintain error identifiers as pure integers.
        To handle the possibility that errors may come from package
        extensions, libSBML uses numerical offsets added to the internal error
        codes.  These offsets add two leading digits to the regular 5-digit
        error codes; for example, &ldquo;comp&rdquo; error codes are stored as
        1010101, 1020102, etc.  The offset in this case is 1000000.  Another
        package will have the offset 2000000, yet another will have 3000000,
        etc.

        This method returns the integer offset in this error's error code.
        Calling applications can get the 5-digit package-specific number for a
        given error code by subtracting the offset from the value reported by
        getErrorId():

           getErrorId() - getErrorIdOffset()

        When libSBML produces error messages, it combines the text string
        returned by getPackage() with the subtracted value of the error code,
        to produce a text string of the form &ldquo;comp-10101&rdquo;.

        See also getPackage().

        """
        return _libsbml.XMLError_getErrorIdOffset(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLError_swigregister = _libsbml.XMLError_swigregister
XMLError_swigregister(XMLError)

def XMLError_getStandardMessage(*args):
  """
    XMLError_getStandardMessage(int code) -> string

    Returns a copy of the message string associated with the given
    predefined XMLError code.

    Parameter 'code' is the error code whose message is sought; it must be
    a predefined value from the set of predefined error identifiers.

    """
  return _libsbml.XMLError_getStandardMessage(*args)

class XMLErrorLog(_object):
    """
    Log of errors and other events encountered while processing an XML
    file or data stream.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The error log is a list.  The XML layer of libSBML maintains an error
    log associated with a given XML document or data stream.  When an
    operation results in an error, or when there is something wrong with
    the XML content, the problem is reported as an XMLError object stored
    in the XMLErrorLog list.  Potential problems range from low-level
    issues (such as the inability to open a file) to XML syntax errors
    (such as mismatched tags or other problems).

    A typical approach for using this error log is to first use
    getNumErrors() to inquire how many XMLError object instances it
    contains, and then to iterate over the list of objects one at a time
    using getError(long n) const.  Indexing in the list begins at 0.

    In normal circumstances, programs using libSBML will actually obtain
    an SBMLErrorLog rather than an XMLErrorLog.  The former is subclassed
    from XMLErrorLog and simply wraps commands for working with SBMLError
    objects rather than the low-level XMLError objects.  Classes such as
    SBMLDocument use the higher-level SBMLErrorLog.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLErrorLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLErrorLog, name)
    __repr__ = _swig_repr
    def getNumErrors(self):
        """
        getNumErrors(self) -> unsigned int

        Returns the number of errors that have been logged.

        To retrieve individual errors from the log, callers may use
        XMLErrorLog.getError() .

        Returns the number of errors that have been logged.

        """
        return _libsbml.XMLErrorLog_getNumErrors(self)

    def getError(self, *args):
        """
        getError(self, unsigned int n) -> XMLError

        Returns the nth XMLError object in this log.

        Index 'n' is counted from 0.  Callers should first inquire about the
        number of items in the log by using the method getNumErrors().
        Attempts to use an error index number that exceeds the actual number
        of errors in the log will result in a None being returned.

        Parameter 'n' is the index number of the error to retrieve (with 0
        being the first error).

        Returns the nth XMLError in this log, or None if 'n' is greater than
        or equal to getNumErrors().

        See also getNumErrors().

        """
        return _libsbml.XMLErrorLog_getError(self, *args)

    def clearLog(self):
        """
        clearLog(self)

        Deletes all errors from this log.

        """
        return _libsbml.XMLErrorLog_clearLog(self)

    def __init__(self, *args): 
        """
        __init__(self) -> XMLErrorLog
        __init__(self, XMLErrorLog other) -> XMLErrorLog

        Log of errors and other events encountered while processing an XML
        file or data stream.

        This class of objects is defined by libSBML only and has no direct
        equivalent in terms of SBML components. This class is not prescribed
        by the SBML specifications, although it is used to implement features
        defined in SBML.

        The error log is a list.  The XML layer of libSBML maintains an error
        log associated with a given XML document or data stream.  When an
        operation results in an error, or when there is something wrong with
        the XML content, the problem is reported as an XMLError object stored
        in the XMLErrorLog list.  Potential problems range from low-level
        issues (such as the inability to open a file) to XML syntax errors
        (such as mismatched tags or other problems).

        A typical approach for using this error log is to first use
        getNumErrors() to inquire how many XMLError object instances it
        contains, and then to iterate over the list of objects one at a time
        using getError(long n) const.  Indexing in the list begins at 0.

        In normal circumstances, programs using libSBML will actually obtain
        an SBMLErrorLog rather than an XMLErrorLog.  The former is subclassed
        from XMLErrorLog and simply wraps commands for working with SBMLError
        objects rather than the low-level XMLError objects.  Classes such as
        SBMLDocument use the higher-level SBMLErrorLog.

        """
        this = _libsbml.new_XMLErrorLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_XMLErrorLog
    __del__ = lambda self : None;
    def add(self, *args):
        """
        add(self, XMLError error)
        add(self, std::vector<(p.XMLError)> errors)
        """
        return _libsbml.XMLErrorLog_add(self, *args)

    def toString(self):
        """
        toString(self) -> string

        Writes all errors contained in this log to a string and returns it.

        This method uses printErrors() to format the diagnostic messages.
        Please consult that method for information about the organization of
        the messages in the string returned by this method.

        Returns a string containing all logged errors and warnings.

        See also printErrors().

        """
        return _libsbml.XMLErrorLog_toString(self)

    def printErrors(self, *args):
        """
        printErrors(self, ostream stream = cerr)
        printErrors(self)

        Prints all the errors or warnings stored in this error log.

        This method prints the text to the stream given by the optional
        parameter 'stream'.  If no stream is given, the method prints the
        output to the standard error stream.

        The format of the output is:

             N error(s):
               line NNN: (id) message

        If no errors have occurred, i.e., getNumErrors() == 0, then no output
        will be produced. Parameter 'stream' is the ostream or ostringstream
        object indicating where the output should be printed.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        return _libsbml.XMLErrorLog_printErrors(self, *args)

    def isSeverityOverridden(self):
        """
        isSeverityOverridden(self) -> bool

        Returns a boolean indicating whether or not the severity has been
        overridden.

        @par The severity override mechanism in XMLErrorLog is intended to
        help applications handle error conditions in ways that may be more
        convenient for those applications.  It is possible to use the
        mechanism to override the severity code of errors logged by libSBML,
        and even to disable error logging completely.  An override stays in
        effect until the override is changed again by the calling application.

        Returns True if an error severity override has been set, False
        otherwise.

        See also changeErrorSeverity().

        """
        return _libsbml.XMLErrorLog_isSeverityOverridden(self)

    def unsetSeverityOverride(self):
        """
        unsetSeverityOverride(self)

        Usets an existing override.

        @par The severity override mechanism in XMLErrorLog is intended to
        help applications handle error conditions in ways that may be more
        convenient for those applications.  It is possible to use the
        mechanism to override the severity code of errors logged by libSBML,
        and even to disable error logging completely.  An override stays in
        effect until the override is changed again by the calling application.

        See also changeErrorSeverity().

        """
        return _libsbml.XMLErrorLog_unsetSeverityOverride(self)

    def getSeverityOverride(self):
        """
        getSeverityOverride(self) -> XMLErrorSeverityOverride_t

        Returns the current override.

        @par The severity override mechanism in XMLErrorLog is intended to
        help applications handle error conditions in ways that may be more
        convenient for those applications.  It is possible to use the
        mechanism to override the severity code of errors logged by libSBML,
        and even to disable error logging completely.  An override stays in
        effect until the override is changed again by the calling application.

        Returns a severity override code.  The possible values are :

           * libsbml.LIBSBML_OVERRIDE_DISABLED

           * libsbml.LIBSBML_OVERRIDE_DONT_LOG

           * libsbml.LIBSBML_OVERRIDE_WARNING

        See also changeErrorSeverity().

        """
        return _libsbml.XMLErrorLog_getSeverityOverride(self)

    def setSeverityOverride(self, *args):
        """
        setSeverityOverride(self, XMLErrorSeverityOverride_t severity)

        Set the severity override.

        @par The severity override mechanism in XMLErrorLog is intended to
        help applications handle error conditions in ways that may be more
        convenient for those applications.  It is possible to use the
        mechanism to override the severity code of errors logged by libSBML,
        and even to disable error logging completely.  An override stays in
        effect until the override is changed again by the calling application.

        Parameter 'severity' is an override code indicating what to do.  If
        the value is libsbml.LIBSBML_OVERRIDE_DISABLED (the default setting)
        all errors logged will be given the severity specified in their usual
        definition.   If the value is libsbml.LIBSBML_OVERRIDE_WARNING, then
        all errors will be logged as warnings.  If the value is
        libsbml.LIBSBML_OVERRIDE_DONT_LOG, no error will be logged, regardless
        of their severity.

        See also changeErrorSeverity().

        """
        return _libsbml.XMLErrorLog_setSeverityOverride(self, *args)

    def changeErrorSeverity(self, *args):
        """
        changeErrorSeverity(self, XMLErrorSeverity_t originalSeverity, XMLErrorSeverity_t targetSeverity, 
            string package = "all")
        changeErrorSeverity(self, XMLErrorSeverity_t originalSeverity, XMLErrorSeverity_t targetSeverity)

        Changes the severity override for errors in the log that have a given
        severity.

        This method searches through the list of errors in the log, comparing
        each one's severity to the value of 'originalSeverity'.  For each
        error encountered with that severity logged by the named 'package',
        the severity of the error is reset to 'targetSeverity'.

        @par The severity override mechanism in XMLErrorLog is intended to
        help applications handle error conditions in ways that may be more
        convenient for those applications.  It is possible to use the
        mechanism to override the severity code of errors logged by libSBML,
        and even to disable error logging completely.  An override stays in
        effect until the override is changed again by the calling application.

        Parameter 'originalSeverity' is the severity code to match

        Parameter 'targetSeverity' is the severity code to use as the new
        severity

        Parameter 'package' is a string, the name of an SBML Level 3 package
        extension to use to narrow the search for errors.  A value of 'all'
        signifies to match against errors logged from any package; a value of
        a package nickname such as 'comp' signifies to limit consideration to
        errors from just that package.  If no value is provided, 'all' is the
        default.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        See also unsetSeverityOverride().

        """
        return _libsbml.XMLErrorLog_changeErrorSeverity(self, *args)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

XMLErrorLog_swigregister = _libsbml.XMLErrorLog_swigregister
XMLErrorLog_swigregister(XMLErrorLog)

class SBMLErrorLog(XMLErrorLog):
    """
    Log of errors and other events encountered during SBML processing.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The error log is a list.  Each SBMLDocument maintains its own
    SBMLErrorLog.  When a libSBML operation on SBML content results in an
    error, or when there is something worth noting about the SBML content,
    the issue is reported as an SBMLError object stored in the
    SBMLErrorLog list.

    SBMLErrorLog is derived from XMLErrorLog, an object class that serves
    exactly the same purpose but for the XML parsing layer.  XMLErrorLog
    provides crucial methods such as getNumErrors() for determining how
    many SBMLError or XMLError objects are in the log. SBMLErrorLog
    inherits these methods.

    The general approach to working with SBMLErrorLog in user programs
    involves first obtaining a pointer to a log from a libSBML object such
    as SBMLDocument.  Callers should then use getNumErrors()  to inquire
    how many objects there are in the list.  (The answer may be 0.)  If
    there is at least one SBMLError object in the SBMLErrorLog instance,
    callers can then iterate over the list using SBMLErrorLog.getError(),
    using methods provided by the SBMLError class to find out the error
    code and associated information such as the error severity, the
    message, and the line number in the input.

    If you wish to simply print the error strings for a human to read, an
    easier and more direct way might be to use SBMLDocument.printErrors().

    See also XMLError.

    """
    __swig_setmethods__ = {}
    for _s in [XMLErrorLog]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLErrorLog, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLErrorLog]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLErrorLog, name)
    __repr__ = _swig_repr
    def getError(self, *args):
        """
        getError(self, unsigned int n) -> SBMLError

        Returns the nth SBMLError object in this log.

        Index 'n' is counted from 0.  Callers should first inquire about the
        number of items in the log by using the getNumErrors() method.
        Attempts to use an error index number that exceeds the actual number
        of errors in the log will result in a None being returned.

        Parameter 'n' is the index number of the error to retrieve (with 0
        being the first error).

        Returns the nth SBMLError in this log, or None if 'n' is greater than
        or equal to getNumErrors().

        See also getNumErrors().

        """
        return _libsbml.SBMLErrorLog_getError(self, *args)

    def getNumFailsWithSeverity(self, *args):
        """
        getNumFailsWithSeverity(self, unsigned int severity) -> unsigned int
        getNumFailsWithSeverity(self, unsigned int severity) -> unsigned int

        Returns the number of errors that have been logged with the given
        severity code.

        @par LibSBML associates severity levels with every SBMLError object to
        provide an indication of how serious the problem is.  Severities range
        from informational diagnostics to fatal (irrecoverable) errors.  Given
        an SBMLError object instance, a caller can interrogate it for its
        severity level using methods such as SBMLError.getSeverity(),
        SBMLError.isFatal(), and so on.  The present method encapsulates
        iteration and interrogation of all objects in an SBMLErrorLog, making
        it easy to check for the presence of error objects with specific
        severity levels.

        Parameter 'severity' is a value from the set of LIBSBML_SEV_ constants
        defined by the interface class libsbml.

        Returns a count of the number of errors with the given severity code.

        See also getNumErrors().

        """
        return _libsbml.SBMLErrorLog_getNumFailsWithSeverity(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> SBMLErrorLog
        __init__(self, SBMLErrorLog other) -> SBMLErrorLog

        Log of errors and other events encountered during SBML processing.

        This class of objects is defined by libSBML only and has no direct
        equivalent in terms of SBML components. This class is not prescribed
        by the SBML specifications, although it is used to implement features
        defined in SBML.

        The error log is a list.  Each SBMLDocument maintains its own
        SBMLErrorLog.  When a libSBML operation on SBML content results in an
        error, or when there is something worth noting about the SBML content,
        the issue is reported as an SBMLError object stored in the
        SBMLErrorLog list.

        SBMLErrorLog is derived from XMLErrorLog, an object class that serves
        exactly the same purpose but for the XML parsing layer.  XMLErrorLog
        provides crucial methods such as getNumErrors() for determining how
        many SBMLError or XMLError objects are in the log. SBMLErrorLog
        inherits these methods.

        The general approach to working with SBMLErrorLog in user programs
        involves first obtaining a pointer to a log from a libSBML object such
        as SBMLDocument.  Callers should then use getNumErrors()  to inquire
        how many objects there are in the list.  (The answer may be 0.)  If
        there is at least one SBMLError object in the SBMLErrorLog instance,
        callers can then iterate over the list using SBMLErrorLog.getError(),
        using methods provided by the SBMLError class to find out the error
        code and associated information such as the error severity, the
        message, and the line number in the input.

        If you wish to simply print the error strings for a human to read, an
        easier and more direct way might be to use SBMLDocument.printErrors().

        See also XMLError.

        """
        this = _libsbml.new_SBMLErrorLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLErrorLog
    __del__ = lambda self : None;
    def logError(self, *args):
        """
        logError(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_ERROR, 
            unsigned int category = LIBSBML_CAT_SBML)
        logError(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_ERROR)
        logError(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0)
        logError(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0)
        logError(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "")
        logError(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION)
        logError(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL)
        logError(self, unsigned int errorId = 0)
        logError(self)

        Internal implementation method.

        """
        return _libsbml.SBMLErrorLog_logError(self, *args)

    def logPackageError(self, *args):
        """
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", 
            unsigned int line = 0, unsigned int column = 0, 
            unsigned int severity = LIBSBML_SEV_ERROR, 
            unsigned int category = LIBSBML_CAT_SBML)
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", 
            unsigned int line = 0, unsigned int column = 0, 
            unsigned int severity = LIBSBML_SEV_ERROR)
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", 
            unsigned int line = 0, unsigned int column = 0)
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", 
            unsigned int line = 0)
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "")
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION)
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1, unsigned int level = SBML_DEFAULT_LEVEL)
        logPackageError(self, string package = "core", unsigned int errorId = 0, 
            unsigned int pkgVersion = 1)
        logPackageError(self, string package = "core", unsigned int errorId = 0)
        logPackageError(self, string package = "core")
        logPackageError(self)

        Internal implementation method.

        """
        return _libsbml.SBMLErrorLog_logPackageError(self, *args)

    def add(self, *args):
        """add(self, SBMLError error)"""
        return _libsbml.SBMLErrorLog_add(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int errorId)

        Removes an error having errorId from the SBMLError list.

        Only the first item will be removed if there are multiple errors with
        the given errorId.

        Parameter 'errorId' is the error identifier of the error to be
        removed.

        """
        return _libsbml.SBMLErrorLog_remove(self, *args)

    def contains(self, *args):
        """
        contains(self, unsigned int errorId) -> bool

        Returns true if SBMLErrorLog contains an errorId

        Parameter 'errorId' is the error identifier of the error to be found.

        """
        return _libsbml.SBMLErrorLog_contains(self, *args)

SBMLErrorLog_swigregister = _libsbml.SBMLErrorLog_swigregister
SBMLErrorLog_swigregister(SBMLErrorLog)

UnknownError = _libsbml.UnknownError
NotUTF8 = _libsbml.NotUTF8
UnrecognizedElement = _libsbml.UnrecognizedElement
NotSchemaConformant = _libsbml.NotSchemaConformant
L3NotSchemaConformant = _libsbml.L3NotSchemaConformant
InvalidMathElement = _libsbml.InvalidMathElement
DisallowedMathMLSymbol = _libsbml.DisallowedMathMLSymbol
DisallowedMathMLEncodingUse = _libsbml.DisallowedMathMLEncodingUse
DisallowedDefinitionURLUse = _libsbml.DisallowedDefinitionURLUse
BadCsymbolDefinitionURLValue = _libsbml.BadCsymbolDefinitionURLValue
DisallowedMathTypeAttributeUse = _libsbml.DisallowedMathTypeAttributeUse
DisallowedMathTypeAttributeValue = _libsbml.DisallowedMathTypeAttributeValue
LambdaOnlyAllowedInFunctionDef = _libsbml.LambdaOnlyAllowedInFunctionDef
BooleanOpsNeedBooleanArgs = _libsbml.BooleanOpsNeedBooleanArgs
NumericOpsNeedNumericArgs = _libsbml.NumericOpsNeedNumericArgs
ArgsToEqNeedSameType = _libsbml.ArgsToEqNeedSameType
PiecewiseNeedsConsistentTypes = _libsbml.PiecewiseNeedsConsistentTypes
PieceNeedsBoolean = _libsbml.PieceNeedsBoolean
ApplyCiMustBeUserFunction = _libsbml.ApplyCiMustBeUserFunction
ApplyCiMustBeModelComponent = _libsbml.ApplyCiMustBeModelComponent
KineticLawParametersAreLocalOnly = _libsbml.KineticLawParametersAreLocalOnly
MathResultMustBeNumeric = _libsbml.MathResultMustBeNumeric
OpsNeedCorrectNumberOfArgs = _libsbml.OpsNeedCorrectNumberOfArgs
InvalidNoArgsPassedToFunctionDef = _libsbml.InvalidNoArgsPassedToFunctionDef
DisallowedMathUnitsUse = _libsbml.DisallowedMathUnitsUse
InvalidUnitsValue = _libsbml.InvalidUnitsValue
DuplicateComponentId = _libsbml.DuplicateComponentId
DuplicateUnitDefinitionId = _libsbml.DuplicateUnitDefinitionId
DuplicateLocalParameterId = _libsbml.DuplicateLocalParameterId
MultipleAssignmentOrRateRules = _libsbml.MultipleAssignmentOrRateRules
MultipleEventAssignmentsForId = _libsbml.MultipleEventAssignmentsForId
EventAndAssignmentRuleForId = _libsbml.EventAndAssignmentRuleForId
DuplicateMetaId = _libsbml.DuplicateMetaId
InvalidSBOTermSyntax = _libsbml.InvalidSBOTermSyntax
InvalidMetaidSyntax = _libsbml.InvalidMetaidSyntax
InvalidIdSyntax = _libsbml.InvalidIdSyntax
InvalidUnitIdSyntax = _libsbml.InvalidUnitIdSyntax
InvalidNameSyntax = _libsbml.InvalidNameSyntax
MissingAnnotationNamespace = _libsbml.MissingAnnotationNamespace
DuplicateAnnotationNamespaces = _libsbml.DuplicateAnnotationNamespaces
SBMLNamespaceInAnnotation = _libsbml.SBMLNamespaceInAnnotation
MultipleAnnotations = _libsbml.MultipleAnnotations
InconsistentArgUnits = _libsbml.InconsistentArgUnits
InconsistentKineticLawUnitsL3 = _libsbml.InconsistentKineticLawUnitsL3
AssignRuleCompartmentMismatch = _libsbml.AssignRuleCompartmentMismatch
AssignRuleSpeciesMismatch = _libsbml.AssignRuleSpeciesMismatch
AssignRuleParameterMismatch = _libsbml.AssignRuleParameterMismatch
AssignRuleStoichiometryMismatch = _libsbml.AssignRuleStoichiometryMismatch
InitAssignCompartmenMismatch = _libsbml.InitAssignCompartmenMismatch
InitAssignSpeciesMismatch = _libsbml.InitAssignSpeciesMismatch
InitAssignParameterMismatch = _libsbml.InitAssignParameterMismatch
InitAssignStoichiometryMismatch = _libsbml.InitAssignStoichiometryMismatch
RateRuleCompartmentMismatch = _libsbml.RateRuleCompartmentMismatch
RateRuleSpeciesMismatch = _libsbml.RateRuleSpeciesMismatch
RateRuleParameterMismatch = _libsbml.RateRuleParameterMismatch
RateRuleStoichiometryMismatch = _libsbml.RateRuleStoichiometryMismatch
KineticLawNotSubstancePerTime = _libsbml.KineticLawNotSubstancePerTime
SpeciesInvalidExtentUnits = _libsbml.SpeciesInvalidExtentUnits
DelayUnitsNotTime = _libsbml.DelayUnitsNotTime
EventAssignCompartmentMismatch = _libsbml.EventAssignCompartmentMismatch
EventAssignSpeciesMismatch = _libsbml.EventAssignSpeciesMismatch
EventAssignParameterMismatch = _libsbml.EventAssignParameterMismatch
EventAssignStoichiometryMismatch = _libsbml.EventAssignStoichiometryMismatch
PriorityUnitsNotDimensionless = _libsbml.PriorityUnitsNotDimensionless
UpperUnitBound = _libsbml.UpperUnitBound
OverdeterminedSystem = _libsbml.OverdeterminedSystem
InvalidModelSBOTerm = _libsbml.InvalidModelSBOTerm
InvalidFunctionDefSBOTerm = _libsbml.InvalidFunctionDefSBOTerm
InvalidParameterSBOTerm = _libsbml.InvalidParameterSBOTerm
InvalidInitAssignSBOTerm = _libsbml.InvalidInitAssignSBOTerm
InvalidRuleSBOTerm = _libsbml.InvalidRuleSBOTerm
InvalidConstraintSBOTerm = _libsbml.InvalidConstraintSBOTerm
InvalidReactionSBOTerm = _libsbml.InvalidReactionSBOTerm
InvalidSpeciesReferenceSBOTerm = _libsbml.InvalidSpeciesReferenceSBOTerm
InvalidKineticLawSBOTerm = _libsbml.InvalidKineticLawSBOTerm
InvalidEventSBOTerm = _libsbml.InvalidEventSBOTerm
InvalidEventAssignmentSBOTerm = _libsbml.InvalidEventAssignmentSBOTerm
InvalidCompartmentSBOTerm = _libsbml.InvalidCompartmentSBOTerm
InvalidSpeciesSBOTerm = _libsbml.InvalidSpeciesSBOTerm
InvalidCompartmentTypeSBOTerm = _libsbml.InvalidCompartmentTypeSBOTerm
InvalidSpeciesTypeSBOTerm = _libsbml.InvalidSpeciesTypeSBOTerm
InvalidTriggerSBOTerm = _libsbml.InvalidTriggerSBOTerm
InvalidDelaySBOTerm = _libsbml.InvalidDelaySBOTerm
NotesNotInXHTMLNamespace = _libsbml.NotesNotInXHTMLNamespace
NotesContainsXMLDecl = _libsbml.NotesContainsXMLDecl
NotesContainsDOCTYPE = _libsbml.NotesContainsDOCTYPE
InvalidNotesContent = _libsbml.InvalidNotesContent
OnlyOneNotesElementAllowed = _libsbml.OnlyOneNotesElementAllowed
InvalidNamespaceOnSBML = _libsbml.InvalidNamespaceOnSBML
MissingOrInconsistentLevel = _libsbml.MissingOrInconsistentLevel
MissingOrInconsistentVersion = _libsbml.MissingOrInconsistentVersion
PackageNSMustMatch = _libsbml.PackageNSMustMatch
LevelPositiveInteger = _libsbml.LevelPositiveInteger
VersionPositiveInteger = _libsbml.VersionPositiveInteger
AllowedAttributesOnSBML = _libsbml.AllowedAttributesOnSBML
L3PackageOnLowerSBML = _libsbml.L3PackageOnLowerSBML
MissingModel = _libsbml.MissingModel
IncorrectOrderInModel = _libsbml.IncorrectOrderInModel
EmptyListElement = _libsbml.EmptyListElement
NeedCompartmentIfHaveSpecies = _libsbml.NeedCompartmentIfHaveSpecies
OneOfEachListOf = _libsbml.OneOfEachListOf
OnlyFuncDefsInListOfFuncDefs = _libsbml.OnlyFuncDefsInListOfFuncDefs
OnlyUnitDefsInListOfUnitDefs = _libsbml.OnlyUnitDefsInListOfUnitDefs
OnlyCompartmentsInListOfCompartments = _libsbml.OnlyCompartmentsInListOfCompartments
OnlySpeciesInListOfSpecies = _libsbml.OnlySpeciesInListOfSpecies
OnlyParametersInListOfParameters = _libsbml.OnlyParametersInListOfParameters
OnlyInitAssignsInListOfInitAssigns = _libsbml.OnlyInitAssignsInListOfInitAssigns
OnlyRulesInListOfRules = _libsbml.OnlyRulesInListOfRules
OnlyConstraintsInListOfConstraints = _libsbml.OnlyConstraintsInListOfConstraints
OnlyReactionsInListOfReactions = _libsbml.OnlyReactionsInListOfReactions
OnlyEventsInListOfEvents = _libsbml.OnlyEventsInListOfEvents
L3ConversionFactorOnModel = _libsbml.L3ConversionFactorOnModel
L3TimeUnitsOnModel = _libsbml.L3TimeUnitsOnModel
L3VolumeUnitsOnModel = _libsbml.L3VolumeUnitsOnModel
L3AreaUnitsOnModel = _libsbml.L3AreaUnitsOnModel
L3LengthUnitsOnModel = _libsbml.L3LengthUnitsOnModel
L3ExtentUnitsOnModel = _libsbml.L3ExtentUnitsOnModel
AllowedAttributesOnModel = _libsbml.AllowedAttributesOnModel
AllowedAttributesOnListOfFuncs = _libsbml.AllowedAttributesOnListOfFuncs
AllowedAttributesOnListOfUnitDefs = _libsbml.AllowedAttributesOnListOfUnitDefs
AllowedAttributesOnListOfComps = _libsbml.AllowedAttributesOnListOfComps
AllowedAttributesOnListOfSpecies = _libsbml.AllowedAttributesOnListOfSpecies
AllowedAttributesOnListOfParams = _libsbml.AllowedAttributesOnListOfParams
AllowedAttributesOnListOfInitAssign = _libsbml.AllowedAttributesOnListOfInitAssign
AllowedAttributesOnListOfRules = _libsbml.AllowedAttributesOnListOfRules
AllowedAttributesOnListOfConstraints = _libsbml.AllowedAttributesOnListOfConstraints
AllowedAttributesOnListOfReactions = _libsbml.AllowedAttributesOnListOfReactions
AllowedAttributesOnListOfEvents = _libsbml.AllowedAttributesOnListOfEvents
FunctionDefMathNotLambda = _libsbml.FunctionDefMathNotLambda
InvalidApplyCiInLambda = _libsbml.InvalidApplyCiInLambda
RecursiveFunctionDefinition = _libsbml.RecursiveFunctionDefinition
InvalidCiInLambda = _libsbml.InvalidCiInLambda
InvalidFunctionDefReturnType = _libsbml.InvalidFunctionDefReturnType
OneMathElementPerFunc = _libsbml.OneMathElementPerFunc
AllowedAttributesOnFunc = _libsbml.AllowedAttributesOnFunc
InvalidUnitDefId = _libsbml.InvalidUnitDefId
InvalidSubstanceRedefinition = _libsbml.InvalidSubstanceRedefinition
InvalidLengthRedefinition = _libsbml.InvalidLengthRedefinition
InvalidAreaRedefinition = _libsbml.InvalidAreaRedefinition
InvalidTimeRedefinition = _libsbml.InvalidTimeRedefinition
InvalidVolumeRedefinition = _libsbml.InvalidVolumeRedefinition
VolumeLitreDefExponentNotOne = _libsbml.VolumeLitreDefExponentNotOne
VolumeMetreDefExponentNot3 = _libsbml.VolumeMetreDefExponentNot3
EmptyListOfUnits = _libsbml.EmptyListOfUnits
InvalidUnitKind = _libsbml.InvalidUnitKind
OffsetNoLongerValid = _libsbml.OffsetNoLongerValid
CelsiusNoLongerValid = _libsbml.CelsiusNoLongerValid
EmptyUnitListElement = _libsbml.EmptyUnitListElement
OneListOfUnitsPerUnitDef = _libsbml.OneListOfUnitsPerUnitDef
OnlyUnitsInListOfUnits = _libsbml.OnlyUnitsInListOfUnits
AllowedAttributesOnUnitDefinition = _libsbml.AllowedAttributesOnUnitDefinition
AllowedAttributesOnListOfUnits = _libsbml.AllowedAttributesOnListOfUnits
AllowedAttributesOnUnit = _libsbml.AllowedAttributesOnUnit
ZeroDimensionalCompartmentSize = _libsbml.ZeroDimensionalCompartmentSize
ZeroDimensionalCompartmentUnits = _libsbml.ZeroDimensionalCompartmentUnits
ZeroDimensionalCompartmentConst = _libsbml.ZeroDimensionalCompartmentConst
UndefinedOutsideCompartment = _libsbml.UndefinedOutsideCompartment
RecursiveCompartmentContainment = _libsbml.RecursiveCompartmentContainment
ZeroDCompartmentContainment = _libsbml.ZeroDCompartmentContainment
Invalid1DCompartmentUnits = _libsbml.Invalid1DCompartmentUnits
Invalid2DCompartmentUnits = _libsbml.Invalid2DCompartmentUnits
Invalid3DCompartmentUnits = _libsbml.Invalid3DCompartmentUnits
InvalidCompartmentTypeRef = _libsbml.InvalidCompartmentTypeRef
OneDimensionalCompartmentUnits = _libsbml.OneDimensionalCompartmentUnits
TwoDimensionalCompartmentUnits = _libsbml.TwoDimensionalCompartmentUnits
ThreeDimensionalCompartmentUnits = _libsbml.ThreeDimensionalCompartmentUnits
AllowedAttributesOnCompartment = _libsbml.AllowedAttributesOnCompartment
NoUnitsOnCompartment = _libsbml.NoUnitsOnCompartment
InvalidSpeciesCompartmentRef = _libsbml.InvalidSpeciesCompartmentRef
HasOnlySubsNoSpatialUnits = _libsbml.HasOnlySubsNoSpatialUnits
NoSpatialUnitsInZeroD = _libsbml.NoSpatialUnitsInZeroD
NoConcentrationInZeroD = _libsbml.NoConcentrationInZeroD
SpatialUnitsInOneD = _libsbml.SpatialUnitsInOneD
SpatialUnitsInTwoD = _libsbml.SpatialUnitsInTwoD
SpatialUnitsInThreeD = _libsbml.SpatialUnitsInThreeD
InvalidSpeciesSusbstanceUnits = _libsbml.InvalidSpeciesSusbstanceUnits
BothAmountAndConcentrationSet = _libsbml.BothAmountAndConcentrationSet
NonBoundarySpeciesAssignedAndUsed = _libsbml.NonBoundarySpeciesAssignedAndUsed
NonConstantSpeciesUsed = _libsbml.NonConstantSpeciesUsed
InvalidSpeciesTypeRef = _libsbml.InvalidSpeciesTypeRef
MultSpeciesSameTypeInCompartment = _libsbml.MultSpeciesSameTypeInCompartment
MissingSpeciesCompartment = _libsbml.MissingSpeciesCompartment
SpatialSizeUnitsRemoved = _libsbml.SpatialSizeUnitsRemoved
SubstanceUnitsOnSpecies = _libsbml.SubstanceUnitsOnSpecies
ConversionFactorOnSpecies = _libsbml.ConversionFactorOnSpecies
AllowedAttributesOnSpecies = _libsbml.AllowedAttributesOnSpecies
InvalidParameterUnits = _libsbml.InvalidParameterUnits
ParameterUnits = _libsbml.ParameterUnits
ConversionFactorMustConstant = _libsbml.ConversionFactorMustConstant
AllowedAttributesOnParameter = _libsbml.AllowedAttributesOnParameter
InvalidInitAssignSymbol = _libsbml.InvalidInitAssignSymbol
MultipleInitAssignments = _libsbml.MultipleInitAssignments
InitAssignmentAndRuleForSameId = _libsbml.InitAssignmentAndRuleForSameId
OneMathElementPerInitialAssign = _libsbml.OneMathElementPerInitialAssign
AllowedAttributesOnInitialAssign = _libsbml.AllowedAttributesOnInitialAssign
InvalidAssignRuleVariable = _libsbml.InvalidAssignRuleVariable
InvalidRateRuleVariable = _libsbml.InvalidRateRuleVariable
AssignmentToConstantEntity = _libsbml.AssignmentToConstantEntity
RateRuleForConstantEntity = _libsbml.RateRuleForConstantEntity
RepeatedRule10304 = _libsbml.RepeatedRule10304
CircularRuleDependency = _libsbml.CircularRuleDependency
OneMathElementPerRule = _libsbml.OneMathElementPerRule
AllowedAttributesOnAssignRule = _libsbml.AllowedAttributesOnAssignRule
AllowedAttributesOnRateRule = _libsbml.AllowedAttributesOnRateRule
AllowedAttributesOnAlgRule = _libsbml.AllowedAttributesOnAlgRule
ConstraintMathNotBoolean = _libsbml.ConstraintMathNotBoolean
IncorrectOrderInConstraint = _libsbml.IncorrectOrderInConstraint
ConstraintNotInXHTMLNamespace = _libsbml.ConstraintNotInXHTMLNamespace
ConstraintContainsXMLDecl = _libsbml.ConstraintContainsXMLDecl
ConstraintContainsDOCTYPE = _libsbml.ConstraintContainsDOCTYPE
InvalidConstraintContent = _libsbml.InvalidConstraintContent
OneMathElementPerConstraint = _libsbml.OneMathElementPerConstraint
OneMessageElementPerConstraint = _libsbml.OneMessageElementPerConstraint
AllowedAttributesOnConstraint = _libsbml.AllowedAttributesOnConstraint
NoReactantsOrProducts = _libsbml.NoReactantsOrProducts
IncorrectOrderInReaction = _libsbml.IncorrectOrderInReaction
EmptyListInReaction = _libsbml.EmptyListInReaction
InvalidReactantsProductsList = _libsbml.InvalidReactantsProductsList
InvalidModifiersList = _libsbml.InvalidModifiersList
OneSubElementPerReaction = _libsbml.OneSubElementPerReaction
CompartmentOnReaction = _libsbml.CompartmentOnReaction
AllowedAttributesOnReaction = _libsbml.AllowedAttributesOnReaction
InvalidSpeciesReference = _libsbml.InvalidSpeciesReference
RepeatedRule20611 = _libsbml.RepeatedRule20611
BothStoichiometryAndMath = _libsbml.BothStoichiometryAndMath
AllowedAttributesOnSpeciesReference = _libsbml.AllowedAttributesOnSpeciesReference
AllowedAttributesOnModifier = _libsbml.AllowedAttributesOnModifier
UndeclaredSpeciesRef = _libsbml.UndeclaredSpeciesRef
IncorrectOrderInKineticLaw = _libsbml.IncorrectOrderInKineticLaw
EmptyListInKineticLaw = _libsbml.EmptyListInKineticLaw
NonConstantLocalParameter = _libsbml.NonConstantLocalParameter
SubsUnitsNoLongerValid = _libsbml.SubsUnitsNoLongerValid
TimeUnitsNoLongerValid = _libsbml.TimeUnitsNoLongerValid
OneListOfPerKineticLaw = _libsbml.OneListOfPerKineticLaw
OnlyLocalParamsInListOfLocalParams = _libsbml.OnlyLocalParamsInListOfLocalParams
AllowedAttributesOnListOfLocalParam = _libsbml.AllowedAttributesOnListOfLocalParam
OneMathPerKineticLaw = _libsbml.OneMathPerKineticLaw
UndeclaredSpeciesInStoichMath = _libsbml.UndeclaredSpeciesInStoichMath
AllowedAttributesOnKineticLaw = _libsbml.AllowedAttributesOnKineticLaw
AllowedAttributesOnListOfSpeciesRef = _libsbml.AllowedAttributesOnListOfSpeciesRef
AllowedAttributesOnListOfMods = _libsbml.AllowedAttributesOnListOfMods
AllowedAttributesOnLocalParameter = _libsbml.AllowedAttributesOnLocalParameter
MissingTriggerInEvent = _libsbml.MissingTriggerInEvent
TriggerMathNotBoolean = _libsbml.TriggerMathNotBoolean
MissingEventAssignment = _libsbml.MissingEventAssignment
TimeUnitsEvent = _libsbml.TimeUnitsEvent
IncorrectOrderInEvent = _libsbml.IncorrectOrderInEvent
ValuesFromTriggerTimeNeedDelay = _libsbml.ValuesFromTriggerTimeNeedDelay
DelayNeedsValuesFromTriggerTime = _libsbml.DelayNeedsValuesFromTriggerTime
OneMathPerTrigger = _libsbml.OneMathPerTrigger
OneMathPerDelay = _libsbml.OneMathPerDelay
InvalidEventAssignmentVariable = _libsbml.InvalidEventAssignmentVariable
EventAssignmentForConstantEntity = _libsbml.EventAssignmentForConstantEntity
OneMathPerEventAssignment = _libsbml.OneMathPerEventAssignment
AllowedAttributesOnEventAssignment = _libsbml.AllowedAttributesOnEventAssignment
OnlyOneDelayPerEvent = _libsbml.OnlyOneDelayPerEvent
OneListOfEventAssignmentsPerEvent = _libsbml.OneListOfEventAssignmentsPerEvent
OnlyEventAssignInListOfEventAssign = _libsbml.OnlyEventAssignInListOfEventAssign
AllowedAttributesOnListOfEventAssign = _libsbml.AllowedAttributesOnListOfEventAssign
AllowedAttributesOnEvent = _libsbml.AllowedAttributesOnEvent
AllowedAttributesOnTrigger = _libsbml.AllowedAttributesOnTrigger
AllowedAttributesOnDelay = _libsbml.AllowedAttributesOnDelay
PersistentNotBoolean = _libsbml.PersistentNotBoolean
InitialValueNotBoolean = _libsbml.InitialValueNotBoolean
OnlyOnePriorityPerEvent = _libsbml.OnlyOnePriorityPerEvent
OneMathPerPriority = _libsbml.OneMathPerPriority
AllowedAttributesOnPriority = _libsbml.AllowedAttributesOnPriority
GeneralWarningNotSpecified = _libsbml.GeneralWarningNotSpecified
CompartmentShouldHaveSize = _libsbml.CompartmentShouldHaveSize
SpeciesShouldHaveValue = _libsbml.SpeciesShouldHaveValue
ParameterShouldHaveUnits = _libsbml.ParameterShouldHaveUnits
LocalParameterShadowsId = _libsbml.LocalParameterShadowsId
LibSBMLAdditionalCodesLowerBound = _libsbml.LibSBMLAdditionalCodesLowerBound
CannotConvertToL1V1 = _libsbml.CannotConvertToL1V1
NoEventsInL1 = _libsbml.NoEventsInL1
NoFunctionDefinitionsInL1 = _libsbml.NoFunctionDefinitionsInL1
NoConstraintsInL1 = _libsbml.NoConstraintsInL1
NoInitialAssignmentsInL1 = _libsbml.NoInitialAssignmentsInL1
NoSpeciesTypesInL1 = _libsbml.NoSpeciesTypesInL1
NoCompartmentTypeInL1 = _libsbml.NoCompartmentTypeInL1
NoNon3DCompartmentsInL1 = _libsbml.NoNon3DCompartmentsInL1
NoFancyStoichiometryMathInL1 = _libsbml.NoFancyStoichiometryMathInL1
NoNonIntegerStoichiometryInL1 = _libsbml.NoNonIntegerStoichiometryInL1
NoUnitMultipliersOrOffsetsInL1 = _libsbml.NoUnitMultipliersOrOffsetsInL1
SpeciesCompartmentRequiredInL1 = _libsbml.SpeciesCompartmentRequiredInL1
NoSpeciesSpatialSizeUnitsInL1 = _libsbml.NoSpeciesSpatialSizeUnitsInL1
NoSBOTermsInL1 = _libsbml.NoSBOTermsInL1
StrictUnitsRequiredInL1 = _libsbml.StrictUnitsRequiredInL1
ConversionFactorNotInL1 = _libsbml.ConversionFactorNotInL1
CompartmentNotOnL1Reaction = _libsbml.CompartmentNotOnL1Reaction
ExtentUnitsNotSubstance = _libsbml.ExtentUnitsNotSubstance
GlobalUnitsNotDeclared = _libsbml.GlobalUnitsNotDeclared
HasOnlySubstanceUnitsNotinL1 = _libsbml.HasOnlySubstanceUnitsNotinL1
AvogadroNotSupported = _libsbml.AvogadroNotSupported
NoConstraintsInL2v1 = _libsbml.NoConstraintsInL2v1
NoInitialAssignmentsInL2v1 = _libsbml.NoInitialAssignmentsInL2v1
NoSpeciesTypeInL2v1 = _libsbml.NoSpeciesTypeInL2v1
NoCompartmentTypeInL2v1 = _libsbml.NoCompartmentTypeInL2v1
NoSBOTermsInL2v1 = _libsbml.NoSBOTermsInL2v1
NoIdOnSpeciesReferenceInL2v1 = _libsbml.NoIdOnSpeciesReferenceInL2v1
NoDelayedEventAssignmentInL2v1 = _libsbml.NoDelayedEventAssignmentInL2v1
StrictUnitsRequiredInL2v1 = _libsbml.StrictUnitsRequiredInL2v1
IntegerSpatialDimensions = _libsbml.IntegerSpatialDimensions
StoichiometryMathNotYetSupported = _libsbml.StoichiometryMathNotYetSupported
PriorityLostFromL3 = _libsbml.PriorityLostFromL3
NonPersistentNotSupported = _libsbml.NonPersistentNotSupported
InitialValueFalseEventNotSupported = _libsbml.InitialValueFalseEventNotSupported
SBOTermNotUniversalInL2v2 = _libsbml.SBOTermNotUniversalInL2v2
NoUnitOffsetInL2v2 = _libsbml.NoUnitOffsetInL2v2
NoKineticLawTimeUnitsInL2v2 = _libsbml.NoKineticLawTimeUnitsInL2v2
NoKineticLawSubstanceUnitsInL2v2 = _libsbml.NoKineticLawSubstanceUnitsInL2v2
NoDelayedEventAssignmentInL2v2 = _libsbml.NoDelayedEventAssignmentInL2v2
ModelSBOBranchChangedBeyondL2v2 = _libsbml.ModelSBOBranchChangedBeyondL2v2
StrictUnitsRequiredInL2v2 = _libsbml.StrictUnitsRequiredInL2v2
StrictSBORequiredInL2v2 = _libsbml.StrictSBORequiredInL2v2
DuplicateAnnotationInvalidInL2v2 = _libsbml.DuplicateAnnotationInvalidInL2v2
NoUnitOffsetInL2v3 = _libsbml.NoUnitOffsetInL2v3
NoKineticLawTimeUnitsInL2v3 = _libsbml.NoKineticLawTimeUnitsInL2v3
NoKineticLawSubstanceUnitsInL2v3 = _libsbml.NoKineticLawSubstanceUnitsInL2v3
NoSpeciesSpatialSizeUnitsInL2v3 = _libsbml.NoSpeciesSpatialSizeUnitsInL2v3
NoEventTimeUnitsInL2v3 = _libsbml.NoEventTimeUnitsInL2v3
NoDelayedEventAssignmentInL2v3 = _libsbml.NoDelayedEventAssignmentInL2v3
ModelSBOBranchChangedBeyondL2v3 = _libsbml.ModelSBOBranchChangedBeyondL2v3
StrictUnitsRequiredInL2v3 = _libsbml.StrictUnitsRequiredInL2v3
StrictSBORequiredInL2v3 = _libsbml.StrictSBORequiredInL2v3
DuplicateAnnotationInvalidInL2v3 = _libsbml.DuplicateAnnotationInvalidInL2v3
NoUnitOffsetInL2v4 = _libsbml.NoUnitOffsetInL2v4
NoKineticLawTimeUnitsInL2v4 = _libsbml.NoKineticLawTimeUnitsInL2v4
NoKineticLawSubstanceUnitsInL2v4 = _libsbml.NoKineticLawSubstanceUnitsInL2v4
NoSpeciesSpatialSizeUnitsInL2v4 = _libsbml.NoSpeciesSpatialSizeUnitsInL2v4
NoEventTimeUnitsInL2v4 = _libsbml.NoEventTimeUnitsInL2v4
ModelSBOBranchChangedInL2v4 = _libsbml.ModelSBOBranchChangedInL2v4
DuplicateAnnotationInvalidInL2v4 = _libsbml.DuplicateAnnotationInvalidInL2v4
NoSpeciesTypeInL3v1 = _libsbml.NoSpeciesTypeInL3v1
NoCompartmentTypeInL3v1 = _libsbml.NoCompartmentTypeInL3v1
NoUnitOffsetInL3v1 = _libsbml.NoUnitOffsetInL3v1
NoKineticLawTimeUnitsInL3v1 = _libsbml.NoKineticLawTimeUnitsInL3v1
NoKineticLawSubstanceUnitsInL3v1 = _libsbml.NoKineticLawSubstanceUnitsInL3v1
NoSpeciesSpatialSizeUnitsInL3v1 = _libsbml.NoSpeciesSpatialSizeUnitsInL3v1
NoEventTimeUnitsInL3v1 = _libsbml.NoEventTimeUnitsInL3v1
ModelSBOBranchChangedInL3v1 = _libsbml.ModelSBOBranchChangedInL3v1
DuplicateAnnotationInvalidInL3v1 = _libsbml.DuplicateAnnotationInvalidInL3v1
NoCompartmentOutsideInL3v1 = _libsbml.NoCompartmentOutsideInL3v1
NoStoichiometryMathInL3v1 = _libsbml.NoStoichiometryMathInL3v1
InvalidSBMLLevelVersion = _libsbml.InvalidSBMLLevelVersion
AnnotationNotesNotAllowedLevel1 = _libsbml.AnnotationNotesNotAllowedLevel1
InvalidRuleOrdering = _libsbml.InvalidRuleOrdering
RequiredPackagePresent = _libsbml.RequiredPackagePresent
UnrequiredPackagePresent = _libsbml.UnrequiredPackagePresent
PackageRequiredShouldBeFalse = _libsbml.PackageRequiredShouldBeFalse
SubsUnitsAllowedInKL = _libsbml.SubsUnitsAllowedInKL
TimeUnitsAllowedInKL = _libsbml.TimeUnitsAllowedInKL
FormulaInLevel1KL = _libsbml.FormulaInLevel1KL
L3SubstanceUnitsOnModel = _libsbml.L3SubstanceUnitsOnModel
TimeUnitsRemoved = _libsbml.TimeUnitsRemoved
BadMathML = _libsbml.BadMathML
FailedMathMLReadOfDouble = _libsbml.FailedMathMLReadOfDouble
FailedMathMLReadOfInteger = _libsbml.FailedMathMLReadOfInteger
FailedMathMLReadOfExponential = _libsbml.FailedMathMLReadOfExponential
FailedMathMLReadOfRational = _libsbml.FailedMathMLReadOfRational
BadMathMLNodeType = _libsbml.BadMathMLNodeType
InvalidMathMLAttribute = _libsbml.InvalidMathMLAttribute
NoTimeSymbolInFunctionDef = _libsbml.NoTimeSymbolInFunctionDef
NoBodyInFunctionDef = _libsbml.NoBodyInFunctionDef
DanglingUnitSIdRef = _libsbml.DanglingUnitSIdRef
RDFMissingAboutTag = _libsbml.RDFMissingAboutTag
RDFEmptyAboutTag = _libsbml.RDFEmptyAboutTag
RDFAboutTagNotMetaid = _libsbml.RDFAboutTagNotMetaid
RDFNotCompleteModelHistory = _libsbml.RDFNotCompleteModelHistory
RDFNotModelHistory = _libsbml.RDFNotModelHistory
AnnotationNotElement = _libsbml.AnnotationNotElement
InconsistentArgUnitsWarnings = _libsbml.InconsistentArgUnitsWarnings
InconsistentPowerUnitsWarnings = _libsbml.InconsistentPowerUnitsWarnings
InconsistentExponUnitsWarnings = _libsbml.InconsistentExponUnitsWarnings
UndeclaredUnits = _libsbml.UndeclaredUnits
UndeclaredTimeUnitsL3 = _libsbml.UndeclaredTimeUnitsL3
UndeclaredExtentUnitsL3 = _libsbml.UndeclaredExtentUnitsL3
UndeclaredObjectUnitsL3 = _libsbml.UndeclaredObjectUnitsL3
UnrecognisedSBOTerm = _libsbml.UnrecognisedSBOTerm
ObseleteSBOTerm = _libsbml.ObseleteSBOTerm
IncorrectCompartmentSpatialDimensions = _libsbml.IncorrectCompartmentSpatialDimensions
CompartmentTypeNotValidAttribute = _libsbml.CompartmentTypeNotValidAttribute
ConstantNotValidAttribute = _libsbml.ConstantNotValidAttribute
MetaIdNotValidAttribute = _libsbml.MetaIdNotValidAttribute
SBOTermNotValidAttributeBeforeL2V3 = _libsbml.SBOTermNotValidAttributeBeforeL2V3
InvalidL1CompartmentUnits = _libsbml.InvalidL1CompartmentUnits
L1V1CompartmentVolumeReqd = _libsbml.L1V1CompartmentVolumeReqd
CompartmentTypeNotValidComponent = _libsbml.CompartmentTypeNotValidComponent
ConstraintNotValidComponent = _libsbml.ConstraintNotValidComponent
EventNotValidComponent = _libsbml.EventNotValidComponent
SBOTermNotValidAttributeBeforeL2V2 = _libsbml.SBOTermNotValidAttributeBeforeL2V2
FuncDefNotValidComponent = _libsbml.FuncDefNotValidComponent
InitialAssignNotValidComponent = _libsbml.InitialAssignNotValidComponent
VariableNotValidAttribute = _libsbml.VariableNotValidAttribute
UnitsNotValidAttribute = _libsbml.UnitsNotValidAttribute
ConstantSpeciesNotValidAttribute = _libsbml.ConstantSpeciesNotValidAttribute
SpatialSizeUnitsNotValidAttribute = _libsbml.SpatialSizeUnitsNotValidAttribute
SpeciesTypeNotValidAttribute = _libsbml.SpeciesTypeNotValidAttribute
HasOnlySubsUnitsNotValidAttribute = _libsbml.HasOnlySubsUnitsNotValidAttribute
IdNotValidAttribute = _libsbml.IdNotValidAttribute
NameNotValidAttribute = _libsbml.NameNotValidAttribute
SpeciesTypeNotValidComponent = _libsbml.SpeciesTypeNotValidComponent
StoichiometryMathNotValidComponent = _libsbml.StoichiometryMathNotValidComponent
MultiplierNotValidAttribute = _libsbml.MultiplierNotValidAttribute
OffsetNotValidAttribute = _libsbml.OffsetNotValidAttribute
L3SpatialDimensionsUnset = _libsbml.L3SpatialDimensionsUnset
UnknownCoreAttribute = _libsbml.UnknownCoreAttribute
UnknownPackageAttribute = _libsbml.UnknownPackageAttribute
PackageConversionNotSupported = _libsbml.PackageConversionNotSupported
InvalidTargetLevelVersion = _libsbml.InvalidTargetLevelVersion
L3NotSupported = _libsbml.L3NotSupported
SBMLCodesUpperBound = _libsbml.SBMLCodesUpperBound
LIBSBML_CAT_SBML = _libsbml.LIBSBML_CAT_SBML
LIBSBML_CAT_SBML_L1_COMPAT = _libsbml.LIBSBML_CAT_SBML_L1_COMPAT
LIBSBML_CAT_SBML_L2V1_COMPAT = _libsbml.LIBSBML_CAT_SBML_L2V1_COMPAT
LIBSBML_CAT_SBML_L2V2_COMPAT = _libsbml.LIBSBML_CAT_SBML_L2V2_COMPAT
LIBSBML_CAT_GENERAL_CONSISTENCY = _libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY
LIBSBML_CAT_IDENTIFIER_CONSISTENCY = _libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY
LIBSBML_CAT_UNITS_CONSISTENCY = _libsbml.LIBSBML_CAT_UNITS_CONSISTENCY
LIBSBML_CAT_MATHML_CONSISTENCY = _libsbml.LIBSBML_CAT_MATHML_CONSISTENCY
LIBSBML_CAT_SBO_CONSISTENCY = _libsbml.LIBSBML_CAT_SBO_CONSISTENCY
LIBSBML_CAT_OVERDETERMINED_MODEL = _libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL
LIBSBML_CAT_SBML_L2V3_COMPAT = _libsbml.LIBSBML_CAT_SBML_L2V3_COMPAT
LIBSBML_CAT_MODELING_PRACTICE = _libsbml.LIBSBML_CAT_MODELING_PRACTICE
LIBSBML_CAT_INTERNAL_CONSISTENCY = _libsbml.LIBSBML_CAT_INTERNAL_CONSISTENCY
LIBSBML_CAT_SBML_L2V4_COMPAT = _libsbml.LIBSBML_CAT_SBML_L2V4_COMPAT
LIBSBML_CAT_SBML_L3V1_COMPAT = _libsbml.LIBSBML_CAT_SBML_L3V1_COMPAT
LIBSBML_SEV_SCHEMA_ERROR = _libsbml.LIBSBML_SEV_SCHEMA_ERROR
LIBSBML_SEV_GENERAL_WARNING = _libsbml.LIBSBML_SEV_GENERAL_WARNING
LIBSBML_SEV_NOT_APPLICABLE = _libsbml.LIBSBML_SEV_NOT_APPLICABLE
class SBMLError(XMLError):
    """
    Representation of errors, warnings and other diagnostics

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    When a libSBML operation on SBML content results in an error, or when
    there is something wrong with the SBML content, the problems are
    reported as SBMLError objects.  These are generally stored in an
    SBMLErrorLog object; this log object, in turn, is kept in the
    SBMLDocument object containing the SBML content.  Applications can
    obtain the list of logged errors using SBMLDocument.getErrorLog() and
    then use the methods provided by SBMLErrorLog to access individual
    SBMLError objects.  (Note that despite the word 'error' in the name,
    SBMLError objects are used to represent not only 'true' errors, but
    also warnings and some informational diagnostics.  The name is a
    historical hold-over from early versions of libSBML, in which the
    object really was only used to report errors.)

    Each SBMLError object instance has an identification number that
    identifies the nature of the problem.  This 'error id' number will be
    up to five digits long, and it will come from one of two sets of
    static integer constants defined in the interface class libsbml:
    either the SBML error identifiers  (described below) or the XML error
    identifiers (described in the documentation for the class XMLError).
    The former set of constants includes all the SBML validation rule
    numbers listed in the appendices of the SBML specification documents,
    as well as some additional libSBML-specific error codes.

     Error codes are useful mainly for software.  For human readers,
    SBMLError also includes text messages that describe the nature of a
    given problem.  The messages can be accessed using
    SBMLError.getShortMessage() and SBMLError.getMessage().  The former
    provides a brief one-line description of the issue, while
    SBMLError.getMessage() provides a more detailed text, including (if
    appropriate) references to sections of the SBML specifications where
    relevant topics are discussed.  These text strings are suitable for
    displaying to human users.

    An SBMLError object also contains a category code; its value may be
    retrieved using the method SBMLError.getCategory().  Category values
    are drawn from a set of static integer constants defined in libsbml
    and having names beginning with the characters LIBSBML_CAT_.  The list
    of possible codes is described in a separate section below.
    Categories are used to partition errors into distinct conceptual
    groups.  This is principally used by the libSBML validation system to
    group classes of validation checks.  For example,
    libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY is the category for tests
    that check identifier consistency;
    libsbml.LIBSBML_CAT_MATHML_CONSISTENCY is the category for MathML
    consistency checking; and so on.

     In addition, SBMLError also has a severity code.  Its value may be
    retrieved using the method SBMLError.getSeverity().  The possible
    severity values are the same as those reported by XMLError.  Severity
    levels currently range from informational (libsbml.LIBSBML_SEV_INFO)
    to fatal errors (libsbml.LIBSBML_SEV_FATAL). They can be used by an
    application to evaluate how serious a given problem is.

    Finally, SBMLError records the line and column near where the problem
    occurred in the SBML content.  The values may be retrieved using the
    methods SBMLError.getLine() and SBMLError.getColumn().  We say 'near',
    because a lot of factors affect how accurate the line/column
    information ultimately is.  For example, different XML parsers have
    different conventions for which line and column number they report for
    a particular problem (which makes a difference when a problem involves
    an opening XML tag on one line and a closing tag on another line).  In
    some situations, some parsers report invalid line and/or column
    numbers altogether.  If this occurs, libSBML sets the line and/or
    column number in the SBMLError object to the the value of the maximum
    unsigned long integer representable on the platform where libSBML is
    running.  (This is equal to the constant named ULONG_MAX in C and
    C++.) The probability that a true line or column number in an SBML
    model would equal this value is vanishingly small; thus, if an
    application encounters these values in an XMLError object, it can
    assume no valid line/column number could be provided by libSBML in
    that situation.

    Error codes associated with SBMLError objects
    ......................................................................

    The error and warning codes returned by libSBML are listed in the
    table below.  The method SBMLError.getErrorId() returns the error code
    of a given SBMLError object instance.  In the libSBML Python language
    interface, these error identifiers are currently implemented as static
    integer constants defined in the interface class libsbml.

    In this table, the right-hand columns titled 'L1V1', 'L1V2', etc.
    refer to Levels and Versions of the SBML specifications, and the
    entries in each column refer to whether the severity of the condition
    in that particular Level+Version of SBML.  The codes stand for the
    following:

      N  = Not applicable  
      I  = Informational   
      W  = Warning         
      E  = Error           
      F  = Fatal

      The text shown in the 'Meaning' is the text returned by the
    SBMLError.getShortMessage() method on a given SBMLError object.  A
    longer and (hopefully) clearer explanation of the issue is returned by
    SBMLError.getMessage().

    The error codes come from different lists depending on whether they're
    from libSBML core or from an SBML Level 3 package extension.

    However, in the language interfaces other than C++, all libSBML error
    codes are ultimately represented as integer constants rather than
    separate enumerations lists, and they are all stored in a single
    interface class.  Codes from different libSBML extensions have names
    that begin with the package's nickname, such as Qual for the
    Qualitative Models package, Layout for the Layout package, and so on.
    If the name of a code does not begin with one of the package nicknames
    (Layout, Fbc, Comp, Qual, etc.), then it is a code from libSBML core.

    @par

      +------------------------------------------------+------------------------------------------------------------------------------------------------------+---------+---------+---------+---------+---------+---------+---------+
      |Enumerator                                      |Meaning                                                                                               |L 1 V 1  |L 1 V 2  |L 2 V 1  |L 2 V 2  |L 2 V 3  |L 2 V 4  |L 3 V 1  |
      +------------------------------------------------+------------------------------------------------------------------------------------------------------+---------+---------+---------+---------+---------+---------+---------+
      |libsbml.UnknownError                            |Encountered unknown internal libSBML error                                                            |F        |F        |F        |F        |F        |F        |F        |
      |libsbml.NotUTF8                                 |File does not use UTF-8 encoding                                                                      |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.UnrecognizedElement                     |Encountered unrecognized element                                                                      |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.NotSchemaConformant                     |Document does not conform to the SBML XML schema                                                      |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.L3NotSchemaConformant                   |Document is not well-formed XML                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidMathElement                      |Invalid MathML                                                                                        |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.DisallowedMathMLSymbol                  |Disallowed MathML symbol found                                                                        |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.DisallowedMathMLEncodingUse             |Use of the MathML 'encoding' attribute is not allowed on this element                                 |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.DisallowedDefinitionURLUse              |Use of the MathML 'definitionURL' attribute is not allowed on this element                            |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.BadCsymbolDefinitionURLValue            |Invalid <csymbol> 'definitionURL' attribute value                                                     |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.DisallowedMathTypeAttributeUse          |Use of the MathML 'type' attribute is not allowed on this element                                     |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.DisallowedMathTypeAttributeValue        |Disallowed MathML 'type' attribute value                                                              |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.LambdaOnlyAllowedInFunctionDef          |Use of <lambda> not permitted outside of FunctionDefinition objects                                   |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.BooleanOpsNeedBooleanArgs               |Non-Boolean argument given to Boolean operator                                                        |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.NumericOpsNeedNumericArgs               |Non-numerical argument given to numerical operator                                                    |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.ArgsToEqNeedSameType                    |Arguments to <eq> and <neq> must have the same data types                                             |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.PiecewiseNeedsConsistentTypes           |Terms in a  expression must have consistent data types                                                |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.PieceNeedsBoolean                       |The second argument of a  expression must yield a Boolean value                                       |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.ApplyCiMustBeUserFunction               |A <ci> element in this context must refer to a function definition                                    |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.ApplyCiMustBeModelComponent             |A <ci> element in this context must refer to a model component                                        |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.KineticLawParametersAreLocalOnly        |Cannot use a KineticLaw local parameter outside of its local scope                                    |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.MathResultMustBeNumeric                 |A formula's result in this context must be a numerical value                                          |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.OpsNeedCorrectNumberOfArgs              |Incorrect number of arguments given to MathML operator                                                |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.InvalidNoArgsPassedToFunctionDef        |Incorrect number of arguments given to function invocation                                            |N        |N        |N        |N        |N        |E        |E        |
      |libsbml.DisallowedMathUnitsUse                  |Attribute 'units' is only permitted on <cn> elements                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidUnitsValue                       |Invalid value given for the 'units' attribute                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.DuplicateComponentId                    |Duplicate 'id' attribute value                                                                        |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.DuplicateUnitDefinitionId               |Duplicate unit definition 'id' attribute value                                                        |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.DuplicateLocalParameterId               |Duplicate local parameter 'id' attribute value                                                        |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.MultipleAssignmentOrRateRules           |Multiple rules for the same variable are not allowed                                                  |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.MultipleEventAssignmentsForId           |Multiple event assignments for the same variable are not allowed                                      |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.EventAndAssignmentRuleForId             |An event assignment and an assignment rule must not have the same value for 'variable'                |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.DuplicateMetaId                         |Duplicate 'metaid' attribute value                                                                    |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.InvalidSBOTermSyntax                    |Invalid syntax for an 'sboTerm' attribute value                                                       |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.InvalidMetaidSyntax                     |Invalid syntax for a 'metaid' attribute value                                                         |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.InvalidIdSyntax                         |Invalid syntax for an 'id' attribute value                                                            |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.InvalidUnitIdSyntax                     |Invalid syntax for the identifier of a unit                                                           |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.InvalidNameSyntax                       |Invalid syntax for a 'name' attribute value                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.MissingAnnotationNamespace              |Missing declaration of the XML namespace for the annotation                                           |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.DuplicateAnnotationNamespaces           |Multiple annotations using the same XML namespace                                                     |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.SBMLNamespaceInAnnotation               |The SBML XML namespace cannot be used in an Annotation object                                         |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.MultipleAnnotations                     |Only one Annotation object is permitted under a given SBML object                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InconsistentArgUnits                    |The units of the function call's arguments are not consistent with its definition                     |W        |W        |W        |E        |E        |W        |W        |
      |libsbml.InconsistentKineticLawUnitsL3           |The kinetic law's units are inconsistent with those of other kinetic laws in the model                |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.AssignRuleCompartmentMismatch           |Mismatched units in assignment rule for compartment                                                   |E        |E        |E        |E        |E        |W        |W        |
      |libsbml.AssignRuleSpeciesMismatch               |Mismatched units in assignment rule for species                                                       |E        |E        |E        |E        |E        |W        |W        |
      |libsbml.AssignRuleParameterMismatch             |Mismatched units in assignment rule for parameter                                                     |E        |E        |E        |E        |E        |W        |W        |
      |libsbml.AssignRuleStoichiometryMismatch         |Mismatched units in assignment rule for stoichiometry                                                 |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.InitAssignCompartmenMismatch            |Mismatched units in initial assignment to compartment                                                 |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InitAssignSpeciesMismatch               |Mismatched units in initial assignment to species                                                     |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InitAssignParameterMismatch             |Mismatched units in initial assignment to parameter                                                   |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InitAssignStoichiometryMismatch         |Mismatched units in initial assignment to stoichiometry                                               |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.RateRuleCompartmentMismatch             |Mismatched units in rate rule for compartment                                                         |E        |E        |E        |E        |E        |W        |W        |
      |libsbml.RateRuleSpeciesMismatch                 |Mismatched units in rate rule for species                                                             |E        |E        |E        |E        |E        |W        |W        |
      |libsbml.RateRuleParameterMismatch               |Mismatched units in rate rule for parameter                                                           |E        |E        |E        |E        |E        |W        |W        |
      |libsbml.RateRuleStoichiometryMismatch           |Mismatched units in rate rule for stoichiometry                                                       |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.KineticLawNotSubstancePerTime           |The units of the kinetic law are not 'substance'/'time'                                               |E        |E        |E        |E        |E        |W        |W        |
      |libsbml.SpeciesInvalidExtentUnits               |The species' units are not consistent with units of extent                                            |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.DelayUnitsNotTime                       |The units of the delay expression are not units of time                                               |N        |N        |E        |E        |E        |W        |W        |
      |libsbml.EventAssignCompartmentMismatch          |Mismatched units in event assignment for compartment                                                  |N        |N        |E        |E        |E        |W        |W        |
      |libsbml.EventAssignSpeciesMismatch              |Mismatched units in event assignment for species                                                      |N        |N        |E        |E        |E        |W        |W        |
      |libsbml.EventAssignParameterMismatch            |Mismatched units in event assignment for parameter                                                    |N        |N        |E        |E        |E        |W        |W        |
      |libsbml.EventAssignStoichiometryMismatch        |Mismatched units in event assignment for stoichiometry                                                |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.PriorityUnitsNotDimensionless           |The units of a priority expression must be 'dimensionless'                                            |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.UpperUnitBound                          |Upper boundary of unit validation diagnostic codes                                                    |N        |N        |N        |N        |N        |N        |N        |
      |libsbml.OverdeterminedSystem                    |The model is overdetermined                                                                           |W        |W        |W        |E        |E        |E        |E        |
      |libsbml.InvalidModelSBOTerm                     |Invalid 'sboTerm' attribute value for a Model object                                                  |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidFunctionDefSBOTerm               |Invalid 'sboTerm' attribute value for a FunctionDefinition object                                     |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidParameterSBOTerm                 |Invalid 'sboTerm' attribute value for a Parameter object                                              |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidInitAssignSBOTerm                |Invalid 'sboTerm' attribute value for an InitialAssignment object                                     |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidRuleSBOTerm                      |Invalid 'sboTerm' attribute value for a Rule object                                                   |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidConstraintSBOTerm                |Invalid 'sboTerm' attribute value for a Constraint object                                             |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidReactionSBOTerm                  |Invalid 'sboTerm' attribute value for a Reaction object                                               |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidSpeciesReferenceSBOTerm          |Invalid 'sboTerm' attribute value for a SpeciesReference object                                       |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidKineticLawSBOTerm                |Invalid 'sboTerm' attribute value for a KineticLaw object                                             |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidEventSBOTerm                     |Invalid 'sboTerm' attribute value for an Event object                                                 |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidEventAssignmentSBOTerm           |Invalid 'sboTerm' attribute value for an EventAssignment object                                       |N        |N        |N        |E        |E        |W        |W        |
      |libsbml.InvalidCompartmentSBOTerm               |Invalid 'sboTerm' attribute value for a Compartment object                                            |N        |N        |N        |N        |E        |W        |W        |
      |libsbml.InvalidSpeciesSBOTerm                   |Invalid 'sboTerm' attribute value for a Species object                                                |N        |N        |N        |N        |E        |W        |W        |
      |libsbml.InvalidCompartmentTypeSBOTerm           |Invalid 'sboTerm' attribute value for a CompartmentType object                                        |N        |N        |N        |N        |E        |W        |N        |
      |libsbml.InvalidSpeciesTypeSBOTerm               |Invalid 'sboTerm' attribute value for a SpeciesType object                                            |N        |N        |N        |N        |E        |W        |N        |
      |libsbml.InvalidTriggerSBOTerm                   |Invalid 'sboTerm' attribute value for an Event Trigger object                                         |N        |N        |N        |N        |E        |W        |W        |
      |libsbml.InvalidDelaySBOTerm                     |Invalid 'sboTerm' attribute value for an Event Delay object                                           |N        |N        |N        |N        |E        |W        |W        |
      |libsbml.NotesNotInXHTMLNamespace                |Notes must be placed in the XHTML XML namespace                                                       |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.NotesContainsXMLDecl                    |XML declarations are not permitted in Notes objects                                                   |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.NotesContainsDOCTYPE                    |XML DOCTYPE elements are not permitted in Notes objects                                               |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.InvalidNotesContent                     |Invalid notes content found                                                                           |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.OnlyOneNotesElementAllowed              |Only one Notes subobject is permitted on a given SBML object                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidNamespaceOnSBML                  |Invalid XML namespace for the SBML container element                                                  |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.MissingOrInconsistentLevel              |Missing or inconsistent value for the 'level' attribute                                               |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.MissingOrInconsistentVersion            |Missing or inconsistent value for the 'version' attribute                                             |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.PackageNSMustMatch                      |Inconsistent or invalid SBML Level/Version for the package namespace declaration                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LevelPositiveInteger                    |The 'level' attribute must have a positive integer value                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.VersionPositiveInteger                  |The 'version' attribute must have a positive integer value                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnSBML                 |Invalid attribute found on the SBML container element                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.L3PackageOnLowerSBML                    |An L3 package ns found on the SBML container element.                                                 |W        |W        |W        |W        |W        |W        |N        |
      |libsbml.MissingModel                            |No model definition found                                                                             |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.IncorrectOrderInModel                   |Incorrect ordering of components within the Model object                                              |E        |E        |E        |E        |E        |E        |N        |
      |libsbml.EmptyListElement                        |Empty ListOf___ object found                                                                          |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.NeedCompartmentIfHaveSpecies            |The presence of a species requires a compartment                                                      |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.OneOfEachListOf                         |Only one of each kind of ListOf___ object is allowed inside a Model object                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyFuncDefsInListOfFuncDefs            |Only FunctionDefinition, Notes and Annotation objects are allowed in ListOfFunctionDefinitions        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyUnitDefsInListOfUnitDefs            |Only UnitDefinition, Notes and Annotation objects are allowed in ListOfUnitDefinitions objects        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyCompartmentsInListOfCompartments    |Only Compartment, Notes and Annotation objects are allowed in ListOfCompartments objects              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlySpeciesInListOfSpecies              |Only Species, Notes and Annotation objects are allowed in ListOfSpecies objects                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyParametersInListOfParameters        |Only Parameter, Notes and Annotation objects are allowed in ListOfParameters objects                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyInitAssignsInListOfInitAssigns      |Only InitialAssignment, Notes and Annotation objects are allowed in ListOfInitialAssignments objects  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyRulesInListOfRules                  |Only Rule, Notes and Annotation objects are allowed in ListOfRules objects                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyConstraintsInListOfConstraints      |Only Constraint, Notes and Annotation objects are allowed in ListOfConstraints objects                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyReactionsInListOfReactions          |Only Reaction, Notes and Annotation objects are allowed in ListOfReactions objects                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyEventsInListOfEvents                |Only Event, Notes and Annotation objects are allowed in ListOfEvents objects                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.L3ConversionFactorOnModel               |A 'conversionFactor' attribute value must reference a Parameter object                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.L3TimeUnitsOnModel                      |Invalid 'timeUnits' attribute value                                                                   |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.L3VolumeUnitsOnModel                    |Invalid 'volumeUnits' attribute value                                                                 |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.L3AreaUnitsOnModel                      |Invalid 'areaUnits' attribute value                                                                   |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.L3LengthUnitsOnModel                    |Invalid 'lengthUnits' attribute value                                                                 |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.L3ExtentUnitsOnModel                    |Invalid 'extentUnits' attribute value                                                                 |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.AllowedAttributesOnModel                |Invalid attribute found on the Model object                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfFuncs          |Invalid attribute found on the ListOfFunctionDefinitions object                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfUnitDefs       |Invalid attribute found on the ListOfUnitDefinitions object                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfComps          |Invalid attribute found on the ListOfCompartments object                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfSpecies        |Invalid attribute found on the ListOfSpecies object                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfParams         |Invalid attribute found on the ListOfParameters object                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfInitAssign     |Invalid attribute found on the ListOfInitialAssignments object                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfRules          |Invalid attribute found on the ListOfRules object                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfConstraints    |Invalid attribute found on the ListOfConstraints object                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfReactions      |Invalid attribute found on the ListOfReactions object                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfEvents         |Invalid attribute found on the ListOfEvents object                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FunctionDefMathNotLambda                |Invalid expression found in the function definition                                                   |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.InvalidApplyCiInLambda                  |Invalid forward reference in the MathML <apply><ci>...</ci></apply> expression                        |N        |N        |E        |E        |E        |N        |N        |
      |libsbml.RecursiveFunctionDefinition             |Recursive function definitions are not permitted                                                      |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.InvalidCiInLambda                       |Invalid <ci> reference found inside the <lambda> mathematical formula                                 |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.InvalidFunctionDefReturnType            |A function's return type must be either a number or a Boolean                                         |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.OneMathElementPerFunc                   |A FunctionDefinition object must contain one <math> element                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnFunc                 |Invalid attribute found on the FunctionDefinition object                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidUnitDefId                        |Invalid 'id' attribute value for a UnitDefinition object                                              |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.InvalidSubstanceRedefinition            |Invalid redefinition of built-in type 'substance'                                                     |E        |E        |E        |E        |E        |E        |N        |
      |libsbml.InvalidLengthRedefinition               |Invalid redefinition of built-in type 'length'                                                        |W        |W        |E        |E        |E        |E        |N        |
      |libsbml.InvalidAreaRedefinition                 |Invalid redefinition of built-in type name 'area'                                                     |W        |W        |E        |E        |E        |E        |N        |
      |libsbml.InvalidTimeRedefinition                 |Invalid redefinition of built-in type name 'time'                                                     |E        |E        |E        |E        |E        |E        |N        |
      |libsbml.InvalidVolumeRedefinition               |Invalid redefinition of built-in type name 'volume'                                                   |E        |E        |E        |E        |E        |E        |N        |
      |libsbml.VolumeLitreDefExponentNotOne            |Must use 'exponent'=1 when defining 'volume' in terms of litres                                       |E        |E        |E        |E        |E        |N        |N        |
      |libsbml.VolumeMetreDefExponentNot3              |Must use 'exponent'=3 when defining 'volume' in terms of metres                                       |N        |N        |E        |E        |E        |N        |N        |
      |libsbml.EmptyListOfUnits                        |An empty list of Unit objects is not permitted in a UnitDefinition object                             |E        |E        |E        |E        |E        |E        |N        |
      |libsbml.InvalidUnitKind                         |Invalid value for the 'kind' attribute of a UnitDefinition object                                     |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.OffsetNoLongerValid                     |Unit attribute 'offset' is not supported in this Level+Version of SBML                                |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.CelsiusNoLongerValid                    |Unit name 'Celsius' is not defined in this Level+Version of SBML                                      |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.EmptyUnitListElement                    |A ListOfUnits object must not be empty                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OneListOfUnitsPerUnitDef                |At most one ListOfUnits object is allowed inside a UnitDefinition object                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyUnitsInListOfUnits                  |Only Unit, Notes and Annotation objects are allowed in ListOfUnits objects                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnUnitDefinition       |Invalid attribute found on the UnitDefinition object                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfUnits          |Invalid attribute found on the ListOfUnits object                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnUnit                 |Invalid attribute found on the Unit object                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.ZeroDimensionalCompartmentSize          |Invalid use of the 'size' attribute for a zero-dimensional compartment                                |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.ZeroDimensionalCompartmentUnits         |Invalid use of the 'units' attribute for a zero-dimensional compartment                               |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.ZeroDimensionalCompartmentConst         |Zero-dimensional compartments must be defined to be constant                                          |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.UndefinedOutsideCompartment             |Invalid value for the 'outside' attribute of a Compartment object                                     |E        |E        |E        |E        |E        |E        |N        |
      |libsbml.RecursiveCompartmentContainment         |Recursive nesting of compartments via the 'outside' attribute is not permitted                        |W        |W        |W        |E        |E        |E        |N        |
      |libsbml.ZeroDCompartmentContainment             |Invalid nesting of zero-dimensional compartments                                                      |N        |N        |W        |E        |E        |E        |N        |
      |libsbml.Invalid1DCompartmentUnits               |Invalid value for the 'units' attribute of a one-dimensional compartment                              |N        |N        |E        |E        |E        |E        |W        |
      |libsbml.Invalid2DCompartmentUnits               |Invalid value for the 'units' attribute of a two-dimensional compartment                              |N        |N        |E        |E        |E        |E        |W        |
      |libsbml.Invalid3DCompartmentUnits               |Invalid value for the 'units' attribute of a three-dimensional compartment                            |E        |E        |E        |E        |E        |E        |W        |
      |libsbml.InvalidCompartmentTypeRef               |Invalid value for the 'compartmentType' attribute of a compartment                                    |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.OneDimensionalCompartmentUnits          |No units defined for 1-D compartment                                                                  |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.TwoDimensionalCompartmentUnits          |No units defined for 2-D compartment                                                                  |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.ThreeDimensionalCompartmentUnits        |No units defined for 3-D Compartment object                                                           |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.AllowedAttributesOnCompartment          |Invalid attribute found on Compartment object                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.NoUnitsOnCompartment                    |No units defined for Compartment object                                                               |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.InvalidSpeciesCompartmentRef            |Invalid value found for Species 'compartment' attribute                                               |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.HasOnlySubsNoSpatialUnits               |Attribute 'spatialSizeUnits' must not be set if 'hasOnlySubstanceUnits'='true'                        |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.NoSpatialUnitsInZeroD                   |Attribute 'spatialSizeUnits' must not be set if the compartment is zero-dimensional                   |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.NoConcentrationInZeroD                  |Attribute 'initialConcentration' must not be set if the compartment is zero-dimensional               |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.SpatialUnitsInOneD                      |Invalid value for 'spatialSizeUnits' attribute of a one-dimensional compartment                       |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.SpatialUnitsInTwoD                      |Invalid value for the 'spatialSizeUnits' attribute of a two-dimensional compartment                   |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.SpatialUnitsInThreeD                    |Invalid value for the 'spatialSizeUnits' attribute of a three-dimensional compartment                 |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.InvalidSpeciesSusbstanceUnits           |Invalid value for a Species 'units' attribute                                                         |E        |E        |E        |E        |E        |E        |W        |
      |libsbml.BothAmountAndConcentrationSet           |Cannot set both 'initialConcentration' and 'initialAmount' attributes simultaneously                  |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.NonBoundarySpeciesAssignedAndUsed       |Cannot use a non-boundary species in both reactions and rules simultaneously                          |W        |W        |E        |E        |E        |E        |E        |
      |libsbml.NonConstantSpeciesUsed                  |Cannot use a constant, non-boundary species as a reactant or product                                  |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.InvalidSpeciesTypeRef                   |Invalid value for the 'speciesType' attribute of a species                                            |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.MultSpeciesSameTypeInCompartment        |Cannot have multiple species of the same species type in the same compartment                         |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.MissingSpeciesCompartment               |Missing value for the 'compartment' attribute                                                         |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.SpatialSizeUnitsRemoved                 |Attribute 'spatialSizeUnits' is not supported in this Level+Version of SBML                           |N        |N        |N        |N        |E        |E        |N        |
      |libsbml.SubstanceUnitsOnSpecies                 |No substance units defined for the species                                                            |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.ConversionFactorOnSpecies               |Invalid value for the 'conversionFactor' attribute                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnSpecies              |Invalid attribute found on Species object                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidParameterUnits                   |Invalid value for the 'units' attribute of a Parameter object                                         |E        |E        |E        |E        |E        |E        |W        |
      |libsbml.ParameterUnits                          |No units defined for the parameter                                                                    |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.ConversionFactorMustConstant            |A conversion factor must reference a Parameter object declared to be a constant                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnParameter            |Invalid attribute found on Parameter object                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidInitAssignSymbol                 |Invalid value for the 'symbol' attribute of an InitialAssignment object                               |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.MultipleInitAssignments                 |Multiple initial assignments for the same 'symbol' value are not allowed                              |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.InitAssignmentAndRuleForSameId          |Cannot set a value using both an initial assignment and an assignment rule simultaneously             |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.OneMathElementPerInitialAssign          |An InitialAssignment object must contain one <math> element                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnInitialAssign        |Invalid attribute found on an InitialAssignment object                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidAssignRuleVariable               |Invalid value for the 'variable' attribute of an AssignmentRule object                                |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.InvalidRateRuleVariable                 |Invalid value for the 'variable' attribute of a RateRule object                                       |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.AssignmentToConstantEntity              |An assignment rule cannot assign an entity declared to be constant                                    |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.RateRuleForConstantEntity               |A rate rule cannot assign an entity declared to be constant                                           |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.CircularRuleDependency                  |Circular dependencies involving rules and reactions are not permitted                                 |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.OneMathElementPerRule                   |A rule object must contain one <math> element                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnAssignRule           |Invalid attribute found on an AssignmentRule object                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnRateRule             |Invalid attribute found on a RateRule object                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnAlgRule              |Invalid attribute found on an AlgebraicRule object                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.ConstraintMathNotBoolean                |A Constraint object's <math> must evaluate to a Boolean value                                         |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.IncorrectOrderInConstraint              |Subobjects inside the Constraint object are not in the prescribed order                               |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.ConstraintNotInXHTMLNamespace           |A Constraint's Message subobject must be in the XHTML XML namespace                                   |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.ConstraintContainsXMLDecl               |XML declarations are not permitted within Constraint's Message objects                                |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.ConstraintContainsDOCTYPE               |XML DOCTYPE elements are not permitted within Constraint's Message objects                            |N        |N        |N        |E        |E        |E        |E        |
      |libsbml.InvalidConstraintContent                |Invalid content for a Constraint object's Message object                                              |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.OneMathElementPerConstraint             |A Constraint object must contain one <math> element                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OneMessageElementPerConstraint          |A Constraint object must contain one Message subobject                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnConstraint           |Invalid attribute found on Constraint object                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.NoReactantsOrProducts                   |Cannot have a reaction with neither reactants nor products                                            |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.IncorrectOrderInReaction                |Subobjects inside the Reaction object are not in the prescribed order                                 |E        |E        |E        |E        |E        |E        |N        |
      |libsbml.EmptyListInReaction                     |Reaction components, if present, cannot be empty                                                      |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.InvalidReactantsProductsList            |Invalid object found in the list of reactants or products                                             |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.InvalidModifiersList                    |Invalid object found in the list of modifiers                                                         |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.OneSubElementPerReaction                |A Reaction object can only contain one of each allowed type of object                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompartmentOnReaction                   |Invalid value for the Reaction 'compartment' attribute                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnReaction             |Invalid attribute for a Reaction object                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidSpeciesReference                 |Invalid 'species' attribute value in SpeciesReference object                                          |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.BothStoichiometryAndMath                |The 'stoichiometry' attribute and StoichiometryMath subobject are mutually exclusive                  |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.AllowedAttributesOnSpeciesReference     |Invalid attribute found on the SpeciesReference object                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnModifier             |Invalid attribute found on the ModifierSpeciesReference object                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.UndeclaredSpeciesRef                    |Unknown species referenced in the kinetic law <math> formula                                          |W        |W        |E        |E        |E        |E        |E        |
      |libsbml.IncorrectOrderInKineticLaw              |Incorrect ordering of components in the KineticLaw object                                             |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.EmptyListInKineticLaw                   |The list of parameters, if present, cannot be empty                                                   |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.NonConstantLocalParameter               |Parameters local to a KineticLaw object must have a 'constant' attribute value of 'true'              |N        |N        |W        |E        |E        |E        |N        |
      |libsbml.SubsUnitsNoLongerValid                  |Attribute 'substanceUnits' is not supported in this Level+Version of SBML                             |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.TimeUnitsNoLongerValid                  |Attribute 'timeUnits' is not supported in this Level+Version of SBML                                  |N        |N        |N        |E        |E        |E        |N        |
      |libsbml.OneListOfPerKineticLaw                  |Only one ListOfLocalParameters object is permitted within a KineticLaw object                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyLocalParamsInListOfLocalParams      |Only LocalParameter, Notes and Annotation objects are allowed in ListOfLocalParameter objects         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfLocalParam     |Invalid attribute found on the ListOfLocalParameters object                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OneMathPerKineticLaw                    |Only one <math> element is allowed in a KineticLaw object                                             |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.UndeclaredSpeciesInStoichMath           |Unknown species referenced in the StoichiometryMath object's <math> formula                           |N        |N        |W        |E        |E        |E        |N        |
      |libsbml.AllowedAttributesOnKineticLaw           |Invalid attribute found on the KineticLaw object                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfSpeciesRef     |Invalid attribute found on the ListOfSpeciesReferences object                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfMods           |Invalid attribute found on the ListOfModifiers object                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnLocalParameter       |Invalid attribute found on the LocalParameter object                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.MissingTriggerInEvent                   |The Event object is missing a Trigger subobject                                                       |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.TriggerMathNotBoolean                   |A Trigger object's <math> expression must evaluate to a Boolean value                                 |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.MissingEventAssignment                  |The Event object is missing an EventAssignment subobject                                              |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.TimeUnitsEvent                          |Units referenced by 'timeUnits' attribute are not compatible with units of time                       |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.IncorrectOrderInEvent                   |Incorrect ordering of components in Event object                                                      |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.ValuesFromTriggerTimeNeedDelay          |Attribute 'useValuesFromTriggerTime'='false', but the Event object does not define a delay            |N        |N        |N        |N        |N        |E        |N        |
      |libsbml.DelayNeedsValuesFromTriggerTime         |The use of a Delay object requires the Event attribute 'useValuesFromTriggerTime'                     |N        |N        |N        |N        |N        |N        |N        |
      |libsbml.OneMathPerTrigger                       |A Trigger object must have one <math> element                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OneMathPerDelay                         |A Delay object must have one <math> element                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InvalidEventAssignmentVariable          |Invalid 'variable' attribute value in Event object                                                    |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.EventAssignmentForConstantEntity        |An EventAssignment object cannot assign to a component having attribute 'constant'='true'             |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.OneMathPerEventAssignment               |An EventAssignment object must have one <math> element                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnEventAssignment      |Invalid attribute found on the EventAssignment object                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyOneDelayPerEvent                    |An Event object can only have one Delay subobject                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OneListOfEventAssignmentsPerEvent       |An Event object can only have one ListOfEventAssignments subobject                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyEventAssignInListOfEventAssign      |Only EventAssignment, Notes and Annotation objects are allowed in ListOfEventAssignments              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnListOfEventAssign    |Invalid attribute found on the ListOfEventAssignments object                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnEvent                |Invalid attribute found on the Event object                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnTrigger              |Invalid attribute found on the Trigger object                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnDelay                |Invalid attribute found on the Delay object                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.PersistentNotBoolean                    |The Trigger attribute 'persistent' must evaluate to a Boolean value                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InitialValueNotBoolean                  |The Trigger attribute 'initialValue' must evaluate to a Boolean value                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OnlyOnePriorityPerEvent                 |An Event object can only have one Priority subobject                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.OneMathPerPriority                      |A Priority object must have one <math> element                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.AllowedAttributesOnPriority             |Invalid attribute found on the Priority object                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.GeneralWarningNotSpecified              |Unknown error                                                                                         |N        |N        |N        |N        |N        |N        |N        |
      |libsbml.CompartmentShouldHaveSize               |It's best to define a size for every compartment in a model                                           |N        |N        |W        |W        |W        |W        |W        |
      |libsbml.SpeciesShouldHaveValue                  |It's best to define an initial amount or initial concentration for every species in a model           |N        |N        |W        |W        |W        |W        |W        |
      |libsbml.ParameterShouldHaveUnits                |It's best to declare units for every parameter in a model                                             |W        |W        |W        |W        |W        |W        |W        |
      |libsbml.LocalParameterShadowsId                 |Local parameters defined within a kinetic law shadow global object symbols                            |W        |W        |W        |W        |W        |W        |W        |
      |libsbml.CannotConvertToL1V1                     |Cannot convert to SBML Level 1 Version 1                                                              |N        |E        |E        |E        |E        |E        |E        |
      |libsbml.NoEventsInL1                            |SBML Level 1 does not support events                                                                  |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.NoFunctionDefinitionsInL1               |SBML Level 1 does not support function definitions                                                    |N        |N        |W        |W        |W        |W        |W        |
      |libsbml.NoConstraintsInL1                       |SBML Level 1 does not support constraints                                                             |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.NoInitialAssignmentsInL1                |SBML Level 1 does not support initial assignments                                                     |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.NoSpeciesTypesInL1                      |SBML Level 1 does not support species types                                                           |N        |N        |N        |W        |W        |W        |N        |
      |libsbml.NoCompartmentTypeInL1                   |SBML Level 1 does not support compartment types                                                       |N        |N        |N        |W        |W        |W        |N        |
      |libsbml.NoNon3DCompartmentsInL1                 |SBML Level 1 only supports three-dimensional compartments                                             |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.NoFancyStoichiometryMathInL1            |SBML Level 1 does not support non-integer nor non-rational stoichiometry formulas                     |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.NoNonIntegerStoichiometryInL1           |SBML Level 1 does not support non-integer 'stoichiometry' attribute values                            |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.NoUnitMultipliersOrOffsetsInL1          |SBML Level 1 does not support multipliers or offsets in unit definitions                              |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.SpeciesCompartmentRequiredInL1          |In SBML Level 1, a value for 'compartment' is mandatory in species definitions                        |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.NoSpeciesSpatialSizeUnitsInL1           |SBML Level 1 does not support species 'spatialSizeUnits' settings                                     |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.NoSBOTermsInL1                          |SBML Level 1 does not support the 'sboTerm' attribute                                                 |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.StrictUnitsRequiredInL1                 |SBML Level 1 requires strict unit consistency                                                         |N        |N        |N        |N        |N        |W        |W        |
      |libsbml.ConversionFactorNotInL1                 |SBML Level 1 does not support the 'conversionFactor' attribute                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompartmentNotOnL1Reaction              |SBML Level 1 does not support the 'compartment' attribute on Reaction objects                         |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.ExtentUnitsNotSubstance                 |Units of extent must be compatible with units of substance                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.GlobalUnitsNotDeclared                  |Global units must be refer to unit kind or unitDefinition.                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.HasOnlySubstanceUnitsNotinL1            |The concept of hasOnlySubstanceUnits was not available in SBML Level 1.                               |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.AvogadroNotSupported                    |Avogadro not supported in Levels 2 and 1.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.NoConstraintsInL2v1                     |SBML Level 2 Version 1 does not support Constraint objects                                            |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.NoInitialAssignmentsInL2v1              |SBML Level 2 Version 1 does not support InitialAssignment objects                                     |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.NoSpeciesTypeInL2v1                     |SBML Level 2 Version 1 does not support SpeciesType objects                                           |N        |N        |N        |W        |W        |W        |N        |
      |libsbml.NoCompartmentTypeInL2v1                 |SBML Level 2 Version 1 does not support CompartmentType objects                                       |N        |N        |N        |W        |W        |W        |N        |
      |libsbml.NoSBOTermsInL2v1                        |SBML Level 2 Version 1 does not support the 'sboTerm' attribute                                       |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.NoIdOnSpeciesReferenceInL2v1            |SBML Level 2 Version 1 does not support the 'id' attribute on SpeciesReference objects                |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.NoDelayedEventAssignmentInL2v1          |SBML Level 2 Version 1 does not support the 'useValuesFromTriggerTime' attribute                      |N        |N        |N        |N        |N        |E        |E        |
      |libsbml.StrictUnitsRequiredInL2v1               |SBML Level 2 Version 1 requires strict unit consistency                                               |N        |N        |N        |N        |N        |W        |W        |
      |libsbml.IntegerSpatialDimensions                |SBML Level 2 Version 1 requires that compartments have spatial dimensions of 0-3                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.StoichiometryMathNotYetSupported        |Conversion to StoichiometryMath objects not yet supported                                             |N        |N        |N        |N        |N        |N        |N        |
      |libsbml.PriorityLostFromL3                      |SBML Level 2 Version 1 does not support priorities on Event objects                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.NonPersistentNotSupported               |SBML Level 2 Version 1 does not support the 'persistent' attribute on Trigger objects                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.InitialValueFalseEventNotSupported      |SBML Level 2 Version 1 does not support the 'initialValue' attribute on Trigger objects               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.SBOTermNotUniversalInL2v2               |The 'sboTerm' attribute is invalid for this component in SBML Level 2 Version 2                       |N        |N        |N        |N        |W        |W        |W        |
      |libsbml.NoUnitOffsetInL2v2                      |This Level+Version of SBML does not support the 'offset' attribute on Unit objects                    |N        |N        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawTimeUnitsInL2v2             |This Level+Version of SBML does not support the 'timeUnits' attribute on KineticLaw objects           |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawSubstanceUnitsInL2v2        |This Level+Version of SBML does not support the 'substanceUnits' attribute on KineticLaw objects      |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoDelayedEventAssignmentInL2v2          |This Level+Version of SBML does not support the 'useValuesFromTriggerTime' attribute                  |N        |N        |N        |N        |N        |E        |E        |
      |libsbml.ModelSBOBranchChangedBeyondL2v2         |The allowable 'sboTerm' attribute values for Model objects differ for this SBML Level+Version         |N        |N        |N        |N        |N        |E        |E        |
      |libsbml.StrictUnitsRequiredInL2v2               |SBML Level 2 Version 2 requires strict unit consistency                                               |N        |N        |N        |N        |N        |W        |W        |
      |libsbml.StrictSBORequiredInL2v2                 |SBML Level 2 Version 2 requires strict SBO term consistency                                           |N        |N        |N        |N        |N        |W        |W        |
      |libsbml.DuplicateAnnotationInvalidInL2v2        |Duplicate top-level annotations are invalid in SBML Level 2 Version 2                                 |W        |W        |W        |N        |N        |N        |N        |
      |libsbml.NoUnitOffsetInL2v3                      |This Level+Version of SBML does not support the 'offset' attribute on Unit objects                    |N        |N        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawTimeUnitsInL2v3             |This Level+Version of SBML does not support the 'timeUnits' attribute on KineticLaw objects           |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawSubstanceUnitsInL2v3        |This Level+Version of SBML does not support the 'substanceUnits' attribute on KineticLaw objects      |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoSpeciesSpatialSizeUnitsInL2v3         |This Level+Version of SBML does not support the 'spatialSizeUnit' attribute on Species objects        |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.NoEventTimeUnitsInL2v3                  |This Level+Version of SBML does not support the 'timeUnits' attribute on Event objects                |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.NoDelayedEventAssignmentInL2v3          |This Level+Version of SBML does not support the 'useValuesFromTriggerTime' attribute                  |N        |N        |N        |N        |N        |E        |E        |
      |libsbml.ModelSBOBranchChangedBeyondL2v3         |The allowable 'sboTerm' attribute values for Model objects differ for this SBML Level+Version         |N        |N        |N        |N        |N        |E        |E        |
      |libsbml.StrictUnitsRequiredInL2v3               |SBML Level 2 Version 3 requires strict unit consistency                                               |N        |N        |N        |N        |N        |W        |W        |
      |libsbml.StrictSBORequiredInL2v3                 |SBML Level 2 Version 3 requires strict SBO term consistency                                           |N        |N        |N        |N        |N        |W        |W        |
      |libsbml.DuplicateAnnotationInvalidInL2v3        |Duplicate top-level annotations are invalid in SBML Level 2 Version 3                                 |W        |W        |W        |N        |N        |N        |N        |
      |libsbml.NoUnitOffsetInL2v4                      |This Level+Version of SBML does not support the 'offset' attribute on Unit objects                    |N        |N        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawTimeUnitsInL2v4             |This Level+Version of SBML does not support the 'timeUnits' attribute on KineticLaw objects           |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawSubstanceUnitsInL2v4        |This Level+Version of SBML does not support the 'substanceUnits' attribute on KineticLaw objects      |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoSpeciesSpatialSizeUnitsInL2v4         |This Level+Version of SBML does not support the 'spatialSizeUnit' attribute on Species objects        |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.NoEventTimeUnitsInL2v4                  |This Level+Version of SBML does not support the 'timeUnits' attribute on Event objects                |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.ModelSBOBranchChangedInL2v4             |The allowable 'sboTerm' attribute values for Model objects differ for this SBML Level+Version         |N        |N        |N        |E        |E        |N        |N        |
      |libsbml.DuplicateAnnotationInvalidInL2v4        |Duplicate top-level annotations are invalid in SBML Level 2 Version 4                                 |W        |W        |W        |N        |N        |N        |N        |
      |libsbml.NoSpeciesTypeInL3v1                     |SBML Level 3 Version 1 does not support SpeciesType objects                                           |N        |N        |N        |W        |W        |W        |N        |
      |libsbml.NoCompartmentTypeInL3v1                 |SBML Level 3 Version 1 does not support CompartmentType objects                                       |N        |N        |N        |W        |W        |W        |N        |
      |libsbml.NoUnitOffsetInL3v1                      |This Level+Version of SBML does not support the 'offset' attribute on Unit objects                    |N        |N        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawTimeUnitsInL3v1             |This Level+Version of SBML does not support the 'timeUnits' attribute on KineticLaw objects           |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoKineticLawSubstanceUnitsInL3v1        |This Level+Version of SBML does not support the 'substanceUnits' attribute on KineticLaw objects      |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NoSpeciesSpatialSizeUnitsInL3v1         |This Level+Version of SBML does not support the 'spatialSizeUnit' attribute on Species objects        |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.NoEventTimeUnitsInL3v1                  |This Level+Version of SBML does not support the 'timeUnits' attribute on Event objects                |N        |N        |E        |E        |N        |N        |N        |
      |libsbml.ModelSBOBranchChangedInL3v1             |The allowable 'sboTerm' attribute values for Model objects differ for this SBML Level+Version         |N        |N        |N        |E        |E        |N        |N        |
      |libsbml.DuplicateAnnotationInvalidInL3v1        |Duplicate top-level annotations are invalid in SBML Level 3 Version 1                                 |W        |W        |W        |N        |N        |N        |N        |
      |libsbml.NoCompartmentOutsideInL3v1              |This Level+Version of SBML does not support the 'outside' attribute on Compartment objects            |W        |W        |W        |W        |W        |W        |N        |
      |libsbml.NoStoichiometryMathInL3v1               |This Level+Version of SBML does not support the StoichiometryMath object                              |N        |N        |E        |E        |E        |E        |N        |
      |libsbml.InvalidSBMLLevelVersion                 |Unknown Level+Version combination of SBML                                                             |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.AnnotationNotesNotAllowedLevel1         |Annotation objects on the SBML container element are not permitted in SBML Level 1                    |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.InvalidRuleOrdering                     |Invalid ordering of rules                                                                             |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.RequiredPackagePresent                  |The SBML document requires an SBML Level 3 package unavailable in this software                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.UnrequiredPackagePresent                |The SBML document uses an SBML Level 3 package unavailable in this software                           |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.PackageRequiredShouldBeFalse            |This package expects required to be false.                                                            |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.SubsUnitsAllowedInKL                    |Disallowed value for attribute 'substanceUnits' on KineticLaw object                                  |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.TimeUnitsAllowedInKL                    |Disallowed value for attribute 'timeUnits' on KineticLaw object                                       |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.FormulaInLevel1KL                       |Only predefined functions are allowed in SBML Level 1 formulas                                        |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.L3SubstanceUnitsOnModel                 |Invalid 'substanceUnits' attribute value                                                              |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.TimeUnitsRemoved                        |This Level+Version of SBML does not support the 'timeUnits' attribute on Event objects                |N        |N        |N        |N        |E        |E        |E        |
      |libsbml.BadMathML                               |Invalid MathML expression                                                                             |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.FailedMathMLReadOfDouble                |Missing or invalid floating-point number in MathML expression                                         |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.FailedMathMLReadOfInteger               |Missing or invalid integer in MathML expression                                                       |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.FailedMathMLReadOfExponential           |Missing or invalid exponential expression in MathML                                                   |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.FailedMathMLReadOfRational              |Missing or invalid rational expression in MathML                                                      |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.BadMathMLNodeType                       |Invalid MathML element                                                                                |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.NoTimeSymbolInFunctionDef               |Use of <csymbol> for 'time' not allowed within FunctionDefinition objects                             |N        |N        |W        |E        |E        |E        |E        |
      |libsbml.NoBodyInFunctionDef                     |There must be a <lambda> body within the <math> element of a FunctionDefinition object                |N        |N        |E        |E        |E        |E        |E        |
      |libsbml.DanglingUnitSIdRef                      |Units must refer to valid unit or unitDefinition                                                      |W        |W        |W        |W        |W        |W        |W        |
      |libsbml.RDFMissingAboutTag                      |RDF missing the <about> tag.                                                                          |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.RDFEmptyAboutTag                        |RDF empty <about> tag.                                                                                |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.RDFAboutTagNotMetaid                    |RDF <about> tag is not metaid.                                                                        |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.RDFNotCompleteModelHistory              |RDF does not contain valid ModelHistory.                                                              |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.RDFNotModelHistory                      |RDF does not result in a ModelHistory.                                                                |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.AnnotationNotElement                    |Annotation must contain element.                                                                      |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.UndeclaredUnits                         |Missing unit declarations on parameters or literal numbers in expression                              |W        |W        |W        |W        |W        |W        |W        |
      |libsbml.UndeclaredTimeUnitsL3                   |Unable to verify consistency of units: the unit of time has not been declared                         |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.UndeclaredExtentUnitsL3                 |Unable to verify consistency of units: the units of reaction extent have not been declared            |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.UndeclaredObjectUnitsL3                 |Unable to verify consistency of units: encountered a model entity with no declared units              |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.UnrecognisedSBOTerm                     |Unrecognized 'sboTerm' attribute value                                                                |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.ObseleteSBOTerm                         |Obsolete 'sboTerm' attribute value                                                                    |N        |N        |N        |W        |W        |W        |W        |
      |libsbml.IncorrectCompartmentSpatialDimensions   |In SBML Level 1, only three-dimensional compartments are allowed                                      |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.CompartmentTypeNotValidAttribute        |CompartmentType objects are not available in this Level+Version of SBML                               |E        |E        |E        |N        |N        |N        |E        |
      |libsbml.ConstantNotValidAttribute               |This Level+Version of SBML does not support the 'constant' attribute on this component                |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.MetaIdNotValidAttribute                 |Attribute 'metaid' is not available in SBML Level 1                                                   |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.SBOTermNotValidAttributeBeforeL2V3      |The 'sboTerm' attribute is not available on this component before SBML Level 2 Version 3              |E        |E        |E        |E        |N        |N        |N        |
      |libsbml.InvalidL1CompartmentUnits               |Invalid units for a compartment in SBML Level 1                                                       |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.L1V1CompartmentVolumeReqd               |In SBML Level 1, a compartment's volume must be specified                                             |E        |N        |N        |N        |N        |N        |N        |
      |libsbml.CompartmentTypeNotValidComponent        |CompartmentType objects are not available in this Level+Version of SBML                               |E        |E        |E        |N        |N        |N        |E        |
      |libsbml.ConstraintNotValidComponent             |Constraint objects are not available in this Level+Version of SBML                                    |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.EventNotValidComponent                  |Event objects are not available in this Level+Version of SBML                                         |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.SBOTermNotValidAttributeBeforeL2V2      |The 'sboTerm' attribute is invalid for this component before Level 2 Version 2                        |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.FuncDefNotValidComponent                |FunctionDefinition objects are not available in this Level+Version of SBML                            |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.InitialAssignNotValidComponent          |InitialAssignment objects are not available in this Level+Version of SBML                             |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.VariableNotValidAttribute               |Attribute 'variable' is not available on this component in this Level+Version of SBML                 |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.UnitsNotValidAttribute                  |Attribute 'units' is not available on this component in this Level+Version of SBML                    |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.ConstantSpeciesNotValidAttribute        |Attribute 'constant' is not available on Species objects in SBML Level 1                              |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.SpatialSizeUnitsNotValidAttribute       |Attribute 'spatialSizeUnits' is not available on Species objects in SBML Level 1                      |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.SpeciesTypeNotValidAttribute            |Attribute 'speciesType' is not available on Species objects in SBML Level 1                           |E        |E        |E        |N        |N        |N        |E        |
      |libsbml.HasOnlySubsUnitsNotValidAttribute       |Attribute 'hasOnlySubstanceUnits' is not available on Species objects in SBML Level 1                 |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.IdNotValidAttribute                     |Attribute 'id' is not available on SpeciesReference objects in SBML Level 1                           |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.NameNotValidAttribute                   |Attribute 'name' is not available on SpeciesReference objects in SBML Level 1                         |E        |E        |E        |N        |N        |N        |N        |
      |libsbml.SpeciesTypeNotValidComponent            |The SpeciesType object is not supported in SBML Level 1                                               |E        |E        |E        |N        |N        |N        |E        |
      |libsbml.StoichiometryMathNotValidComponent      |The StoichiometryMath object is not supported in SBML Level 1                                         |E        |E        |N        |N        |N        |N        |E        |
      |libsbml.MultiplierNotValidAttribute             |Attribute 'multiplier' on Unit objects is not supported in SBML Level 1                               |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.OffsetNotValidAttribute                 |Attribute 'offset' on Unit objects is only available in SBML Level 2 Version 1                        |E        |E        |N        |N        |N        |N        |N        |
      |libsbml.L3SpatialDimensionsUnset                |No value given for 'spatialDimensions' attribute; assuming a value of 3                               |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.PackageConversionNotSupported           |Conversion of SBML Level 3 package constructs is not yet supported                                    |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.InvalidTargetLevelVersion               |The requested SBML Level/Version combination is not known to exist                                    |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.L3NotSupported                          |SBML Level 3 is not yet supported                                                                     |E        |E        |E        |E        |E        |E        |E        |
      |libsbml.CompUnknown                             |Unknown error from comp                                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompNSUndeclared                        |The comp ns is not correctly declared                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompElementNotInNs                      |Element not in comp namespace                                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompDuplicateComponentId                |Duplicate 'id' attribute value                                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompUniqueModelIds                      |Model and ExternalModelDefinitions must have unique ids                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompUniquePortIds                       |Ports must have unique ids                                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidSIdSyntax                    |Invalid SId syntax                                                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidSubmodelRefSyntax            |Invalid submodelRef syntax                                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidDeletionSyntax               |Invalid deletion syntax                                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidConversionFactorSyntax       |Invalid conversionFactor syntax                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidNameSyntax                   |Invalid name syntax                                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedUnitsShouldMatch            |Units of replaced elements should match replacement units.                                            |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompOneListOfReplacedElements           |Only one <listOfReplacedElements> allowed.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOReplaceElementsAllowedElements    |Allowed children of <listOfReplacedElements>                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOReplacedElementsAllowedAttribs    |Allowed <listOfReplacedElements> attributes                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompEmptyLOReplacedElements             |<listOfReplacedElements> must not be empty                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompOneReplacedByElement                |Only one <replacedBy> object allowed.                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompAttributeRequiredMissing            |Required comp:required attribute on <sbml>                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompAttributeRequiredMustBeBoolean      |The comp:required attribute must be Boolean                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompRequiredTrueIfElementsRemain        |The comp:required attribute must be 'true' if math changes. NOTE:  Deprecated                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompRequiredFalseIfAllElementsReplaced  |The comp:required attribute must be 'false' if math does not change. NOTE:  Deprecated                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompOneListOfModelDefinitions           |Only one <listOfModelDefinitions> allowed.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompEmptyLOModelDefs                    |<listOfModelDefinitions> and <listOfExternalModelDefinitions> must not be empty                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOModelDefsAllowedElements          |Only <modelDefinitions> in <listOfModelDefinitions>                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOExtModelDefsAllowedElements       |Only <externalModelDefinitions> in <listOfExternalModelDefinitions>                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOModelDefsAllowedAttributes        |Allowed <listOfModelDefinitions> attributes                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOExtModDefsAllowedAttributes       |Allowed <listOfExternalModelDefinitions> attributes                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompOneListOfExtModelDefinitions        |Only one <listOfExternalModelDefinitions> allowed.                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompAttributeRequiredMustBeTrue         |The comp:required attribute must be 'true'                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompExtModDefAllowedCoreAttributes      |Allowed <externalModelDefinitions> core attributes                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompExtModDefAllowedElements            |Allowed <externalModelDefinitions> elements                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompExtModDefAllowedAttributes          |Allowed <externalModelDefinitions> attributes                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReferenceMustBeL3                   |External models must be L3                                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompModReferenceMustIdOfModel           |'modelRef' must be the 'id' of a model in the 'source' document                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompExtModMd5DoesNotMatch               |MD5 checksum does not match the 'source' document                                                     |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompInvalidSourceSyntax                 |The 'comp:source' attribute must be of type 'anyURI'                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidModelRefSyntax               |The 'comp:modelRef' attribute must have the syntax of 'SId'                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidMD5Syntax                    |The 'comp:md5' attribute must have the syntax of 'string'                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompCircularExternalModelReference      |Circular reference in <externalModelDefinitiongt;                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompOneListOfOnModel                    |Only one <listOfSubmodels> and one <listOfPorts> allowed                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompNoEmptyListOfOnModel                |No empty listOf elements allowed                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOSubmodelsAllowedElements          |Allowed elements on <listOfSubmodels>                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOPortsAllowedElements              |Allowed elements on <listOfPorts>                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOSubmodelsAllowedAttributes        |Allowed attributes on <listOfSubmodels>                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLOPortsAllowedAttributes            |Allowed attributes on <listOfPorts>                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompSubmodelAllowedCoreAttributes       |Allowed core attributes on <submodel>                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompSubmodelAllowedElements             |Allowed elements on <submodel>                                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompOneListOfDeletionOnSubmodel         |Only one <listOfDeletions> on a <submodel> allowed                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompSubmodelNoEmptyLODeletions          |No empty listOfDeletions elements allowed                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLODeletionsAllowedElements          |Allowed elements on <listOfDeletions>                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLODeletionAllowedAttributes         |Allowed <listOfDeletions> attributes                                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompSubmodelAllowedAttributes           |Allowed <submodel> attributes                                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompModReferenceSyntax                  |'comp:modelRef' must conform to SId syntax                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidTimeConvFactorSyntax         |'comp:timeConversionFactor' must conform to SId syntax                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidExtentConvFactorSyntax       |'comp:extentConversionFactor' must conform to SId syntax                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompSubmodelMustReferenceModel          |The 'comp:modelRef' attribute must reference a model                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompSubmodelCannotReferenceSelf         |The 'comp:modelRef' attribute cannot reference own model                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompModCannotCircularlyReferenceSelf    |<model> may not reference <submodel> that references itself.                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompTimeConversionMustBeParameter       |The 'comp:timeConversionFactor' must reference a parameter                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompExtentConversionMustBeParameter     |The 'comp:extentConversionFactor' must reference a parameter                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompPortRefMustReferencePort            |The 'comp:portRef' attribute must be the 'id' of a                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompIdRefMustReferenceObject            |The 'comp:idRef' attribute must be the 'id' of a model element                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompUnitRefMustReferenceUnitDef         |The 'comp:unitRef' attribute must be the 'id' of a UnitDefinition                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompMetaIdRefMustReferenceObject        |The 'comp:metaIdRef' attribute must be the 'metaid' of an object                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompParentOfSBRefChildMustBeSubmodel    |If <sBaseRef> has a child <sBaseRef> its parent must be a <submodel>                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidPortRefSyntax                |The 'comp:portRef' attribute must have the syntax of an SBML SId                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidIdRefSyntax                  |The 'comp:idRef' attribute must have the syntax of an SBML SId                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidUnitRefSyntax                |The 'comp:unitRef' attribute must have the syntax of an SBML SId                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompInvalidMetaIdRefSyntax              |The 'comp:metaIdRef' attribute must have the syntax of an XML ID                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompOneSBaseRefOnly                     |Only one <sbaseRef>                                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompDeprecatedSBaseRefSpelling          |The spelling 'sbaseRef' is deprecated                                                                 |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompSBaseRefMustReferenceObject         |An SBaseRef must reference an object.                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompSBaseRefMustReferenceOnlyOneObject  |An SBaseRef must reference only one other object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompNoMultipleReferences                |Objects may not be referenced by mutiple SBaseRef constructs.                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompPortMustReferenceObject             |Port must reference an object                                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompPortMustReferenceOnlyOneObject      |Port must reference only one other object.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompPortAllowedAttributes               |Allowed attributes on a Port                                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompPortReferencesUnique                |Port definitions must be unique.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompDeletionMustReferenceObject         |Deletion must reference an object                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompDeletionMustReferOnlyOneObject      |Deletion must reference only one other object.                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompDeletionAllowedAttributes           |Allowed attributes on a Deletion                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementMustRefObject        |ReplacedElement must reference an object                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementMustRefOnlyOne       |ReplacedElement must reference only one other object.                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementAllowedAttributes    |Allowed attributes on <replacedElement>                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementSubModelRef          |The 'comp:submodelRef' attribute must point to a <submodel>                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementDeletionRef          |The 'comp:deletion' attribute must point to a <deletion>                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementConvFactorRef        |The 'comp:conversionFactor attribute must point to a                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementSameReference        |No <replacedElement> refer to same object                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedElementNoDelAndConvFact     |No <replacedElement> with deletion and conversionfactor                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedByMustRefObject             |ReplacedBy must reference an object                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedByMustRefOnlyOne            |ReplacedBy must reference only one other object.                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedByAllowedAttributes         |Allowed attributes on <replacedBy>                                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompReplacedBySubModelRef               |The 'comp:submodelRef' attribute must point to a <submodel>                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompMustReplaceSameClass                |Replaced classes must match.                                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompMustReplaceIDs                      |Replaced IDs must be replaced with IDs.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompMustReplaceMetaIDs                  |Replaced metaids must be replaced with metaids.                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompMustReplacePackageIDs               |Replaced package IDs must be replaced with package IDs.                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompUnresolvedReference                 |Unresolved reference.                                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompNoModelInReference                  |No model in referenced document.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompExtModDefBad                        |Referenced <externalModelDefinitiongt; unresolvable.                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompModelFlatteningFailed               |Model failed to flatten.                                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompFlatModelNotValid                   |Flat model not valid.                                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompLineNumbersUnreliable               |Line numbers unreliable.                                                                              |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompFlatteningNotRecognisedReqd         |Flattening not implemented for required package.                                                      |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompFlatteningNotRecognisedNotReqd      |Flattening not implemented for unrequired package.                                                    |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompFlatteningNotImplementedNotReqd     |Flattening not implemented for unrequired package.                                                    |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompFlatteningNotImplementedReqd        |Flattening not implemented for required package.                                                      |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompFlatteningWarning                   |Flattening reference may come from package.                                                           |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompDeprecatedDeleteFunction            |The performDeletions functions is deprecated.                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompDeprecatedReplaceFunction           |The performReplacementsAndConversions fuctions is deprecated.                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompDeletedReplacement                  |Element deleted before a subelement could be replaced.                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.CompIdRefMayReferenceUnknownPackage     |The 'comp:idRef' attribute must be the 'id' of a model element                                        |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.CompMetaIdRefMayReferenceUnknownPkg     |The 'comp:metaIdRef' attribute must be the 'metaid' of a model element                                |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.FbcUnknown                              |Unknown error from fbc                                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcNSUndeclared                         |The fbc ns is not correctly declared                                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcElementNotInNs                       |Element not in fbc namespace                                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcDuplicateComponentId                 |Duplicate 'id' attribute value                                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcSBMLSIdSyntax                        |Invalid 'id' attribute                                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcAttributeRequiredMissing             |Required fbc:required attribute on <sbml>                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcAttributeRequiredMustBeBoolean       |The fbc:required attribute must be Boolean                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcRequiredFalse                        |The fbc:required attribute must be 'false'                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcOnlyOneEachListOf                    |One of each list of allowed                                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcNoEmptyListOfs                       |ListOf elements cannot be empty                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcLOFluxBoundsAllowedElements          |Allowed elements on ListOfFluxBounds                                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcLOObjectivesAllowedElements          |Allowed elements on ListOfObjectives                                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcLOFluxBoundsAllowedAttributes        |Allowed attributes on ListOfFluxBounds                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcLOObjectivesAllowedAttributes        |Allowed attributes on ListOfObjectives                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcActiveObjectiveSyntax                |Type of activeObjective attribute                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcActiveObjectiveRefersObjective       |ActiveObjective must reference Objective                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcSpeciesAllowedL3Attributes           |Species allowed attributes                                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcSpeciesChargeMustBeInteger           |Charge must be integer                                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcSpeciesFormulaMustBeString           |Chemical formula must be string                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundAllowedL3Attributes         |<fluxBound> may only have 'metaId' and 'sboTerm' from L3 namespace                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundAllowedElements             |<fluxBound> may only have <notes> and <annotations> from L3 Core                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundRequiredAttributes          |Invalid attribute found on <fluxBound> object                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundRectionMustBeSIdRef         |Datatype for 'fbc:reaction' must be SIdRef                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundNameMustBeString            |The attribute 'fbc:name' must be of the data type string                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundOperationMustBeEnum         |The attribute 'fbc:operation' must be of data type FbcOperation                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundValueMustBeDouble           |The attribute 'fbc:value' must be of the data type double                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundReactionMustExist           |'fbc:reaction' must refer to valid reaction                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxBoundsForReactionConflict        |Conflicting set of FluxBounds for a reaction                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveAllowedL3Attributes         |<objective> may only have 'metaId' and 'sboTerm' from L3 namespace                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveAllowedElements             |<objective> may only have <notes> and <annotations> from L3 Core                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveRequiredAttributes          |Invalid attribute found on <objective> object                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveNameMustBeString            |The attribute 'fbc:name' must be of the data type string                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveTypeMustBeEnum              |The attribute 'fbc:type' must be of data type FbcType.                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveOneListOfObjectives         |An <objective> must have one <listOfFluxObjectives>.                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveLOFluxObjMustNotBeEmpty     |<listOfFluxObjectives> subobject must not be empty                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveLOFluxObjOnlyFluxObj        |Invalid element found in <listOfFluxObjectives>                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcObjectiveLOFluxObjAllowedAttribs     |<listOfFluxObjectives> may only have 'metaId' and 'sboTerm' from L3 core                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxObjectAllowedL3Attributes        |<fluxObjectivegt; may only have 'metaId' and 'sboTerm' from L3 namespace                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxObjectAllowedElements            |<fluxObjectivegt; may only have <notes> and <annotations> from L3 Core                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxObjectRequiredAttributes         |Invalid attribute found on <fluxObjectivegt; object                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxObjectNameMustBeString           |The attribute 'fbc:name' must be of the data type string                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxObjectReactionMustBeSIdRef       |Datatype for 'fbc:reaction' must be SIdRef                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxObjectReactionMustExist          |'fbc:reaction' must refer to valid reaction                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.FbcFluxObjectCoefficientMustBeDouble    |The attribute 'fbc:coefficient' must be of the data type double                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutUnknownError                      |Unknown error from layout                                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutNSUndeclared                      |The layout ns is not correctly declared                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutElementNotInNs                    |Element not in layout namespace                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutDuplicateComponentId              |Duplicate 'id' attribute value                                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSIdSyntax                         |'id' attribute incorrect syntax                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutXsiTypeAllowedLocations           |'xsi:type' allowed locations                                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutXsiTypeSyntax                     |'xsi:type' attribute incorrect syntax                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutAttributeRequiredMissing          |Required layout:required attribute on <sbml>                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutAttributeRequiredMustBeBoolean    |The layout:required attribute must be Boolean                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRequiredFalse                     |The layout:required attribute must be 'false'                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutOnlyOneLOLayouts                  |Only one listOfLayouts on <model>                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOLayoutsNotEmpty                 |ListOf elements cannot be empty                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOLayoutsAllowedElements          |Allowed elements on ListOfLayouts                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOLayoutsAllowedAttributes        |Allowed attributes on ListOfLayouts                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLayoutAllowedElements             |Allowed elements on Layout                                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLayoutAllowedCoreAttributes       |Allowed core attributes on Layout                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutOnlyOneEachListOf                 |Only one each listOf on <layout>                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutNoEmptyListOfs                    |ListOf elements cannot be empty                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLayoutAllowedAttributes           |<layout> must have 'id' and may have 'name'                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLayoutNameMustBeString            |'name' must be string                                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOCompGlyphAllowedAttributes      |Attributes allowed on <listOfCompartmentGlyphs>.                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOCompGlyphAllowedElements        |Elements allowed on <listOfCompartmentGlyphs>.                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOSpeciesGlyphAllowedAttributes   |Attributes allowed on <listOfSpeciesGlyphs>.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOSpeciesGlyphAllowedElements     |Elements allowed on <listOfSpeciesGlyphs>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLORnGlyphAllowedAttributes        |Attributes allowed on <listOfReactionGlyphs>.                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLORnGlyphAllowedElements          |Elements allowed on <listOfReactionGlyphs>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOAddGOAllowedAttribut            |Attributes allowed on <listOfAdditionalGraphicalObjectGlyphs>.                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOAddGOAllowedElements            |Elements allowed on <listOfAdditionalGraphicalObjectGlyphs>.                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLayoutMustHaveDimensions          |Layout must have <dimensions>.                                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOTextGlyphAllowedAttributes      |Attributes allowed on <listOfTextGlyphs>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOTextGlyphAllowedElements        |Elements allowed on <listOfTextGlyphs>.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGOAllowedCoreElements             |Core elements allowed on <graphicalObject>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGOAllowedCoreAttributes           |Core attributes allowed on <graphicalObject>.                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGOAllowedElements                 |Layout elements allowed on <graphicalObject>.                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGOAllowedAttributes               |Layout attributes allowed on <graphicalObject>.                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGOMetaIdRefMustBeIDREF            |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGOMetaIdRefMustReferenceObject    |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGOMustContainBoundingBox          |A <graphicalObject> must contain a <boundingBox>.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGAllowedCoreElements             |Core elements allowed on <compartmentGlyph>.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGAllowedCoreAttributes           |Core attributes allowed on <compartmentGlyph>.                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGAllowedElements                 |Layout elements allowed on <compartmentGlyph>.                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGAllowedAttributes               |Layout attributes allowed on <compartmentGlyph>.                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGMetaIdRefMustBeIDREF            |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGMetaIdRefMustReferenceObject    |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGCompartmentSyntax               |CompartmentGlyph 'compartment' must have SIdRef syntax.                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGCompartmentMustRefComp          |CompartmentGlyph compartment must reference existing compartment.                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGNoDuplicateReferences           |CompartmentGlyph cannot reference two objects.                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCGOrderMustBeDouble               |CompartmentGlyph order must be double.                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGAllowedCoreElements             |Core elements allowed on <speciesGlyph>.                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGAllowedCoreAttributes           |Core attributes allowed on <speciesGlyph>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGAllowedElements                 |Layout elements allowed on <speciesGlyph>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGAllowedAttributes               |Layout attributes allowed on <speciesGlyph>.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGMetaIdRefMustBeIDREF            |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGMetaIdRefMustReferenceObject    |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGSpeciesSyntax                   |SpeciesGlyph 'species' must have SIdRef syntax.                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGSpeciesMustRefSpecies           |SpeciesGlyph species must reference existing species.                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSGNoDuplicateReferences           |SpeciesGlyph cannot reference two objects.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGAllowedCoreElements             |Core elements allowed on <reactionGlyph>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGAllowedCoreAttributes           |Core attributes allowed on <reactionGlyph>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGAllowedElements                 |Layout elements allowed on <reactionGlyph>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGAllowedAttributes               |Layout attributes allowed on <reactionGlyph>.                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGMetaIdRefMustBeIDREF            |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGMetaIdRefMustReferenceObject    |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGReactionSyntax                  |ReactionGlyph 'reaction' must have SIdRef syntax.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGReactionMustRefReaction         |ReactionGlyph reaction must reference existing reaction.                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutRGNoDuplicateReferences           |ReactionGlyph cannot reference two objects.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOSpeciesRefGlyphAllowedElements  |Allowed elements on ListOfSpeciesReferenceGlyphs                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOSpeciesRefGlyphAllowedAttribs   |Allowed attributes on ListOfSpeciesReferenceGlyphs                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOSpeciesRefGlyphNotEmpty         |ListOfSpeciesReferenceGlyphs not empty                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGAllowedCoreElements             |Core elements allowed on <generalGlyph>.                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGAllowedCoreAttributes           |Core attributes allowed on <generalGlyph>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGAllowedElements                 |Layout elements allowed on <generalGlyph>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGAllowedAttributes               |Layout attributes allowed on <generalGlyph>.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGMetaIdRefMustBeIDREF            |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGMetaIdRefMustReferenceObject    |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGReferenceSyntax                 |GeneralGlyph 'reference' must have SIdRef syntax.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGReferenceMustRefObject          |GeneralGlyph 'reference' must reference existing element.                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutGGNoDuplicateReferences           |GeneralGlyph cannot reference two objects.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOReferenceGlyphAllowedElements   |Allowed elements on ListOfReferenceGlyphs                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOReferenceGlyphAllowedAttribs    |Allowed attributes on ListOfReferenceGlyphs                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOSubGlyphAllowedElements         |Allowed elements on ListOfSubGlyphs                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOSubGlyphAllowedAttribs          |Allowed attributes on ListOfSubGlyphs                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGAllowedCoreElements             |Core elements allowed on <textGlyph>.                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGAllowedCoreAttributes           |Core attributes allowed on <textGlyph>.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGAllowedElements                 |Layout elements allowed on <textGlyph>.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGAllowedAttributes               |Layout attributes allowed on <textGlyph>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGMetaIdRefMustBeIDREF            |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGMetaIdRefMustReferenceObject    |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGOriginOfTextSyntax              |TextGlyph 'originOfText' must have SIdRef syntax.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGOriginOfTextMustRefObject       |TextGlyph 'originOfText' must reference existing element.                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGNoDuplicateReferences           |TextGlyph cannot reference two objects.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGGraphicalObjectSyntax           |TextGlyph 'graphicalObject' must have SIdRef syntax.                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGGraphicalObjectMustRefObject    |TextGlyph 'graphicalObject' must reference existing element.                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutTGTextMustBeString                |TextGlyph 'text' must be string.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGAllowedCoreElements            |Core elements allowed on <speciesReferenceGlyphgt;.                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGAllowedCoreAttributes          |Core attributes allowed on <speciesReferenceGlyphgt;.                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGAllowedElements                |Layout elements allowed on <speciesReferenceGlyphgt;.                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGAllowedAttributes              |Layout attributes allowed on <speciesReferenceGlyphgt;.                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGMetaIdRefMustBeIDREF           |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGMetaIdRefMustReferenceObject   |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGSpeciesReferenceSyntax         |SpeciesReferenceGlyph 'speciesReference' must have SIdRef syntax.                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGSpeciesRefMustRefObject        |SpeciesReferenceGlyph 'speciesReference' must reference existing element.                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGNoDuplicateReferences          |SpeciesReferenceGlyph cannot reference two objects.                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGSpeciesGlyphSyntax             |SpeciesReferenceGlyph 'speciesGlyph' must have SIdRef syntax.                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGSpeciesGlyphMustRefObject      |SpeciesReferenceGlyph 'speciesGlyph' must reference existing element.                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutSRGRoleSyntax                     |SpeciesReferenceGlyph 'role' must be string from enumeration.                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGAllowedCoreElements           |Core elements allowed on <referenceGlyph>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGAllowedCoreAttributes         |Core attributes allowed on <referenceGlyph>.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGAllowedElements               |Layout elements allowed on <referenceGlyph>.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGAllowedAttributes             |Layout attributes allowed on <referenceGlyph>.                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGMetaIdRefMustBeIDREF          |Layout 'metIdRef' must be IDREF.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGMetaIdRefMustReferenceObject  |Layout 'metIdRef' must reference existing object.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGReferenceSyntax               |ReferenceGlyph 'reference' must have SIdRef syntax.                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGReferenceMustRefObject        |ReferenceGlyph 'reference' must reference existing element.                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGNoDuplicateReferences         |ReferenceGlyph cannot reference two objects.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGGlyphSyntax                   |ReferenceGlyph 'glyph' must have SIdRef syntax.                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGGlyphMustRefObject            |ReferenceGlyph 'glyph' must reference existing element.                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutREFGRoleSyntax                    |ReferenceGlyph 'role' must be string.                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutPointAllowedCoreElements          |Core elements allowed on  .                                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutPointAllowedCoreAttributes        |Core attributes allowed on  .                                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutPointAllowedAttributes            |Layout attributes allowed on  .                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutPointAttributesMustBeDouble       |Layout 'x', 'y' and 'z' must be double.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutBBoxAllowedCoreElements           |Core elements allowed on <boundingBox>.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutBBoxAllowedCoreAttributes         |Core attributes allowed on <boundingBox>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutBBoxAllowedElements               |Layout elements allowed on <boundingBox>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutBBoxAllowedAttributes             |Layout attributes allowed on <boundingBox>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutBBoxConsistent3DDefinition        |Layout consistent dimensions on a <boundingBox>                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCurveAllowedCoreElements          |Core elements allowed on <curve>.                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCurveAllowedCoreAttributes        |Core attributes allowed on <curve>.                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCurveAllowedElements              |Layout elements allowed on <curve>.                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCurveAllowedAttributes            |Layout attributes allowed on <curve>.                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOCurveSegsAllowedAttributes      |Allowed attributes on ListOfCurveSegments                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOCurveSegsAllowedElements        |Allowed elements on ListOfCurveSegments                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLOCurveSegsNotEmpty               |No empty ListOfCurveSegments                                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLSegAllowedCoreElements           |Core elements allowed on <lineSegment>.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLSegAllowedCoreAttributes         |Core attributes allowed on <lineSegment>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLSegAllowedElements               |Layout elements allowed on <lineSegment>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutLSegAllowedAttributes             |Layout attributes allowed on <lineSegment>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCBezAllowedCoreElements           |Core elements allowed on <cubicBezier>.                                                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCBezAllowedCoreAttributes         |Core attributes allowed on <cubicBezier>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCBezAllowedElements               |Layout elements allowed on <cubicBezier>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutCBezAllowedAttributes             |Layout attributes allowed on <cubicBezier>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutDimsAllowedCoreElements           |Core elements allowed on <dimensions>.                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutDimsAllowedCoreAttributes         |Core attributes allowed on <dimensions>.                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutDimsAllowedAttributes             |Layout attributes allowed on <dimensions>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.LayoutDimsAttributesMustBeDouble        |Layout 'width', 'height' and 'depth' must be double.                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualUnknown                             |Unknown error from qual.                                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualNSUndeclared                        |The qual ns is not correctly declared.                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualElementNotInNs                      |Element not in qual namespace.                                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualFunctionTermBool                    |FunctionTerm should return boolean.                                                                   |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.QualMathCSymbolDisallowed               |CSymbol time or delay not allowed.                                                                    |N        |N        |N        |N        |N        |N        |W        |
      |libsbml.QualDuplicateComponentId                |Duplicate 'id' attribute value.                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualAttributeRequiredMissing            |Required qual:required attribute on <sbml>.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualAttributeRequiredMustBeBoolean      |The qual:required attribute must be Boolean.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualRequiredTrueIfTransitions           |The qual:required attribute must be 'true' if math changes.                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOneListOfTransOrQS                  |Only one <listOfTransitions> or <listOfQualitativeSpeciesgt; allowed.                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualEmptyLONotAllowed                   |Empty <listOfTransitions> or <listOfQualitativeSpeciesgt; not allowed.                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualLOTransitiondAllowedElements        |Elements allowed on <listOfTransitions>.                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualLOQualSpeciesAllowedElements        |Elements allowed on <listOfTransitions>.                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualLOQualSpeciesAllowedAttributes      |Attributes allowed on <listOfQualitativeSpeciesgt;.                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualLOTransitionsAllowedAttributes      |Attributes allowed on <listOfTransitions>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualQualSpeciesAllowedCoreAttributes    |Core attributes allowed on <qualitativeSpeciesgt;.                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualQualSpeciesAllowedElements          |Elements allowed on <qualitativeSpeciesgt;.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualQualSpeciesAllowedAttributes        |Attributes allowed on <qualitativeSpeciesgt;.                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualConstantMustBeBool                  |Attribute 'constant' on <qualitativeSpeciesgt; must be boolean.                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualNameMustBeString                    |Attribute 'name' on <qualitativeSpeciesgt; must be string.                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInitialLevelMustBeInt               |Attribute 'initialLevel' on <qualitativeSpeciesgt; must be integer.                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualMaxLevelMustBeInt                   |Attribute 'maxLevel' on <qualitativeSpeciesgt; must be integer.                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualCompartmentMustReferExisting        |Attribute 'compartment' on <qualitativeSpeciesgt; must reference compartment.                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInitialLevelCannotExceedMax         |Attribute 'initialLevel' on <qualitativeSpeciesgt; cannot exceed maxLevel.                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualConstantQSCannotBeOutput            |Constant <qualitativeSpeciesgt; cannot be an Output.                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualQSAssignedOnlyOnce                  |A <qualitativeSpeciesgt; can only be assigned once.                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInitalLevelNotNegative              |Attribute 'initialLevel' on <qualitativeSpeciesgt; cannot be negative.                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualMaxLevelNotNegative                 |Attribute 'maxLevel' on <qualitativeSpeciesgt; cannot be negative.                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionAllowedCoreAttributes     |Core attributes allowed on <transition>.                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionAllowedElements           |Elements allowed on <transition>.                                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionAllowedAttributes         |Attributes allowed on <transition>.                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionNameMustBeString          |Attribute 'name' on <transition> must be string.                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOElements                |ListOf elements on <transition>.                                                                      |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionEmptyLOElements           |ListOf elements on <transition> not empty.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOInputElements           |Elements on <listOfInputs>.                                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOOutputElements          |Elements on <listOfOutputs>.                                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOFuncTermElements        |Elements on <listOfFunctionTerms>.                                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOInputAttributes         |Attributes allowed on <listOfInputs>.                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOOutputAttributes        |Attributes allowed on <listOfOutputs>.                                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOFuncTermAttributes      |Attributes allowed on <listOfFunctionTerms>.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOFuncTermExceedMax       |<listOfFunctionTerms> cannot make qualitativeSpecies exceed maxLevel.                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualTransitionLOFuncTermNegative        |<listOfFunctionTerms> cannot make qualitativeSpecies negative.                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputAllowedCoreAttributes          |Core attributes allowed on <input>.                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputAllowedElements                |Elements allowed on <input>.                                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputAllowedAttributes              |Attributes allowed on <input>.                                                                        |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputNameMustBeString               |Attribute 'name' on <input> must be string.                                                           |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputSignMustBeSignEnum             |Attribute 'sign' on <input> must be enum.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputTransEffectMustBeInputEffect   |Attribute 'transitionEffect' on <input> must be enum.                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputThreshMustBeInteger            |Attribute 'thresholdLevel' on <input> must be non negative integer.                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputQSMustBeExistingQS             |Attribute 'qualitativeSpecies' on <input> must refer to existing.                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputConstantCannotBeConsumed       |Constant <input> cannot be consumed.                                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualInputThreshMustBeNonNegative        |Attribute 'thresholdLevel' on <input> must be non negative integer.                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputAllowedCoreAttributes         |Core attributes allowed on <output>.                                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputAllowedElements               |Elements allowed on <output>.                                                                         |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputAllowedAttributes             |Attributes allowed on <output>.                                                                       |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputNameMustBeString              |Attribute 'name' on <output> must be string.                                                          |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputTransEffectMustBeOutput       |Attribute 'transitionEffect' on <output> must be enum.                                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputLevelMustBeInteger            |Attribute 'outputLevel' on <output> must be non negative integer.                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputQSMustBeExistingQS            |Attribute 'qualitativeSpecies' on <output> must refer to existing.                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputConstantMustBeFalse           |Constant 'qualitativeSpecies' cannot be <output>.                                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputProductionMustHaveLevel       |<output> being produced must have level.                                                              |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualOutputLevelMustBeNonNegative        |Attribute 'outputLevel' on <output> must be non negative integer.                                     |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualDefaultTermAllowedCoreAttributes    |Core attributes allowed on <defaultTerm>.                                                             |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualDefaultTermAllowedElements          |Elements allowed on <defaultTerm>.                                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualDefaultTermAllowedAttributes        |Attributes allowed on <defaultTerm>.                                                                  |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualDefaultTermResultMustBeInteger      |Attribute 'resultLevel' on <defaultTerm> must be non negative integer.                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualDefaultTermResultMustBeNonNeg       |Attribute 'resultLevel' on <defaultTerm> must be non negative integer.                                |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualFuncTermAllowedCoreAttributes       |Core attributes allowed on <functionTerm>.                                                            |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualFuncTermAllowedElements             |Elements allowed on <functionTerm>.                                                                   |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualFuncTermAllowedAttributes           |Attributes allowed on <functionTerm>.                                                                 |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualFuncTermOnlyOneMath                 |Only one <math> on <functionTerm>.                                                                    |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualFuncTermResultMustBeInteger         |Attribute 'resultLevel' on <functionTerm> must be non negative integer.                               |N        |N        |N        |N        |N        |N        |E        |
      |libsbml.QualFuncTermResultMustBeNonNeg          |Attribute 'resultLevel' on <functionTerm> must be non negative integer..                              |N        |N        |N        |N        |N        |N        |E        |
      +------------------------------------------------+------------------------------------------------------------------------------------------------------+---------+---------+---------+---------+---------+---------+---------+

      Category codes associated with SBMLError objects
    ......................................................................

    As discussed above, each SBMLError object contains a value for a
    category identifier, describing the type of issue that the SBMLError
    object represents.  The category can be retrieved from an SBMLError
    object using the method SBMLError.getCategory().  The following table
    lists each possible value and a brief description of its meaning.

    As is the case with the error codes, in the libSBML Python language
    interface, the category identifiers are currently implemented as
    static integer constants defined in the interface class libsbml.

    The following table lists each possible value and a brief description
    of its meaning.

      <center>

      libsbml.LIBSBML_CAT_SBML                    General error not falling into another category below.                                                                                                                                                                                                                                   
      libsbml.LIBSBML_CAT_SBML_L1_COMPAT          Category of errors that can only occur during attempted translation from one Level/Version of SBML to another.  This particular category applies to errors encountered while trying to convert a model from SBML Level 2 to SBML Level 1.                                                
      libsbml.LIBSBML_CAT_SBML_L2V1_COMPAT        Category of errors that can only occur during attempted translation from one Level/Version of SBML to another.  This particular category applies to errors encountered while trying to convert a model to SBML Level 2 Version 1.                                                        
      libsbml.LIBSBML_CAT_SBML_L2V2_COMPAT        Category of errors that can only occur during attempted translation from one Level/Version of SBML to another.  This particular category applies to errors encountered while trying to convert a model to SBML Level 2 Version 2.                                                        
      libsbml.LIBSBML_CAT_GENERAL_CONSISTENCY     Category of errors that can occur while validating general SBML constructs.  With respect to the SBML specification, these concern failures in applying the validation rules numbered 2xxxx in the Level 2 Versions 2-4 and Level 3 Version 1 specifications.                            
      libsbml.LIBSBML_CAT_IDENTIFIER_CONSISTENCY  Category of errors that can occur while validating symbol identifiers in a model. With respect to the SBML specification, these concern failures in applying the validation rules numbered 103xx in the Level 2 Versions 2-4 and Level 3 Version 1 specifications.                       
      libsbml.LIBSBML_CAT_UNITS_CONSISTENCY       Category of errors that can occur while validating the units of measurement on quantities in a model.  With respect to the SBML specification, these concern failures in applying the validation rules numbered 105xx in the Level 2 Versions 2-4 and Level 3 Version 1 specifications.  
      libsbml.LIBSBML_CAT_MATHML_CONSISTENCY      Category of errors that can occur while validating MathML formulas in a model.  With respect to the SBML specification, these concern failures in applying the validation rules numbered 102xx in the Level 2 Versions 2-4 and Level 3 Version 1 specifications.                         
      libsbml.LIBSBML_CAT_SBO_CONSISTENCY         Category of errors that can occur while validating SBO identifiers in a model.  With respect to the SBML specification, these concern failures in applying the validation rules numbered 107xx in the Level 2 Versions 2-4 and Level 3 Version 1 specifications.                         
      libsbml.LIBSBML_CAT_OVERDETERMINED_MODEL    Error in the system of equations in the model: the system is overdetermined, therefore violating a tenet of proper SBML.  With respect to the SBML specification, this is validation rule #10601 in the SBML Level 2 Versions 2-4 and Level 3 Version 1 specifications.                  
      libsbml.LIBSBML_CAT_SBML_L2V3_COMPAT        Category of errors that can only occur during attempted translation from one Level/Version of SBML to another.  This particular category applies to errors encountered while trying to convert a model to SBML Level 2 Version 3.                                                        
      libsbml.LIBSBML_CAT_MODELING_PRACTICE       Category of warnings about recommended good practices involving SBML and computational modeling.  (These are tests performed by libSBML and do not have equivalent SBML validation rules.)                                                                                               
      libsbml.LIBSBML_CAT_INTERNAL_CONSISTENCY    Category of errors that can occur while validating libSBML's internal representation of SBML constructs. (These are tests performed by libSBML and do not have equivalent SBML validation rules.)                                                                                        
      libsbml.LIBSBML_CAT_SBML_L2V4_COMPAT        Category of errors that can only occur during attempted translation from one Level/Version of SBML to another.  This particular category applies to errors encountered while trying to convert a model to SBML Level 2 Version 4.                                                        
      libsbml.LIBSBML_CAT_SBML_L3V1_COMPAT        Category of errors that can only occur during attempted translation from one Level/Version of SBML to another.  This particular category applies to errors encountered while trying to convert a model to SBML Level 3 Version 1.

     </center>

    <a class='anchor' name='SBMLErrorSeverity_t'>Severity codes associated
    with SBMLError objects
    ......................................................................

    In libSBML version 5.10.1 there are no additional severity codes
    beyond those defined by XMLError. They are implemented as static
    integer constants defined in the interface class libsbml, and have
    names beginning with LIBSBML_SEV_.

    """
    __swig_setmethods__ = {}
    for _s in [XMLError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLError, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_ERROR, 
            unsigned int category = LIBSBML_CAT_SBML, 
            string package = "core", 
            unsigned int pkgVersion = 1) -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_ERROR, 
            unsigned int category = LIBSBML_CAT_SBML, 
            string package = "core") -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_ERROR, 
            unsigned int category = LIBSBML_CAT_SBML) -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0, unsigned int severity = LIBSBML_SEV_ERROR) -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0, 
            unsigned int column = 0) -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "", unsigned int line = 0) -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION, 
            string details = "") -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL, 
            unsigned int version = SBML_DEFAULT_VERSION) -> SBMLError
        __init__(self, unsigned int errorId = 0, unsigned int level = SBML_DEFAULT_LEVEL) -> SBMLError
        __init__(self, unsigned int errorId = 0) -> SBMLError
        __init__(self) -> SBMLError
        __init__(self, SBMLError orig) -> SBMLError

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLError(SBMLError orig)

        Copy constructor; creates a copy of this SBMLError.

        @par <hr> Method variant with the following signature:

            SBMLError( const long errorId  = 0 , const long level    =
        SBML_DEFAULT_LEVEL , const long version  = SBML_DEFAULT_VERSION ,
        string details  = '' , const long line     = 0 , const long column   =
        0 , const long severity = LIBSBML_SEV_ERROR , const long category =
        LIBSBML_CAT_SBML , string package  = 'core' , const long pkgVersion =
        1 )

        Creates a new SBMLError to report that something occurred during SBML
        processing.

        When a libSBML operation on SBML content results in a warning, error
        or other diagnostic, the issue is reported as an SBMLError object.
        SBMLError objects have identification numbers to indicate the nature
        of the exception.  These numbers are defined as longeger constants in
        the interface class libsbml.  See the top of this documentation page
        for a table listing the possible values and their meanings.  The
        argument  'errorId' to this constructor can be (but does not have to
        be) a value from this set of constants.  If it is one of the
        predefined error identifiers, the SBMLError class assumes the error is
        a low-level system or SBML layer error and prepends a built-in,
        predefined error message to any string passed in the argument
        'details' to this constructor.  In addition, all the predefined error
        identifiers have associated values for the  'severity' and 'category'
        codes, and these fields are filled-in using the libSBML defaults for
        each different error identifier.

        If the error identifier 'errorId' is a number greater than 99999, the
        SBMLError class assumes the error was generated from another part of
        the software and does not do additional filling in of values beyond
        the default in the constructor itself.  This allows SBMLError to serve
        as a base class for other errors, such as for user-defined validation
        rules (see Validator).  Callers should fill in all the parameters with
        suitable values if generating errors with codes greater than 99999 to
        make maximum use of the SBMLError facilities.

        As mentioned above,  there are additional constants defined for
        standard severity and standard category codes, and every predefined
        error in libSBML has an associated value for severity and category
        taken from these predefined sets.  These constants have symbol names
        prefixed with LIBSBML_SEV_ and LIBSBML_CAT_, respectively.  If the
        value of 'errorId' is one of the standard error codes, callers do not
        need to fill in 'severity' and 'category' in a call to this
        constructor.  Conversely, if 'errorId' is not an existing SBML-level
        error code, callers can use other values for 'severity' and
        'category'.

        Please see the top of the documentation for SBMLError for a longer
        discussion of the possible error codes, their meanings, and their
        applicability to different combinations of Level+Version of SBML.

        Parameter 'errorId' is a long integer, the identification number of
        the error.

        Parameter 'level' is the SBML Level of the SBML model

        Parameter 'version' is the SBML Version within the Level of the SBML
        model

        Parameter 'details' is a string containing additional details about
        the error. If the error code in 'errorId' is one that is recognized by
        SBMLError, the given message is appended to a predefined message
        associated with the given code.  If the error code is not recognized,
        the message is stored as-is as the text of the error.

        Parameter 'line' is a long integer, the line number at which the error
        occured.

        Parameter 'column' is a long integer, the column number at which the
        error occured.

        Parameter 'severity' is an integer indicating severity of the error.

        Parameter 'category' is an integer indicating the category to which
        the error belongs.

        Parameter 'package' is the SBML Level package involved.

        Parameter 'pkgVersion' is the version of the 'package'.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        this = _libsbml.new_SBMLError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLError
    __del__ = lambda self : None;
SBMLError_swigregister = _libsbml.SBMLError_swigregister
SBMLError_swigregister(SBMLError)

MODEL_QUALIFIER = _libsbml.MODEL_QUALIFIER
BIOLOGICAL_QUALIFIER = _libsbml.BIOLOGICAL_QUALIFIER
UNKNOWN_QUALIFIER = _libsbml.UNKNOWN_QUALIFIER
BQM_IS = _libsbml.BQM_IS
BQM_IS_DESCRIBED_BY = _libsbml.BQM_IS_DESCRIBED_BY
BQM_IS_DERIVED_FROM = _libsbml.BQM_IS_DERIVED_FROM
BQM_UNKNOWN = _libsbml.BQM_UNKNOWN
BQB_IS = _libsbml.BQB_IS
BQB_HAS_PART = _libsbml.BQB_HAS_PART
BQB_IS_PART_OF = _libsbml.BQB_IS_PART_OF
BQB_IS_VERSION_OF = _libsbml.BQB_IS_VERSION_OF
BQB_HAS_VERSION = _libsbml.BQB_HAS_VERSION
BQB_IS_HOMOLOG_TO = _libsbml.BQB_IS_HOMOLOG_TO
BQB_IS_DESCRIBED_BY = _libsbml.BQB_IS_DESCRIBED_BY
BQB_IS_ENCODED_BY = _libsbml.BQB_IS_ENCODED_BY
BQB_ENCODES = _libsbml.BQB_ENCODES
BQB_OCCURS_IN = _libsbml.BQB_OCCURS_IN
BQB_HAS_PROPERTY = _libsbml.BQB_HAS_PROPERTY
BQB_IS_PROPERTY_OF = _libsbml.BQB_IS_PROPERTY_OF
BQB_UNKNOWN = _libsbml.BQB_UNKNOWN
class CVTerm(_object):
    """
    Representation of MIRIAM-compliant controlled vocabulary
    annotation.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The SBML Level 2 and Level 3 specifications define a simple format for
    annotating models when (a) referring to controlled vocabulary terms
    and database identifiers that define and describe biological and
    biochemical entities, and (b) describing the creator of a model and
    the model's modification history.  This SBML format is a concrete
    syntax that conforms to the guidelines of MIRIAM ('Minimum Information
    Requested in the Annotation of biochemical Models', Nature
    Biotechnology, vol. 23, no. 12, Dec. 2005).  The format uses a subset
    of W3C RDF (Resource Description Format).  In order to help
    application developers work with annotations in this format, libSBML
    provides several helper classes that provide higher-level interfaces
    to the data elements; these classes include CVTerm, ModelCreator,
    ModelHistory, RDFAnnotationParser, and Date.

    Components of an SBML annotation
    ======================================================================

    The SBML annotation format consists of RDF-based content placed inside
    an <annotation> element attached to an SBML component such as Species,
    Compartment, etc.  The following template illustrates the different
    parts of SBML annotations in XML form:

       <SBML_ELEMENT +++ metaid="meta id" +++>
         +++
         <annotation>
           +++
           <rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
                    xmlns:dc='http://purl.org/dc/elements/1.1/'
                    xmlns:dcterm='http://purl.org/dc/terms/'
                    xmlns:vcard='http://www.w3.org/2001/vcard-rdf/3.0#'
                    xmlns:bqbiol='http://biomodels.net/biology-qualifiers/'
                    xmlns:bqmodel='http://biomodels.net/model-qualifiers/' >
             <rdf:Description rdf:about="#meta id">
               HISTORY
               <RELATION_ELEMENT>
                 <rdf:Bag>
                   <rdf:li rdf:resource="URI" />
                   ...
                 </rdf:Bag>
               </RELATION_ELEMENT>
               ...
             </rdf:Description>
             +++
           </rdf:RDF>
           +++
         </annotation>
         +++
       </SBML_ELEMENT>

     In the template above, the placeholder SBML_ELEMENT stands for the
    XML tag name of an SBML model component (e.g., model, reaction, etc.)
    and the placeholder  meta id stands for the element's meta identifier,
    which is a field available on all SBML components derived from the
    SBase base object class. The dotted portions are optional, the symbol
    +++ is a placeholder for either no content or valid XML content that
    is not defined by this annotation scheme, and the ellipses ... are
    placeholders for zero or more elements of the same form as the
    immediately preceding element.  The optional content HISTORY is a
    creation and modification history; in libSBML, this is stored using
    ModelHistory objects.

    The placeholder RELATION_ELEMENT refers to a BioModels.net qualifier
    element name.  This is an element in either the XML namespace
    'http://biomodels.net/model-qualifiers' (for model qualifiers) or
    'http://biomodels.net/biology-qualifiers' (for biological qualifier).
    Note that these namespace URIs are only labels, and not actual Web
    locations, which means you cannot visit an address such as
    'http://biomodels.net/model-qualifiers' in your browser or try to have
    your application access it.

    The URI is a required data value that uniquely identifies a resource
    and data within that resource to which the annotation refers.  Again,
    being URIs, these do not refer to physical Web locations;
    nevertheless, applications will often want a means of finding the
    resource to which a given URI refers.  Providing the facilities for
    this task is the purpose of MIRIAM Resources, described in detail
    online at http://biomodels.net/miriam) and also in the paper 'MIRIAM
    Resources: tools to generate and resolve robust cross-references in
    Systems Biology', BMC Systems Biology, 58(1), 2007.

    The relation-resource pairs above are the 'controlled vocabulary'
    terms that which CVTerm is designed to store and manipulate.  The next
    section describes these parts in more detail.  For more information
    about SBML annotations in general, please refer to Section 6 in the
    SBML Level 2 (Versions 2-4) or Level 3 specification documents.

    The parts of a CVTerm
    ======================================================================

    Annotations that refer to controlled vocabularies are managed in
    libSBML using CVTerm objects.  A set of RDF-based annotations attached
    to a given SBML <annotation> element are read by RDFAnnotationParser
    and converted into a list of these CVTerm objects. Each CVTerm object
    instance stores the following components of an annotation:

        * The qualifier, which can be a BioModels.net 'biological
    qualifier', a BioModels.net 'model qualifier', or an unknown qualifier
    (as far as the CVTerm class is concerned).  Qualifiers are used in
    MIRIAM to indicate the nature of the relationship between the object
    being annotated and the resource.  In CVTerm, the qualifiers can be
    manipulated using the methods CVTerm.getQualifierType(),
    CVTerm.setQualifierType(), and related methods.

    * The resource, represented by a URI (which, we must remind
    developers, is not the same as a URL).  In the CVTerm class, the
    resource component can be manipulated using the methods
    CVTerm.addResource() and CVTerm.removeResource().

    Note that a CVTerm contains a single qualifier, but possibly more than
    one resource.  This corresponds to the possibility of an annotation
    that points to multiple resources, all of which are qualified by the
    same BioModels.net qualifier.  The CVTerm object class supports this
    by supporting a list of resources.

    Detailed explanations of the qualifiers defined by BioModels.net can
    be found at http://biomodels.net/qualifiers.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CVTerm, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_CVTerm
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, QualifierType_t type = UNKNOWN_QUALIFIER) -> CVTerm
        __init__(self) -> CVTerm
        __init__(self, XMLNode node) -> CVTerm
        __init__(self, CVTerm orig) -> CVTerm

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CVTerm(CVTerm orig)

        Copy constructor; creates a copy of a CVTerm object.

        Parameter 'orig' is the CVTerm instance to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            CVTerm(const XMLNode node)

        Creates a new CVTerm from the given XMLNode.

        @par The SBML Level 2 and Level 3 specifications define a simple
        format for annotating models when (a) referring to controlled
        vocabulary terms and database identifiers that define and describe
        biological and other entities, and (b) describing the creator of a
        model and the model's modification history.  The annotation content is
        stored in <annotation> elements attached to individual SBML elements.
        The format for storing the content inside SBML <annotation> elements
        is a subset of W3C RDF (Resource Description Format) expressed in XML.
        The CVTerm class provides a programming interface for working directly
        with controlled vocabulary term ('CV term') objects without having to
        deal directly with the XML form. When libSBML reads in an SBML model
        containing RDF annotations, it parses those annotations into a list of
        CVTerm objects, and when writing a model, it parses the CVTerm objects
        back into the appropriate SBML <annotation> structure.

        This method creates a CVTerm object from the given XMLNode object
        'node'.  XMLNode is libSBML's representation of a node in an XML tree
        of elements, and each such element can be placed in a namespace.  This
        constructor looks for the element to be in the XML namespaces
        'http://biomodels.net/model-qualifiers' (for model qualifiers) and
        'http://biomodels.net/biology-qualifiers' (for biological qualifier),
        and if they are, creates CVTerm objects for the result.

        Parameter 'node' is an XMLNode representing a CVTerm.

        Note:

        This method assumes that the given XMLNode object 'node' is of the
        correct structural form.

        @par <hr> Method variant with the following signature:

            CVTerm(QualifierType_t type = UNKNOWN_QUALIFIER)

        Creates an empty CVTerm, optionally with the given qualifier 'type'.

        @par The SBML Level 2 and Level 3 specifications define a simple
        format for annotating models when (a) referring to controlled
        vocabulary terms and database identifiers that define and describe
        biological and other entities, and (b) describing the creator of a
        model and the model's modification history.  The annotation content is
        stored in <annotation> elements attached to individual SBML elements.
        The format for storing the content inside SBML <annotation> elements
        is a subset of W3C RDF (Resource Description Format) expressed in XML.
        The CVTerm class provides a programming interface for working directly
        with controlled vocabulary term ('CV term') objects without having to
        deal directly with the XML form. When libSBML reads in an SBML model
        containing RDF annotations, it parses those annotations into a list of
        CVTerm objects, and when writing a model, it parses the CVTerm objects
        back into the appropriate SBML <annotation> structure.

        This method creates an empty CVTerm object.  The possible qualifier
        types usable as values of 'type' are libsbml.MODEL_QUALIFIER and
        libsbml.BIOLOGICAL_QUALIFIER.  If an explicit value for 'type' is not
        given, this method defaults to using libsbml.UNKNOWN_QUALIFIER.  The
        qualifier type  can be set later using the CVTerm.setQualifierType()
        method.

        Different BioModels.net qualifier elements encode different types of
        relationships.  Please refer to the SBML specification or the
        BioModels.net qualifiers web page for an explanation of the meaning of
        these different qualifiers.

        Parameter 'type' is a qualifier type

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        this = _libsbml.new_CVTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> CVTerm

        Creates and returns a deep copy of this CVTerm object.

        Returns a (deep) copy of this CVTerm.

        """
        return _libsbml.CVTerm_clone(self)

    def getQualifierType(self):
        """
        getQualifierType(self) -> QualifierType_t

        Returns the qualifier type of this CVTerm object.

        @par The RDF element used in the SBML format for referring to external
        entities is <rdf:Description>, with a <rdf:Bag> element inside of it
        containing one or more <rdf:li> elements.  The following template
        illustrates the structure:

          <rdf:Description rdf:about="#meta id">
            HISTORY
            <RELATION_ELEMENT>
              <rdf:Bag>
              <rdf:li rdf:resource="resource URI" />
              ...
              </rdf:Bag>
            </RELATION_ELEMENT>
            ...
          </rdf:Description>

        In the template above, the placeholder meta id stands for the
        element's meta identifier, which is a field available on all SBML
        components derived from the SBase base object class.  The dotted
        portions are optional, and the ellipses ... are placeholders for zero
        or more elements of the same form as the immediately preceding
        element.

        The placeholder  RELATION_ELEMENT refers to a BioModels.net qualifier
        element name.  This is an element in either the XML namespace
        'http://biomodels.net/model-qualifiers' (for model qualifiers) or
        'http://biomodels.net/biology-qualifiers' (for biological qualifier).
        The present method returns a code identifying which one of these two
        relationship namespaces is being used; any other qualifier in libSBML
        is considered unknown (as far as the CVTerm class is concerned).
        Consequently, this method will return one of the following values:

            * libsbml.MODEL_QUALIFIER

           * libsbml.BIOLOGICAL_QUALIFIER

           * libsbml.UNKNOWN_QUALIFIER

        The specific relationship of this CVTerm to the enclosing SBML object
        can be determined using the CVTerm methods such as
        getModelQualifierType() and getBiologicalQualifierType().  Callers
        will typically want to use the present method to find out which one of
        the other two methods to call to find out the specific relationship.

        Returns the qualifier type of this object or libsbml.UNKNOWN_QUALIFIER
        (the default).

        See also getBiologicalQualifierType().

        """
        return _libsbml.CVTerm_getQualifierType(self)

    def getModelQualifierType(self):
        """
        getModelQualifierType(self) -> ModelQualifierType_t

        Returns the model qualifier type of this CVTerm object.

        @par The RDF element used in the SBML format for referring to external
        entities is <rdf:Description>, with a <rdf:Bag> element inside of it
        containing one or more <rdf:li> elements.  The following template
        illustrates the structure:

          <rdf:Description rdf:about="#meta id">
            HISTORY
            <RELATION_ELEMENT>
              <rdf:Bag>
              <rdf:li rdf:resource="resource URI" />
              ...
              </rdf:Bag>
            </RELATION_ELEMENT>
            ...
          </rdf:Description>

        In the template above, the placeholder meta id stands for the
        element's meta identifier, which is a field available on all SBML
        components derived from the SBase base object class.  The dotted
        portions are optional, and the ellipses ... are placeholders for zero
        or more elements of the same form as the immediately preceding
        element.

        The placeholder  RELATION_ELEMENT refers to a BioModels.net qualifier
        element name.  This is an element in either the XML namespace
        'http://biomodels.net/model-qualifiers' (for model qualifiers) or
        'http://biomodels.net/biology-qualifiers' (for biological qualifier).
        Callers will typically use getQualifierType() to find out the type of
        qualifier relevant to this particular CVTerm object, then if it is a
        model qualifier, use the present method to determine the specific
        qualifier.

        Annotations with model qualifiers express a relationship between an
        annotation resource and the modeling concept represented by a given
        object in the model.  The diagram below illustrates the relationship
        in this case:

        +---------------------+     qualifier     +---------------------+
        |    model element    +------------------>|      annotation     |
        +----------+----------+                   +---------------------+
                   |                                         |
                   | represents                              | represents
                   v                                         v
        +---------------------+    relationship   +---------------------+
        |  modelling object A +------------------>|  modelling object B |
        +---------------------+                   +---------------------+

        The set of known model qualifiers is, at the time of this libSBML
        release, the following:

            * libsbml.BQM_IS

           * libsbml.BQM_IS_DESCRIBED_BY

           * libsbml.BQM_IS_DERIVED_FROM

        Any other BioModels.net qualifier found in the model is considered
        unknown by libSBML and reported as libsbml.BQM_UNKNOWN.

        Returns the model qualifier type of this object or libsbml.BQM_UNKNOWN
        (the default).

        """
        return _libsbml.CVTerm_getModelQualifierType(self)

    def getBiologicalQualifierType(self):
        """
        getBiologicalQualifierType(self) -> BiolQualifierType_t

        Returns the biological qualifier type of this CVTerm object.

        @par The RDF element used in the SBML format for referring to external
        entities is <rdf:Description>, with a <rdf:Bag> element inside of it
        containing one or more <rdf:li> elements.  The following template
        illustrates the structure:

          <rdf:Description rdf:about="#meta id">
            HISTORY
            <RELATION_ELEMENT>
              <rdf:Bag>
              <rdf:li rdf:resource="resource URI" />
              ...
              </rdf:Bag>
            </RELATION_ELEMENT>
            ...
          </rdf:Description>

        In the template above, the placeholder meta id stands for the
        element's meta identifier, which is a field available on all SBML
        components derived from the SBase base object class.  The dotted
        portions are optional, and the ellipses ... are placeholders for zero
        or more elements of the same form as the immediately preceding
        element.

        The placeholder  RELATION_ELEMENT refers to a BioModels.net qualifier
        element name.  This is an element in either the XML namespace
        'http://biomodels.net/model-qualifiers' (for model qualifiers) or
        'http://biomodels.net/biology-qualifiers' (for biological qualifier).
        Callers will typically use getQualifierType() to find out the type of
        qualifier relevant to this particular CVTerm object, then if it is a
        biological qualifier, use the present method to determine the specific
        qualifier.

        Annotations with biological qualifiers express a relationship between
        an annotation resource and the biological concept represented by a
        given object in the model.    The diagram below illustrates the
        relationship in this case:

        +---------------------+     qualifier     +---------------------+
        |    model element    +------------------>|      annotation     |
        +----------+----------+                   +---------------------+
                   |                                         |
                   | represents                              | represents
                   v                                         v
        +---------------------+    relationship   +---------------------+
        | biological entity A +------------------>| biological entity B |
        +---------------------+                   +---------------------+

        The set of known biological qualifiers is, at the time of this libSBML
        release, the following:

            * libsbml.BQB_IS

           * libsbml.BQB_HAS_PART

           * libsbml.BQB_IS_PART_OF

           * libsbml.BQB_IS_VERSION_OF

           * libsbml.BQB_HAS_VERSION

           * libsbml.BQB_IS_HOMOLOG_TO

           * libsbml.BQB_IS_DESCRIBED_BY

           * libsbml.BQB_IS_ENCODED_BY

           * libsbml.BQB_ENCODES

           * libsbml.BQB_OCCURS_IN

           * libsbml.BQB_HAS_PROPERTY

           * libsbml.BQB_IS_PROPERTY_OF

        Any other BioModels.net qualifier found in the model is considered
        unknown by libSBML and reported as libsbml.BQB_UNKNOWN.

        Returns the biology qualifier type of this object or
        libsbml.BQB_UNKNOWN (the default).

        """
        return _libsbml.CVTerm_getBiologicalQualifierType(self)

    def getResources(self, *args):
        """
        getResources(self) -> XMLAttributes
        getResources(self) -> XMLAttributes

        Returns the resource references for this CVTerm object.

        @par The RDF element used in the SBML format for referring to external
        entities is <rdf:Description>, with a <rdf:Bag> element inside of it
        containing one or more <rdf:li> elements.  The following template
        illustrates the structure:

          <rdf:Description rdf:about="#meta id">
            HISTORY
            <RELATION_ELEMENT>
              <rdf:Bag>
              <rdf:li rdf:resource="resource URI" />
              ...
              </rdf:Bag>
            </RELATION_ELEMENT>
            ...
          </rdf:Description>

        In the template above, the placeholder meta id stands for the
        element's meta identifier, which is a field available on all SBML
        components derived from the SBase base object class.  The dotted
        portions are optional, and the ellipses ... are placeholders for zero
        or more elements of the same form as the immediately preceding
        element.

        The resource URI values shown in the template above are stored
        internally in CVTerm objects using an XMLAttributes object.  Each
        attribute stored inside the XMLAttributes will have the same name
        (specifically, "rdf:resource") but a different value, and the value
        will be a  resource URI shown in the XML template above.

        A valid CVTerm entity must always have at least one resource and a
        value for the relationship qualifier.

        Returns the XMLAttributes that store the resources of this CVTerm.

        See also getResourceURI().

        """
        return _libsbml.CVTerm_getResources(self, *args)

    def getNumResources(self):
        """
        getNumResources(self) -> unsigned int

        Returns the number of resources for this CVTerm object.

        @par The RDF element used in the SBML format for referring to external
        entities is <rdf:Description>, with a <rdf:Bag> element inside of it
        containing one or more <rdf:li> elements.  The following template
        illustrates the structure:

          <rdf:Description rdf:about="#meta id">
            HISTORY
            <RELATION_ELEMENT>
              <rdf:Bag>
              <rdf:li rdf:resource="resource URI" />
              ...
              </rdf:Bag>
            </RELATION_ELEMENT>
            ...
          </rdf:Description>

        In the template above, the placeholder meta id stands for the
        element's meta identifier, which is a field available on all SBML
        components derived from the SBase base object class.  The dotted
        portions are optional, and the ellipses ... are placeholders for zero
        or more elements of the same form as the immediately preceding
        element.

        The fragment above illustrates that there can be more than one
        resource referenced by a given relationship annotation (i.e., the
        resource URI values associated with a particular RELATION_ELEMENT).
        The present method returns a count of the resources stored in this
        CVTerm object.

        Returns the number of resources in the set of XMLAttributes of this
        CVTerm.

        See also getResourceURI().

        """
        return _libsbml.CVTerm_getNumResources(self)

    def getResourceURI(self, *args):
        """
        getResourceURI(self, unsigned int n) -> string

        Returns the value of the nth resource for this CVTerm object.

        @par The RDF element used in the SBML format for referring to external
        entities is <rdf:Description>, with a <rdf:Bag> element inside of it
        containing one or more <rdf:li> elements.  The following template
        illustrates the structure:

          <rdf:Description rdf:about="#meta id">
            HISTORY
            <RELATION_ELEMENT>
              <rdf:Bag>
              <rdf:li rdf:resource="resource URI" />
              ...
              </rdf:Bag>
            </RELATION_ELEMENT>
            ...
          </rdf:Description>

        In the template above, the placeholder meta id stands for the
        element's meta identifier, which is a field available on all SBML
        components derived from the SBase base object class.  The dotted
        portions are optional, and the ellipses ... are placeholders for zero
        or more elements of the same form as the immediately preceding
        element.

        The fragment above illustrates that there can be more than one
        resource referenced by a given relationship annotation (i.e., the
        resource URI values associated with a particular RELATION_ELEMENT).
        LibSBML stores all resource URIs in a single CVTerm object for a given
        relationship.  Callers can use getNumResources() to find out how many
        resources are stored in this CVTerm object, then call this method to
        retrieve the nth resource URI.

        Parameter 'n' is the index of the resource to query

        Returns string representing the value of the nth resource in the set
        of XMLAttributes of this CVTerm.

        See also getQualifierType().

        """
        return _libsbml.CVTerm_getResourceURI(self, *args)

    def setQualifierType(self, *args):
        """
        setQualifierType(self, QualifierType_t type) -> int

        Sets the qualifier code of this CVTerm object.

        Parameter 'type' is the qualifier type. The possible values returned
        by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also getQualifierType().

        """
        return _libsbml.CVTerm_setQualifierType(self, *args)

    def setModelQualifierType(self, *args):
        """
        setModelQualifierType(self, ModelQualifierType_t type) -> int
        setModelQualifierType(self, string qualifier) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setModelQualifierType(string qualifier)

        Sets the  value of this CVTerm object.

        Parameter 'qualifier' is the string representing a model qualifier

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        If the Qualifier Type of this object is not libsbml.MODEL_QUALIFIER,
        then the ModelQualifierType_t value will default to
        libsbml.BQM_UNKNOWN.

        See also setQualifierType(), setQualifierType().

        """
        return _libsbml.CVTerm_setModelQualifierType(self, *args)

    def setBiologicalQualifierType(self, *args):
        """
        setBiologicalQualifierType(self, BiolQualifierType_t type) -> int
        setBiologicalQualifierType(self, string qualifier) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setBiologicalQualifierType(string qualifier)

        Sets the  of this CVTerm object.

        Parameter 'qualifier' is the string representing a biology qualifier

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        If the Qualifier Type of this object is not
        libsbml.BIOLOGICAL_QUALIFIER, then the  value will default to
        libsbml.BQB_UNKNOWN.

        See also setQualifierType(), setQualifierType().

        """
        return _libsbml.CVTerm_setBiologicalQualifierType(self, *args)

    def addResource(self, *args):
        """
        addResource(self, string resource) -> int

        Adds a resource reference to this CVTerm object.

        @par The SBML Level 2 and Level 3 specifications define a simple
        format for annotating models when (a) referring to controlled
        vocabulary terms and database identifiers that define and describe
        biological and other entities, and (b) describing the creator of a
        model and the model's modification history.  The annotation content is
        stored in <annotation> elements attached to individual SBML elements.
        The format for storing the content inside SBML <annotation> elements
        is a subset of W3C RDF (Resource Description Format) expressed in XML.
        The CVTerm class provides a programming interface for working directly
        with controlled vocabulary term ('CV term') objects without having to
        deal directly with the XML form. When libSBML reads in an SBML model
        containing RDF annotations, it parses those annotations into a list of
        CVTerm objects, and when writing a model, it parses the CVTerm objects
        back into the appropriate SBML <annotation> structure.

        The specific RDF element used in this SBML format for referring to
        external entities is <rdf:Description>, with a <rdf:Bag> element
        containing one or more <rdf:li> elements.  Each such element refers to
        a data item in an external resource; the resource and data item are
        together identified uniquely using a URI.  The following template
        illustrates the structure:

             <rdf:Description rdf:about="#meta id">
               HISTORY
               <RELATION_ELEMENT>
                 <rdf:Bag>
                   <rdf:li rdf:resource="resource URI" />
                   ...
                 </rdf:Bag>
               </RELATION_ELEMENT>
               ...
             </rdf:Description>

         In the template above, the placeholder meta id stands for the
        element's meta identifier, which is a field available on all SBML
        components derived from the SBase base object class.  The dotted
        portions are optional, and the ellipses ... are placeholders for zero
        or more elements of the same form as the immediately preceding
        element. The placeholder  RELATION_ELEMENT refers to a BioModels.net
        qualifier element name.  This is an element in either the XML
        namespace 'http://biomodels.net/model-qualifiers' (for model
        qualifiers) or 'http://biomodels.net/biology-qualifiers' (for
        biological qualifier).

        The resource URI is a required data value that uniquely identifies a
        resource and data within that resource to which the annotation refers.
        The present method allows callers to add a reference to a resource URI
        with the same relationship to the enclosing SBML object.  (In other
        words, the argument to this method is a resource URI as shown in the
        XML fragment above.)  Resources are stored in this CVTerm object
        within an XMLAttributes object.

        The relationship of this CVTerm to the enclosing SBML object can be
        determined using the CVTerm methods such as getModelQualifierType()
        and getBiologicalQualifierType().

        Parameter 'resource' is a string representing the URI of the resource
        and data item being referenced; e.g.,
        'http://www.geneontology.org/#GO:0005892'.

        Returns integer value indicating success/failure of the call. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also getBiologicalQualifierType().

        """
        return _libsbml.CVTerm_addResource(self, *args)

    def removeResource(self, *args):
        """
        removeResource(self, string resource) -> int

        Removes a resource URI from the set of resources stored in this CVTerm
        object.

        Parameter 'resource' is a string representing the resource URI to
        remove; e.g., 'http://www.geneontology.org/#GO:0005892'.

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        See also addResource().

        """
        return _libsbml.CVTerm_removeResource(self, *args)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required elements for this CVTerm
        object have been set.

        Note:

        The required attributes for a CVTerm are:

           * a qualifier type, which can be either a model qualifier or a
        biological qualifier

           * at least one resource

        """
        return _libsbml.CVTerm_hasRequiredAttributes(self)

    def hasBeenModified(self):
        """
        hasBeenModified(self) -> bool

        Internal implementation method.

        """
        return _libsbml.CVTerm_hasBeenModified(self)

    def resetModifiedFlags(self):
        """
        resetModifiedFlags(self)

        Internal implementation method.

        """
        return _libsbml.CVTerm_resetModifiedFlags(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

CVTerm_swigregister = _libsbml.CVTerm_swigregister
CVTerm_swigregister(CVTerm)

class Date(_object):
    """
    Representation of MIRIAM-compliant dates used in ModelHistory.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    A Date object stores a reasonably complete representation of date and
    time.  Its purpose is to serve as a way to store dates to be read and
    written in the W3C date format used in RDF Dublin Core annotations
    within SBML.  The W3C date format is a restricted form of ISO 8601,
    the international standard for the representation of dates and times.
    A time and date value in this W3C format takes the form YYYY-MM-
    DDThh:mm:ssXHH:ZZ (e.g., 1997-07-16T19:20:30+01:00) where XHH:ZZ is
    the time zone offset.  The libSBML Date object contains the following
    fields to represent these values:

        * year: a long integer representing the year.  This should be a
    four-digit number such as 2011.

        * month: a long integer representing the month, with a range of
    values of 1-12.  The value 1 represents January, and so on.

        * day: a long integer representing the day of the month, with a
    range of values of 1-31.

        * hour: a long integer representing the hour on a 24-hour clock,
    with a range of values of 0-23.

        * minute: a long integer representing the minute, with a range of
    0-59.

        * second: a long integer representing the second, with a range of
    0-59.

        * sign: a long integer representing the sign of the offset (0
    signifying + and 1 signifying -).  See the paragraph below for further
    explanations.

        * hours offset: a long integer representing the time zone's hour
    offset from GMT.

        * minute offset: a long integer representing the time zone's
    minute offset from GMT.

    To illustrate the time zone offset, a value of -05:00 would correspond
    to USA Eastern Standard Time.  In the Date object, this would require
    a value of 1 for the sign field, 5 for the hour offset and 0 for the
    minutes offset.

    In the restricted RDF annotations used in SBML, described in Section 6
    of the SBML Level 2 and Level 3 specification documents, date/time
    stamps can be used to indicate the time of creation and modification
    of a model.  The following SBML model fragment illustrates this:

      <model metaid='_180340' id='GMO' name='Goldbeter1991_MinMitOscil'>
          <annotation>
              <rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
                       xmlns:dc='http://purl.org/dc/elements/1.1/'
                       xmlns:dcterms='http://purl.org/dc/terms/'
                       xmlns:vCard='http://www.w3.org/2001/vcard-rdf/3.0#' >
                  <rdf:Description rdf:about='#_180340'>
                      <dc:creator>
                          <rdf:Bag>
                              <rdf:li rdf:parseType='Resource'>
                                  <vCard:N rdf:parseType='Resource'>
                                      <vCard:Family>Shapiro</vCard:Family>
                                      <vCard:Given>Bruce</vCard:Given>
                                  </vCard:N>
                                  <vCard:EMAIL>bshapiro@jpl.nasa.gov</vCard:EMAIL>
                                  <vCard:ORG rdf:parseType='Resource'>
                                      <vCard:Orgname>NASA Jet Propulsion Laboratory</vCard:Orgname>
                                  </vCard:ORG>
                              </rdf:li>
                          </rdf:Bag>
                      </dc:creator>
                      <dcterms:created rdf:parseType='Resource'>
                          <dcterms:W3CDTF>2005-02-06T23:39:40+00:00</dcterms:W3CDTF>
                      </dcterms:created>
                      <dcterms:modified rdf:parseType='Resource'>
                          <dcterms:W3CDTF>2005-09-13T13:24:56+00:00</dcterms:W3CDTF>
                      </dcterms:modified>
                  </rdf:Description>
              </rdf:RDF>
          </annotation>
      </model>

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Date
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, 
            unsigned int hour = 0, unsigned int minute = 0, 
            unsigned int second = 0, 
            unsigned int sign = 0, unsigned int hoursOffset = 0, 
            unsigned int minutesOffset = 0) -> Date
        __init__(self, unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, 
            unsigned int hour = 0, unsigned int minute = 0, 
            unsigned int second = 0, 
            unsigned int sign = 0, unsigned int hoursOffset = 0) -> Date
        __init__(self, unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, 
            unsigned int hour = 0, unsigned int minute = 0, 
            unsigned int second = 0, 
            unsigned int sign = 0) -> Date
        __init__(self, unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, 
            unsigned int hour = 0, unsigned int minute = 0, 
            unsigned int second = 0) -> Date
        __init__(self, unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, 
            unsigned int hour = 0, unsigned int minute = 0) -> Date
        __init__(self, unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, 
            unsigned int hour = 0) -> Date
        __init__(self, unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1) -> Date
        __init__(self, unsigned int year = 2000, unsigned int month = 1) -> Date
        __init__(self, unsigned int year = 2000) -> Date
        __init__(self) -> Date
        __init__(self, string date) -> Date
        __init__(self, Date orig) -> Date

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Date(string date)

        Creates a Date object from a string expressing a date and time value.

        This constructor expects its argument to be in the W3C date format
        with time zone offset, used in RDF Dublin Core annotations within
        SBML.

        @par The date format expresses a date and time value as a string of
        the form YYYY-MM-DDThh:mm:ssXHH:ZZ, where

            * YYYY is a four-digit integer representing the year.  This should
        be a four-digit number such as 2011.

            * MM is a two-digit integer representing the month, with a range
        of values of 01-12.  The value 1 represents January, and so on.

            * DD is a two-digit integer representing the day of the month,
        with a range of values of 01-31.

            * hh is a two-digit integer representing the hour on a 24-hour
        clock, with a range of values of 00-23.

            * mm is a two-digit integer representing the minute, with a range
        of 00-59.

            * ss is a two-digit integer representing the second, with a range
        of 0-59.

            * X is the the sign of the time zone offset, either + or -.

            * HH is a two-digit integer representing the hour of the time zone
        offset, with a range of 00-23.

            * ZZ is a two-digit integer representing the minutes of the time
        zone offset, with a range of 00-59.

        In the string format above, it is important not to forget the literal
        character T in the string.  Here is an example date/time string:
        1997-07-16T19:20:30+01:00, which would represent July 16, 1997, at
        19:20:30 in Central European Time (which is UTC +1:00).

        If this constructor is given a None argument or a string of length
        zero, it constructs a Date object with the value of January 1, 2000,
        at time 00:00 UTC.  Otherwise, the argument must be in the complete
        format described above, or unpredictable results will happen.

        Parameter 'date' is a string representing the date.

        @par <hr> Method variant with the following signature:

            Date(long year = 2000, long month = 1, long day = 1, long hour =
        0, long minute = 0, long second = 0, long sign = 0, long hoursOffset =
        0, long minutesOffset = 0)

        Creates a time and date representation for use in model annotations
        and elsewhere.

        The following is the complete set of possible arguments to this
        constructor, with default values as indicated:

        Parameter 'year' is a long integereger representing the year.  This
        should be a four-digit number such as 2011.  (Default value used if
        this argument is not given: 2000.)

        Parameter 'month' is a long integereger representing the month, with a
        range of values of 1-12.  The value 1 represents January, and so on.
        (Default value used if this argument is not given: 1.)

        Parameter 'day' is a long integereger representing the day of the
        month, with a range of values of 1-31.  (Default value used if this
        argument is not given: 1.)

        Parameter 'hour' is a long integereger representing the hour on a
        24-hour clock, with a range of values of 0-23.  (Default value used if
        this argument is not given: 0.)

        Parameter 'minute' is a long integereger representing the minute, with
        a range of 0-59.  (Default value used if this argument is not given:
        0.)

        Parameter 'second' is a long integereger representing the second, with
        a range of 0-59.  (Default value used if this argument is not given:
        0.)

        Parameter 'sign' is a long integereger representing the sign of the
        offset (0 signifying + and 1 signifying -).  See the paragraph below
        for further explanations.  (Default value used if this argument is not
        given: 0.)

        Parameter 'hoursOffset' is a long integereger representing the time
        zone's hour offset from GMT.  (Default value used if this argument is
        not given: 0.)

        Parameter 'minutesOffset' is a long integereger representing the time
        zone's minute offset from GMT.  (Default value used if this argument
        is not given: 0.)

        To illustrate the time zone offset, a value of -05:00 would correspond
        to USA Eastern Standard Time.  In the Date object, this would require
        a value of 1 for the sign field, 5 for the hour offset and 0 for the
        minutes offset.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        @par <hr> Method variant with the following signature:

            Date(Date orig)

        Copy constructor; creates a copy of this Date.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_Date(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Date

        Returns a copy of this Date.

        Returns a (deep) copy of this Date.

        """
        return _libsbml.Date_clone(self)

    def getYear(self):
        """
        getYear(self) -> unsigned int

        Returns the year from this Date.

        Returns the year from this Date.

        """
        return _libsbml.Date_getYear(self)

    def getMonth(self):
        """
        getMonth(self) -> unsigned int

        Returns the month from this Date.

        Returns the month from this Date.

        """
        return _libsbml.Date_getMonth(self)

    def getDay(self):
        """
        getDay(self) -> unsigned int

        Returns the day from this Date.

        Returns the day from this Date.

        """
        return _libsbml.Date_getDay(self)

    def getHour(self):
        """
        getHour(self) -> unsigned int

        Returns the hour from this Date.

        Returns the hour from this Date.

        """
        return _libsbml.Date_getHour(self)

    def getMinute(self):
        """
        getMinute(self) -> unsigned int

        Returns the minute from this Date.

        Returns the minute from this Date.

        """
        return _libsbml.Date_getMinute(self)

    def getSecond(self):
        """
        getSecond(self) -> unsigned int

        Returns the seconds from this Date.

        Returns the seconds from this Date.

        """
        return _libsbml.Date_getSecond(self)

    def getSignOffset(self):
        """
        getSignOffset(self) -> unsigned int

        Returns the sign of the time zone offset from this Date.

        Returns the sign of the offset from this Date.

        """
        return _libsbml.Date_getSignOffset(self)

    def getHoursOffset(self):
        """
        getHoursOffset(self) -> unsigned int

        Returns the hours of the time zone offset from this Date.

        Returns the hours of the offset from this Date.

        """
        return _libsbml.Date_getHoursOffset(self)

    def getMinutesOffset(self):
        """
        getMinutesOffset(self) -> unsigned int

        Returns the minutes of the time zone offset from this Date.

        Returns the minutes of the offset from this Date.

        """
        return _libsbml.Date_getMinutesOffset(self)

    def getDateAsString(self):
        """
        getDateAsString(self) -> string

        Returns the current Date value in text-string form.

        The string returned will be in the W3C date format with time zone
        offset, used in RDF Dublin Core annotations within SBML.

        @par The date format expresses a date and time value as a string of
        the form YYYY-MM-DDThh:mm:ssXHH:ZZ, where

            * YYYY is a four-digit integer representing the year.  This should
        be a four-digit number such as 2011.

            * MM is a two-digit integer representing the month, with a range
        of values of 01-12.  The value 1 represents January, and so on.

            * DD is a two-digit integer representing the day of the month,
        with a range of values of 01-31.

            * hh is a two-digit integer representing the hour on a 24-hour
        clock, with a range of values of 00-23.

            * mm is a two-digit integer representing the minute, with a range
        of 00-59.

            * ss is a two-digit integer representing the second, with a range
        of 0-59.

            * X is the the sign of the time zone offset, either + or -.

            * HH is a two-digit integer representing the hour of the time zone
        offset, with a range of 00-23.

            * ZZ is a two-digit integer representing the minutes of the time
        zone offset, with a range of 00-59.

        In the string format above, it is important not to forget the literal
        character T in the string.  Here is an example date/time string:
        1997-07-16T19:20:30+01:00, which would represent July 16, 1997, at
        19:20:30 in Central European Time (which is UTC +1:00).

        Returns the date as a string.

        """
        return _libsbml.Date_getDateAsString(self)

    def setYear(self, *args):
        """
        setYear(self, unsigned int year) -> int

        Sets the value of the year of this Date object.

        The value given as argument must be between 1000 and 9999 inclusive.
        (In the millennium during which this libSBML documentation is being
        written, a typical value is 2011, but we hope that SBML will continue
        to be used for a long time.)

        Parameter 'year' is a long integer representing the year.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setYear(self, *args)

    def setMonth(self, *args):
        """
        setMonth(self, unsigned int month) -> int

        Sets the value of the month of this Date object.

        Parameter 'month' is a long integer representing the month; it must be
        in the range 1-12 or an error will be signaled.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setMonth(self, *args)

    def setDay(self, *args):
        """
        setDay(self, unsigned int day) -> int

        Sets the value of the day of this Date object.

        Parameter 'day' is a long integer representing the day; it must be in
        the range 0-31 or an error will be signaled.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setDay(self, *args)

    def setHour(self, *args):
        """
        setHour(self, unsigned int hour) -> int

        Sets the value of the hour of this Date object.

        Parameter 'hour' is a long integer representing the hour to set; it
        must be in the range 0-23 or an error will be signaled.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setHour(self, *args)

    def setMinute(self, *args):
        """
        setMinute(self, unsigned int minute) -> int

        Sets the value of the minute of this Date object.

        Parameter 'minute' is a long integer representing the minute to set;
        it must be in the range 0-59 or an error will be signaled.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setMinute(self, *args)

    def setSecond(self, *args):
        """
        setSecond(self, unsigned int second) -> int

        Sets the value of the second of the Date object.

        Parameter 'second' is a long integer representing the seconds; it must
        be in the range 0-59 or an error will be signaled.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setSecond(self, *args)

    def setSignOffset(self, *args):
        """
        setSignOffset(self, unsigned int sign) -> int

        Sets the value of the sign of the time zone offset of this Date
        object.

        The only permissible values are 0 and 1.

        Parameter 'sign' is a long integer representing the sign of the
        offset, with 0 signifying + and 1 signifying -.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setSignOffset(self, *args)

    def setHoursOffset(self, *args):
        """
        setHoursOffset(self, unsigned int hoursOffset) -> int

        Sets the value of this Date object's time zone hour offset.

        Parameter 'hoursOffset' is a long integer representing the hours of
        the offset; it must be in the range 0-23 or an error will be signaled.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setHoursOffset(self, *args)

    def setMinutesOffset(self, *args):
        """
        setMinutesOffset(self, unsigned int minutesOffset) -> int

        Sets the value of this Date object's time zone minutes offset.

        Parameter 'minutesOffset' is a long integer representing the minutes
        of the offset; it must be in the range 0-59 or an error will be
        signaled.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setMinutesOffset(self, *args)

    def setDateAsString(self, *args):
        """
        setDateAsString(self, string date) -> int

        Sets the value of this Date object using a date and time value
        expressed as a text string.

        This method expects its argument to be in the W3C date format with
        time zone offset, used in RDF Dublin Core annotations within SBML.

        @par The date format expresses a date and time value as a string of
        the form YYYY-MM-DDThh:mm:ssXHH:ZZ, where

            * YYYY is a four-digit integer representing the year.  This should
        be a four-digit number such as 2011.

            * MM is a two-digit integer representing the month, with a range
        of values of 01-12.  The value 1 represents January, and so on.

            * DD is a two-digit integer representing the day of the month,
        with a range of values of 01-31.

            * hh is a two-digit integer representing the hour on a 24-hour
        clock, with a range of values of 00-23.

            * mm is a two-digit integer representing the minute, with a range
        of 00-59.

            * ss is a two-digit integer representing the second, with a range
        of 0-59.

            * X is the the sign of the time zone offset, either + or -.

            * HH is a two-digit integer representing the hour of the time zone
        offset, with a range of 00-23.

            * ZZ is a two-digit integer representing the minutes of the time
        zone offset, with a range of 00-59.

        In the string format above, it is important not to forget the literal
        character T in the string.  Here is an example date/time string:
        1997-07-16T19:20:30+01:00, which would represent July 16, 1997, at
        19:20:30 in Central European Time (which is UTC +1:00).

        If this method is given a None argument or a string of length zero, it
        constructs a Date object with the value of January 1, 2000, at time
        00:00 UTC.  Otherwise, the argument must be in the complete format
        described above, or unpredictable results will happen.

        Parameter 'date' is a string representing the date.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Date_setDateAsString(self, *args)

    def representsValidDate(self):
        """
        representsValidDate(self) -> bool

        Returns true or false depending on whether this date object represents
        a valid date and time value.

        This method verifies that the date/time value stored in this object is
        well-formed and represents plausible values.  A time and date value in
        the W3C format takes the form YYYY-MM-DDThh:mm:ssXHH:ZZ (e.g.,
        1997-07-16T19:20:30+01:00) where XHH:ZZ is the time zone offset.  This
        method checks such things as whether the value of the month number is
        less than or equal to 12, whether the value of the minutes number is
        less than or equal to 59, whether a time zone offset is set, etc.

        Returns True if the date is valid, False otherwise.

        """
        return _libsbml.Date_representsValidDate(self)

    def hasBeenModified(self):
        """
        hasBeenModified(self) -> bool

        Internal implementation method.

        """
        return _libsbml.Date_hasBeenModified(self)

    def resetModifiedFlags(self):
        """
        resetModifiedFlags(self)

        Internal implementation method.

        """
        return _libsbml.Date_resetModifiedFlags(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

Date_swigregister = _libsbml.Date_swigregister
Date_swigregister(Date)

class ModelCreator(_object):
    """
    Representation of MIRIAM-compliant model creator data used in
    ModelHistory.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The SBML specification beginning with Level 2 Version 2 defines a
    standard approach to recording model history and model creator
    information in a form that complies with MIRIAM ('Minimum Information
    Requested in the Annotation of biochemical Models', Nature
    Biotechnology, vol. 23, no. 12, Dec. 2005).  For the model creator,
    this form involves the use of parts of the vCard representation.
    LibSBML provides the ModelCreator class as a convenience high-level
    interface for working with model creator data.  Objects of class
    ModelCreator can be used to store and carry around creator data within
    a program, and the various methods in this object class let callers
    manipulate the different parts of the model creator representation.

    The different parts of a model creator definition
    ======================================================================

    The ModelCreator class mirrors the structure of the MIRIAM model
    creator annotations in SBML.  The following template illustrates these
    different fields when they are written in XML form:

       <vCard:N rdf:parseType='Resource'>
         <vCard:Family>family name</vCard:Family>
         <vCard:Given>given name</vCard:Given>
       </vCard:N>
       ...
       <vCard:EMAIL>email address</vCard:EMAIL>
       ...
       <vCard:ORG rdf:parseType='Resource'>
         <vCard:Orgname>organization</vCard:Orgname>
       </vCard:ORG>

     Each of the separate data values family name, given name, email
    address, and organization can be set and retrieved via corresponding
    methods in the ModelCreator  class.  These methods are documented in
    more detail below.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelCreator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_ModelCreator
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> ModelCreator
        __init__(self, XMLNode creator) -> ModelCreator
        __init__(self, ModelCreator orig) -> ModelCreator

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ModelCreator(const XMLNode creator)

        Creates a new ModelCreator from an XMLNode.

        Parameter 'creator' is the XMLNode from which to create the
        ModelCreator.

        @par <hr> Method variant with the following signature:

            ModelCreator()

        Creates a new ModelCreator object.

        @par <hr> Method variant with the following signature:

            ModelCreator(ModelCreator orig)

        Copy constructor; creates a copy of the ModelCreator.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_ModelCreator(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ModelCreator

        Creates and returns a copy of this ModelCreator.

        Returns a (deep) copy of this ModelCreator.

        """
        return _libsbml.ModelCreator_clone(self)

    def getFamilyName(self):
        """
        getFamilyName(self) -> string

        Returns the 'family name' stored in this ModelCreator object.

        Returns the 'family name' portion of the ModelCreator object.

        """
        return _libsbml.ModelCreator_getFamilyName(self)

    def getGivenName(self):
        """
        getGivenName(self) -> string

        Returns the 'given name' stored in this ModelCreator object.

        Returns the 'given name' portion of the ModelCreator object.

        """
        return _libsbml.ModelCreator_getGivenName(self)

    def getEmail(self):
        """
        getEmail(self) -> string

        Returns the 'email' stored in this ModelCreator object.

        Returns email from the ModelCreator.

        """
        return _libsbml.ModelCreator_getEmail(self)

    def getOrganization(self):
        """
        getOrganization(self) -> string

        Returns the 'organization' stored in this ModelCreator object.

        Returns organization from the ModelCreator.

        """
        return _libsbml.ModelCreator_getOrganization(self)

    def getOrganisation(self):
        """
        getOrganisation(self) -> string

        (Alternate spelling) Returns the 'organization' stored in this
        ModelCreator object.

        Note:

        This function is an alias of getOrganization().

        Returns organization from the ModelCreator.

        See also getOrganization().

        """
        return _libsbml.ModelCreator_getOrganisation(self)

    def isSetFamilyName(self):
        """
        isSetFamilyName(self) -> bool

        Predicate returning True or False depending on whether this
        ModelCreator's 'family name' part is set.

        Returns True if the familyName of this ModelCreator is set, False
        otherwise.

        """
        return _libsbml.ModelCreator_isSetFamilyName(self)

    def isSetGivenName(self):
        """
        isSetGivenName(self) -> bool

        Predicate returning True or False depending on whether this
        ModelCreator's 'given name' part is set.

        Returns True if the givenName of this ModelCreator is set, False
        otherwise.

        """
        return _libsbml.ModelCreator_isSetGivenName(self)

    def isSetEmail(self):
        """
        isSetEmail(self) -> bool

        Predicate returning True or False depending on whether this
        ModelCreator's 'email' part is set.

        Returns True if the email of this ModelCreator is set, False
        otherwise.

        """
        return _libsbml.ModelCreator_isSetEmail(self)

    def isSetOrganization(self):
        """
        isSetOrganization(self) -> bool

        Predicate returning True or False depending on whether this
        ModelCreator's 'organization' part is set.

        Returns True if the organization of this ModelCreator is set, False
        otherwise.

        """
        return _libsbml.ModelCreator_isSetOrganization(self)

    def isSetOrganisation(self):
        """
        isSetOrganisation(self) -> bool

        (Alternate spelling) Predicate returning True or False depending on
        whether this ModelCreator's 'organization' part is set.

        Note:

        This function is an alias of isSetOrganization().

        Returns True if the organization of this ModelCreator is set, False
        otherwise.

        See also isSetOrganization().

        """
        return _libsbml.ModelCreator_isSetOrganisation(self)

    def setFamilyName(self, *args):
        """
        setFamilyName(self, string familyName) -> int

        Sets the 'family name' portion of this ModelCreator object.

        Parameter 'familyName' is a string representing the familyName of the
        ModelCreator.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ModelCreator_setFamilyName(self, *args)

    def setGivenName(self, *args):
        """
        setGivenName(self, string givenName) -> int

        Sets the 'given name' portion of this ModelCreator object.

        Parameter 'givenName' is a string representing the givenName of the
        ModelCreator.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ModelCreator_setGivenName(self, *args)

    def setEmail(self, *args):
        """
        setEmail(self, string email) -> int

        Sets the 'email' portion of this ModelCreator object.

        Parameter 'email' is a string representing the email of the
        ModelCreator.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ModelCreator_setEmail(self, *args)

    def setOrganization(self, *args):
        """
        setOrganization(self, string organization) -> int

        Sets the 'organization' portion of this ModelCreator object.

        Parameter 'organization' is a string representing the organization of
        the  ModelCreator.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ModelCreator_setOrganization(self, *args)

    def setOrganisation(self, *args):
        """
        setOrganisation(self, string organization) -> int

        (Alternate spelling) Sets the 'organization' portion of this
        ModelCreator object.

        Parameter 'organization' is a string representing the organization of
        the ModelCreator.

        Note:

        This function is an alias of setOrganization(string organization).

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also setOrganization().

        """
        return _libsbml.ModelCreator_setOrganisation(self, *args)

    def unsetFamilyName(self):
        """
        unsetFamilyName(self) -> int

        Unsets the 'family name' portion of this ModelCreator object.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ModelCreator_unsetFamilyName(self)

    def unsetGivenName(self):
        """
        unsetGivenName(self) -> int

        Unsets the 'given name' portion of this ModelCreator object.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ModelCreator_unsetGivenName(self)

    def unsetEmail(self):
        """
        unsetEmail(self) -> int

        Unsets the 'email' portion of this ModelCreator object.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ModelCreator_unsetEmail(self)

    def unsetOrganization(self):
        """
        unsetOrganization(self) -> int

        Unsets the 'organization' portion of this ModelCreator object.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ModelCreator_unsetOrganization(self)

    def unsetOrganisation(self):
        """
        unsetOrganisation(self) -> int

        (Alternate spelling) Unsets the 'organization' portion of this
        ModelCreator object.

        Note:

        This function is an alias of unsetOrganization().

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also unsetOrganization().

        """
        return _libsbml.ModelCreator_unsetOrganisation(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required elements for this
        ModelCreator object have been set.

        The only required elements for a ModelCreator object are the 'family
        name' and 'given name'.

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.ModelCreator_hasRequiredAttributes(self)

    def hasBeenModified(self):
        """
        hasBeenModified(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ModelCreator_hasBeenModified(self)

    def resetModifiedFlags(self):
        """
        resetModifiedFlags(self)

        Internal implementation method.

        """
        return _libsbml.ModelCreator_resetModifiedFlags(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

ModelCreator_swigregister = _libsbml.ModelCreator_swigregister
ModelCreator_swigregister(ModelCreator)

class ModelHistory(_object):
    """
    Representation of MIRIAM-compliant model history data.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The SBML specification beginning with Level 2 Version 2 defines a
    standard approach to recording optional model history and model
    creator information in a form that complies with MIRIAM ('Minimum
    Information Requested in the Annotation of biochemical Models', Nature
    Biotechnology, vol. 23, no. 12, Dec. 2005).  LibSBML provides the
    ModelHistory class as a convenient high-level interface for working
    with model history data.

    Model histories in SBML consist of one or more model creators, a
    single date of creation, and one or more modification dates. The
    overall XML form of this data takes the following form:

       <dc:creator>
         <rdf:Bag>
           <rdf:li rdf:parseType='Resource'>
             +++
             <vCard:N rdf:parseType='Resource'>
               <vCard:Family>family name</vCard:Family>
               <vCard:Given>given name</vCard:Given>
             </vCard:N>
             +++
             <vCard:EMAIL><span style='background-color: #bbb'>email address</vCard:EMAIL></span>
             +++
             <vCard:ORG rdf:parseType='Resource'>
              <vCard:Orgname><span style='background-color: #bbb'>organization name</vCard:Orgname></span>
             </vCard:ORG>
             +++
           </rdf:li>
           ...
         </rdf:Bag>
       </dc:creator>
       <dcterms:created rdf:parseType='Resource'>
         <dcterms:W3CDTF>creation date</dcterms:W3CDTF>
       </dcterms:created>
       <dcterms:modified rdf:parseType='Resource'>
         <dcterms:W3CDTF>modification date</dcterms:W3CDTF>
       </dcterms:modified>
       ...

     In the template above, the underlined portions are optional, the
    symbol +++ is a placeholder for either no content or valid XML content
    that is not defined by the annotation scheme, and the ellipses ... are
    placeholders for zero or more elements of the same form as the
    immediately preceding element.  The various placeholders for content,
    namely family name, given name, email address, organization, creation
    date, and modification date are data that can be filled in using the
    various methods on the ModelHistory class described below.

    See also Date.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelHistory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelHistory, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_ModelHistory
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> ModelHistory
        __init__(self, ModelHistory orig) -> ModelHistory

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ModelHistory(ModelHistory orig)

        Copy constructor; creates a copy of this ModelHistory object.

        Parameter 'orig' is the object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            ModelHistory()

        Creates a new ModelHistory object.

        """
        this = _libsbml.new_ModelHistory(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ModelHistory

        Creates and returns a copy of this ModelHistory object

        Returns a (deep) copy of this ModelHistory object.

        """
        return _libsbml.ModelHistory_clone(self)

    def getCreatedDate(self):
        """
        getCreatedDate(self) -> Date

        Returns the 'creation date' portion of this ModelHistory object.

        Returns a Date object representing the creation date stored in this
        ModelHistory object.

        """
        return _libsbml.ModelHistory_getCreatedDate(self)

    def isSetCreatedDate(self):
        """
        isSetCreatedDate(self) -> bool

        Predicate returning True or False depending on whether this
        ModelHistory's 'creation date' is set.

        Returns True if the creation date value of this ModelHistory is set,
        False otherwise.

        """
        return _libsbml.ModelHistory_isSetCreatedDate(self)

    def isSetModifiedDate(self):
        """
        isSetModifiedDate(self) -> bool

        Predicate returning True or False depending on whether this
        ModelHistory's 'modified date' is set.

        Returns True if the modification date value of this ModelHistory
        object is set, False otherwise.

        """
        return _libsbml.ModelHistory_isSetModifiedDate(self)

    def setCreatedDate(self, *args):
        """
        setCreatedDate(self, Date date) -> int

        Sets the creation date of this ModelHistory object.

        Parameter 'date' is a Date object representing the date to which the
        'created date' portion of this ModelHistory should be set.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.ModelHistory_setCreatedDate(self, *args)

    def setModifiedDate(self, *args):
        """
        setModifiedDate(self, Date date) -> int

        Sets the modification date of this ModelHistory object.

        Parameter 'date' is a Date object representing the date to which the
        'modified date' portion of this ModelHistory should be set.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.ModelHistory_setModifiedDate(self, *args)

    def addModifiedDate(self, *args):
        """
        addModifiedDate(self, Date date) -> int

        Adds a copy of a Date object to the list of 'modified date' values
        stored in this ModelHistory object.

        In the MIRIAM format for annotations, there can be multiple
        modification dates.  The libSBML ModelHistory class supports this by
        storing a list of 'modified date' values.

        Parameter 'date' is a Date object representing the 'modified date'
        that should be added to this ModelHistory object.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.ModelHistory_addModifiedDate(self, *args)

    def getListModifiedDates(self):
      """
      getListModifiedDates(self) -> DateList

      Get the DateList of Date objects in this ModelHistory.

      Returns the DateList for this ModelHistory.
            

      """
      return _libsbml.ModelHistory_getListModifiedDates(self)


    def getModifiedDate(self, *args):
        """
        getModifiedDate(self) -> Date
        getModifiedDate(self, unsigned int n) -> Date

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getModifiedDate()

        Returns the 'modified date' portion of this ModelHistory object.

        Note that in the MIRIAM format for annotations, there can be multiple
        modification dates.  The libSBML ModelHistory class supports this by
        storing a list of 'modified date' values.  If this ModelHistory object
        contains more than one 'modified date' value in the list, this method
        will return the first one in the list.

        Returns a Date object representing the date of modification stored in
        this ModelHistory object.

        @par <hr> Method variant with the following signature:

            getModifiedDate(long n)

        Get the nth Date object in the list of 'modified date' values stored
        in this ModelHistory object.

        In the MIRIAM format for annotations, there can be multiple
        modification dates.  The libSBML ModelHistory class supports this by
        storing a list of 'modified date' values.

        Returns the nth Date in the list of ModifiedDates of this
        ModelHistory.

        """
        return _libsbml.ModelHistory_getModifiedDate(self, *args)

    def getNumModifiedDates(self):
        """
        getNumModifiedDates(self) -> unsigned int

        Get the number of Date objects in this ModelHistory object's list of
        'modified dates'.

        In the MIRIAM format for annotations, there can be multiple
        modification dates.  The libSBML ModelHistory class supports this by
        storing a list of 'modified date' values.

        Returns the number of ModifiedDates in this ModelHistory.

        """
        return _libsbml.ModelHistory_getNumModifiedDates(self)

    def addCreator(self, *args):
        """
        addCreator(self, ModelCreator mc) -> int

        Adds a copy of a ModelCreator object to the list of 'model creator'
        values stored in this ModelHistory object.

        In the MIRIAM format for annotations, there can be multiple model
        creators.  The libSBML ModelHistory class supports this by storing a
        list of 'model creator' values.

        Parameter 'mc' is the ModelCreator to add

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ModelHistory_addCreator(self, *args)

    def getListCreators(self):
      """
      getListCreators(self) -> ModelCreatorList

      Get the ModelCreatorList of ModelCreator objects in this 
      ModelHistory.

      Returns the ModelCreatorList for this ModelHistory.
            

      """
      return _libsbml.ModelHistory_getListCreators(self)


    def getCreator(self, *args):
        """
        getCreator(self, unsigned int n) -> ModelCreator

        Get the nth ModelCreator object stored in this ModelHistory object.

        In the MIRIAM format for annotations, there can be multiple model
        creators.  The libSBML ModelHistory class supports this by storing a
        list of 'model creator' values.

        Returns the nth ModelCreator object.

        """
        return _libsbml.ModelHistory_getCreator(self, *args)

    def getNumCreators(self):
        """
        getNumCreators(self) -> unsigned int

        Get the number of ModelCreator objects stored in this ModelHistory
        object.

        In the MIRIAM format for annotations, there can be multiple model
        creators.  The libSBML ModelHistory class supports this by storing a
        list of 'model creator' values.

        Returns the number of ModelCreators objects.

        """
        return _libsbml.ModelHistory_getNumCreators(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required elements for this
        ModelHistory object have been set.

        The required elements for a ModelHistory object are 'created name',
        'modified date', and at least one 'model creator'.

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.ModelHistory_hasRequiredAttributes(self)

    def hasBeenModified(self):
        """
        hasBeenModified(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ModelHistory_hasBeenModified(self)

    def resetModifiedFlags(self):
        """
        resetModifiedFlags(self)

        Internal implementation method.

        """
        return _libsbml.ModelHistory_resetModifiedFlags(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

ModelHistory_swigregister = _libsbml.ModelHistory_swigregister
ModelHistory_swigregister(ModelHistory)

class RDFAnnotationParser(_object):
    """
    Read/write/manipulate RDF annotations stored in SBML annotation
    elements.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    RDFAnnotationParser is a libSBML construct used as part of the libSBML
    support for annotations conforming to the guidelines specified by
    MIRIAM ('Minimum Information Requested in the Annotation of
    biochemical Models', Nature Biotechnology, vol. 23, no. 12, Dec.
    2005).  Section 6 of the SBML Level 2 and Level 3 specification
    documents defines a recommended way of encoding MIRIAM information
    using a subset of RDF (Resource Description Format).  The general
    scheme is as follows.  A set of RDF-based annotations attached to a
    given SBML <annotation> element are read by RDFAnnotationParser and
    converted into a list of CVTerm objects.  There are different versions
    of the main method,  and RDFAnnotationParser.parseRDFAnnotation(),
    used depending on whether the annotation in question concerns the
    MIRIAM model history or other MIRIAM resource annotations.  A special
    object class, ModelHistory, is used to make it easier to manipulate
    model history annotations.

    All of the methods on RDFAnnotationParser are static; the class exists
    only to encapsulate the annotation and CVTerm parsing and manipulation
    functionality.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RDFAnnotationParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RDFAnnotationParser, name)
    __repr__ = _swig_repr
    def createAnnotation():
        """
        createAnnotation() -> XMLNode

        Creates a blank annotation and returns its root XMLNode object.

        This creates a completely empty SBML <annotation> element.  It is not
        attached to any SBML element.  An example of how this might be used is
        illustrated in the following code fragment.  In this example, suppose
        that content is an XMLNode object previously created, containing
        MIRIAM-style annotations, and that sbmlObject is an SBML object
        derived from SBase (e.g., a Model, or a Species, or a Compartment,
        etc.).  Then:

          RDF     = RDFAnnotationParser.createRDFAnnotation() # Create RDF annotation XML structure.
          success = RDF.addChild(...content...)               # Put some content into it.
          ...                                                 # Check 'success' return code value.
          
          annot   = RDFAnnotationParser.createAnnotation()    # Create <annotation> container.
          success = annot.addChild(RDF)                       # Put the RDF annotation into it.
          ...                                                 # Check 'success' return code value.
          
          success = sbmlObject.setAnnotation(annot)           # Set object's annotation to what we built.
          ...                                                 # Check 'success' return code value.

         The SBML specification contains more information about the format of
        annotations.  We urge readers to consult Section 6 of the SBML Level 2
        (Versions 2-4) and SBML Level 3 specification documents.

        Returns a pointer to an XMLNode for the annotation

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see RDFAnnotationParser.createRDFAnnotation()

        """
        return _libsbml.RDFAnnotationParser_createAnnotation()

    if _newclass:createAnnotation = staticmethod(createAnnotation)
    __swig_getmethods__["createAnnotation"] = lambda x: createAnnotation
    def createRDFAnnotation():
        """
        createRDFAnnotation() -> XMLNode

        Creates a blank RDF element suitable for use in SBML annotations.

        The annotation created by this method has namespace declarations for
        all the relevant XML namespaces used in RDF annotations and also has
        an empty RDF element.  The result is the following XML:

          <rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
                   xmlns:dc='http://purl.org/dc/elements/1.1/'
                   xmlns:dcterms='http://purl.org/dc/terms/'
                   xmlns:vCard='http://www.w3.org/2001/vcard-rdf/3.0#'
                   xmlns:bqbiol='http://biomodels.net/biology-qualifiers/'
                   xmlns:bqmodel='http://biomodels.net/model-qualifiers/' >
          
          </rdf:RDF>

        Note that this does not create the containing SBML <annotation>
        element; the method RDFAnnotationParser.createAnnotation() is
        available for creating the container.

        Returns a pointer to an XMLNode

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @see RDFAnnotationParser.createAnnotation()

        """
        return _libsbml.RDFAnnotationParser_createRDFAnnotation()

    if _newclass:createRDFAnnotation = staticmethod(createRDFAnnotation)
    __swig_getmethods__["createRDFAnnotation"] = lambda x: createRDFAnnotation
    def createCVTerms(*args):
        """
        createCVTerms(SBase obj) -> XMLNode

        Takes a list of CVTerm objects and creates a the RDF 'Description'
        element.

        This essentially takes the given SBML object, reads out the CVTerm
        objects attached to it, creates an RDF 'Description' element to hold
        the terms, and adds each term with appropriate qualifiers.

        Parameter 'obj' is the SBML object to start from

        Returns the XMLNode tree corresponding to the Description element of
        an RDF annotation.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.RDFAnnotationParser_createCVTerms(*args)

    if _newclass:createCVTerms = staticmethod(createCVTerms)
    __swig_getmethods__["createCVTerms"] = lambda x: createCVTerms
    def parseCVTerms(*args):
        """
        parseCVTerms(SBase obj) -> XMLNode

        Takes a list of CVTerm objects and creates a complete SBML annotation
        around it.

        This essentially takes the given SBML object, reads out the CVTerm
        objects attached to it, calls
        RDFAnnotationParser.createRDFAnnotation() to create an RDF annotation
        to hold the terms, and finally calls
        RDFAnnotationParser.createAnnotation() to wrap the result as an SBML
        <annotation> element.

        Parameter 'obj' is the SBML object to start from

        Returns the XMLNode tree corresponding to the annotation.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.RDFAnnotationParser_parseCVTerms(*args)

    if _newclass:parseCVTerms = staticmethod(parseCVTerms)
    __swig_getmethods__["parseCVTerms"] = lambda x: parseCVTerms
    def parseModelHistory(*args):
        """
        parseModelHistory(SBase obj) -> XMLNode

        Reads the model history and cvTerms stored in 'obj' and creates the
        XML structure for an SBML annotation representing that metadata if
        there is a model history stored in 'obj'.

        Parameter 'obj' is any SBase object

        Returns the XMLNode corresponding to an annotation containing  MIRIAM-
        compliant model history and CV term information in RDF format.

        Note:

        If the object does not have a history element stored then None is
        returned even if CVTerms are present.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.RDFAnnotationParser_parseModelHistory(*args)

    if _newclass:parseModelHistory = staticmethod(parseModelHistory)
    __swig_getmethods__["parseModelHistory"] = lambda x: parseModelHistory
    def parseOnlyModelHistory(*args):
        """
        parseOnlyModelHistory(SBase obj) -> XMLNode

        Reads the model history stored in 'obj' and creates the XML structure
        for an SBML annotation representing that history.

        Parameter 'obj' is any SBase object

        Returns the XMLNode corresponding to an annotation containing  MIRIAM-
        compliant model history information in RDF format.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.RDFAnnotationParser_parseOnlyModelHistory(*args)

    if _newclass:parseOnlyModelHistory = staticmethod(parseOnlyModelHistory)
    __swig_getmethods__["parseOnlyModelHistory"] = lambda x: parseOnlyModelHistory
    def deleteRDFAnnotation(*args):
        """
        deleteRDFAnnotation(XMLNode annotation) -> XMLNode

        Deletes any SBML MIRIAM RDF annotation found in the given XMLNode
        tree and returns any remaining annotation content.

        The name of the XMLNode given as parameter 'annotation' must be
        'annotation', or else this method returns None.  The method will walk
        down the XML structure looking for elements that are in the RDF XML
        namespace, and remove them if they conform to the syntax of a History
        or CVTerm element.

        Parameter 'annotation' is the XMLNode tree within which the RDF
        annotation is to be found and deleted

        Returns the XMLNode structure that is left after RDF annotations are
        deleted.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.RDFAnnotationParser_deleteRDFAnnotation(*args)

    if _newclass:deleteRDFAnnotation = staticmethod(deleteRDFAnnotation)
    __swig_getmethods__["deleteRDFAnnotation"] = lambda x: deleteRDFAnnotation
    def deleteRDFHistoryAnnotation(*args):
        """
        deleteRDFHistoryAnnotation(XMLNode annotation) -> XMLNode

        Deletes any SBML MIRIAM RDF 'History' annotation found in the given
        XMLNode tree and returns any remaining annotation content.

        The name of the XMLNode given as parameter 'annotation' must be
        'annotation', or else this method returns None.  The method will walk
        down the XML structure looking for elements that are in the RDF XML
        namespace, and remove any that conform to the syntax of a History
        element.

        Parameter 'annotation' is the XMLNode tree within which the RDF
        annotation is to be found and deleted

        Returns the XMLNode structure that is left after RDF annotations are
        deleted.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.RDFAnnotationParser_deleteRDFHistoryAnnotation(*args)

    if _newclass:deleteRDFHistoryAnnotation = staticmethod(deleteRDFHistoryAnnotation)
    __swig_getmethods__["deleteRDFHistoryAnnotation"] = lambda x: deleteRDFHistoryAnnotation
    def deleteRDFCVTermAnnotation(*args):
        """
        deleteRDFCVTermAnnotation(XMLNode annotation) -> XMLNode

        Deletes any SBML MIRIAM RDF 'CVTerm' annotation found in the given
        XMLNode tree and returns any remaining annotation content.

        The name of the XMLNode given as parameter 'annotation' must be
        'annotation', or else this method returns None.  The method will walk
        down the XML structure looking for elements that are in the RDF XML
        namespace, and remove any that conform to the syntax of a CVTerm
        element.

        Parameter 'annotation' is the XMLNode tree within which the RDF
        annotation is to be found and deleted

        Returns the XMLNode structure that is left after RDF annotations are
        deleted.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        """
        return _libsbml.RDFAnnotationParser_deleteRDFCVTermAnnotation(*args)

    if _newclass:deleteRDFCVTermAnnotation = staticmethod(deleteRDFCVTermAnnotation)
    __swig_getmethods__["deleteRDFCVTermAnnotation"] = lambda x: deleteRDFCVTermAnnotation
    def parseRDFAnnotation(*args):
        """
        parseRDFAnnotation(XMLNode annotation, char metaId = None, XMLInputStream stream = None) -> ModelHistory
        parseRDFAnnotation(XMLNode annotation, char metaId = None) -> ModelHistory
        parseRDFAnnotation(XMLNode annotation) -> ModelHistory
        parseRDFAnnotation(XMLNode annotation, CVTermList CVTerms)
        parseRDFAnnotation(XMLNode annotation, CVTermList CVTerms, char metaId = None, 
            XMLInputStream stream = None)
        parseRDFAnnotation(XMLNode annotation, CVTermList CVTerms, char metaId = None)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            parseRDFAnnotation(XMLNodeannotation, List *CVTerms, string metaId
        = None, XMLInputStream stream = None)

        Parses an annotation (given as an XMLNode tree) into a list of CVTerm
        objects.

        This is used to take an annotation that has been read into an SBML
        model, identify the RDF elements within it, and create a list of
        corresponding CVTerm (controlled vocabulary term) objects.

        Parameter 'annotation' is XMLNode containing the annotation. Parameter
        'CVTerms' is list of CVTerm objects to be created. Parameter 'metaId'
        is optional metaId, if set only the RDF annotation for this metaId
        will be returned. Parameter 'stream' is optional XMLInputStream that
        facilitates error logging.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        @par <hr> Method variant with the following signature:

            parseRDFAnnotation(XMLNodeannotation, string metaId = None,
        XMLInputStream stream = None)

        Parses an annotation into a ModelHistory class instance.

        This is used to take an annotation that has been read into an SBML
        model, identify the RDF elements representing model history
        information, and create a list of corresponding CVTerm objects.

        Parameter 'annotation' is XMLNode containing the annotation. Parameter
        'stream' is optional XMLInputStream that facilitates error logging
        Parameter 'metaId' is optional metaId, if set only the RDF annotation
        for this metaId will be returned.

        Note:

        Because this is a static method on a class, the Python language
        interface for libSBML will contain two variants.  One will be the
        expected, normal static method on the class (i.e., a regular
        methodName), and the other will be a standalone top-level function
        with the name ClassName_methodName(). This is merely an artifact of
        how the language interfaces are created in libSBML.  The methods are
        functionally identical.

        Returns a pointer to the ModelHistory created.

        """
        return _libsbml.RDFAnnotationParser_parseRDFAnnotation(*args)

    if _newclass:parseRDFAnnotation = staticmethod(parseRDFAnnotation)
    __swig_getmethods__["parseRDFAnnotation"] = lambda x: parseRDFAnnotation
    def __init__(self): 
        """__init__(self) -> RDFAnnotationParser"""
        this = _libsbml.new_RDFAnnotationParser()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_RDFAnnotationParser
    __del__ = lambda self : None;
RDFAnnotationParser_swigregister = _libsbml.RDFAnnotationParser_swigregister
RDFAnnotationParser_swigregister(RDFAnnotationParser)

def RDFAnnotationParser_createAnnotation():
  """
    RDFAnnotationParser_createAnnotation() -> XMLNode

    Creates a blank annotation and returns its root XMLNode object.

    This creates a completely empty SBML <annotation> element.  It is not
    attached to any SBML element.  An example of how this might be used is
    illustrated in the following code fragment.  In this example, suppose
    that content is an XMLNode object previously created, containing
    MIRIAM-style annotations, and that sbmlObject is an SBML object
    derived from SBase (e.g., a Model, or a Species, or a Compartment,
    etc.).  Then:

      RDF     = RDFAnnotationParser.createRDFAnnotation() # Create RDF annotation XML structure.
      success = RDF.addChild(...content...)               # Put some content into it.
      ...                                                 # Check 'success' return code value.
      
      annot   = RDFAnnotationParser.createAnnotation()    # Create <annotation> container.
      success = annot.addChild(RDF)                       # Put the RDF annotation into it.
      ...                                                 # Check 'success' return code value.
      
      success = sbmlObject.setAnnotation(annot)           # Set object's annotation to what we built.
      ...                                                 # Check 'success' return code value.

     The SBML specification contains more information about the format of
    annotations.  We urge readers to consult Section 6 of the SBML Level 2
    (Versions 2-4) and SBML Level 3 specification documents.

    Returns a pointer to an XMLNode for the annotation

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see RDFAnnotationParser.createRDFAnnotation()

    """
  return _libsbml.RDFAnnotationParser_createAnnotation()

def RDFAnnotationParser_createRDFAnnotation():
  """
    RDFAnnotationParser_createRDFAnnotation() -> XMLNode

    Creates a blank RDF element suitable for use in SBML annotations.

    The annotation created by this method has namespace declarations for
    all the relevant XML namespaces used in RDF annotations and also has
    an empty RDF element.  The result is the following XML:

      <rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
               xmlns:dc='http://purl.org/dc/elements/1.1/'
               xmlns:dcterms='http://purl.org/dc/terms/'
               xmlns:vCard='http://www.w3.org/2001/vcard-rdf/3.0#'
               xmlns:bqbiol='http://biomodels.net/biology-qualifiers/'
               xmlns:bqmodel='http://biomodels.net/model-qualifiers/' >
      
      </rdf:RDF>

    Note that this does not create the containing SBML <annotation>
    element; the method RDFAnnotationParser.createAnnotation() is
    available for creating the container.

    Returns a pointer to an XMLNode

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @see RDFAnnotationParser.createAnnotation()

    """
  return _libsbml.RDFAnnotationParser_createRDFAnnotation()

def RDFAnnotationParser_createCVTerms(*args):
  """
    RDFAnnotationParser_createCVTerms(SBase obj) -> XMLNode

    Takes a list of CVTerm objects and creates a the RDF 'Description'
    element.

    This essentially takes the given SBML object, reads out the CVTerm
    objects attached to it, creates an RDF 'Description' element to hold
    the terms, and adds each term with appropriate qualifiers.

    Parameter 'obj' is the SBML object to start from

    Returns the XMLNode tree corresponding to the Description element of
    an RDF annotation.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.RDFAnnotationParser_createCVTerms(*args)

def RDFAnnotationParser_parseCVTerms(*args):
  """
    RDFAnnotationParser_parseCVTerms(SBase obj) -> XMLNode

    Takes a list of CVTerm objects and creates a complete SBML annotation
    around it.

    This essentially takes the given SBML object, reads out the CVTerm
    objects attached to it, calls
    RDFAnnotationParser.createRDFAnnotation() to create an RDF annotation
    to hold the terms, and finally calls
    RDFAnnotationParser.createAnnotation() to wrap the result as an SBML
    <annotation> element.

    Parameter 'obj' is the SBML object to start from

    Returns the XMLNode tree corresponding to the annotation.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.RDFAnnotationParser_parseCVTerms(*args)

def RDFAnnotationParser_parseModelHistory(*args):
  """
    RDFAnnotationParser_parseModelHistory(SBase obj) -> XMLNode

    Reads the model history and cvTerms stored in 'obj' and creates the
    XML structure for an SBML annotation representing that metadata if
    there is a model history stored in 'obj'.

    Parameter 'obj' is any SBase object

    Returns the XMLNode corresponding to an annotation containing  MIRIAM-
    compliant model history and CV term information in RDF format.

    Note:

    If the object does not have a history element stored then None is
    returned even if CVTerms are present.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.RDFAnnotationParser_parseModelHistory(*args)

def RDFAnnotationParser_parseOnlyModelHistory(*args):
  """
    RDFAnnotationParser_parseOnlyModelHistory(SBase obj) -> XMLNode

    Reads the model history stored in 'obj' and creates the XML structure
    for an SBML annotation representing that history.

    Parameter 'obj' is any SBase object

    Returns the XMLNode corresponding to an annotation containing  MIRIAM-
    compliant model history information in RDF format.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.RDFAnnotationParser_parseOnlyModelHistory(*args)

def RDFAnnotationParser_deleteRDFAnnotation(*args):
  """
    RDFAnnotationParser_deleteRDFAnnotation(XMLNode annotation) -> XMLNode

    Deletes any SBML MIRIAM RDF annotation found in the given XMLNode
    tree and returns any remaining annotation content.

    The name of the XMLNode given as parameter 'annotation' must be
    'annotation', or else this method returns None.  The method will walk
    down the XML structure looking for elements that are in the RDF XML
    namespace, and remove them if they conform to the syntax of a History
    or CVTerm element.

    Parameter 'annotation' is the XMLNode tree within which the RDF
    annotation is to be found and deleted

    Returns the XMLNode structure that is left after RDF annotations are
    deleted.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.RDFAnnotationParser_deleteRDFAnnotation(*args)

def RDFAnnotationParser_deleteRDFHistoryAnnotation(*args):
  """
    RDFAnnotationParser_deleteRDFHistoryAnnotation(XMLNode annotation) -> XMLNode

    Deletes any SBML MIRIAM RDF 'History' annotation found in the given
    XMLNode tree and returns any remaining annotation content.

    The name of the XMLNode given as parameter 'annotation' must be
    'annotation', or else this method returns None.  The method will walk
    down the XML structure looking for elements that are in the RDF XML
    namespace, and remove any that conform to the syntax of a History
    element.

    Parameter 'annotation' is the XMLNode tree within which the RDF
    annotation is to be found and deleted

    Returns the XMLNode structure that is left after RDF annotations are
    deleted.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.RDFAnnotationParser_deleteRDFHistoryAnnotation(*args)

def RDFAnnotationParser_deleteRDFCVTermAnnotation(*args):
  """
    RDFAnnotationParser_deleteRDFCVTermAnnotation(XMLNode annotation) -> XMLNode

    Deletes any SBML MIRIAM RDF 'CVTerm' annotation found in the given
    XMLNode tree and returns any remaining annotation content.

    The name of the XMLNode given as parameter 'annotation' must be
    'annotation', or else this method returns None.  The method will walk
    down the XML structure looking for elements that are in the RDF XML
    namespace, and remove any that conform to the syntax of a CVTerm
    element.

    Parameter 'annotation' is the XMLNode tree within which the RDF
    annotation is to be found and deleted

    Returns the XMLNode structure that is left after RDF annotations are
    deleted.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    """
  return _libsbml.RDFAnnotationParser_deleteRDFCVTermAnnotation(*args)

def RDFAnnotationParser_parseRDFAnnotation(*args):
  """
    parseRDFAnnotation(XMLNode annotation, char metaId = None, XMLInputStream stream = None) -> ModelHistory
    parseRDFAnnotation(XMLNode annotation, char metaId = None) -> ModelHistory
    parseRDFAnnotation(XMLNode annotation) -> ModelHistory
    parseRDFAnnotation(XMLNode annotation, CVTermList CVTerms)
    parseRDFAnnotation(XMLNode annotation, CVTermList CVTerms, char metaId = None, 
        XMLInputStream stream = None)
    RDFAnnotationParser_parseRDFAnnotation(XMLNode annotation, CVTermList CVTerms, char metaId = None)

    This method has multiple variants that differ in the arguments  they
    accept.  Each is described separately below.

    @par <hr> Method variant with the following signature:

        parseRDFAnnotation(XMLNodeannotation, List *CVTerms, string metaId
    = None, XMLInputStream stream = None)

    Parses an annotation (given as an XMLNode tree) into a list of CVTerm
    objects.

    This is used to take an annotation that has been read into an SBML
    model, identify the RDF elements within it, and create a list of
    corresponding CVTerm (controlled vocabulary term) objects.

    Parameter 'annotation' is XMLNode containing the annotation. Parameter
    'CVTerms' is list of CVTerm objects to be created. Parameter 'metaId'
    is optional metaId, if set only the RDF annotation for this metaId
    will be returned. Parameter 'stream' is optional XMLInputStream that
    facilitates error logging.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    @par <hr> Method variant with the following signature:

        parseRDFAnnotation(XMLNodeannotation, string metaId = None,
    XMLInputStream stream = None)

    Parses an annotation into a ModelHistory class instance.

    This is used to take an annotation that has been read into an SBML
    model, identify the RDF elements representing model history
    information, and create a list of corresponding CVTerm objects.

    Parameter 'annotation' is XMLNode containing the annotation. Parameter
    'stream' is optional XMLInputStream that facilitates error logging
    Parameter 'metaId' is optional metaId, if set only the RDF annotation
    for this metaId will be returned.

    Note:

    Because this is a static method on a class, the Python language
    interface for libSBML will contain two variants.  One will be the
    expected, normal static method on the class (i.e., a regular
    methodName), and the other will be a standalone top-level function
    with the name ClassName_methodName(). This is merely an artifact of
    how the language interfaces are created in libSBML.  The methods are
    functionally identical.

    Returns a pointer to the ModelHistory created.

    """
  return _libsbml.RDFAnnotationParser_parseRDFAnnotation(*args)

class ISBMLExtensionNamespaces(SBMLNamespaces):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISBMLExtensionNamespaces, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISBMLExtensionNamespaces, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_ISBMLExtensionNamespaces
    __del__ = lambda self : None;
    def getURI(self):
        """
        getURI(self) -> string

        Returns a string representing the SBML XML namespace of this object.

        Returns a string representing the SBML namespace that reflects the
        SBML Level and Version of this object.

        """
        return _libsbml.ISBMLExtensionNamespaces_getURI(self)

    def getPackageVersion(self):
        """getPackageVersion(self) -> unsigned int"""
        return _libsbml.ISBMLExtensionNamespaces_getPackageVersion(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the name of the main package for this namespace.

        Returns the name of the main package for this namespace. 'core' will
        be returned if this namespace is defined in the SBML  core.

        """
        return _libsbml.ISBMLExtensionNamespaces_getPackageName(self)

    def setPackageVersion(self, *args):
        """setPackageVersion(self, unsigned int pkgVersion)"""
        return _libsbml.ISBMLExtensionNamespaces_setPackageVersion(self, *args)

ISBMLExtensionNamespaces_swigregister = _libsbml.ISBMLExtensionNamespaces_swigregister
ISBMLExtensionNamespaces_swigregister(ISBMLExtensionNamespaces)

class SBaseExtensionPoint(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBaseExtensionPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBaseExtensionPoint, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SBaseExtensionPoint
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, string pkgName, int typeCode) -> SBaseExtensionPoint
        __init__(self, SBaseExtensionPoint rhs) -> SBaseExtensionPoint

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBaseExtensionPoint(SBaseExtensionPoint rhs)

        copy constructor

        @par <hr> Method variant with the following signature:

            SBaseExtensionPoint(string pkgName, int typeCode)

        constructor

        """
        this = _libsbml.new_SBaseExtensionPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBaseExtensionPoint

        Creates and returns a deep copy of this SBaseExtensionPoint.

        Returns a (deep) copy of this SBaseExtensionPoint.

        """
        return _libsbml.SBaseExtensionPoint_clone(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the package name of this extension point.

        """
        return _libsbml.SBaseExtensionPoint_getPackageName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the typecode of this extension point.

        """
        return _libsbml.SBaseExtensionPoint_getTypeCode(self)

SBaseExtensionPoint_swigregister = _libsbml.SBaseExtensionPoint_swigregister
SBaseExtensionPoint_swigregister(SBaseExtensionPoint)

class SBasePlugin(_object):
    """
    Representation of a plug-in object of SBML's package extension.

    Additional attributes and/or elements of a package extension which are
    directly  contained by some pre-defined element are contained/accessed
    by   SBasePlugin  class which is extended by package developers for
    each extension point. The extension point, which represents an element
    to be extended, is identified by a  combination of a Package name and
    a typecode of the element, and is represented by SBaseExtensionPoint
    class.

     For example, the layout extension defines <listOfLayouts> element
    which is  directly contained in <model> element of the core package.
    In the layout package (provided as one of example packages in
    libSBML-5), the additional  element for the model element is
    implemented as ListOfLayouts class (an SBase derived class) and  the
    object is contained/accessed by a LayoutModelPlugin class (an
    SBasePlugin derived class).

     SBasePlugin class defines basic virtual functions for
    reading/writing/checking  additional attributes and/or top-level
    elements which should or must be overridden by  subclasses like SBase
    class and its derived classes.

     Package developers must implement an SBasePlugin exntended class for
    each element to be extended (e.g. SBMLDocument, Model, ...) in which
    additional  attributes and/or top-level elements of the package
    extension are directly contained.

    To implement reading/writing functions for attributes and/or top-level
    elements of the SBsaePlugin extended class, package developers should
    or must override the corresponding virtual functions below provided in
    the SBasePlugin class:

        *  reading elements :  <ol>

       * virtual SBase createObject (XMLInputStream stream)

    This function must be overridden if one or more additional elements
    are defined. * virtual bool readOtherXML (SBase parentObject,
    XMLInputStream stream)

    This function should be overridden if elements of annotation, notes,
    MathML, etc. need  to be directly parsed from the given XMLInputStream
    object .

    </ol> *  reading attributes (must be overridden if additional
    attributes are defined) : <ol>

       * virtual void addExpectedAttributes(ExpectedAttributes&
    attributes) * virtual void readAttributes (XMLAttributes attributes,
    const ExpectedAttributes& expectedAttributes)</ol> *  writing elements
    (must be overridden if additional elements are defined) : <ol>

       * virtual void writeElements (XMLOutputStream stream) const </ol> *
    writing attributes :  <ol>

       * virtual void writeAttributes (XMLOutputStream stream) const

    This function must be overridden if one or more additional attributes
    are defined. * virtual void writeXMLNS (XMLOutputStream stream) const

    This function must be overridden if one or more additional xmlns
    attributes are defined. </ol> *  checking elements (should be
    overridden) : <ol>

       * virtual bool hasRequiredElements() const </ol> *  checking
    attributes (should be overridden) : <ol>

       * virtual bool hasRequiredAttributes() const </ol>

    To implement package-specific creating/getting/manipulating functions
    of the SBasePlugin derived class (e.g., getListOfLayouts(),
    createLyout(), getLayout(), and etc are implemented in
    LayoutModelPlugin class of the layout package), package developers
    must newly implement such functions (as they like) in the derived
    class.

     SBasePlugin class defines other virtual functions of internal
    implementations such as:

        *  virtual void setSBMLDocument(SBMLDocument d)

       *  virtual void connectToParent(SBasesbase)

       *  virtual void enablePackageInternal(string pkgURI, string
    pkgPrefix, bool flag)  These functions must be overridden by
    subclasses in which one or more top-level elements are defined.

     For example, the following three SBasePlugin extended classes are
    implemented in the layout extension:

    <ol>

    *  SBMLDocumentPlugin  class for SBMLDocument element

        *  required  attribute is added to SBMLDocument object.

    ( SBMLDocumentPlugin  class is a common SBasePlugin  extended class
    for SBMLDocument class. Package developers can use this class as-is if
    no additional  elements/attributes (except for  required  attribute)
    is needed for the SBMLDocument class  in their packages, otherwise
    package developers must implement a new SBMLDocumentPlugin derived
    class.)

        *  LayoutModelPlugin class for Model element

    * <listOfLayouts> element is added to Model object. *  The following
    virtual functions for reading/writing/checking are overridden: (type
    of arguments and return values are omitted)

        *  createObject()  : (read elements) *  readOtherXML()  : (read
    elements in annotation of SBML L2) *  writeElements()  : (write
    elements) *  The following virtual functions of internal
    implementations are overridden: (type of arguments and return values
    are omitted)

        *  setSBMLDocument()   *  connectToParent()  *
    enablePackageInternal()  *  The following
    creating/getting/manipulating functions are newly  implemented: (type
    of arguments and return values are omitted)

        *  getListOfLayouts()  *  getLayout ()   *  addLayout()  *
    createLayout()  *  removeLayout()  *  getNumLayouts()  *
    LayoutSpeciesReferencePlugin class for SpeciesReference element (used
    only for SBML L2V1)

        *  id  attribute is internally added to SpeciesReference object
    only for SBML L2V1  * The following virtual functions for
    reading/writing/checking are overridden: (type of arguments and return
    values are omitted) *  readOtherXML()  *  writeAttributes()  </ol>

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBasePlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBasePlugin, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SBasePlugin
    __del__ = lambda self : None;
    def getElementNamespace(self):
        """
        getElementNamespace(self) -> string

        Returns the XML namespace (URI) of the package extension of this
        plugin object.

        Returns the URI of the package extension of this plugin object.

        """
        return _libsbml.SBasePlugin_getElementNamespace(self)

    def getPrefix(self):
        """
        getPrefix(self) -> string

        Returns the prefix of the package extension of this plugin object.

        Returns the prefix of the package extension of this plugin object.

        """
        return _libsbml.SBasePlugin_getPrefix(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the package name of this plugin object.

        Returns the package name of this plugin object.

        """
        return _libsbml.SBasePlugin_getPackageName(self)

    def clone(self):
        """
        clone(self) -> SBasePlugin

        Creates and returns a deep copy of this SBasePlugin object.

        Returns a (deep) copy of this SBase object

        """
        return _libsbml.SBasePlugin_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns pointer to the first element found with the given 'id'.

        """
        return _libsbml.SBasePlugin_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or None if no such object is found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns pointer to the first element found with the given 'metaid'.

        """
        return _libsbml.SBasePlugin_getElementByMetaId(self, *args)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase sbase)

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_enablePackageInternal(self, *args)

    def stripPackage(self, *args):
        """
        stripPackage(self, string pkgPrefix, bool flag) -> bool

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_stripPackage(self, *args)

    def getSBMLDocument(self, *args):
        """
        getSBMLDocument(self) -> SBMLDocument
        getSBMLDocument(self) -> SBMLDocument

        Returns the parent SBMLDocument of this plugin object.

        Returns the parent SBMLDocument object of this plugin object.

        """
        return _libsbml.SBasePlugin_getSBMLDocument(self, *args)

    def getURI(self):
        """
        getURI(self) -> string

        Gets the URI to which this element belongs to. For example, all
        elements that belong to SBML Level 3 Version 1 Core must would have
        the URI 'http://www.sbml.org/sbml/level3/version1/core';  all elements
        that belong to Layout Extension Version 1 for SBML Level 3 Version 1
        Core must would have the URI
        'http://www.sbml.org/sbml/level3/version1/layout/version1/'

        Unlike getElementNamespace, this function first returns the URI for
        this  element by looking into the SBMLNamespaces object of the
        document with  the its package name. if not found it will return the
        result of  getElementNamespace

        Returns the URI this elements

        See also getSBMLDocument().

        """
        return _libsbml.SBasePlugin_getURI(self)

    def getParentSBMLObject(self, *args):
        """
        getParentSBMLObject(self) -> SBase
        getParentSBMLObject(self) -> SBase

        Returns the parent SBase object to which this plugin  object
        connected.

        Returns the parent SBase object to which this plugin  object
        connected.

        """
        return _libsbml.SBasePlugin_getParentSBMLObject(self, *args)

    def setElementNamespace(self, *args):
        """
        setElementNamespace(self, string uri) -> int

        Sets the XML namespace to which this element belongs to. For example,
        all elements that belong to SBML Level 3 Version 1 Core must set the
        namespace to 'http://www.sbml.org/sbml/level3/version1/core';  all
        elements that belong to Layout Extension Version 1 for SBML Level 3
        Version 1 Core must set the namespace to
        'http://www.sbml.org/sbml/level3/version1/layout/version1/'

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.SBasePlugin_setElementNamespace(self, *args)

    def getLevel(self):
        """
        getLevel(self) -> unsigned int

        Returns the SBML level of the package extension of  this plugin
        object.

        Returns the SBML level of the package extension of this plugin object.

        """
        return _libsbml.SBasePlugin_getLevel(self)

    def getVersion(self):
        """
        getVersion(self) -> unsigned int

        Returns the SBML version of the package extension of this plugin
        object.

        Returns the SBML version of the package extension of this plugin
        object.

        """
        return _libsbml.SBasePlugin_getVersion(self)

    def getPackageVersion(self):
        """
        getPackageVersion(self) -> unsigned int

        Returns the package version of the package extension of this plugin
        object.

        Returns the package version of the package extension of this plugin
        object.

        """
        return _libsbml.SBasePlugin_getPackageVersion(self)

    def replaceSIDWithFunction(self, *args):
        """
        replaceSIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_replaceSIDWithFunction(self, *args)

    def divideAssignmentsToSIdByFunction(self, *args):
        """
        divideAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_divideAssignmentsToSIdByFunction(self, *args)

    def multiplyAssignmentsToSIdByFunction(self, *args):
        """
        multiplyAssignmentsToSIdByFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_multiplyAssignmentsToSIdByFunction(self, *args)

    def hasIdentifierBeginningWith(self, *args):
        """
        hasIdentifierBeginningWith(self, string prefix) -> bool

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_hasIdentifierBeginningWith(self, *args)

    def prependStringToAllIdentifiers(self, *args):
        """
        prependStringToAllIdentifiers(self, string prefix) -> int

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_prependStringToAllIdentifiers(self, *args)

    def transformIdentifiers(self, *args):
        """
        transformIdentifiers(self, IdentifierTransformer sidTransformer) -> int

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_transformIdentifiers(self, *args)

    def getLine(self):
        """
        getLine(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_getLine(self)

    def getColumn(self):
        """
        getColumn(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_getColumn(self)

    def getSBMLNamespaces(self):
        """
        getSBMLNamespaces(self) -> SBMLNamespaces

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_getSBMLNamespaces(self)

    def logUnknownElement(self, *args):
        """
        logUnknownElement(self, string element, unsigned int sbmlLevel, unsigned int sbmlVersion, 
            unsigned int pkgVersion)

        Internal implementation method.

        """
        return _libsbml.SBasePlugin_logUnknownElement(self, *args)

    __metaclass__ = AutoProperty

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

    def getListOfAllElements(self, filter = None):
        """
        getListOfAllElements(self, ElementFilter filter = None) -> SBaseList
        getListOfAllElements(self) -> SBaseList

        Returns an SBaseList of all child SBase objects, including those
        nested to an arbitrary depth.

        @return an SBaseList

        """
        return _libsbml.SBasePlugin_getListOfAllElements(self, filter)

SBasePlugin_swigregister = _libsbml.SBasePlugin_swigregister
SBasePlugin_swigregister(SBasePlugin)

class SBMLDocumentPlugin(SBasePlugin):
    """
    Template class for the SBMLDocument Plugin class needed by all
    packages.

    Plugin objects for the SBMLDocument element must be this class or a
    derived class of this class.  Package developers should use this class
    as-is if only 'required' attribute is added in the SBMLDocument
    element by their packages.  Otherwise, developers must implement a
    derived class of this class and use that class as the plugin object
    for the SBMLDocument element.

    """
    __swig_setmethods__ = {}
    for _s in [SBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLDocumentPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLDocumentPlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix, SBMLNamespaces sbmlns) -> SBMLDocumentPlugin
        __init__(self, SBMLDocumentPlugin orig) -> SBMLDocumentPlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLDocumentPlugin(string &uri, string &prefix,
        SBMLNamespacessbmlns)

        Constructor

        Parameter 'uri' is the URI of package  Parameter 'prefix' is the
        prefix for the given package Parameter 'sbmlns' is the SBMLNamespaces
        object for the package

        @par <hr> Method variant with the following signature:

            SBMLDocumentPlugin(SBMLDocumentPlugin orig)

        Copy constructor. Creates a copy of this object.

        """
        this = _libsbml.new_SBMLDocumentPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLDocumentPlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLDocumentPlugin

        Creates and returns a deep copy of this SBMLDocumentPlugin object.

        Returns a (deep) copy of this object

        """
        return _libsbml.SBMLDocumentPlugin_clone(self)

    def setRequired(self, *args):
        """
        setRequired(self, bool value) -> int

        Sets the bool value of 'required' attribute of corresponding package
        in SBMLDocument element.

        Parameter 'value' is the bool value of 'required' attribute of
        corresponding  package in SBMLDocument element.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.SBMLDocumentPlugin_setRequired(self, *args)

    def getRequired(self):
        """
        getRequired(self) -> bool

        Returns the bool value of 'required' attribute of corresponding
        package in SBMLDocument element.

        Returns the bool value of 'required' attribute of corresponding
        package in SBMLDocument element.

        """
        return _libsbml.SBMLDocumentPlugin_getRequired(self)

    def isSetRequired(self):
        """
        isSetRequired(self) -> bool

        Predicate returning True or False depending on whether this
        SBMLDocumentPlugin's 'required' attribute has been set.

        Returns True if the 'required' attribute of this SBMLDocument has been
        set, False otherwise.

        """
        return _libsbml.SBMLDocumentPlugin_isSetRequired(self)

    def unsetRequired(self):
        """
        unsetRequired(self) -> int

        Unsets the value of the 'required' attribute of this
        SBMLDocumentPlugin.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBMLDocumentPlugin_unsetRequired(self)

    def isCompFlatteningImplemented(self):
        """
        isCompFlatteningImplemented(self) -> bool

        Internal implementation method.

        """
        return _libsbml.SBMLDocumentPlugin_isCompFlatteningImplemented(self)

    def checkConsistency(self):
        """
        checkConsistency(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.SBMLDocumentPlugin_checkConsistency(self)

SBMLDocumentPlugin_swigregister = _libsbml.SBMLDocumentPlugin_swigregister
SBMLDocumentPlugin_swigregister(SBMLDocumentPlugin)

class SBMLExtension(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLExtension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLExtension, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_SBMLExtension
    __del__ = lambda self : None;
    def getNumOfSBasePlugins(self):
        """
        getNumOfSBasePlugins(self) -> int

        Returns the number of SBasePlugin objects stored in this object.

        Returns the number of SBasePlugin objects stored in this object.

        """
        return _libsbml.SBMLExtension_getNumOfSBasePlugins(self)

    def getNumOfSupportedPackageURI(self):
        """
        getNumOfSupportedPackageURI(self) -> unsigned int

        Returns the number of supported package Namespace (package versions)
        of this  package extension.

        Returns the number of supported package Namespace (package versions)
        of this  package extension.

        """
        return _libsbml.SBMLExtension_getNumOfSupportedPackageURI(self)

    def isSupported(self, *args):
        """
        isSupported(self, string uri) -> bool

        Returns a flag indicating, whether the given URI (package version) is
        supported by this package extension.

        Returns true if the given URI (package version) is supported by this
        package extension, otherwise false is returned.

        """
        return _libsbml.SBMLExtension_isSupported(self, *args)

    def getSupportedPackageURI(self, *args):
        """
        getSupportedPackageURI(self, unsigned int i) -> string

        Returns the ith URI (the supported package version)

        Parameter 'i' is the index of the list of URI (the list of supporeted
        package versions) Returns the URI of supported package version with
        the given index.

        """
        return _libsbml.SBMLExtension_getSupportedPackageURI(self, *args)

    def clone(self):
        """
        clone(self) -> SBMLExtension

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in their derived class.

        Creates and returns a deep copy of this SBMLExtension object.

        Returns a (deep) copy of this SBase object

        """
        return _libsbml.SBMLExtension_clone(self)

    def getName(self):
        """
        getName(self) -> string

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in their derived class.

        Returns the name of this package (e.g. 'layout', 'multi').

        Returns the name of package extension

        """
        return _libsbml.SBMLExtension_getName(self)

    def getURI(self, *args):
        """
        getURI(self, unsigned int sbmlLevel, unsigned int sbmlVersion, unsigned int pkgVersion) -> string

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in their derived class.

        Returns the uri corresponding to the given SBML level, SBML version,
        and package version.

        Parameter 'sbmlLevel' is the level of SBML Parameter 'sbmlVersion' is
        the version of SBML Parameter 'pkgVersion' is the version of package

        Returns a string of the package URI

        """
        return _libsbml.SBMLExtension_getURI(self, *args)

    def getLevel(self, *args):
        """
        getLevel(self, string uri) -> unsigned int

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in their derived class.

        Returns the SBML level associated with the given URI of this package.

        Parameter 'uri' is the string of URI that represents a versions of the
        package Returns the SBML level associated with the given URI of this
        package.

        """
        return _libsbml.SBMLExtension_getLevel(self, *args)

    def getVersion(self, *args):
        """
        getVersion(self, string uri) -> unsigned int

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in their derived class.

        Returns the SBML version associated with the given URI of this
        package.

        Parameter 'uri' is the string of URI that represents a versions of the
        package Returns the SBML version associated with the given URI of this
        package.

        """
        return _libsbml.SBMLExtension_getVersion(self, *args)

    def getPackageVersion(self, *args):
        """
        getPackageVersion(self, string uri) -> unsigned int

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in their derived class.

        Returns the package version associated with the given URI of this
        package.

        Parameter 'uri' is the string of URI that represents a versions of
        this package Returns the package version associated with the given URI
        of this package.

        """
        return _libsbml.SBMLExtension_getPackageVersion(self, *args)

    def getStringFromTypeCode(self, *args):
        """
        getStringFromTypeCode(self, int typeCode) -> char

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in their derived class.

        This method takes a type code of this package and returns a string
        representing the code.

        """
        return _libsbml.SBMLExtension_getStringFromTypeCode(self, *args)

    def getSBMLExtensionNamespaces(self, *args):
        """
        getSBMLExtensionNamespaces(self, string uri) -> SBMLNamespaces

        (NOTICE) Package developers MUST OVERRIDE this pure virtual function
        in  their derived class.

        Returns an SBMLExtensionNamespaces<class SBMLExtensionType> object
        (e.g. SBMLExtensionNamespaces<LayoutExtension> whose alias type is
        LayoutPkgNamespaces) corresponding to the given uri. Null will be
        returned if the given uri is not defined in the corresponding
        package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the package Returns an SBMLExtensionNamespaces<class
        SBMLExtensionType> object. None will be returned if the given uri is
        not defined in the corresponding  package.

        """
        return _libsbml.SBMLExtension_getSBMLExtensionNamespaces(self, *args)

    def setEnabled(self, *args):
        """
        setEnabled(self, bool isEnabled) -> bool

        enable/disable this package. Returned value is the result of this
        function.

        Parameter 'isEnabled' is the bool value: true (enabled) or false
        (disabled)

        Returns true if this function call succeeded, otherwise false is
        returned.

        """
        return _libsbml.SBMLExtension_setEnabled(self, *args)

    def isEnabled(self):
        """
        isEnabled(self) -> bool

        Check if this package is enabled (true) or disabled (false).

        Returns true if this package is enabled, otherwise false is returned.

        """
        return _libsbml.SBMLExtension_isEnabled(self)

    def removeL2Namespaces(self, *args):
        """
        removeL2Namespaces(self, XMLNamespaces xmlns)

        Removes the L2 Namespaces.

        This method should be overridden by all extensions that want to
        serialize to an L2 annotation.

        """
        return _libsbml.SBMLExtension_removeL2Namespaces(self, *args)

    def addL2Namespaces(self, *args):
        """
        addL2Namespaces(self, XMLNamespaces xmlns)

        Adds all L2 Extension namespaces to the namespace list.

        This method should be overridden by all extensions that want to
        serialize to an L2 annotation.

        """
        return _libsbml.SBMLExtension_addL2Namespaces(self, *args)

    def enableL2NamespaceForDocument(self, *args):
        """
        enableL2NamespaceForDocument(self, SBMLDocument doc)

        Adds the L2 Namespace to the document and enables the extension.

        If the extension supports serialization to SBML L2 Annotations, this
        method should be overrridden, so it will be activated.

        """
        return _libsbml.SBMLExtension_enableL2NamespaceForDocument(self, *args)

    def isInUse(self, *args):
        """
        isInUse(self, SBMLDocument doc) -> bool

        Indicates whether this extension is being used by the given
        SBMLDocument.

        The default implementation returns true. This means that when a
        document had this extension enabled, it will not be possible to
        convert it to L2 as we cannot make sure that the extension can be
        converted.

        Parameter 'doc' is the SBML document to test.

        Returns a boolean indicating whether the extension is actually being
        used by the document.

        """
        return _libsbml.SBMLExtension_isInUse(self, *args)

    def getErrorTableIndex(self, *args):
        """
        getErrorTableIndex(self, unsigned int errorId) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.SBMLExtension_getErrorTableIndex(self, *args)

    def getErrorIdOffset(self):
        """getErrorIdOffset(self) -> unsigned int"""
        return _libsbml.SBMLExtension_getErrorIdOffset(self)

    def getSeverity(self, *args):
        """getSeverity(self, unsigned int index, unsigned int pkgVersion) -> unsigned int"""
        return _libsbml.SBMLExtension_getSeverity(self, *args)

    def getCategory(self, *args):
        """getCategory(self, unsigned int index) -> unsigned int"""
        return _libsbml.SBMLExtension_getCategory(self, *args)

    def getMessage(self, *args):
        """getMessage(self, unsigned int index, unsigned int pkgVersion, string details) -> string"""
        return _libsbml.SBMLExtension_getMessage(self, *args)

    def getShortMessage(self, *args):
        """getShortMessage(self, unsigned int index) -> string"""
        return _libsbml.SBMLExtension_getShortMessage(self, *args)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

SBMLExtension_swigregister = _libsbml.SBMLExtension_swigregister
SBMLExtension_swigregister(SBMLExtension)

class SBMLExtensionException(_object):
    """
    Exceptions for libSBML extensions for SBML Level 3 packages.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLExtensionException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLExtensionException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string errmsg) -> SBMLExtensionException

        constructor

        """
        this = _libsbml.new_SBMLExtensionException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLExtensionException
    __del__ = lambda self : None;
SBMLExtensionException_swigregister = _libsbml.SBMLExtensionException_swigregister
SBMLExtensionException_swigregister(SBMLExtensionException)

class SBMLExtensionRegistry(_object):
    """
    Registry class in which extension packages are registered.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLExtensionRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLExtensionRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getInstance():
        """
        getInstance() -> SBMLExtensionRegistry

        Returns an instance (singleton) of the SBMLExtensionRegistry class.
        This function needs to be invoked when manipulating the
        SBMLExtensionRegistry class.

        Returns the instance of the SBMLExtensionRegistry object.

        """
        return _libsbml.SBMLExtensionRegistry_getInstance()

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
    def addExtension(self, *args):
        """
        addExtension(self, SBMLExtension ext) -> int

        Add the given SBMLExtension to this SBMLExtensionRegistry.

        Parameter 'ext' is the SBMLExtension object to be added.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_PKG_CONFLICT

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.SBMLExtensionRegistry_addExtension(self, *args)

    def getExtension(self, *args):
        """
        getExtension(self, string package) -> SBMLExtension

        Returns an SBMLExtension object with the given package URI or package
        name (string).

        Parameter 'package' is the URI or name of the package extension

        Returns a clone of the SBMLExtension object with the given package URI
        or name. The returned  extension is to be freed (i.e.: deleted) by the
        caller!

        """
        return _libsbml.SBMLExtensionRegistry_getExtension(self, *args)

    def removeL2Namespaces(self, *args):
        """
        removeL2Namespaces(self, XMLNamespaces xmlns)

        Remove all L2 Extension namespaces from the namespace list. This will
        call all  overriden SBMLExtension::removeL2Namespaces methods.

        """
        return _libsbml.SBMLExtensionRegistry_removeL2Namespaces(self, *args)

    def addL2Namespaces(self, *args):
        """
        addL2Namespaces(self, XMLNamespaces xmlns)

        adds all L2 Extension namespaces to the namespace list. This will call
        all  overriden SBMLExtension::addL2Namespaces methods.

        """
        return _libsbml.SBMLExtensionRegistry_addL2Namespaces(self, *args)

    def enableL2NamespaceForDocument(self, *args):
        """
        enableL2NamespaceForDocument(self, SBMLDocument doc)

        Enables all extensions that support serialization / deserialization
        with SBML Annotations.

        """
        return _libsbml.SBMLExtensionRegistry_enableL2NamespaceForDocument(self, *args)

    def disableUnusedPackages(self, *args):
        """
        disableUnusedPackages(self, SBMLDocument doc)

        Goes through all extensions in the list of plugins of the given
        document and disables all plugins that are not being used.

        """
        return _libsbml.SBMLExtensionRegistry_disableUnusedPackages(self, *args)

    def disablePackage(*args):
        """
        disablePackage(string package)

        Disables the package with the given URI / name.

        """
        return _libsbml.SBMLExtensionRegistry_disablePackage(*args)

    if _newclass:disablePackage = staticmethod(disablePackage)
    __swig_getmethods__["disablePackage"] = lambda x: disablePackage
    def isPackageEnabled(*args):
        """
        isPackageEnabled(string package) -> bool

        If the given 'package' is enabled, returns True; otherwise, returns
        False.

        Returns the status (enabled = true, disabled = false of the given
        package.

        """
        return _libsbml.SBMLExtensionRegistry_isPackageEnabled(*args)

    if _newclass:isPackageEnabled = staticmethod(isPackageEnabled)
    __swig_getmethods__["isPackageEnabled"] = lambda x: isPackageEnabled
    def enablePackage(*args):
        """
        enablePackage(string package)

        Enables the package with the given URI / name.

        """
        return _libsbml.SBMLExtensionRegistry_enablePackage(*args)

    if _newclass:enablePackage = staticmethod(enablePackage)
    __swig_getmethods__["enablePackage"] = lambda x: enablePackage
    def getNumExtension(self, *args):
        """
        getNumExtension(self, SBaseExtensionPoint extPoint) -> unsigned int

        Returns the number of SBMLExtension with the given extension point.

        Parameter 'extPoint' is the SBaseExtensionPoint

        Returns the number of SBMLExtension with the given extension point.

        """
        return _libsbml.SBMLExtensionRegistry_getNumExtension(self, *args)

    def setEnabled(self, *args):
        """
        setEnabled(self, string uri, bool isEnabled) -> bool

        Enable/disable the package with the given uri.

        Parameter 'uri' is the URI of the target package. Parameter
        'isEnabled' is the bool value corresponding to enabled (true) or
        disabled (false)

        Returns false will be returned if the given bool value is false  or
        the given package is not registered, otherwise true will be returned.

        """
        return _libsbml.SBMLExtensionRegistry_setEnabled(self, *args)

    def isEnabled(self, *args):
        """
        isEnabled(self, string uri) -> bool

        Checks if the extension with the given URI is enabled (true) or
        disabled (false)

        Parameter 'uri' is the URI of the target package.

        Returns false will be returned if the given package is disabled  or
        not registered, otherwise true will be returned.

        """
        return _libsbml.SBMLExtensionRegistry_isEnabled(self, *args)

    def isRegistered(self, *args):
        """
        isRegistered(self, string uri) -> bool

        Checks if the extension with the given URI is registered (true)  or
        not (false)

        Parameter 'uri' is the URI of the target package.

        Returns true will be returned if the package with the given URI is
        registered, otherwise false will be returned.

        """
        return _libsbml.SBMLExtensionRegistry_isRegistered(self, *args)

    def getNumRegisteredPackages():
        """
        getNumRegisteredPackages() -> unsigned int

        Returns the number of registered packages.

        Returns the number of registered packages.

        """
        return _libsbml.SBMLExtensionRegistry_getNumRegisteredPackages()

    if _newclass:getNumRegisteredPackages = staticmethod(getNumRegisteredPackages)
    __swig_getmethods__["getNumRegisteredPackages"] = lambda x: getNumRegisteredPackages
    def getRegisteredPackageName(*args):
        """
        getRegisteredPackageName(unsigned int index) -> string

        Returns the registered package name at the given index

        Parameter 'index' is zero based index of the package name to return

        Returns the package name with the given index or None

        """
        return _libsbml.SBMLExtensionRegistry_getRegisteredPackageName(*args)

    if _newclass:getRegisteredPackageName = staticmethod(getRegisteredPackageName)
    __swig_getmethods__["getRegisteredPackageName"] = lambda x: getRegisteredPackageName
SBMLExtensionRegistry_swigregister = _libsbml.SBMLExtensionRegistry_swigregister
SBMLExtensionRegistry_swigregister(SBMLExtensionRegistry)

def SBMLExtensionRegistry_getInstance():
  """
    SBMLExtensionRegistry_getInstance() -> SBMLExtensionRegistry

    Returns an instance (singleton) of the SBMLExtensionRegistry class.
    This function needs to be invoked when manipulating the
    SBMLExtensionRegistry class.

    Returns the instance of the SBMLExtensionRegistry object.

    """
  return _libsbml.SBMLExtensionRegistry_getInstance()

def SBMLExtensionRegistry_disablePackage(*args):
  """
    SBMLExtensionRegistry_disablePackage(string package)

    Disables the package with the given URI / name.

    """
  return _libsbml.SBMLExtensionRegistry_disablePackage(*args)

def SBMLExtensionRegistry_isPackageEnabled(*args):
  """
    SBMLExtensionRegistry_isPackageEnabled(string package) -> bool

    If the given 'package' is enabled, returns True; otherwise, returns
    False.

    Returns the status (enabled = true, disabled = false of the given
    package.

    """
  return _libsbml.SBMLExtensionRegistry_isPackageEnabled(*args)

def SBMLExtensionRegistry_enablePackage(*args):
  """
    SBMLExtensionRegistry_enablePackage(string package)

    Enables the package with the given URI / name.

    """
  return _libsbml.SBMLExtensionRegistry_enablePackage(*args)

def SBMLExtensionRegistry_getNumRegisteredPackages():
  """
    SBMLExtensionRegistry_getNumRegisteredPackages() -> unsigned int

    Returns the number of registered packages.

    Returns the number of registered packages.

    """
  return _libsbml.SBMLExtensionRegistry_getNumRegisteredPackages()

def SBMLExtensionRegistry_getRegisteredPackageName(*args):
  """
    SBMLExtensionRegistry_getRegisteredPackageName(unsigned int index) -> string

    Returns the registered package name at the given index

    Parameter 'index' is zero based index of the package name to return

    Returns the package name with the given index or None

    """
  return _libsbml.SBMLExtensionRegistry_getRegisteredPackageName(*args)

AST_PLUS = _libsbml.AST_PLUS
AST_MINUS = _libsbml.AST_MINUS
AST_TIMES = _libsbml.AST_TIMES
AST_DIVIDE = _libsbml.AST_DIVIDE
AST_POWER = _libsbml.AST_POWER
AST_INTEGER = _libsbml.AST_INTEGER
AST_REAL = _libsbml.AST_REAL
AST_REAL_E = _libsbml.AST_REAL_E
AST_RATIONAL = _libsbml.AST_RATIONAL
AST_NAME = _libsbml.AST_NAME
AST_NAME_AVOGADRO = _libsbml.AST_NAME_AVOGADRO
AST_NAME_TIME = _libsbml.AST_NAME_TIME
AST_CONSTANT_E = _libsbml.AST_CONSTANT_E
AST_CONSTANT_FALSE = _libsbml.AST_CONSTANT_FALSE
AST_CONSTANT_PI = _libsbml.AST_CONSTANT_PI
AST_CONSTANT_TRUE = _libsbml.AST_CONSTANT_TRUE
AST_LAMBDA = _libsbml.AST_LAMBDA
AST_FUNCTION = _libsbml.AST_FUNCTION
AST_FUNCTION_ABS = _libsbml.AST_FUNCTION_ABS
AST_FUNCTION_ARCCOS = _libsbml.AST_FUNCTION_ARCCOS
AST_FUNCTION_ARCCOSH = _libsbml.AST_FUNCTION_ARCCOSH
AST_FUNCTION_ARCCOT = _libsbml.AST_FUNCTION_ARCCOT
AST_FUNCTION_ARCCOTH = _libsbml.AST_FUNCTION_ARCCOTH
AST_FUNCTION_ARCCSC = _libsbml.AST_FUNCTION_ARCCSC
AST_FUNCTION_ARCCSCH = _libsbml.AST_FUNCTION_ARCCSCH
AST_FUNCTION_ARCSEC = _libsbml.AST_FUNCTION_ARCSEC
AST_FUNCTION_ARCSECH = _libsbml.AST_FUNCTION_ARCSECH
AST_FUNCTION_ARCSIN = _libsbml.AST_FUNCTION_ARCSIN
AST_FUNCTION_ARCSINH = _libsbml.AST_FUNCTION_ARCSINH
AST_FUNCTION_ARCTAN = _libsbml.AST_FUNCTION_ARCTAN
AST_FUNCTION_ARCTANH = _libsbml.AST_FUNCTION_ARCTANH
AST_FUNCTION_CEILING = _libsbml.AST_FUNCTION_CEILING
AST_FUNCTION_COS = _libsbml.AST_FUNCTION_COS
AST_FUNCTION_COSH = _libsbml.AST_FUNCTION_COSH
AST_FUNCTION_COT = _libsbml.AST_FUNCTION_COT
AST_FUNCTION_COTH = _libsbml.AST_FUNCTION_COTH
AST_FUNCTION_CSC = _libsbml.AST_FUNCTION_CSC
AST_FUNCTION_CSCH = _libsbml.AST_FUNCTION_CSCH
AST_FUNCTION_DELAY = _libsbml.AST_FUNCTION_DELAY
AST_FUNCTION_EXP = _libsbml.AST_FUNCTION_EXP
AST_FUNCTION_FACTORIAL = _libsbml.AST_FUNCTION_FACTORIAL
AST_FUNCTION_FLOOR = _libsbml.AST_FUNCTION_FLOOR
AST_FUNCTION_LN = _libsbml.AST_FUNCTION_LN
AST_FUNCTION_LOG = _libsbml.AST_FUNCTION_LOG
AST_FUNCTION_PIECEWISE = _libsbml.AST_FUNCTION_PIECEWISE
AST_FUNCTION_POWER = _libsbml.AST_FUNCTION_POWER
AST_FUNCTION_ROOT = _libsbml.AST_FUNCTION_ROOT
AST_FUNCTION_SEC = _libsbml.AST_FUNCTION_SEC
AST_FUNCTION_SECH = _libsbml.AST_FUNCTION_SECH
AST_FUNCTION_SIN = _libsbml.AST_FUNCTION_SIN
AST_FUNCTION_SINH = _libsbml.AST_FUNCTION_SINH
AST_FUNCTION_TAN = _libsbml.AST_FUNCTION_TAN
AST_FUNCTION_TANH = _libsbml.AST_FUNCTION_TANH
AST_LOGICAL_AND = _libsbml.AST_LOGICAL_AND
AST_LOGICAL_NOT = _libsbml.AST_LOGICAL_NOT
AST_LOGICAL_OR = _libsbml.AST_LOGICAL_OR
AST_LOGICAL_XOR = _libsbml.AST_LOGICAL_XOR
AST_RELATIONAL_EQ = _libsbml.AST_RELATIONAL_EQ
AST_RELATIONAL_GEQ = _libsbml.AST_RELATIONAL_GEQ
AST_RELATIONAL_GT = _libsbml.AST_RELATIONAL_GT
AST_RELATIONAL_LEQ = _libsbml.AST_RELATIONAL_LEQ
AST_RELATIONAL_LT = _libsbml.AST_RELATIONAL_LT
AST_RELATIONAL_NEQ = _libsbml.AST_RELATIONAL_NEQ
AST_QUALIFIER_BVAR = _libsbml.AST_QUALIFIER_BVAR
AST_QUALIFIER_LOGBASE = _libsbml.AST_QUALIFIER_LOGBASE
AST_QUALIFIER_DEGREE = _libsbml.AST_QUALIFIER_DEGREE
AST_SEMANTICS = _libsbml.AST_SEMANTICS
AST_CONSTRUCTOR_PIECE = _libsbml.AST_CONSTRUCTOR_PIECE
AST_CONSTRUCTOR_OTHERWISE = _libsbml.AST_CONSTRUCTOR_OTHERWISE
AST_UNKNOWN = _libsbml.AST_UNKNOWN
AST_ORIGINATES_IN_PACKAGE = _libsbml.AST_ORIGINATES_IN_PACKAGE
AST_TYPECODE_BASE = _libsbml.AST_TYPECODE_BASE
AST_TYPECODE_CN_BASE = _libsbml.AST_TYPECODE_CN_BASE
AST_TYPECODE_FUNCTION_BASE = _libsbml.AST_TYPECODE_FUNCTION_BASE
AST_TYPECODE_NUMBER = _libsbml.AST_TYPECODE_NUMBER
AST_TYPECODE_CN_INTEGER = _libsbml.AST_TYPECODE_CN_INTEGER
AST_TYPECODE_CN_EXPONENTIAL = _libsbml.AST_TYPECODE_CN_EXPONENTIAL
AST_TYPECODE_CN_RATIONAL = _libsbml.AST_TYPECODE_CN_RATIONAL
AST_TYPECODE_CN_REAL = _libsbml.AST_TYPECODE_CN_REAL
AST_TYPECODE_CONSTANT_NUMBER = _libsbml.AST_TYPECODE_CONSTANT_NUMBER
AST_TYPECODE_CI_NUMBER = _libsbml.AST_TYPECODE_CI_NUMBER
AST_TYPECODE_CSYMBOL = _libsbml.AST_TYPECODE_CSYMBOL
AST_TYPECODE_CSYMBOL_AVOGADRO = _libsbml.AST_TYPECODE_CSYMBOL_AVOGADRO
AST_TYPECODE_CSYMBOL_DELAY = _libsbml.AST_TYPECODE_CSYMBOL_DELAY
AST_TYPECODE_CSYMBOL_TIME = _libsbml.AST_TYPECODE_CSYMBOL_TIME
AST_TYPECODE_FUNCTION = _libsbml.AST_TYPECODE_FUNCTION
AST_TYPECODE_FUNCTION_UNARY = _libsbml.AST_TYPECODE_FUNCTION_UNARY
AST_TYPECODE_FUNCTION_BINARY = _libsbml.AST_TYPECODE_FUNCTION_BINARY
AST_TYPECODE_FUNCTION_NARY = _libsbml.AST_TYPECODE_FUNCTION_NARY
AST_TYPECODE_FUNCTION_PIECEWISE = _libsbml.AST_TYPECODE_FUNCTION_PIECEWISE
AST_TYPECODE_FUNCTION_LAMBDA = _libsbml.AST_TYPECODE_FUNCTION_LAMBDA
AST_TYPECODE_FUNCTION_CI = _libsbml.AST_TYPECODE_FUNCTION_CI
AST_TYPECODE_FUNCTION_SEMANTIC = _libsbml.AST_TYPECODE_FUNCTION_SEMANTIC
AST_TYPECODE_FUNCTION_QUALIFIER = _libsbml.AST_TYPECODE_FUNCTION_QUALIFIER
AST_TYPECODE_ASTNODE = _libsbml.AST_TYPECODE_ASTNODE

def representsNumber(*args):
  """representsNumber(int type) -> bool"""
  return _libsbml.representsNumber(*args)

def representsFunctionRequiringAtLeastTwoArguments(*args):
  """representsFunctionRequiringAtLeastTwoArguments(int type) -> bool"""
  return _libsbml.representsFunctionRequiringAtLeastTwoArguments(*args)

def getCoreTypeFromName(*args):
  """getCoreTypeFromName(string name) -> int"""
  return _libsbml.getCoreTypeFromName(*args)

def getNameFromCoreType(*args):
  """getNameFromCoreType(int type) -> char"""
  return _libsbml.getNameFromCoreType(*args)

def isCoreTopLevelMathMLFunctionNodeTag(*args):
  """isCoreTopLevelMathMLFunctionNodeTag(string name) -> bool"""
  return _libsbml.isCoreTopLevelMathMLFunctionNodeTag(*args)

def isCoreTopLevelMathMLNumberNodeTag(*args):
  """isCoreTopLevelMathMLNumberNodeTag(string name) -> bool"""
  return _libsbml.isCoreTopLevelMathMLNumberNodeTag(*args)
class ASTBase(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASTBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASTBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_ASTBase
    __del__ = lambda self : None;
    def deepCopy(self):
        """
        deepCopy(self) -> ASTBase

        Internal implementation method.

        """
        return _libsbml.ASTBase_deepCopy(self)

    def loadASTPlugins(self, *args):
        """
        loadASTPlugins(self, SBMLNamespaces sbmlns)

        Internal implementation method.

        """
        return _libsbml.ASTBase_loadASTPlugins(self, *args)

    def getType(self):
        """
        getType(self) -> ASTNodeType_t

        Internal implementation method.

        """
        return _libsbml.ASTBase_getType(self)

    def getExtendedType(self):
        """
        getExtendedType(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_getExtendedType(self)

    def isSetType(self):
        """
        isSetType(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isSetType(self)

    def setType(self, *args):
        """
        setType(self, ASTNodeType_t type) -> int
        setType(self, int type) -> int
        """
        return _libsbml.ASTBase_setType(self, *args)

    def isAvogadro(self):
        """
        isAvogadro(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isAvogadro(self)

    def isBoolean(self):
        """
        isBoolean(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isBoolean(self)

    def isBinaryFunction(self):
        """
        isBinaryFunction(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isBinaryFunction(self)

    def isConstant(self):
        """
        isConstant(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isConstant(self)

    def isExponential(self):
        """
        isExponential(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isExponential(self)

    def isCiNumber(self):
        """
        isCiNumber(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isCiNumber(self)

    def isConstantNumber(self):
        """
        isConstantNumber(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isConstantNumber(self)

    def isCSymbolFunction(self):
        """
        isCSymbolFunction(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isCSymbolFunction(self)

    def isCSymbolNumber(self):
        """
        isCSymbolNumber(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isCSymbolNumber(self)

    def isFunction(self):
        """
        isFunction(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isFunction(self)

    def isInteger(self):
        """
        isInteger(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isInteger(self)

    def isLambda(self):
        """
        isLambda(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isLambda(self)

    def isLogical(self):
        """
        isLogical(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isLogical(self)

    def isName(self):
        """
        isName(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isName(self)

    def isNaryFunction(self):
        """
        isNaryFunction(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isNaryFunction(self)

    def isNumber(self):
        """
        isNumber(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isNumber(self)

    def isOperator(self):
        """
        isOperator(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isOperator(self)

    def isPiecewise(self):
        """
        isPiecewise(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isPiecewise(self)

    def isQualifier(self):
        """
        isQualifier(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isQualifier(self)

    def isRational(self):
        """
        isRational(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isRational(self)

    def isReal(self):
        """
        isReal(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isReal(self)

    def isRelational(self):
        """
        isRelational(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isRelational(self)

    def isSemantics(self):
        """
        isSemantics(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isSemantics(self)

    def isUnaryFunction(self):
        """
        isUnaryFunction(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isUnaryFunction(self)

    def isUnknown(self):
        """
        isUnknown(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isUnknown(self)

    def isUserFunction(self):
        """
        isUserFunction(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isUserFunction(self)

    def isNumberNode(self):
        """
        isNumberNode(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isNumberNode(self)

    def isFunctionNode(self):
        """
        isFunctionNode(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isFunctionNode(self)

    def isTopLevelMathMLFunctionNodeTag(self, *args):
        """
        isTopLevelMathMLFunctionNodeTag(self, string name) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isTopLevelMathMLFunctionNodeTag(self, *args)

    def isTopLevelMathMLNumberNodeTag(self, *args):
        """
        isTopLevelMathMLNumberNodeTag(self, string name) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isTopLevelMathMLNumberNodeTag(self, *args)

    def write(self, *args):
        """
        write(self, XMLOutputStream stream)

        Internal implementation method.

        """
        return _libsbml.ASTBase_write(self, *args)

    def read(self, *args):
        """
        read(self, XMLInputStream stream, string reqd_prefix = "") -> bool
        read(self, XMLInputStream stream) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_read(self, *args)

    def addExpectedAttributes(self, *args):
        """
        addExpectedAttributes(self, ExpectedAttributes attributes, XMLInputStream stream)

        Internal implementation method.

        """
        return _libsbml.ASTBase_addExpectedAttributes(self, *args)

    def readAttributes(self, *args):
        """
        readAttributes(self, XMLAttributes attributes, ExpectedAttributes expectedAttributes, 
            XMLInputStream stream, XMLToken element) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_readAttributes(self, *args)

    def logError(self, *args):
        """
        logError(self, XMLInputStream stream, XMLToken element, SBMLErrorCode_t code, 
            string msg = "")
        logError(self, XMLInputStream stream, XMLToken element, SBMLErrorCode_t code)

        Internal implementation method.

        """
        return _libsbml.ASTBase_logError(self, *args)

    def isChild(self):
        """
        isChild(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isChild(self)

    def setIsChildFlag(self, *args):
        """
        setIsChildFlag(self, bool flag)

        Internal implementation method.

        """
        return _libsbml.ASTBase_setIsChildFlag(self, *args)

    def getClass(self):
        """
        getClass(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBase_getClass(self)

    def getId(self):
        """
        getId(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBase_getId(self)

    def getStyle(self):
        """
        getStyle(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBase_getStyle(self)

    def getParentSBMLObject(self):
        """
        getParentSBMLObject(self) -> SBase

        Internal implementation method.

        """
        return _libsbml.ASTBase_getParentSBMLObject(self)

    def isSetClass(self):
        """
        isSetClass(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isSetClass(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isSetId(self)

    def isSetStyle(self):
        """
        isSetStyle(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isSetStyle(self)

    def isSetParentSBMLObject(self):
        """
        isSetParentSBMLObject(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isSetParentSBMLObject(self)

    def setClass(self, *args):
        """
        setClass(self, string className) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_setClass(self, *args)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_setId(self, *args)

    def setStyle(self, *args):
        """
        setStyle(self, string style) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_setStyle(self, *args)

    def unsetClass(self):
        """
        unsetClass(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_unsetClass(self)

    def unsetId(self):
        """
        unsetId(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_unsetId(self)

    def unsetStyle(self):
        """
        unsetStyle(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_unsetStyle(self)

    def unsetParentSBMLObject(self):
        """
        unsetParentSBMLObject(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_unsetParentSBMLObject(self)

    def getFunction(self):
        """
        getFunction(self) -> ASTBase

        Internal implementation method.

        """
        return _libsbml.ASTBase_getFunction(self)

    def addPlugin(self, *args):
        """
        addPlugin(self, ASTBasePlugin plugin)

        Internal implementation method.

        """
        return _libsbml.ASTBase_addPlugin(self, *args)

    def getPlugin(self, *args):
        """
        getPlugin(self, string package) -> ASTBasePlugin
        getPlugin(self, string package) -> ASTBasePlugin
        getPlugin(self, unsigned int n) -> ASTBasePlugin
        getPlugin(self, unsigned int n) -> ASTBasePlugin
        """
        return _libsbml.ASTBase_getPlugin(self, *args)

    def getNumPlugins(self):
        """
        getNumPlugins(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.ASTBase_getNumPlugins(self)

    def getTypeFromName(self, *args):
        """
        getTypeFromName(self, string name) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_getTypeFromName(self, *args)

    def getNameFromType(self, *args):
        """
        getNameFromType(self, int type) -> char

        Internal implementation method.

        """
        return _libsbml.ASTBase_getNameFromType(self, *args)

    def isSetUserData(self):
        """
        isSetUserData(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isSetUserData(self)

    def unsetUserData(self):
        """
        unsetUserData(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_unsetUserData(self)

    def writeNodeOfType(self, *args):
        """
        writeNodeOfType(self, XMLOutputStream stream, int type, bool inChildNode = False)
        writeNodeOfType(self, XMLOutputStream stream, int type)

        Internal implementation method.

        """
        return _libsbml.ASTBase_writeNodeOfType(self, *args)

    def isWellFormedNode(self):
        """
        isWellFormedNode(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_isWellFormedNode(self)

    def hasCorrectNumberArguments(self):
        """
        hasCorrectNumberArguments(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_hasCorrectNumberArguments(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_getTypeCode(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBase_getPackageName(self)

    def setPackageName(self, *args):
        """
        setPackageName(self, string name) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBase_setPackageName(self, *args)

    def hasCnUnits(self):
        """
        hasCnUnits(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBase_hasCnUnits(self)

    def getUnitsPrefix(self):
        """
        getUnitsPrefix(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBase_getUnitsPrefix(self)

ASTBase_swigregister = _libsbml.ASTBase_swigregister
ASTBase_swigregister(ASTBase)

def representsFunction(*args):
  """
    representsFunction(int type, ASTBasePlugin plugin = None) -> bool
    representsFunction(int type) -> bool
    """
  return _libsbml.representsFunction(*args)

def representsUnaryFunction(*args):
  """
    representsUnaryFunction(int type, ASTBasePlugin plugin = None) -> bool
    representsUnaryFunction(int type) -> bool
    """
  return _libsbml.representsUnaryFunction(*args)

def representsBinaryFunction(*args):
  """
    representsBinaryFunction(int type, ASTBasePlugin plugin = None) -> bool
    representsBinaryFunction(int type) -> bool
    """
  return _libsbml.representsBinaryFunction(*args)

def representsNaryFunction(*args):
  """
    representsNaryFunction(int type, ASTBasePlugin plugin = None) -> bool
    representsNaryFunction(int type) -> bool
    """
  return _libsbml.representsNaryFunction(*args)

def representsQualifier(*args):
  """
    representsQualifier(int type, ASTBasePlugin plugin = None) -> bool
    representsQualifier(int type) -> bool
    """
  return _libsbml.representsQualifier(*args)

class ASTNode(ASTBase):
    """
    Abstract Syntax Tree (AST) representation of a mathematical
    expression.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    Abstract Syntax Trees (ASTs) are a simple kind of data structure used
    in libSBML for storing mathematical expressions.  The ASTNode is the
    cornerstone of libSBML's AST representation.  An AST 'node' represents
    the most basic, indivisible part of a mathematical formula and come in
    many types.  For instance, there are node types to represent numbers
    (with subtypes to distinguish integer, real, and rational numbers),
    names (e.g., constants or variables), simple mathematical operators,
    logical or relational operators and functions. LibSBML ASTs provide a
    canonical, in-memory representation for all mathematical formulas
    regardless of their original format (which might be MathML or might be
    text strings).

    @par An AST node in libSBML is a recursive structure containing a
    pointer to the node's value (which might be, for example, a number or
    a symbol) and a list of children nodes.  Each ASTNode node may have
    none, one, two, or more children depending on its type.  The following
    diagram illustrates an example of how the mathematical expression '1 +
    2' is represented as an AST with one plus node having two integer
    children nodes for the numbers 1 and 2.  The figure also shows the
    corresponding MathML representation:

    Example AST representation of a mathematical expression. Infix AST
    MathML 1 + 2 <math xmlns="http://www.w3.org/1998/Math/MathML">
    <apply>

    <cn type="integer"> 1 </cn>     <cn type="integer"> 2 </cn>
    </apply> </math>

    The following are other noteworthy points about the AST representation
    in libSBML:

       * A numerical value represented in MathML as a real number with an
    exponent is preserved as such in the AST node representation, even if
    the number could be stored in a float data type.  This is done so that
    when an SBML model is read in and then written out again, the amount
    of change introduced by libSBML to the SBML during the round-trip
    activity is minimized.

        * Rational numbers are represented in an AST node using separate
    numerator and denominator values.  These can be retrieved using the
    methods libsbml.ASTNode.getNumerator() and
    libsbml.ASTNode.getDenominator().

        * The children of an ASTNode are other ASTNode objects.  The list
    of children is empty for nodes that are leaf elements, such as
    numbers. For nodes that are actually roots of expression subtrees, the
    list of children points to the parsed objects that make up the rest of
    the expression.

    For many applications, the details of ASTs are irrelevant because the
    applications can use the text-string based translation functions such
    as libsbml.formulaToString(), libsbml.parseL3Formula() and
    libsbml.parseFormula().  If you find the complexity of using the AST
    representation of expressions too high for your purposes, perhaps the
    string-based functions will be more suitable.

    Finally, it is worth noting that the AST and MathML handling code in
    libSBML remains written in C, not C++.  (All of libSBML was originally
    written in C.)  Readers may occasionally wonder why some aspects are
    more C-like and less object oriented, and that's one of the reasons.

    The set of possible ASTNode types
    ......................................................................

    @par Every ASTNode has an associated type code to indicate whether,
    for example, it holds a number or stands for an arithmetic operator.

    The type is recorded as a value drawn from a set of static integer
    constants defined in the class libsbml. Their names begin with the
    characters AST_.

    The list of possible types is quite long, because it covers all the
    mathematical functions that are permitted in SBML. The values are
    shown in the following table:

    AST_CONSTANT_E AST_FUNCTION_COT AST_LOGICAL_NOT AST_CONSTANT_FALSE
    AST_FUNCTION_COTH AST_LOGICAL_OR AST_CONSTANT_PI AST_FUNCTION_CSC
    AST_LOGICAL_XOR AST_CONSTANT_TRUE AST_FUNCTION_CSCH AST_MINUS
    AST_DIVIDE AST_FUNCTION_DELAY AST_NAME AST_FUNCTION AST_FUNCTION_EXP
    AST_NAME_AVOGADRO (Level 3 only) AST_FUNCTION_ABS
    AST_FUNCTION_FACTORIAL AST_NAME_TIME AST_FUNCTION_ARCCOS
    AST_FUNCTION_FLOOR AST_PLUS AST_FUNCTION_ARCCOSH AST_FUNCTION_LN
    AST_POWER AST_FUNCTION_ARCCOT AST_FUNCTION_LOG AST_RATIONAL
    AST_FUNCTION_ARCCOTH AST_FUNCTION_PIECEWISE AST_REAL
    AST_FUNCTION_ARCCSC AST_FUNCTION_POWER AST_REAL_E AST_FUNCTION_ARCCSCH
    AST_FUNCTION_ROOT AST_RELATIONAL_EQ AST_FUNCTION_ARCSEC
    AST_FUNCTION_SEC AST_RELATIONAL_GEQ AST_FUNCTION_ARCSECH
    AST_FUNCTION_SECH AST_RELATIONAL_GT AST_FUNCTION_ARCSIN
    AST_FUNCTION_SIN AST_RELATIONAL_LEQ AST_FUNCTION_ARCSINH
    AST_FUNCTION_SINH AST_RELATIONAL_LT AST_FUNCTION_ARCTAN
    AST_FUNCTION_TAN AST_RELATIONAL_NEQ AST_FUNCTION_ARCTANH
    AST_FUNCTION_TANH AST_TIMES AST_FUNCTION_CEILING AST_INTEGER
    AST_UNKNOWN AST_FUNCTION_COS AST_LAMBDA AST_FUNCTION_COSH
    AST_LOGICAL_AND

    The types have the following meanings:

        * If the node is basic mathematical operator (e.g., '+'), then the
    node's type will be libsbml.AST_PLUS, libsbml.AST_MINUS,
    libsbml.AST_TIMES, libsbml.AST_DIVIDE, or libsbml.AST_POWER, as
    appropriate.

        * If the node is a predefined function or operator from SBML Level
    1 (in the string-based formula syntax used in Level 1) or SBML Level 2
    and 3 (in the subset of MathML used in SBML Levels 2 and 3), then the
    node's type will be either AST_FUNCTION_X, AST_LOGICAL_X, or
    AST_RELATIONAL_X, as appropriate.  (Examples:
    libsbml.AST_FUNCTION_LOG, libsbml.AST_RELATIONAL_LEQ.)

        * If the node refers to a user-defined function, the node's type
    will be libsbml.AST_FUNCTION (because it holds the name of the
    function).

        * If the node is a lambda expression, its type will be
    libsbml.AST_LAMBDA.

        * If the node is a predefined constant ('ExponentialE', 'Pi',
    'True' or 'False'), then the node's type will be
    libsbml.AST_CONSTANT_E, libsbml.AST_CONSTANT_PI,
    libsbml.AST_CONSTANT_TRUE, or libsbml.AST_CONSTANT_FALSE.

        * (Levels 2 and 3 only) If the node is the special MathML csymbol
    time, the value of the node will be libsbml.AST_NAME_TIME.  (Note,
    however, that the MathML csymbol delay is translated into a node of
    type libsbml.AST_FUNCTION_DELAY.  The difference is due to the fact
    that time is a single variable, whereas delay is actually a function
    taking arguments.)

        * (Level 3 only) If the node is the special MathML csymbol
    avogadro, the value of the node will be AST_NAME_AVOGADRO.

        * If the node contains a numerical value, its type will be
    libsbml.AST_INTEGER, libsbml.AST_REAL, libsbml.AST_REAL_E, or
    libsbml.AST_RATIONAL, as appropriate.

    Converting between ASTs and text strings
    ......................................................................

    The text-string form of mathematical formulas produced by
    libsbml.formulaToString() and read by libsbml.parseFormula() and
    libsbml.parseL3Formula() are in a simple C-inspired infix notation.  A
    formula in one of these two text-string formats can be handed to a
    program that understands SBML mathematical expressions, or used as
    part of a translation system.  The libSBML distribution comes with
    example programs in the 'examples' subdirectory that demonstrate such
    things as translating infix formulas into MathML and vice-versa.

    Please see the documentation for the functions libsbml.parseFormula()
    and libsbml.parseL3Formula() for detailed explanations of the infix
    syntax they accept.

      See also libsbml.parseL3Formula(), libsbml.parseFormula(),
    libsbml.formulaToString().

    """
    __swig_setmethods__ = {}
    for _s in [ASTBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASTNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ASTBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ASTNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ASTNodeType_t type) -> ASTNode
        __init__(self, SBMLNamespaces sbmlns, ASTNodeType_t type) -> ASTNode
        __init__(self, int type = AST_UNKNOWN) -> ASTNode
        __init__(self) -> ASTNode
        __init__(self, SBMLNamespaces sbmlns, int type = AST_UNKNOWN) -> ASTNode
        __init__(self, SBMLNamespaces sbmlns) -> ASTNode
        __init__(self, ASTNode orig) -> ASTNode

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ASTNode(Token_t *token)

        Creates a new ASTNode from the given Token.

        The resulting ASTNode will contain the same data as the given 'token'.

        Parameter 'token' is the token to use as a starting point for creating
        the ASTNode object.

        @par <hr> Method variant with the following signature:

            ASTNode(ASTNode orig)

        Copy constructor; creates a deep copy of the given ASTNode.

        Parameter 'orig' is the ASTNode to be copied.

        @par <hr> Method variant with the following signature:

            ASTNode(ASTNodeType_t type)

        Creates a new ASTNode.

        Unless the argument 'type' is given, the returned node will by default
        have a type of libsbml.AST_UNKNOWN.  If the type isn't supplied when
        caling this constructor, the caller should set the node type to
        something else as soon as possible using ASTNode.setType().

        Parameter 'type' is an optional type code indicating the type of node
        to create.

        Documentation note: The native C++ implementation of this method
        defines a default argument value. In the documentation generated for
        different libSBML language bindings, you may or may not see
        corresponding arguments in the method declarations. For example, in
        Java and C#, a default argument is handled by declaring two separate
        methods, with one of them having the argument and the other one
        lacking the argument. However, the libSBML documentation will be
        identical for both methods. Consequently, if you are reading this and
        do not see an argument even though one is described, please look for
        descriptions of other variants of this method near where this one
        appears in the documentation.

        """
        this = _libsbml.new_ASTNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ASTNode
    __del__ = lambda self : None;
    def freeName(self):
        """
        freeName(self) -> int

        Frees the name of this ASTNode and sets it to None.

        This operation is only applicable to ASTNode objects corresponding to
        operators, numbers, or libsbml.AST_UNKNOWN.  This method has no effect
        on other types of nodes.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

        """
        return _libsbml.ASTNode_freeName(self)

    def canonicalize(self):
        """
        canonicalize(self) -> bool

        Converts this ASTNode to a canonical form.

        The rules determining the canonical form conversion are as follows:

            * If the node type is libsbml.AST_NAME and the node name matches
        'ExponentialE', 'Pi', 'True' or 'False' the node type is converted to
        the corresponding AST_CONSTANT_X type.

           * If the node type is an libsbml.AST_FUNCTION and the node name
        matches an SBML (MathML) function name, logical operator name, or
        relational operator name, the node is converted to the corresponding
        AST_FUNCTION_X or AST_LOGICAL_X type.

        SBML Level 1 function names are searched first; thus, for example,
        canonicalizing log will result in a node type of
        libsbml.AST_FUNCTION_LN.  (See the SBML Level 1 Version 2
        Specification, Appendix C.)

        Sometimes, canonicalization of a node results in a structural
        conversion of the node as a result of adding a child.  For example, a
        node with the SBML Level 1 function name sqr and a single child node
        (the argument) will be transformed to a node of type
        libsbml.AST_FUNCTION_POWER with two children.  The first child will
        remain unchanged, but the second child will be an ASTNode of type
        libsbml.AST_INTEGER and a value of 2.  The function names that result
        in structural changes are: log10, sqr, and sqrt.

        Returns True if this node was successfully converted to canonical
        form, False otherwise.

        """
        return _libsbml.ASTNode_canonicalize(self)

    def addChild(self, *args):
        """
        addChild(self, ASTNode child) -> int

        Adds the given node as a child of this ASTNode.

        Child nodes are added in-order, from left to right.

        Parameter 'child' is the ASTNode instance to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        WARNING:

        Explicitly adding, removing or replacing children of an ASTNode object
        may change the structure of the mathematical formula it represents,
        and may even render the representation invalid.  Callers need to be
        careful to use this method in the context of other operations to
        create complete and correct formulas.  The method
        ASTNode.isWellFormedASTNode() may also be useful for checking the
        results of node modifications.

        See also isWellFormedASTNode().

        """
        if args[0] is not None: args[0].thisown = 0


        return _libsbml.ASTNode_addChild(self, *args)

    def prependChild(self, *args):
        """
        prependChild(self, ASTNode child) -> int

        Adds the given node as a child of this ASTNode.

        This method adds child nodes from right to left.

        Parameter 'child' is the ASTNode instance to add

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        WARNING:

        Explicitly adding, removing or replacing children of an ASTNode object
        may change the structure of the mathematical formula it represents,
        and may even render the representation invalid.  Callers need to be
        careful to use this method in the context of other operations to
        create complete and correct formulas.  The method
        ASTNode.isWellFormedASTNode() may also be useful for checking the
        results of node modifications.

        See also removeChild().

        """
        if args[0] is not None: args[0].thisown = 0


        return _libsbml.ASTNode_prependChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, unsigned int n) -> int

        Removes the nth child of this ASTNode object.

        Parameter 'n' is long the index of the child to remove

        Returns integer value indicating success/failure of the function. The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

        WARNING:

        Explicitly adding, removing or replacing children of an ASTNode object
        may change the structure of the mathematical formula it represents,
        and may even render the representation invalid.  Callers need to be
        careful to use this method in the context of other operations to
        create complete and correct formulas.  The method
        ASTNode.isWellFormedASTNode() may also be useful for checking the
        results of node modifications.

        See also insertChild().

        """
        return _libsbml.ASTNode_removeChild(self, *args)

    def replaceChild(self, *args):
        """
        replaceChild(self, unsigned int n, ASTNode newChild) -> int

        Replaces the nth child of this ASTNode with the given ASTNode.

        Parameter 'n' is long the index of the child to replace Parameter
        'newChild' is ASTNode to replace the nth child

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

           * libsbml.LIBSBML_INVALID_OBJECT

        WARNING:

        Explicitly adding, removing or replacing children of an ASTNode object
        may change the structure of the mathematical formula it represents,
        and may even render the representation invalid.  Callers need to be
        careful to use this method in the context of other operations to
        create complete and correct formulas.  The method
        ASTNode.isWellFormedASTNode() may also be useful for checking the
        results of node modifications.

        See also removeChild().

        """
        if args[1] is not None: args[1].thisown = 0


        return _libsbml.ASTNode_replaceChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(self, unsigned int n, ASTNode newChild) -> int

        Inserts the given ASTNode node at a given point in the current
        ASTNode's list of children.

        Parameter 'n' is long the index of the ASTNode being added Parameter
        'newChild' is ASTNode to insert as the nth child

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INDEX_EXCEEDS_SIZE

           * libsbml.LIBSBML_INVALID_OBJECT

        WARNING:

        Explicitly adding, removing or replacing children of an ASTNode object
        may change the structure of the mathematical formula it represents,
        and may even render the representation invalid.  Callers need to be
        careful to use this method in the context of other operations to
        create complete and correct formulas.  The method
        ASTNode.isWellFormedASTNode() may also be useful for checking the
        results of node modifications.

        See also removeChild().

        """
        if args[1] is not None: args[1].thisown = 0


        return _libsbml.ASTNode_insertChild(self, *args)

    def deepCopy(self):
        """
        deepCopy(self) -> ASTNode

        Creates a recursive copy of this node and all its children.

        Returns a copy of this ASTNode and all its children.  The caller owns
        the returned ASTNode and is responsible for deleting it.

        """
        return _libsbml.ASTNode_deepCopy(self)

    def getChild(self, *args):
        """
        getChild(self, unsigned int n) -> ASTNode

        Returns the child at index n of this node.

        Parameter 'n' is the index of the child to get

        Returns the nth child of this ASTNode or None if this node has no nth
        child (n >  ASTNode.getNumChildren() - 1).

        See also getRightChild().

        """
        return _libsbml.ASTNode_getChild(self, *args)

    def getLeftChild(self):
        """
        getLeftChild(self) -> ASTNode

        Returns the left child of this node.

        Returns the left child of this ASTNode.  This is equivalent to calling
        ASTNode.getChild() with an argument of 0.

        See also getRightChild().

        """
        return _libsbml.ASTNode_getLeftChild(self)

    def getRightChild(self):
        """
        getRightChild(self) -> ASTNode

        Returns the right child of this node.

        Returns the right child of this ASTNode, or None if this node has no
        right child.  If ASTNode.getNumChildren() > 1, then this is equivalent
        to:

          getChild( getNumChildren() - 1 );

        See also getChild().

        """
        return _libsbml.ASTNode_getRightChild(self)

    def getNumChildren(self):
        """
        getNumChildren(self) -> unsigned int

        Returns the number of children of this node.

        Returns the number of children of this ASTNode, or 0 is this node has
        no children.

        """
        return _libsbml.ASTNode_getNumChildren(self)

    def addSemanticsAnnotation(self, *args):
        """
        addSemanticsAnnotation(self, XMLNode sAnnotation) -> int

        Adds the given XMLNode as a MathML <semantics> element to this
        ASTNode.

        The <semantics> element is a MathML 2.0 construct that can be used to
        associate additional information with a MathML construct.  The
        construct can be used to decorate a MathML expressions with a sequence
        of one or more <annotation> or <annotation-xml> elements.  Each such
        element contains a pair of items; the first is a symbol that acts as
        an attribute or key, and the second is the value associated with the
        attribute or key.  Please refer to the MathML 2.0 documentation,
        particularly the Section 5.2, Semantic Annotations for more
        information about these constructs.

        Parameter 'sAnnotation' is the annotation to add.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        Note:

        Although SBML permits the use of the MathML <semantics> annotation
        construct, the truth is that this construct has so far (at this time
        of this writing, which is early 2014) seen very little use in SBML
        software.  The full implications of using these annotations are still
        poorly understood.  If you wish to use this construct, we urge you to
        discuss possible uses and applications on the SBML discussion lists,
        particularly sbml-discuss and/or sbml-interoperability.

        See also ASTNode.getSemanticsAnnotation().

        """
        if args[0] is not None: args[0].thisown = 0


        return _libsbml.ASTNode_addSemanticsAnnotation(self, *args)

    def getNumSemanticsAnnotations(self):
        """
        getNumSemanticsAnnotations(self) -> unsigned int

        Returns the number of MathML <semantics> element elements on this
        node.

        The <semantics> element is a MathML 2.0 construct that can be used to
        associate additional information with a MathML construct.  The
        construct can be used to decorate a MathML expressions with a sequence
        of one or more <annotation> or <annotation-xml> elements.  Each such
        element contains a pair of items; the first is a symbol that acts as
        an attribute or key, and the second is the value associated with the
        attribute or key.  Please refer to the MathML 2.0 documentation,
        particularly the Section 5.2, Semantic Annotations for more
        information about these constructs.

        Returns the number of annotations of this ASTNode.

        Note:

        Although SBML permits the use of the MathML <semantics> annotation
        construct, the truth is that this construct has so far (at this time
        of this writing, which is early 2014) seen very little use in SBML
        software.  The full implications of using these annotations are still
        poorly understood.  If you wish to use this construct, we urge you to
        discuss possible uses and applications on the SBML discussion lists,
        particularly sbml-discuss and/or sbml-interoperability.

        See also ASTNode.getSemanticsAnnotation().

        """
        return _libsbml.ASTNode_getNumSemanticsAnnotations(self)

    def getSemanticsAnnotation(self, *args):
        """
        getSemanticsAnnotation(self, unsigned int n) -> XMLNode

        Returns the nth MathML <semantics> element on this ASTNode.

        The <semantics> element is a MathML 2.0 construct that can be used to
        associate additional information with a MathML construct.  The
        construct can be used to decorate a MathML expressions with a sequence
        of one or more <annotation> or <annotation-xml> elements.  Each such
        element contains a pair of items; the first is a symbol that acts as
        an attribute or key, and the second is the value associated with the
        attribute or key.  Please refer to the MathML 2.0 documentation,
        particularly the Section 5.2, Semantic Annotations for more
        information about these constructs.

        Parameter 'n' is the index of the annotation to return.  Callers
        should use ASTNode.getNumSemanticsAnnotations() to first find out how
        many annotations there are.

        Returns the nth annotation inside this ASTNode, or None if this node
        has no nth annotation (n > ASTNode.getNumSemanticsAnnotations() - 1).

        Note:

        Although SBML permits the use of the MathML <semantics> annotation
        construct, the truth is that this construct has so far (at this time
        of this writing, which is early 2014) seen very little use in SBML
        software.  The full implications of using these annotations are still
        poorly understood.  If you wish to use this construct, we urge you to
        discuss possible uses and applications on the SBML discussion lists,
        particularly sbml-discuss and/or sbml-interoperability.

        See also ASTNode.getNumSemanticsAnnotations().

        """
        return _libsbml.ASTNode_getSemanticsAnnotation(self, *args)

    def getCharacter(self):
        """
        getCharacter(self) -> char

        Returns the value of this node as a single character.

        This function should be called only when ASTNode.getType() returns
        libsbml.AST_PLUS, libsbml.AST_MINUS, libsbml.AST_TIMES,
        libsbml.AST_DIVIDE or libsbml.AST_POWER.

        Returns the value of this ASTNode as a single character

        """
        return _libsbml.ASTNode_getCharacter(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the MathML id attribute value of this ASTNode.

        Returns the MathML id of this ASTNode.

        See also unsetId().

        """
        return _libsbml.ASTNode_getId(self)

    def getClass(self):
        """
        getClass(self) -> string

        Returns the MathML class attribute value of this ASTNode.

        Returns the MathML class of this ASTNode, if any exists.

        See also unsetClass().

        """
        return _libsbml.ASTNode_getClass(self)

    def getStyle(self):
        """
        getStyle(self) -> string

        Returns the MathML style attribute value of this ASTNode.

        Returns the MathML style of this ASTNode, if any exists.

        See also unsetStyle().

        """
        return _libsbml.ASTNode_getStyle(self)

    def getInteger(self):
        """
        getInteger(self) -> long

        Returns the value of this node as an integer.

        If this node type is libsbml.AST_RATIONAL, this method returns the
        value of the numerator.

        Returns the value of this ASTNode as a (long) integer.

        Note:

        This function should be called only when ASTNode.getType() returns
        libsbml.AST_INTEGER or libsbml.AST_RATIONAL. It will return 0 if the
        node type is not one of these, but since 0 may be a valid value for
        integer, it is important to be sure that the node type is one of the
        expected types in order to understand if 0 is the actual value.

        """
        return _libsbml.ASTNode_getInteger(self)

    def getName(self):
        """
        getName(self) -> char

        Returns the value of this node as a string.

        This function may be called on nodes that (1) are not operators, i.e.,
        nodes for which ASTNode.isOperator()  returns False, and (2) are not
        numbers, i.e., ASTNode.isNumber() returns False.

        Returns the value of this ASTNode as a string, or None if it is a node
        that does not have a name equivalent (e.g., if it is a number).

        """
        return _libsbml.ASTNode_getName(self)

    def getOperatorName(self):
        """
        getOperatorName(self) -> char

        Returns the value of this operator node as a string.

        This function may be called on nodes that are operators, i.e., nodes
        for which ASTNode.isOperator() returns True.

        Returns the name of this operator ASTNode as a string (or None if not
        an operator).

        """
        return _libsbml.ASTNode_getOperatorName(self)

    def getNumerator(self):
        """
        getNumerator(self) -> long

        Returns the value of the numerator of this node.

        This function should be called only when ASTNode.getType() returns
        libsbml.AST_RATIONAL or libsbml.AST_INTEGER.

        Returns the value of the numerator of this ASTNode.

        """
        return _libsbml.ASTNode_getNumerator(self)

    def getDenominator(self):
        """
        getDenominator(self) -> long

        Returns the value of the denominator of this node.

        Returns the value of the denominator of this ASTNode, or 1 if this
        node has no numerical value.

        Note:

        This function should be called only when ASTNode.getType() returns
        libsbml.AST_RATIONAL. It will return 1 if the node type is another
        type, but since 1 may be a valid value for the denominator of a
        rational number, it is important to be sure that the node type is the
        correct type in order to correctly interpret the returned value.

        """
        return _libsbml.ASTNode_getDenominator(self)

    def getReal(self):
        """
        getReal(self) -> double

        Returns the real-numbered value of this node.

        This function performs the necessary arithmetic if the node type is
        libsbml.AST_REAL_E (mantissa * 10^exponent) or libsbml.AST_RATIONAL
        (numerator / denominator).

        Returns the value of this ASTNode as a real (double), or 0 if this is
        not a node that holds a number.

        Note:

        This function should be called only when this ASTNode has a numerical
        value type.  It will return 0 if the node type is another type, but
        since 0 may be a valid value, it is important to be sure that the node
        type is the correct type in order to correctly interpret the returned
        value.

        """
        return _libsbml.ASTNode_getReal(self)

    def getMantissa(self):
        """
        getMantissa(self) -> double

        Returns the mantissa value of this node.

        If ASTNode.getType() returns libsbml.AST_REAL, this method is
        identical to ASTNode.getReal().

        Returns the value of the mantissa of this ASTNode, or 0 if this node
        is not a type that has a real-numbered value.

        Note:

        This function should be called only when ASTNode.getType() returns
        libsbml.AST_REAL_E, libsbml.AST_REAL or libsbml.AST_NAME_AVOGADRO.  It
        will return 0 if the node type is another type, but since 0 may be a
        valid value, it is important to be sure that the node type is the
        correct type in order to correctly interpret the returned value.

        """
        return _libsbml.ASTNode_getMantissa(self)

    def getExponent(self):
        """
        getExponent(self) -> long

        Returns the exponent value of this ASTNode.

        Returns the value of the exponent of this ASTNode, or 0 if this is not
        a type of node that has an exponent.

        Note:

        This function should be called only when ASTNode.getType() returns
        libsbml.AST_REAL_E. It will return 0 if the node type is another type,
        but since 0 may be a valid value, it is important to be sure that the
        node type is the correct type in order to correctly interpret the
        returned value.

        """
        return _libsbml.ASTNode_getExponent(self)

    def getPrecedence(self):
        """
        getPrecedence(self) -> int

        Returns the precedence of this node in the infix math syntax of SBML
        Level 1.

        For more information about the infix syntax, see the discussion about
        text string formulas at the top of the documentation for ASTNode.

        Returns an integer indicating the precedence of this ASTNode

        """
        return _libsbml.ASTNode_getPrecedence(self)

    def getType(self):
        """
        getType(self) -> ASTNodeType_t

        Returns the type of this ASTNode.

        The value returned is one of the Core AST type codes such as
        libsbml.AST_LAMBDA, libsbml.AST_PLUS, etc.

        Returns the type of this ASTNode.

        Note:

        The introduction of extensibility in SBML Level 3 brings with it a
        need to allow for the possibility of node types that are defined by
        plug-ins implementing SBML Level 3 packages.  If a given ASTNode is a
        construct created by a package rather than libSBML Core, then
        getType() will return libsbml.AST_ORIGINATES_IN_PACKAGE.  Callers can
        then obtain the package-specific type by calling getExtendedType().

        See also getExtendedType().

        """
        return _libsbml.ASTNode_getType(self)

    def getExtendedType(self):
        """
        getExtendedType(self) -> int

        Returns the extended type of this ASTNode.

        The type may be either a core integer type code or a value of a type
        code defined by an SBML Level 3 package.

        Returns the type of this ASTNode.

        Note:

        When the ASTNode is of a type from a package, the value returned by
        ASTNode.getType() will be libsbml.AST_ORIGINATES_IN_PACKAGE and
        getExtendedType() will return a package-specific type code. To find
        out the possible package-specific types (if any), please consult the
        documentation for the particular package.

        See also getType().

        """
        return _libsbml.ASTNode_getExtendedType(self)

    def getUnits(self):
        """
        getUnits(self) -> string

        Returns the units of this ASTNode.

        SBML Level 3 Version 1 introduced the ability to include an attribute
        sbml:units on MathML cn elements appearing in SBML mathematical
        formulas. The value of this attribute can be used to indicate the unit
        of measurement to be associated with the number in the content of the
        cn element. The value of this attribute must be the identifier of a
        unit of measurement defined by SBML or the enclosing Model. Here, the
        sbml portion is an XML namespace prefix that must be associated with
        the SBML namespace for SBML Level 3. The following example illustrates
        how this attribute can be used to define a number with value 10 and
        unit of measurement second:

        <math xmlns="http://www.w3.org/1998/Math/MathML"
        xmlns:sbml="http://www.sbml.org/sbml/level3/version1/core">
        <cn type="integer" sbml:units="second"> 10 </cn> </math>

         Returns the units of this ASTNode.

        Note:

        The sbml:units attribute is only available in SBML Level 3.  It may
        not be used in Levels 1-2 of SBML.

          See also libsbml.parseL3Formula().

        """
        return _libsbml.ASTNode_getUnits(self)

    def isAvogadro(self):
        """
        isAvogadro(self) -> bool

        Returns True if this node represents the predefined value for
        Avogadro's constant.

        SBML Level 3 introduced a predefined MathML <csymbol> for the value of
        Avogadro's constant.  LibSBML stores this internally as a node of type
        libsbml.AST_NAME_AVOGADRO. This method returns True if this node has
        that type.

        Returns True if this ASTNode is the special symbol avogadro, False
        otherwise.

          See also libsbml.parseL3Formula().

        """
        return _libsbml.ASTNode_isAvogadro(self)

    def isBoolean(self):
        """
        isBoolean(self) -> bool

        Returns True if this node has a Boolean type.

        The ASTNode objects that have Boolean types are the logical operators,
        relational operators, and the constants True or False.

        Returns True if this ASTNode has a Boolean type, False otherwise.

        """
        return _libsbml.ASTNode_isBoolean(self)

    def returnsBoolean(self, model = None):
        """
        returnsBoolean(self, Model model = None) -> bool
        returnsBoolean(self) -> bool

        Returns True if this node returns a Boolean value.

        This function looks at the whole ASTNode rather than just the top
        level of the ASTNode. Thus, it will consider return values from
        piecewise statements.  In addition, if this ASTNode uses a function
        call to a user-defined function, the return value of the corresponding
        FunctionDefinition object will be determined.  Note that this is only
        possible where the ASTNode can trace its parent Model; that is, the
        ASTNode must represent the <math> element of some SBML object that has
        already been added to an instance of an SBMLDocument.

        Parameter 'model' is the Model to use as context

        See also isBoolean().

        Returns true if this ASTNode returns a boolean, False otherwise.

        """
        return _libsbml.ASTNode_returnsBoolean(self, model)

    def isConstant(self):
        """
        isConstant(self) -> bool

        Returns True if this node represents a MathML constant.

        Examples of MathML constants include such things as pi.

        Returns True if this ASTNode is a MathML constant, False otherwise.

        Note:

        This function will also return True for nodes of type
        libsbml.AST_NAME_AVOGADRO in SBML Level 3.

        """
        return _libsbml.ASTNode_isConstant(self)

    def isFunction(self):
        """
        isFunction(self) -> bool

        Returns True if this node represents a function.

        The three types of functions in SBML are MathML functions (e.g.,
        abs()), SBML Level 1 functions (in the SBML Level 1 math syntax), and
        user-defined functions (using FunctionDefinition in SBML Level 2 and
        3).

        Returns True if this ASTNode is a function, False otherwise.

        """
        return _libsbml.ASTNode_isFunction(self)

    def isInfinity(self):
        """
        isInfinity(self) -> bool

        Returns True if this node represents the special IEEE 754 value for
        infinity.

        Returns True if this ASTNode is the special IEEE 754 value infinity,
        False otherwise.

        """
        return _libsbml.ASTNode_isInfinity(self)

    def isInteger(self):
        """
        isInteger(self) -> bool

        Returns True if this node contains an integer value.

        Returns True if this ASTNode is of type libsbml.AST_INTEGER, False
        otherwise.

        """
        return _libsbml.ASTNode_isInteger(self)

    def isLambda(self):
        """
        isLambda(self) -> bool

        Returns True if this node is a MathML <lambda>.

        Returns True if this ASTNode is of type libsbml.AST_LAMBDA, False
        otherwise.

        """
        return _libsbml.ASTNode_isLambda(self)

    def isLog10(self):
        """
        isLog10(self) -> bool

        Returns True if this node represents a log10 function.

        More precisely, this predicate returns True if the node type is
        libsbml.AST_FUNCTION_LOG with two children, the first of which is an
        libsbml.AST_INTEGER equal to 10.

        Returns True if the given ASTNode represents a log10() function, false
        otherwise.

          See also libsbml.parseL3Formula().

        """
        return _libsbml.ASTNode_isLog10(self)

    def isLogical(self):
        """
        isLogical(self) -> bool

        Returns True if this node is a MathML logical operator.

        The possible MathML logical operators are and, or, not, and xor.

        Returns True if this ASTNode is a MathML logical operator, False
        otherwise.

        """
        return _libsbml.ASTNode_isLogical(self)

    def isName(self):
        """
        isName(self) -> bool

        Returns True if this node is a user-defined variable name or the
        symbols for time or Avogadro's constant.

        SBML Levels 2 and 3 provides <csymbol> definitions for 'time' and
        'avogadro', which can be used to represent simulation time and
        Avogadro's constant in MathML.

        Returns True if this ASTNode is a user-defined variable name in SBML
        or the special symbols for time or Avogadro's constant. It returns
        false otherwise.

        """
        return _libsbml.ASTNode_isName(self)

    def isNaN(self):
        """
        isNaN(self) -> bool

        Returns True if this node represents the special IEEE 754 value 'not a
        number' (NaN).

        Returns True if this ASTNode is the special IEEE 754 NaN, False
        otherwise.

        """
        return _libsbml.ASTNode_isNaN(self)

    def isNegInfinity(self):
        """
        isNegInfinity(self) -> bool

        Returns True if this node represents the special IEEE 754 value
        'negative infinity'.

        Returns True if this ASTNode is the special IEEE 754 value negative
        infinity, False otherwise.

        """
        return _libsbml.ASTNode_isNegInfinity(self)

    def isNumber(self):
        """
        isNumber(self) -> bool

        Returns True if this node contains a number.

        Returns True if this ASTNode is a number, False otherwise.

        """
        return _libsbml.ASTNode_isNumber(self)

    def isOperator(self):
        """
        isOperator(self) -> bool

        Returns True if this node is a mathematical operator.

        The possible mathematical operators in the MathML syntax supported by
        SBML are +, -, *, / and ^ (power).

        Returns True if this ASTNode is an operator, False otherwise.

        """
        return _libsbml.ASTNode_isOperator(self)

    def isPiecewise(self):
        """
        isPiecewise(self) -> bool

        Returns True if this node is the MathML

        construct.

        Returns True if this ASTNode is a MathML piecewise function, False
        otherwise.

        """
        return _libsbml.ASTNode_isPiecewise(self)

    def isQualifier(self):
        """
        isQualifier(self) -> bool

        Predicate returning True if this node is a MathML qualifier.

        The MathML qualifier node types are bvar, degree, base, piece, and
        otherwise.

        Returns True if this ASTNode is a MathML qualifier, False otherwise.

        """
        return _libsbml.ASTNode_isQualifier(self)

    def isRational(self):
        """
        isRational(self) -> bool

        Returns True if this node represents a rational number.

        Returns True if this ASTNode is of type libsbml.AST_RATIONAL, false
        otherwise.

        """
        return _libsbml.ASTNode_isRational(self)

    def isReal(self):
        """
        isReal(self) -> bool

        Returns True if this node can represent a real number.

        More precisely, this node must be of one of the following types:
        libsbml.AST_REAL, libsbml.AST_REAL_E or libsbml.AST_RATIONAL.

        Returns True if the value of this ASTNode can represented as a real
        number, False otherwise.

        """
        return _libsbml.ASTNode_isReal(self)

    def isRelational(self):
        """
        isRelational(self) -> bool

        Returns True if this node is a MathML relational operator.

        The MathML relational operators are ==, >=, >, <, and !=.

        Returns True if this ASTNode is a MathML relational operator, false
        otherwise.

        """
        return _libsbml.ASTNode_isRelational(self)

    def isSemantics(self):
        """
        isSemantics(self) -> bool

        Predicate returning True if this node is a MathML semantics node.

        Returns True if this ASTNode is a MathML semantics node, False
        otherwise.

        """
        return _libsbml.ASTNode_isSemantics(self)

    def isSqrt(self):
        """
        isSqrt(self) -> bool

        Returns True if this node represents a square root function.

        More precisely, the node type must be libsbml.AST_FUNCTION_ROOT with
        two children, the first of which is an libsbml.AST_INTEGER node having
        value equal to 2.

        Returns True if the given ASTNode represents a sqrt() function, False
        otherwise.

        """
        return _libsbml.ASTNode_isSqrt(self)

    def isUMinus(self):
        """
        isUMinus(self) -> bool

        Returns True if this node is a unary minus operator.

        A node is defined as a unary minus node if it is of type
        libsbml.AST_MINUS and has exactly one child.

        For numbers, unary minus nodes can be 'collapsed' by negating the
        number.  In fact,  libsbml.parseFormula() does this during its parsing
        process, and  libsbml.parseL3Formula() has a configuration option that
        allows this behavior to be turned on or off.  However, unary minus
        nodes for symbols (libsbml.AST_NAME) cannot be 'collapsed', so this
        predicate function is necessary.

        Returns True if this ASTNode is a unary minus, False otherwise.

          See also libsbml.parseL3Formula().

        """
        return _libsbml.ASTNode_isUMinus(self)

    def isUPlus(self):
        """
        isUPlus(self) -> bool

        Returns True if this node is a unary plus operator.

        A node is defined as a unary plus node if it is of type
        libsbml.AST_PLUS and has exactly one child.

        Returns True if this ASTNode is a unary plus, False otherwise.

        """
        return _libsbml.ASTNode_isUPlus(self)

    def hasTypeAndNumChildren(self, *args):
        """
        hasTypeAndNumChildren(self, int type, unsigned int numchildren) -> int

        Returns True if this node is of a certain type with a specific number
        of children.

        Designed for use in cases where it is useful to discover if the node
        is a unary not or unary minus, or a times node with no children, etc.

        Parameter 'type' is the type of ASTNode sought. Parameter
        'numchildren' is the number of child nodes sought.

        Returns True if this ASTNode is has the specified type and number of
        children, False otherwise.

        """
        return _libsbml.ASTNode_hasTypeAndNumChildren(self, *args)

    def isUnknown(self):
        """
        isUnknown(self) -> bool

        Returns True if this node has an unknown type.

        'Unknown' nodes have the type libsbml.AST_UNKNOWN.  Nodes with unknown
        types will not appear in an ASTNode tree returned by libSBML based
        upon valid SBML input; the only situation in which a node with type
        libsbml.AST_UNKNOWN may appear is immediately after having create a
        new, untyped node using the ASTNode constructor.  Callers creating
        nodes should endeavor to set the type to a valid node type as soon as
        possible after creating new nodes.

        Returns True if this ASTNode is of type libsbml.AST_UNKNOWN, False
        otherwise.

        """
        return _libsbml.ASTNode_isUnknown(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Returns True if this node has a value for the MathML attribute id.

        Returns true if this ASTNode has an attribute id, False otherwise.

        See also unsetId().

        """
        return _libsbml.ASTNode_isSetId(self)

    def isSetClass(self):
        """
        isSetClass(self) -> bool

        Returns True if this node has a value for the MathML attribute class.

        Returns true if this ASTNode has an attribute class, False otherwise.

        See also unsetClass().

        """
        return _libsbml.ASTNode_isSetClass(self)

    def isSetStyle(self):
        """
        isSetStyle(self) -> bool

        Returns True if this node has a value for the MathML attribute style.

        Returns true if this ASTNode has an attribute style, False otherwise.

        See also unsetStyle().

        """
        return _libsbml.ASTNode_isSetStyle(self)

    def isSetUnits(self):
        """
        isSetUnits(self) -> bool

        Returns True if this node has the attribute sbml:units.

        SBML Level 3 Version 1 introduced the ability to include an attribute
        sbml:units on MathML cn elements appearing in SBML mathematical
        formulas. The value of this attribute can be used to indicate the unit
        of measurement to be associated with the number in the content of the
        cn element. The value of this attribute must be the identifier of a
        unit of measurement defined by SBML or the enclosing Model. Here, the
        sbml portion is an XML namespace prefix that must be associated with
        the SBML namespace for SBML Level 3. The following example illustrates
        how this attribute can be used to define a number with value 10 and
        unit of measurement second:

        <math xmlns="http://www.w3.org/1998/Math/MathML"
        xmlns:sbml="http://www.sbml.org/sbml/level3/version1/core">
        <cn type="integer" sbml:units="second"> 10 </cn> </math>

         Returns True if this ASTNode has units associated with it, False
        otherwise.

        Note:

        The sbml:units attribute is only available in SBML Level 3.  It may
        not be used in Levels 1-2 of SBML.

        See also setUnits().

        """
        return _libsbml.ASTNode_isSetUnits(self)

    def hasUnits(self):
        """
        hasUnits(self) -> bool

        Returns True if this node or any of its children nodes have the
        attribute sbml:units.

        SBML Level 3 Version 1 introduced the ability to include an attribute
        sbml:units on MathML cn elements appearing in SBML mathematical
        formulas. The value of this attribute can be used to indicate the unit
        of measurement to be associated with the number in the content of the
        cn element. The value of this attribute must be the identifier of a
        unit of measurement defined by SBML or the enclosing Model. Here, the
        sbml portion is an XML namespace prefix that must be associated with
        the SBML namespace for SBML Level 3. The following example illustrates
        how this attribute can be used to define a number with value 10 and
        unit of measurement second:

        <math xmlns="http://www.w3.org/1998/Math/MathML"
        xmlns:sbml="http://www.sbml.org/sbml/level3/version1/core">
        <cn type="integer" sbml:units="second"> 10 </cn> </math>

         Returns True if this ASTNode or its children has units associated
        with it, False otherwise.

        Note:

        The sbml:units attribute is only available in SBML Level 3.  It may
        not be used in Levels 1-2 of SBML.

        See also setUnits().

        """
        return _libsbml.ASTNode_hasUnits(self)

    def setCharacter(self, *args):
        """
        setCharacter(self, char value) -> int

        Sets the value of this ASTNode to the given character.  If character
        is one of +, -, *, / or ^, the node type will be set accordingly.  For
        all other characters, the node type will be set to
        libsbml.AST_UNKNOWN.

        Parameter 'value' is the character value to which the node's value
        should be set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ASTNode_setCharacter(self, *args)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the MathML attribute id of this ASTNode.

        Parameter 'id' is string representing the identifier.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also unsetId().

        """
        return _libsbml.ASTNode_setId(self, *args)

    def setClass(self, *args):
        """
        setClass(self, string className) -> int

        Sets the MathML attribute class of this ASTNode.

        Parameter 'className' is string representing the MathML class for this
        node.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

          See also unsetClass().

        """
        return _libsbml.ASTNode_setClass(self, *args)

    def setStyle(self, *args):
        """
        setStyle(self, string style) -> int

        Sets the MathML attribute style of this ASTNode.

        Parameter 'style' is string representing the identifier.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        See also unsetStyle().

        """
        return _libsbml.ASTNode_setStyle(self, *args)

    def setName(self, *args):
        """
        setName(self, char name) -> int

        Sets the value of this ASTNode to the given name.

        As a side effect, this ASTNode object's type will be reset to
        libsbml.AST_NAME if (and only if) the ASTNode was previously an
        operator (i.e., ASTNode.isOperator() returns True), number (i.e.,
        ASTNode.isNumber() returns True), or unknown. This allows names to be
        set for libsbml.AST_FUNCTION nodes and the like.

        Parameter 'name' is the string containing the name to which this
        node's value should be set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ASTNode_setName(self, *args)

    def setValue(self, *args):
        """
        setValue(self, long value) -> int
        setValue(self, long numerator, long denominator) -> int
        setValue(self, double value) -> int
        setValue(self, double mantissa, long exponent) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setValue(long numerator, long denominator)

        Sets the value of this ASTNode to the given rational.

        As a side effect, this operation sets the node type to
        libsbml.AST_RATIONAL.

        Parameter 'numerator' is the numerator value of the rational.
        Parameter 'denominator' is the denominator value of the rational.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        @par <hr> Method variant with the following signature:

            setValue(double mantissa, long exponent)

        Sets the value of this ASTNode to the given real (double)

        As a side effet, this operation sets the node type to
        libsbml.AST_REAL_E.

        Parameter 'mantissa' is the mantissa of this node's real-numbered
        value. Parameter 'exponent' is the exponent of this node's real-
        numbered value.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        @par <hr> Method variant with the following signature:

            setValue(int value)

        Sets the value of this ASTNode to the given integer

        As a side effect, this operation sets the node type to
        libsbml.AST_INTEGER.

        Parameter 'value' is the integer to which this node's value should be
        set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        @par <hr> Method variant with the following signature:

            setValue(double value)

        Sets the value of this ASTNode to the given real (double).

        As a side effect, this operation sets the node type to
        libsbml.AST_REAL.

        This is functionally equivalent to:

          setValue(value, 0);

        Parameter 'value' is the double format number to which this node's
        value should be set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        @par <hr> Method variant with the following signature:

            setValue(long value)

        Sets the value of this ASTNode to the given (long) integer

        As a side effect, this operation sets the node type to
        libsbml.AST_INTEGER.

        Parameter 'value' is the integer to which this node's value should be
        set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.ASTNode_setValue(self, *args)

    def setType(self, *args):
        """
        setType(self, ASTNodeType_t type) -> int
        setType(self, int type) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setType(int type)

        Sets the type of this ASTNode.

        This uses integer type codes, which may come from ASTNodeType_t or an
        enumeration of AST types in an SBML Level 3 package.

        Parameter 'type' is the integer representing the type to which this
        node should be set.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        A side-effect of doing this is that any numerical values previously
        stored in this node are reset to zero.

        See also setType(), setType().

        """
        return _libsbml.ASTNode_setType(self, *args)

    def setUnits(self, *args):
        """
        setUnits(self, string units) -> int

        Sets the units of this ASTNode to units.

        The units will be set only if this ASTNode object represents a MathML
        <cn> element, i.e., represents a number. Callers may use
        ASTNode.isNumber() to inquire whether the node is of that type.

        SBML Level 3 Version 1 introduced the ability to include an attribute
        sbml:units on MathML cn elements appearing in SBML mathematical
        formulas. The value of this attribute can be used to indicate the unit
        of measurement to be associated with the number in the content of the
        cn element. The value of this attribute must be the identifier of a
        unit of measurement defined by SBML or the enclosing Model. Here, the
        sbml portion is an XML namespace prefix that must be associated with
        the SBML namespace for SBML Level 3. The following example illustrates
        how this attribute can be used to define a number with value 10 and
        unit of measurement second:

        <math xmlns="http://www.w3.org/1998/Math/MathML"
        xmlns:sbml="http://www.sbml.org/sbml/level3/version1/core">
        <cn type="integer" sbml:units="second"> 10 </cn> </math>

         Parameter 'units' is string representing the unit identifier.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        Note:

        The sbml:units attribute is only available in SBML Level 3.  It may
        not be used in Levels 1-2 of SBML.

        See also hasUnits().

        """
        return _libsbml.ASTNode_setUnits(self, *args)

    def swapChildren(self, *args):
        """
        swapChildren(self, ASTNode that) -> int

        Swaps the children of this node with the children of another node.

        Parameter 'that' is the other node whose children should be used to
        replace this node's children.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ASTNode_swapChildren(self, *args)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Renames all the SIdRef attributes on this node and its child nodes.

        Parameter 'oldid' is the old identifier. Parameter 'newid' is the new
        identifier.

        """
        return _libsbml.ASTNode_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Renames all the UnitSIdRef attributes on this node and its child
        nodes.

        The only place UnitSIDRefs appear in MathML <cn> elements, so the
        effects of this method are limited to that.

        Parameter 'oldid' is the old identifier. Parameter 'newid' is the new
        identifier.

        """
        return _libsbml.ASTNode_renameUnitSIdRefs(self, *args)

    def replaceIDWithFunction(self, *args):
        """
        replaceIDWithFunction(self, string id, ASTNode function)

        Internal implementation method.

        """
        return _libsbml.ASTNode_replaceIDWithFunction(self, *args)

    def setIsChildFlag(self, *args):
        """
        setIsChildFlag(self, bool flag)

        Internal implementation method.

        """
        return _libsbml.ASTNode_setIsChildFlag(self, *args)

    def unsetUnits(self):
        """
        unsetUnits(self) -> int

        Unsets the units of this ASTNode.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ASTNode_unsetUnits(self)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the MathML id attribute of this ASTNode.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ASTNode_unsetId(self)

    def unsetClass(self):
        """
        unsetClass(self) -> int

        Unsets the MathML class attribute of this ASTNode.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ASTNode_unsetClass(self)

    def unsetStyle(self):
        """
        unsetStyle(self) -> int

        Unsets the MathML style attribute of this ASTNode.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ASTNode_unsetStyle(self)

    def setDefinitionURL(self, *args):
        """
        setDefinitionURL(self, XMLAttributes url) -> int
        setDefinitionURL(self, string url) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setDefinitionURL(XMLAttributes url)

        Sets the MathML attribute definitionURL.

        Parameter 'url' is the URL value for the definitionURL attribute.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        See also getDefinitionURLString(), getDefinitionURLString().

        """
        return _libsbml.ASTNode_setDefinitionURL(self, *args)

    def getDefinitionURL(self):
        """
        getDefinitionURL(self) -> XMLAttributes

        Returns the MathML definitionURL attribute value.

        Returns the value of the definitionURL attribute, in the form of a
        libSBML XMLAttributes object.

        See also getDefinitionURLString().

        """
        return _libsbml.ASTNode_getDefinitionURL(self)

    def replaceArgument(self, *args):
        """
        replaceArgument(self, string bvar, ASTNode arg)

        Replaces occurrences of a given name with a given ASTNode.

        For example, if the formula in this ASTNode is x + y, then the <bvar>
        is x and arg is an ASTNode representing the real value 3.  This method
        substitutes 3 for x within this ASTNode object.

        Parameter 'bvar' is a string representing the variable name to be
        substituted.

        Parameter 'arg' is an ASTNode representing the name/value/formula to
        use as a replacement.

        """
        return _libsbml.ASTNode_replaceArgument(self, *args)

    def getParentSBMLObject(self):
        """
        getParentSBMLObject(self) -> SBase

        Returns the parent SBML object.

        Returns the parent SBML object of this ASTNode.

        See also isSetParentSBMLObject().

        """
        return _libsbml.ASTNode_getParentSBMLObject(self)

    def unsetParentSBMLObject(self):
        """
        unsetParentSBMLObject(self) -> int

        Unsets the parent SBML object.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        See also getParentSBMLObject().

        """
        return _libsbml.ASTNode_unsetParentSBMLObject(self)

    def isSetParentSBMLObject(self):
        """
        isSetParentSBMLObject(self) -> bool

        Returns True if this node has a value for the parent SBML object.

        Returns true if this ASTNode has an parent SBML object set, False
        otherwise.

        See also getParentSBMLObject().

        """
        return _libsbml.ASTNode_isSetParentSBMLObject(self)

    def reduceToBinary(self):
        """
        reduceToBinary(self)

        Reduces this ASTNode to a binary tree.

        Example: if this ASTNode is and(x, y, z), then the  formula of the
        reduced node is and(and(x, y), z).  The operation replaces the formula
        stored in the current ASTNode object.

        """
        return _libsbml.ASTNode_reduceToBinary(self)

    def unsetUserData(self):
        """
        unsetUserData(self) -> int

        Unsets the user data of this node.

        The user data can be used by the application developer to attach
        custom information to the node.  In case of a deep copy, this
        attribute will passed as it is. The attribute will be never
        interpreted by this class.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ASTNode_unsetUserData(self)

    def isSetUserData(self):
        """
        isSetUserData(self) -> bool

        Returns True if this node has a user data object.

        Returns true if this ASTNode has a user data object set, False
        otherwise.

        """
        return _libsbml.ASTNode_isSetUserData(self)

    def isWellFormedASTNode(self):
        """
        isWellFormedASTNode(self) -> bool

        Returns True or False depending on whether this ASTNode is well-
        formed.

        Note:

        An ASTNode may be well-formed, with each node and its children having
        the appropriate number of children for the given type, but may still
        be invalid in the context of its use within an SBML model.

        Returns True if this ASTNode is well-formed, False otherwise.

        See also hasCorrectNumberArguments().

        """
        return _libsbml.ASTNode_isWellFormedASTNode(self)

    def hasCorrectNumberArguments(self):
        """
        hasCorrectNumberArguments(self) -> bool

        Returns True if this ASTNode has the correct number of children for
        its type.

        For example, an ASTNode with type libsbml.AST_PLUS expects 2 child
        nodes.

        Returns True if this ASTNode has the appropriate number of children
        for its type, False otherwise.

        Note:

        This function performs a check on the top-level node only.  Child
        nodes are not checked.

        See also isWellFormedASTNode().

        """
        return _libsbml.ASTNode_hasCorrectNumberArguments(self)

    def getDefinitionURLString(self):
        """
        getDefinitionURLString(self) -> string

        Returns the MathML definitionURL attribute value as a string.

        Returns the value of the definitionURL attribute, as a string.

        See also setDefinitionURL().

        """
        return _libsbml.ASTNode_getDefinitionURLString(self)

    def write(self, *args):
        """
        write(self, XMLOutputStream stream)

        Internal implementation method.

        """
        return _libsbml.ASTNode_write(self, *args)

    def read(self, *args):
        """
        read(self, XMLInputStream stream, string reqd_prefix = "") -> bool
        read(self, XMLInputStream stream) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTNode_read(self, *args)

    def writeNodeOfType(self, *args):
        """
        writeNodeOfType(self, XMLOutputStream stream, int type, bool inChildNode = False)
        writeNodeOfType(self, XMLOutputStream stream, int type)

        Internal implementation method.

        """
        return _libsbml.ASTNode_writeNodeOfType(self, *args)

    def getNumBvars(self):
        """
        getNumBvars(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.ASTNode_getNumBvars(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Internal implementation method.

        """
        return _libsbml.ASTNode_getTypeCode(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTNode_getPackageName(self)

    def __eq__(self, rhs):
      if ((self is None) and (rhs is None)): return True
      if ((self is None) or  (rhs is None)): return False
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return True
      return False

    def __ne__(self, rhs):
      if ((self is None) and (rhs is None)): return False
      if ((self is None) or  (rhs is None)): return True
      if (hasattr(self, 'this') and hasattr(rhs, 'this')):
        if (self.this == rhs.this): return False
      return True

    def getListOfNodes(self):
        """
        getListOfNodes(self) -> ASTNodeList

        Returns an ASTNodeList of all ASTNode objects.

        Unlike the equivalent method in the libSBML C/C++ interface, this method does
        not offer the ability to pass a predicate as an argument.  The method always
        returns the list of all ASTNode objects.

        @return the ASTNodeList of nodes for which the predicate returned @c true
        (non-zero).

        @warning The list returned is owned by the caller and should be deleted after
        the caller is done using it.  The ASTNode objects in the list; however, are
        <strong>not</strong> owned by the caller (as they still belong to the tree
        itself), and therefore should not be deleted.

        """
        return _libsbml.ASTNode_getListOfNodes(self)

ASTNode_swigregister = _libsbml.ASTNode_swigregister
ASTNode_swigregister(ASTNode)


def readMathMLFromString(*args):
  """
    readMathMLFromString(char xml) -> ASTNode_t

    Reads the MathML from the given XML string, constructs a corresponding
    abstract syntax tree, and returns a pointer to the root of the tree.

    Parameter 'xml' is a string containing a full MathML expression

    Returns the root of an AST corresponding to the given mathematical
    expression, otherwise None is returned if the given string is None or
    invalid.

    """
  return _libsbml.readMathMLFromString(*args)

def readMathMLFromStringWithNamespaces(*args):
  """
    readMathMLFromStringWithNamespaces(char xml, XMLNamespaces_t xmlns) -> ASTNode_t

    Reads the MathML from the given XML string, constructs a corresponding
    abstract syntax tree, and returns a pointer to the root of the tree.

    Parameter 'xml' is a string containing a full MathML expression
    Parameter 'xmlns' is a XMLNamespaces_t object containing namespaces
    that are considered active during the read e.g. an L3 package
    namespace

    Returns the root of an AST corresponding to the given mathematical
    expression, otherwise None is returned if the given string is None or
    invalid.

    """
  return _libsbml.readMathMLFromStringWithNamespaces(*args)

def writeMathMLToString(*args):
  """
    writeMathMLToString(ASTNode_t node) -> char

    Writes the given ASTNode_t (and its children) to a string as MathML,
    and returns the string.

    Parameter 'node' is the root of an AST to write out to the stream.

    Returns a string containing the written-out MathML representation of
    the given AST.

    Note:

    The string is owned by the caller and should be freed (with free())
    when no longer needed.  None is returned if the given argument is
    None.

    """
  return _libsbml.writeMathMLToString(*args)

def parseFormula(*args):
  """
    parseFormula(char formula) -> ASTNode_t

    Parses the given SBML formula and returns a representation of it as an
    Abstract Syntax Tree (AST).

    @par The text-string form of mathematical formulas produced by
    libsbml.formulaToString() and read by libsbml.parseFormula() use a
    simple C-inspired infix notation taken from SBML Level 1.  A formula
    in this text-string form therefore can be handed to a program that
    understands SBML Level 1 mathematical expressions, or used as part of
    a formula translation system.  The syntax is described in detail in
    the documentation for ASTNode.

    Note that this facility is provided as a convenience by libSBML -- the
    MathML standard does not actually define a 'string-form' equivalent to
    MathML expression trees, so the choice of formula syntax is somewhat
    arbitrary.  The approach taken by libSBML is to use the syntax defined
    by SBML Level 1 (which in fact used a text-string representation of
    formulas and not MathML).  This formula syntax is based mostly on C
    programming syntax, and may contain operators, function calls,
    symbols, and white space characters.  The following table provides the
    precedence rules for the different entities that may appear in formula
    strings.

    Token Operation Class Precedence Associates namesymbol
    referenceoperand6n/a (expression)expression groupingoperand6n/a
    f(...)function callprefix6left -negationunary5right ^powerbinary4left
    *multiplicationbinary3left /divisonbinary3left +additionbinary2left
    -subtractionbinary2left ,argument delimiterbinary1left A table of the
    expression operators and their precedence in the text-string format
    for mathematical expressions used by SBML_parseFormula().

    In the table above, operand implies the construct is an operand,
    prefix implies the operation is applied to the following arguments,
    unary implies there is one argument, and binary implies there are two
    arguments.  The values in the Precedence column show how the order of
    different types of operation are determined.  For example, the
    expression a * b + c is evaluated as (a * b) + c because the *
    operator has higher precedence.  The Associates column shows how the
    order of similar precedence operations is determined; for example, a -
    b + c is evaluated as (a - b) + c because the + and - operators are
    left-associative.

    The function call syntax consists of a function name, followed by
    optional white space, followed by an opening parenthesis token,
    followed by a sequence of zero or more arguments separated by commas
    (with each comma optionally preceded and/or followed by zero or more
    white space characters, followed by a closing parenthesis token.  The
    function name must be chosen from one of the pre-defined functions in
    SBML or a user-defined function in the model.  The following table
    lists the names of certain common mathematical functions; this table
    corresponds to Table 6 in the SBML Level 1 Version 2 specification:

    Name Args Formula or meaning Argument Constraints Result constraints
    absxabsolute value of x acosxarc cosine of x in radians-1.0 &#8804; x
    &#8804; 1.00 &#8804; acos(x) &#8804; &#960; asinxarc sine of x in
    radians-1.0 &#8804; x &#8804; 1.00 &#8804; asin(x) &#8804; &#960;
    atanxarc tangent of x in radians0 &#8804; atan(x) &#8804; &#960;
    ceilxsmallest number not less than x whose value is an exact integer
    cosxcosine of x expxe x, where e is the base of the natural logarithm
    floorxthe largest number not greater than x whose value is an exact
    integer logxnatural logarithm of xx > 0 log10xbase 10 logarithm of xx
    > 0 powx, yx y sqrxx2 sqrtx&#8730;xx > 0sqrt(x) &#8805; 0 sinxsine of
    x tanxtangent of xx &#8800; n*&#960;/2, for odd integer n The names of
    mathematical functions defined in the SBML Level 1 Version 2 text-
    string formula syntax.

    WARNING:

    There are differences between the symbols used to represent the common
    mathematical functions and the corresponding MathML token names.  This
    is a potential source of incompatibilities. Note in particular that in
    this text-string syntax, log(x) represents the natural logarithm,
    whereas in MathML, the natural logarithm is <ln/>.  Application
    writers are urged to be careful when translating between text forms
    and MathML forms, especially if they provide a direct text-string
    input facility to users of their software systems.

    WARNING:

    We urge developers to keep in mind that the text-string formula syntax
    is specific to SBML Level 1's C-like mathematical formula syntax.  In
    particular, it is not a general-purpose mathematical expression
    syntax.  LibSBML provides methods for parsing and transforming text-
    string math formulas back and forth from AST structures, but it is
    important to keep the system's limitations in mind.

    Parameter 'formula' is the text-string formula expression to be parsed

    Returns the root node of the AST corresponding to the 'formula', or
    None if an error occurred in parsing the formula

      See also libsbml.getDefaultL3ParserSettings().

    """
  return _libsbml.parseFormula(*args)

def formulaToString(*args):
  """
    formulaToString(ASTNode_t tree) -> char

    Converts an AST to a string representation of a formula using a syntax
    basically derived from SBML Level 1.

    @par The text-string form of mathematical formulas produced by
    libsbml.formulaToString() and read by libsbml.parseFormula() use a
    simple C-inspired infix notation taken from SBML Level 1.  A formula
    in this text-string form therefore can be handed to a program that
    understands SBML Level 1 mathematical expressions, or used as part of
    a formula translation system.  The syntax is described in detail in
    the documentation for ASTNode.

    Note that this facility is provided as a convenience by libSBML -- the
    MathML standard does not actually define a 'string-form' equivalent to
    MathML expression trees, so the choice of formula syntax is somewhat
    arbitrary.  The approach taken by libSBML is to use the syntax defined
    by SBML Level 1 (which in fact used a text-string representation of
    formulas and not MathML).  This formula syntax is based mostly on C
    programming syntax, and may contain operators, function calls,
    symbols, and white space characters.  The following table provides the
    precedence rules for the different entities that may appear in formula
    strings.

    Token Operation Class Precedence Associates namesymbol
    referenceoperand6n/a (expression)expression groupingoperand6n/a
    f(...)function callprefix6left -negationunary5right ^powerbinary4left
    *multiplicationbinary3left /divisonbinary3left +additionbinary2left
    -subtractionbinary2left ,argument delimiterbinary1left A table of the
    expression operators and their precedence in the text-string format
    for mathematical expressions used by SBML_parseFormula().

    In the table above, operand implies the construct is an operand,
    prefix implies the operation is applied to the following arguments,
    unary implies there is one argument, and binary implies there are two
    arguments.  The values in the Precedence column show how the order of
    different types of operation are determined.  For example, the
    expression a * b + c is evaluated as (a * b) + c because the *
    operator has higher precedence.  The Associates column shows how the
    order of similar precedence operations is determined; for example, a -
    b + c is evaluated as (a - b) + c because the + and - operators are
    left-associative.

    The function call syntax consists of a function name, followed by
    optional white space, followed by an opening parenthesis token,
    followed by a sequence of zero or more arguments separated by commas
    (with each comma optionally preceded and/or followed by zero or more
    white space characters, followed by a closing parenthesis token.  The
    function name must be chosen from one of the pre-defined functions in
    SBML or a user-defined function in the model.  The following table
    lists the names of certain common mathematical functions; this table
    corresponds to Table 6 in the SBML Level 1 Version 2 specification:

    Name Args Formula or meaning Argument Constraints Result constraints
    absxabsolute value of x acosxarc cosine of x in radians-1.0 &#8804; x
    &#8804; 1.00 &#8804; acos(x) &#8804; &#960; asinxarc sine of x in
    radians-1.0 &#8804; x &#8804; 1.00 &#8804; asin(x) &#8804; &#960;
    atanxarc tangent of x in radians0 &#8804; atan(x) &#8804; &#960;
    ceilxsmallest number not less than x whose value is an exact integer
    cosxcosine of x expxe x, where e is the base of the natural logarithm
    floorxthe largest number not greater than x whose value is an exact
    integer logxnatural logarithm of xx > 0 log10xbase 10 logarithm of xx
    > 0 powx, yx y sqrxx2 sqrtx&#8730;xx > 0sqrt(x) &#8805; 0 sinxsine of
    x tanxtangent of xx &#8800; n*&#960;/2, for odd integer n The names of
    mathematical functions defined in the SBML Level 1 Version 2 text-
    string formula syntax.

    WARNING:

    There are differences between the symbols used to represent the common
    mathematical functions and the corresponding MathML token names.  This
    is a potential source of incompatibilities. Note in particular that in
    this text-string syntax, log(x) represents the natural logarithm,
    whereas in MathML, the natural logarithm is <ln/>.  Application
    writers are urged to be careful when translating between text forms
    and MathML forms, especially if they provide a direct text-string
    input facility to users of their software systems.

    WARNING:

    We urge developers to keep in mind that the text-string formula syntax
    is specific to SBML Level 1's C-like mathematical formula syntax.  In
    particular, it is not a general-purpose mathematical expression
    syntax.  LibSBML provides methods for parsing and transforming text-
    string math formulas back and forth from AST structures, but it is
    important to keep the system's limitations in mind.

    Parameter 'tree' is the AST to be converted.

    Returns the formula from the given AST as an SBML Level 1 text-string
    mathematical formula.  The caller owns the returned string and is
    responsible for freeing it when it is no longer needed.

      See also libsbml.getDefaultL3ParserSettings().

    """
  return _libsbml.formulaToString(*args)

def parseL3Formula(*args):
  """
    parseL3Formula(char formula) -> ASTNode_t

    Parses the given mathematical formula and returns a representation of
    it as an Abstract Syntax Tree (AST).

    @par The text-string form of mathematical formulas read by the
    functions libsbml.formulaToL3String() and libsbml.parseL3Formula() are
    expanded versions of the formats produced and read by
    libsbml.formulaToString() and libsbml.parseFormula(), respectively.
    The latter two libSBML functions were originally developed to support
    conversion between SBML Levels 1 and 2, and were focused on the syntax
    of mathematical formulas used in SBML Level 1.  With time, and the use
    of MathML in SBML Levels 2 and 3, it became clear that supporting
    Level 2 and 3's expanded mathematical syntax would be useful for
    software developers. To maintain backwards compatibility, the original
    libsbml.formulaToString() and libsbml.parseFormula() have been left
    untouched, and instead, the new functionality is provided in the form
    of libsbml.parseL3Formula() and libsbml.formulaToL3String().

    The following are the differences in the formula syntax supported by
    the 'L3' versions of the formula parsers and formatters, compared to
    what is supported by libsbml.parseFormula() and
    libsbml.formulaToL3String():

        * Units may be asociated with bare numbers, using the following
    syntax:

    number unit

    The number may be in any form (an integer, real, or rational number),
    and the  unit must conform to the syntax of an SBML identifier
    (technically, the type defined as SId in the SBML specifications).
    The whitespace between number and unit is optional.

        * The Boolean function symbols &&, ||, !, and != may be used.

        * The modulo operation is allowed as the symbol @ and will produce
    a piecewise function in the MathML.

        * All inverse trigonometric functions may be defined in the infix
    either using arc as a prefix or simply a; in other words, both arccsc
    and acsc are interpreted as the operator arccosecant defined in
    MathML.  (Many functions in the SBML Level 1 infix-notation parser
    implemented by libsbml.parseFormula() are defined this way as well,
    but not all.)

        * The following expression is parsed as a rational number instead
    of as a numerical division:

      (integer/integer)

    No spaces are allowed in this construct; in other words, "(3 / 4)"
    will be parsed into the MathML <divide> construct rather than a
    rational number.  The  general number syntax allows you to assign
    units to a rational number, e.g., "(3/4) ml".  (If the string is a
    division, units are not interpreted in this way.)

        * Various settings may be altered by using an L3ParserSettings
    object in conjunction with the functions
    libsbml.parseL3FormulaWithSettings() and libsbml.formulaToL3String(),
    including the following:

    * The function log with a single argument ("log(x)")  can be parsed
    as log10(x), ln(x), or treated as an error, as desired.

       * Unary minus signs can be collapsed or preserved; that is,
    sequential pairs of unary minuses (e.g., "- -3") can be removed from
    the input entirely and single unary minuses can be incorporated into
    the number node, or all minuses can be preserved in the AST node
    structure.

       * Parsing of units embedded in the input string can be turned on
    and off.

       * The string avogadro can be parsed as a MathML csymbol or as an
    identifier.

       * A Model object may optionally be provided to the parser using the
    variant function call libsbml.SBML_parseL3FormulaWithModel() or stored
    in a L3ParserSettings object passed to the variant function
    libsbml.parseL3FormulaWithSettings(). When a Model object is provided,
    identifiers (values of type SId) from that model are used in
    preference to pre-defined MathML definitions.  More precisely, the
    Model entities whose identifiers will shadow identical symbols in the
    mathematical formula are: Species, Compartment, Parameter, Reaction,
    and SpeciesReference.  For instance, if the parser is given a Model
    containing a Species with the identifier "pi", and the formula to be
    parsed is "3*pi", the MathML produced will contain the construct
    <ci> pi </ci> instead of the construct

    .      * Similarly, when a Model object is provided, SId values of
    user-defined functions present in the model will be used
    preferentially over pre-defined MathML functions.  For example, if the
    passed-in Model contains a FunctionDefinition with the identifier
    "sin", that function will be used instead of the predefined MathML
    function <sin/>. These configuration settings cannot be changed using
    the basic parser and formatter functions, but can be changed on a per-
    call basis by using the alternative functions
    libsbml.parseL3FormulaWithSettings() and
    libsbml.formulaToL3StringWithSettings().

    The parser function libsbml.parseL3FormulaWithSettings() returns the
    root node of the AST corresponding to the formula given as the
    argument.  If the formula contains a syntax error, the function will
    return None instead.  When None is returned, an error is set;
    information about the error can be retrieved using
    libsbml.getLastParseL3Error().

    Note that this facility and the SBML Level 1-based
    libsbml.parseFormula() are provided as a convenience by libSBML -- the
    MathML standard does not actually define a 'string-form' equivalent to
    MathML expressions, so the choice of formula syntax is arbitrary.  The
    approach taken by libSBML is to start with the syntax defined by SBML
    Level 1 (which in fact used a text-string representation of formulas,
    and not MathML), and expand it to include the above functionality.
    This formula syntax is based mostly on C programming syntax, and may
    contain operators, function calls, symbols, and white space
    characters.  The following table provides the precedence rules for the
    different entities that may appear in formula strings.

    Token Operation Class Precedence Associates namesymbol
    referenceoperand8n/a (expression)expression groupingoperand8n/a
    f(...)function callprefix8left ^powerbinary7left -, !negation and
    boolean 'not'unary6right *, /, multiplication, division, and
    modulobinary5left +, -addition and subtractionbinary4left ==, <, >,
    <=, >=, !=boolean equality, inequality, and comparisonbinary3left &&,
    ||boolean 'and' and 'or'binary2left ,argument delimiterbinary1left A
    table of the expression operators and their precedence in the text-
    string format for mathematical expressions used by
    SBML_parseL3Formula().

    In the table above, operand implies the construct is an operand,
    prefix implies the operation is applied to the following arguments,
    unary implies there is one argument, and binary implies there are two
    arguments.  The values in the Precedence column show how the order of
    different types of operation are determined.  For example, the
    expression a + b * c is evaluated as a + (b * c)  because the *
    operator has higher precedence.  The Associates column shows how the
    order of similar precedence operations is determined; for example, a
    && b || c is evaluated as (a && b) || c because the && and ||
    operators are left-associative and have the same precedence.

    The function call syntax consists of a function name, followed by
    optional white space, followed by an opening parenthesis token,
    followed by a sequence of zero or more arguments separated by commas
    (with each comma optionally preceded and/or followed by zero or more
    white space characters), followed by a closing parenthesis token.  The
    function name must be chosen from one of the pre-defined functions in
    SBML or a user-defined function in the model.  The following table
    lists the names of certain common mathematical functions; this table
    corresponds to Table 6 in the SBML Level 1 Version 2 specification
    with additions based on the functions added in SBML Level 2 and Level
    3:

    Name Argument(s) Formula or meaning Argument Constraints Result
    constraints abs x Absolute value of x. acos, arccos x Arccosine of x
    in radians. -1.0 &#8804; x &#8804; 1.0 0 &#8804; acos(x) &#8804;
    &#960; acosh, arccosh x Hyperbolic arccosine of x in radians. acot,
    arccot x Arccotangent of x in radians. acoth, arccoth x Hyperbolic
    arccotangent of x in radians. acsc, arccsc x Arccosecant of x in
    radians. acsch, arccsch x Hyperbolic arccosecant of x in radians.
    asec, arcsec x Arcsecant of x in radians. asech, arcsech x Hyperbolic
    arcsecant of x in radians. asin, arcsin xArcsine of x in radians. -1.0
    &#8804; x &#8804; 1.0 0 &#8804; asin(x) &#8804; &#960; atan, arctan x
    Arctangent of x in radians. 0 &#8804; atan(x) &#8804; &#960; atanh,
    arctanh x Hyperbolic arctangent of x in radians. ceil, ceiling x
    Smallest number not less than x whose value is an exact integer. cos x
    Cosine of x cosh x Hyperbolic cosine of x. cot x Cotangent of x. coth
    x Hyperbolic cotangent of x. csc x Cosecant of x. csch x Hyperbolic
    cosecant of x. delay x, y The value of x at y time units in the past.
    factorial n The factorial of n. Factorials are defined by n! =
    n*(n-1)* ... * 1. n must be an integer. exp x e x, where e is the base
    of the natural logarithm. floor x The largest number not greater than
    x whose value is an exact integer. ln x Natural logarithm of x. x > 0
    log x By default, the base 10 logarithm of x, but can be set to be the
    natural logarithm of x, or to be an illegal construct. x > 0 log x, y
    The base x logarithm of y. y > 0 log10 x Base 10 logarithm of x. x > 0
    piecewise x1, y1, [x2, y2,] [...] [z] A piecewise function: if (y1),
    x1. Otherwise, if (y2), x2, etc. Otherwise, z. y1, y2, y3 [etc] must
    be boolean pow, power x, y x y. root b, x The root base b of x. sec x
    Secant of x. sech x Hyperbolic secant of x. sqr x x2. sqrt x &#8730;x.
    x > 0 sqrt(x) &#8805; 0 sin x Sine of x. sinh x Hyperbolic sine of x.
    tan x Tangent of x. x &#8800; n*&#960;/2, for odd integer n tanh x
    Hyperbolic tangent of x. and x, y, z... Boolean and(x, y, z...):
    returns true if all of its arguments are true. Note that 'and' is an
    n-ary function, taking 0 or more arguments, and that and() returns
    'true'. All arguments must be boolean not x Boolean not(x) x must be
    boolean or x, y, z... Boolean or(x, y, z...): returns true if at least
    one of its arguments is true. Note that 'or' is an n-ary function,
    taking 0 or more arguments, and that or() returns 'false'. All
    arguments must be boolean xor x, y, z... Boolean xor(x, y, z...):
    returns true if an odd number of its arguments is true. Note that
    'xor' is an n-ary function, taking 0 or more arguments, and that xor()
    returns 'false'. All arguments must be boolean eq x, y, z... Boolean
    eq(x, y, z...): returns true if all arguments are equal. Note that
    'eq' is an n-ary function, but must take 2 or more arguments. geq x,
    y, z... Boolean geq(x, y, z...): returns true if each argument is
    greater than or equal to the argument following it. Note that 'geq' is
    an n-ary function, but must take 2 or more arguments. gt x, y, z...
    Boolean gt(x, y, z...): returns true if each argument is greater than
    the argument following it. Note that 'gt' is an n-ary function, but
    must take 2 or more arguments. leq x, y, z... Boolean leq(x, y, z...):
    returns true if each argument is less than or equal to the argument
    following it. Note that 'leq' is an n-ary function, but must take 2 or
    more arguments. lt x, y, z... Boolean lt(x, y, z...): returns true if
    each argument is less than the argument following it. Note that 'lt'
    is an n-ary function, but must take 2 or more arguments. neq x, y
    Boolean x != y: returns true unless x and y are equal. plus x, y, z...
    x + y + z + ...: The sum of the arguments of the function. Note that
    'plus' is an n-ary function taking 0 or more arguments, and that
    'plus()' returns 0. times x, y, z... x * y * z * ...: The product of
    the arguments of the function. Note that 'times' is an n-ary function
    taking 0 or more arguments, and that 'times()' returns 1. minus x, y x
    - y. divide x, y x / y. The names of mathematical functions defined in
    the text-string formula syntax understood by SBML_parseL3Formula() and
    related functions.

    Note that the manner in which the 'L3' versions of the formula parser
    and formatter interpret the function "log" can be changed.  To do
    so, callers should use the function
    libsbml.parseL3FormulaWithSettings()  and pass it an appropriate
    L3ParserSettings object.  By default, unlike the SBML Level 1 parser
    implemented by libsbml.parseFormula(), the string "log" is
    interpreted as the base 10 logarithm, and not as the natural
    logarithm.  However, you can change the interpretation to be base-10
    log, natural log, or as an error; since the name 'log' by itself is
    ambiguous, you require that the parser uses log10 or ln instead, which
    are more clear.  Please refer to libsbml.parseL3FormulaWithSettings().

    In addition, the following symbols will be translated to their MathML
    equivalents, if no symbol with the same SId identifier string exists
    in the Model object provided:

    Name Meaning MathML true The boolean value true <true/> false The
    boolean value false <false/> pi The mathematical constant pi  avogadro
    The numerical value of Avogadro's constant, as defined in the SBML
    specification <csymbol encoding="text"
    definitionURL="http://www.sbml.org/sbml/symbols/avogadro"> avogadro
    </csymbol/> time Simulation time as defined in SBML <csymbol
    encoding="text"
    definitionURL="http://www.sbml.org/sbml/symbols/time"> time
    </csymbol/> inf or infinity The mathematical constant "infinity"
    <infinity/> nan or notanumber The mathematical concept "not a
    number" <notanumber/> The names of mathematical symbols defined in
    the text-string formula syntax understood by SBML_parseL3Formula() and
    related functions.

    Note that whether the string "avogadro" is parsed as an AST node of
    type libsbml.AST_NAME_AVOGADRO or libsbml.AST_NAME is configurable;
    use the alternate version of this function, called
    libsbml.parseL3FormulaWithSettings().  This functionality is provided
    because SBML Level 2 models may not use libsbml.AST_NAME_AVOGADRO AST
    nodes. Parameter 'formula' is the text-string formula expression to be
    parsed

    Returns the root node of an AST representing the mathematical formula,
    or None if an error occurred while parsing the formula.  When None is
    returned, an error is recorded internally; information about the error
    can be retrieved using  libsbml.getLastParseL3Error().

      See also libsbml.getDefaultL3ParserSettings().

    """
  return _libsbml.parseL3Formula(*args)

def parseL3FormulaWithModel(*args):
  """
    parseL3FormulaWithModel(char formula, Model_t model) -> ASTNode_t

    Parses the given mathematical formula using specific a specific Model
    to resolve symbols, and returns an Abstract Syntax Tree (AST)
    representation of the result.

    This is identical to libsbml.parseL3Formula(), except that this
    function uses the given model in the argument 'model' to check against
    identifiers that appear in the 'formula'.

    For more details about the parser, please see the definition of the
    function libsbml.parseL3Formula().

    Parameter 'formula' is the mathematical formula expression to be
    parsed

    Parameter 'model' is the Model object to use for checking identifiers

    Returns the root node of an AST representing the mathematical formula,
    or None if an error occurred while parsing the formula.  When None is
    returned, an error is recorded internally; information about the error
    can be retrieved using libsbml.getLastParseL3Error().

      See also libsbml.getDefaultL3ParserSettings().

    """
  return _libsbml.parseL3FormulaWithModel(*args)

def parseL3FormulaWithSettings(*args):
  """
    parseL3FormulaWithSettings(char formula, L3ParserSettings_t settings) -> ASTNode_t

    Parses the given mathematical formula using specific parser settings
    and returns an Abstract Syntax Tree (AST) representation of the
    result.

    This is identical to  libsbml.parseL3Formula(), except that this
    function uses the parser settings given in the argument 'settings'.
    The settings override the default parsing behavior.

    The parameter 'settings' allows callers to change the following
    parsing behaviors:

        * Use a specific Model object against which identifiers to compare
    identifiers.  This causes the parser to search the Model for
    identifiers that the parser encounters in the formula.  If a given
    symbol in the formula matches the identifier of a Species,
    Compartment, Parameter, Reaction, SpeciesReference or
    FunctionDefinition in the Model, then the symbol is assumed to refer
    to that model entity instead of any possible mathematical terms with
    the same symbol.  For example, if the parser is given a Model
    containing a Species with the identifier "pi", and the formula to be
    parsed is "3*pi", the MathML produced will contain the construct
    <ci> pi </ci> instead of the construct  .

       * Whether to parse "log(x)" with a single argument as the base 10
    logarithm of x, the natural logarithm of x, or treat the case as an
    error.

       * Whether to parse "number id" by interpreting id as the
    identifier of a unit of measurement associated with the number, or
    whether to treat the case as an error.

       * Whether to parse "avogadro" as an ASTNode of type
    libsbml.AST_NAME_AVOGADRO or as type libsbml.AST_NAME.

       * Whether to always create explicit ASTNodes of type
    libsbml.AST_MINUS for all unary minuses, or collapse and remove
    minuses where possible.

    For more details about the parser, please see the definition of
    L3ParserSettings and libsbml.parseL3Formula().

    Parameter 'formula' is the mathematical formula expression to be
    parsed

    Parameter 'settings' is the settings to be used for this parser
    invocation

    Returns the root node of an AST representing the mathematical formula,
    or None if an error occurred while parsing the formula.  When None is
    returned, an error is recorded internally; information about the error
    can be retrieved using libsbml.getLastParseL3Error().

      See also libsbml.getDefaultL3ParserSettings().

    """
  return _libsbml.parseL3FormulaWithSettings(*args)

def getDefaultL3ParserSettings():
  """
    getDefaultL3ParserSettings() -> L3ParserSettings_t

    Returns a copy of the default parser settings used by
    libsbml.parseL3Formula().

    The settings structure allows callers to change the following parsing
    behaviors:

        * Use a specific Model object against which identifiers to compare
    identifiers.  This causes the parser to search the Model for
    identifiers that the parser encounters in the formula.  If a given
    symbol in the formula matches the identifier of a Species,
    Compartment, Parameter, Reaction, SpeciesReference or
    FunctionDefinition in the Model, then the symbol is assumed to refer
    to that model entity instead of any possible mathematical terms with
    the same symbol.  For example, if the parser is given a Model
    containing a Species with the identifier "pi", and the formula to be
    parsed is "3*pi", the MathML produced will contain the construct
    <ci> pi </ci> instead of the construct  .

       * Whether to parse "log(x)" with a single argument as the base 10
    logarithm of x, the natural logarithm of x, or treat the case as an
    error.

       * Whether to parse "number id" by interpreting id as the
    identifier of a unit of measurement associated with the number, or
    whether to treat the case as an error.

       * Whether to parse "avogadro" as an ASTNode of type
    libsbml.AST_NAME_AVOGADRO or as type libsbml.AST_NAME.

       * Whether to always create explicit ASTNodes of type
    libsbml.AST_MINUS for all unary minuses, or collapse and remove
    minuses where possible.

    For more details about the parser, please see the definition of
    L3ParserSettings and libsbml.parseL3Formula().

      See also libsbml.getLastParseL3Error().

    """
  return _libsbml.getDefaultL3ParserSettings()

def getLastParseL3Error():
  """
    getLastParseL3Error() -> char

    Returns the last error reported by the parser.

    If libsbml.parseL3Formula(),  libsbml.parseL3FormulaWithSettings(), or
    libsbml.parseL3FormulaWithModel() return None, an error is set
    internally which is accessible via this function.

    Returns a string describing the error that occurred.  This will
    contain the string the parser was trying to parse, which character it
    had parsed when it encountered the error, and a description of the
    error.

      See also libsbml.getDefaultL3ParserSettings().

    """
  return _libsbml.getLastParseL3Error()
L3P_PARSE_LOG_AS_LOG10 = _libsbml.L3P_PARSE_LOG_AS_LOG10
L3P_PARSE_LOG_AS_LN = _libsbml.L3P_PARSE_LOG_AS_LN
L3P_PARSE_LOG_AS_ERROR = _libsbml.L3P_PARSE_LOG_AS_ERROR
L3P_COLLAPSE_UNARY_MINUS = _libsbml.L3P_COLLAPSE_UNARY_MINUS
L3P_EXPAND_UNARY_MINUS = _libsbml.L3P_EXPAND_UNARY_MINUS
L3P_PARSE_UNITS = _libsbml.L3P_PARSE_UNITS
L3P_NO_UNITS = _libsbml.L3P_NO_UNITS
L3P_AVOGADRO_IS_CSYMBOL = _libsbml.L3P_AVOGADRO_IS_CSYMBOL
L3P_AVOGADRO_IS_NAME = _libsbml.L3P_AVOGADRO_IS_NAME
class L3ParserSettings(_object):
    """
    A helper class for controlling the behavior of the text-string
    formula parser.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. This class is not prescribed
    by the SBML specifications, although it is used to implement features
    defined in SBML.

    The function libsbml.parseL3FormulaWithSettings(), along with its
    variants  libsbml.parseFormula() and
    libsbml.parseL3FormulaWithModel(), are the interfaces to a parser for
    mathematical formulas expressed as text strings.  The parser converts
    the text-string formulas into Abstract Syntax Trees (ASTs),
    represented in libSBML using ASTNode objects. Compared to the parser
    implemented by the function libsbml.parseFormula(), which was designed
    primarily for converting the mathematical formula strings in SBML
    Level 1, the 'L3' variant of the parser accepts an extended formula
    syntax.  It also has a number of configurable behaviors. This class
    (L3ParserSettings) is an object used to communicate the configuration
    settings with callers.

    The following aspects of the parser are configurable:

    * The function log with a single argument ("log(x)")  can be parsed
    as log10(x), ln(x), or treated as an error, as desired.

       * Unary minus signs can be collapsed or preserved; that is,
    sequential pairs of unary minuses (e.g., "- -3") can be removed from
    the input entirely and single unary minuses can be incorporated into
    the number node, or all minuses can be preserved in the AST node
    structure.

       * Parsing of units embedded in the input string can be turned on
    and off.

       * The string avogadro can be parsed as a MathML csymbol or as an
    identifier.

       * A Model object may optionally be provided to the parser using the
    variant function call libsbml.SBML_parseL3FormulaWithModel(). or
    stored in a L3ParserSettings object passed to the variant function
    libsbml.parseL3FormulaWithSettings(). When a Model object is provided,
    identifiers (values of type SId) from that model are used in
    preference to pre-defined MathML definitions.  More precisely, the
    Model entities whose identifiers will shadow identical symbols in the
    mathematical formula are: Species, Compartment, Parameter, Reaction,
    and SpeciesReference.  For instance, if the parser is given a Model
    containing a Species with the identifier "pi", and the formula to be
    parsed is "3*pi", the MathML produced will contain the construct
    <ci> pi </ci> instead of the construct  .

       * Similarly, when a Model object is provided, SId values of user-
    defined functions present in the Model will be used preferentially
    over pre-defined MathML functions.  For example, if the passed-in
    Model contains a FunctionDefinition with the identifier "sin", that
    function will be used instead of the predefined MathML function
    <sin/>. To obtain the default configuration values, callers can use
    the function libsbml.SBML_getDefaultL3ParserSettings(). To change the
    configuration, callers can create an L3ParserSettings object, set the
    desired characteristics using the methods provided, and pass that
    object to libsbml.parseL3FormulaWithSettings().

      See also libsbml.parseL3FormulaWithModel().

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L3ParserSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L3ParserSettings, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> L3ParserSettings
        __init__(self, Model model, ParseLogType_t parselog, bool collapseminus, 
            bool parseunits, bool avocsymbol) -> L3ParserSettings

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            L3ParserSettings(Model model, ParseLogType_t parselog, bool
        collapseminus, bool parseunits, bool avocsymbol)

        Creates a new L3ParserSettings object with specific values for all
        possible settings.

        Parameter 'model' is a Model object to be used for disambiguating
        identifiers

        Parameter 'parselog' is a flag that controls how the parser will
        handle the symbol log in formulas

        Parameter 'collapseminus' is a flag that controls how the parser will
        handle minus signs

        Parameter 'parseunits' is a flag that controls how the parser will
        handle apparent references to units of measurement associated with raw
        numbers in a formula

        Parameter 'avocsymbol' is a flag that controls how the parser will
        handle the appearance of the symbol avogadro in a formula

        See also setParseAvogadroCsymbol().

        @par <hr> Method variant with the following signature:

            L3ParserSettings()

        Creates a new L3ParserSettings object with default values.

        This is the default constructor for the L3ParserSettings object.  It
        sets the Model to None and other settings to L3P_PARSE_LOG_AS_LOG10,
        L3P_EXPAND_UNARY_MINUS, L3P_PARSE_UNITS, and L3P_AVOGADRO_IS_CSYMBOL.

        """
        this = _libsbml.new_L3ParserSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_L3ParserSettings
    __del__ = lambda self : None;
    def setModel(self, *args):
        """
        setModel(self, Model model)

        Sets the model reference in this L3ParserSettings object.

        When a Model object is provided, identifiers (values of type SId) from
        that model are used in preference to pre-defined MathML definitions.
        More precisely, the Model entities whose identifiers will shadow
        identical symbols in the mathematical formula are: Species,
        Compartment, Parameter, Reaction, and SpeciesReference.  For instance,
        if the parser is given a Model containing a Species with the
        identifier "pi", and the formula to be parsed is "3*pi", the
        MathML produced will contain the construct <ci> pi </ci> instead of
        the construct  . Similarly, when a Model object is provided, SId
        values of user-defined functions present in the Model will be used
        preferentially over pre-defined MathML functions.  For example, if the
        passed-in Model contains a FunctionDefinition with the identifier
        "sin", that function will be used instead of the predefined MathML
        function <sin/>.

        Parameter 'model' is a Model object to be used for disambiguating
        identifiers

        WARNING:

        This does not copy the Model object. This means that modifications
        made to the object after invoking this method may affect parsing
        behavior.

        See also unsetModel().

        """
        return _libsbml.L3ParserSettings_setModel(self, *args)

    def getModel(self):
        """
        getModel(self) -> Model

        Returns the Model object referenced by this L3ParserSettings object.

        See also unsetModel().

        """
        return _libsbml.L3ParserSettings_getModel(self)

    def unsetModel(self):
        """
        unsetModel(self)

        Sets the Model reference in this L3ParserSettings object to None.

        See also getModel().

        """
        return _libsbml.L3ParserSettings_unsetModel(self)

    def setParseLog(self, *args):
        """
        setParseLog(self, ParseLogType_t type)

        Sets the behavior for handling log in mathematical formulas.

        The function log with a single argument ("log(x)") can be parsed as
        log10(x), ln(x), or treated as an error, as desired.

        Parameter 'type' is a constant, one of following three possibilities:

           * libsbml.L3P_PARSE_LOG_AS_LOG10

           * libsbml.L3P_PARSE_LOG_AS_LN

           * libsbml.L3P_PARSE_LOG_AS_ERROR

        See also getParseLog().

        """
        return _libsbml.L3ParserSettings_setParseLog(self, *args)

    def getParseLog(self):
        """
        getParseLog(self) -> ParseLogType_t

        Returns the current setting indicating what to do with formulas
        containing the function log with one argument.

        The function log with a single argument ("log(x)") can be parsed as
        log10(x), ln(x), or treated as an error, as desired.

        Returns One of following three constants:

           * libsbml.L3P_PARSE_LOG_AS_LOG10

           * libsbml.L3P_PARSE_LOG_AS_LN

           * libsbml.L3P_PARSE_LOG_AS_ERROR

        See also setParseLog().

        """
        return _libsbml.L3ParserSettings_getParseLog(self)

    def setParseCollapseMinus(self, *args):
        """
        setParseCollapseMinus(self, bool collapseminus)

        Sets the behavior for handling unary minuses appearing in mathematical
        formulas.

        This setting affects two behaviors.  First, pairs of multiple unary
        minuses in a row (e.g., "- -3") can be collapsed and ignored in the
        input, or the multiple minuses can be preserved in the AST node tree
        that is generated by the parser. Second, minus signs in front of
        numbers can be collapsed into the number node itself; for example, a
        "- 4.1" can be turned into a single ASTNode of type libsbml.AST_REAL
        with a value of -4.1, or it can be turned into a node of type
        libsbml.AST_MINUS having a child node of type libsbml.AST_REAL.  This
        method lets you tell the parser which behavior to use -- either
        collapse minuses or always preserve them.  The two possibilities are
        represented using the following constants:

            * libsbml.L3P_COLLAPSE_UNARY_MINUS (value = True): collapse unary
        minuses where possible.

           * libsbml.L3P_EXPAND_UNARY_MINUS (value = False): do not collapse
        unary minuses, and instead translate each one into an AST node of type
        libsbml.AST_MINUS.

        Parameter 'collapseminus' is a boolean value (one of the constants
        libsbml.L3P_COLLAPSE_UNARY_MINUS or libsbml.L3P_EXPAND_UNARY_MINUS)
        indicating how unary minus signs in the input should be handled.

        See also getParseCollapseMinus().

        """
        return _libsbml.L3ParserSettings_setParseCollapseMinus(self, *args)

    def getParseCollapseMinus(self):
        """
        getParseCollapseMinus(self) -> bool

        Returns a flag indicating the current behavior set for handling
        multiple unary minuses in formulas.

        This setting affects two behaviors.  First, pairs of multiple unary
        minuses in a row (e.g., "- -3") can be collapsed and ignored in the
        input, or the multiple minuses can be preserved in the AST node tree
        that is generated by the parser. Second, minus signs in front of
        numbers can be collapsed into the number node itself; for example, a
        "- 4.1" can be turned into a single ASTNode of type libsbml.AST_REAL
        with a value of -4.1, or it can be turned into a node of type
        libsbml.AST_MINUS having a child node of type libsbml.AST_REAL.  This
        method lets you tell the parser which behavior to use -- either
        collapse minuses or always preserve them.  The two possibilities are
        represented using the following constants:

            * libsbml.L3P_COLLAPSE_UNARY_MINUS (value = True): collapse unary
        minuses where possible.

           * libsbml.L3P_EXPAND_UNARY_MINUS (value = False): do not collapse
        unary minuses, and instead translate each one into an AST node of type
        libsbml.AST_MINUS.

        Returns A boolean, one of libsbml.L3P_COLLAPSE_UNARY_MINUS or
        libsbml.L3P_EXPAND_UNARY_MINUS.

        See also setParseCollapseMinus().

        """
        return _libsbml.L3ParserSettings_getParseCollapseMinus(self)

    def setParseUnits(self, *args):
        """
        setParseUnits(self, bool units)

        Sets the parser's behavior in handling units associated with numbers
        in a mathematical formula.

        In SBML Level 2, there is no means of associating a unit of
        measurement with a pure number in a formula, while SBML Level 3 does
        define a syntax for this.  In Level 3, MathML <cn> elements can have
        an attribute named units placed in the SBML namespace, which can be
        used to indicate the units to be associated with the number.  The
        text-string infix formula parser allows units to be placed after raw
        numbers; they are interpreted as unit identifiers for units defined by
        the SBML specification or in the containing Model object.  Some
        examples include: "4 mL", "2.01 Hz", "3.1e-6 M", and "(5/8)
        inches".  To produce a valid SBML model, there must either exist a
        UnitDefinition corresponding to the identifier of the unit, or the
        unit must be defined in Table 2 of the SBML specification.

        Parameter 'units' is A boolean indicating whether to parse units:

           * libsbml.L3P_PARSE_UNITS (value = True): parse units in the text-
        string formula.

           * libsbml.L3P_NO_UNITS (value = false): treat units in the text-
        string formula as errors.

        See also getParseUnits().

        """
        return _libsbml.L3ParserSettings_setParseUnits(self, *args)

    def getParseUnits(self):
        """
        getParseUnits(self) -> bool

        Returns if the current settings allow units in text-string
        mathematical formulas.

        In SBML Level 2, there is no means of associating a unit of
        measurement with a pure number in a formula, while SBML Level 3 does
        define a syntax for this.  In Level 3, MathML <cn> elements can have
        an attribute named units placed in the SBML namespace, which can be
        used to indicate the units to be associated with the number.  The
        text-string infix formula parser allows units to be placed after raw
        numbers; they are interpreted as unit identifiers for units defined by
        the SBML specification or in the containing Model object.  Some
        examples include: "4 mL", "2.01 Hz", "3.1e-6 M", and "(5/8)
        inches".  To produce a valid SBML model, there must either exist a
        UnitDefinition corresponding to the identifier of the unit, or the
        unit must be defined in Table 2 of the SBML specification.

        Since SBML Level 2 does not have the ability to associate units with
        pure numbers, the value should be set to False when parsing text-
        string formulas intended for use in SBML Level 2 documents.

        Returns A boolean indicating whether to parse units:

           * libsbml.L3P_PARSE_UNITS (value = True): parse units in the text-
        string formula.

           * libsbml.L3P_NO_UNITS (value = false): treat units in the text-
        string formula as errors.

        See also setParseUnits().

        """
        return _libsbml.L3ParserSettings_getParseUnits(self)

    def setParseAvogadroCsymbol(self, *args):
        """
        setParseAvogadroCsymbol(self, bool l2only)

        Sets the parser's behavior in handling the string avogadro in
        mathematical formulas.

        SBML Level 3 defines a symbol for representing the value of Avogadro's
        constant, but it is not defined in SBML Level 2.  As a result, the
        text-string formula parser must behave differently depending on which
        SBML Level is being targeted.  The argument to this method can be one
        of two values:

            * libsbml.L3P_AVOGADRO_IS_CSYMBOL (value = True): tells the parser
        to translate the string avogadro (in any capitalization) into an AST
        node of type libsbml.AST_NAME_AVOGADRO.

           * libsbml.L3P_AVOGADRO_IS_NAME (value = False): tells the parser to
        translate the string avogadro into an AST of type libsbml.AST_NAME.

        Since SBML Level 2 does not define a symbol for Avogadro's constant,
        the value should be set to False when parsing text-string formulas
        intended for use in SBML Level 2 documents.

        Parameter 'l2only' is a boolean value (one of the constants
        libsbml.L3P_AVOGADRO_IS_CSYMBOL or libsbml.L3P_AVOGADRO_IS_NAME)
        indicating how the string avogadro should be treated when encountered
        in a formula.

        See also getParseAvogadroCsymbol().

        """
        return _libsbml.L3ParserSettings_setParseAvogadroCsymbol(self, *args)

    def getParseAvogadroCsymbol(self):
        """
        getParseAvogadroCsymbol(self) -> bool

        Returns True if the current settings are oriented towards handling
        avogadro for SBML Level 3.

        SBML Level 3 defines a symbol for representing the value of Avogadro's
        constant, but it is not defined in SBML Level 2.  As a result, the
        text-string formula parser must behave differently depending on which
        SBML Level is being targeted.

        Returns A boolean indicating which mode is currently set; the value is
        one of the following possibilities:

           * libsbml.L3P_AVOGADRO_IS_CSYMBOL (value = True): tells the parser
        to translate the string avogadro (in any capitalization) into an AST
        node of type libsbml.AST_NAME_AVOGADRO.

           * libsbml.L3P_AVOGADRO_IS_NAME (value = False): tells the parser to
        translate the string avogadro into an AST of type libsbml.AST_NAME.

        See also setParseAvogadroCsymbol().

        """
        return _libsbml.L3ParserSettings_getParseAvogadroCsymbol(self)

L3ParserSettings_swigregister = _libsbml.L3ParserSettings_swigregister
L3ParserSettings_swigregister(L3ParserSettings)

class ASTBasePlugin(_object):
    """
    Internal implementation method.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ASTBasePlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ASTBasePlugin, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_ASTBasePlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> ASTBasePlugin

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_clone(self)

    def getElementNamespace(self):
        """
        getElementNamespace(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getElementNamespace(self)

    def getPrefix(self):
        """
        getPrefix(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getPrefix(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getPackageName(self)

    def setSBMLExtension(self, *args):
        """
        setSBMLExtension(self, SBMLExtension ext) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_setSBMLExtension(self, *args)

    def setPrefix(self, *args):
        """
        setPrefix(self, string prefix) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_setPrefix(self, *args)

    def connectToParent(self, *args):
        """
        connectToParent(self, ASTBase astbase)

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_enablePackageInternal(self, *args)

    def stripPackage(self, *args):
        """
        stripPackage(self, string pkgPrefix, bool flag) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_stripPackage(self, *args)

    def getURI(self):
        """
        getURI(self) -> string

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getURI(self)

    def getParentASTObject(self, *args):
        """
        getParentASTObject(self) -> ASTBase
        getParentASTObject(self) -> ASTBase

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getParentASTObject(self, *args)

    def setElementNamespace(self, *args):
        """
        setElementNamespace(self, string uri) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_setElementNamespace(self, *args)

    def getLevel(self):
        """
        getLevel(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getLevel(self)

    def getVersion(self):
        """
        getVersion(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getVersion(self)

    def getPackageVersion(self):
        """
        getPackageVersion(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getPackageVersion(self)

    def getSBMLNamespaces(self):
        """
        getSBMLNamespaces(self) -> SBMLNamespaces

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getSBMLNamespaces(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isSetMath(self)

    def getMath(self):
        """
        getMath(self) -> ASTBase

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getMath(self)

    def createMath(self, *args):
        """
        createMath(self, int type)

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_createMath(self, *args)

    def addChild(self, *args):
        """
        addChild(self, ASTBase child) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_addChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int n) -> ASTBase

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getChild(self, *args)

    def getNumChildren(self):
        """
        getNumChildren(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getNumChildren(self)

    def insertChild(self, *args):
        """
        insertChild(self, unsigned int n, ASTBase newChild) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_insertChild(self, *args)

    def prependChild(self, *args):
        """
        prependChild(self, ASTBase newChild) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_prependChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, unsigned int n) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_removeChild(self, *args)

    def replaceChild(self, *args):
        """
        replaceChild(self, unsigned int n, ASTBase newChild) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_replaceChild(self, *args)

    def swapChildren(self, *args):
        """
        swapChildren(self, ASTFunction that) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_swapChildren(self, *args)

    def read(self, *args):
        """
        read(self, XMLInputStream stream, string reqd_prefix, XMLToken currentElement) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_read(self, *args)

    def addExpectedAttributes(self, *args):
        """
        addExpectedAttributes(self, ExpectedAttributes attributes, XMLInputStream stream, 
            int type)

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_addExpectedAttributes(self, *args)

    def readAttributes(self, *args):
        """
        readAttributes(self, XMLAttributes attributes, ExpectedAttributes expectedAttributes, 
            XMLInputStream stream, XMLToken element, 
            int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_readAttributes(self, *args)

    def writeAttributes(self, *args):
        """
        writeAttributes(self, XMLOutputStream stream, int type)

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_writeAttributes(self, *args)

    def writeXMLNS(self, *args):
        """
        writeXMLNS(self, XMLOutputStream stream)

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_writeXMLNS(self, *args)

    def isNumberNode(self, *args):
        """
        isNumberNode(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isNumberNode(self, *args)

    def isFunctionNode(self, *args):
        """
        isFunctionNode(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isFunctionNode(self, *args)

    def isLogical(self, *args):
        """
        isLogical(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isLogical(self, *args)

    def isConstantNumber(self, *args):
        """
        isConstantNumber(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isConstantNumber(self, *args)

    def isCSymbolFunction(self, *args):
        """
        isCSymbolFunction(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isCSymbolFunction(self, *args)

    def isCSymbolNumber(self, *args):
        """
        isCSymbolNumber(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isCSymbolNumber(self, *args)

    def isName(self, *args):
        """
        isName(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isName(self, *args)

    def isNumber(self, *args):
        """
        isNumber(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isNumber(self, *args)

    def isOperator(self, *args):
        """
        isOperator(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isOperator(self, *args)

    def isRelational(self, *args):
        """
        isRelational(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isRelational(self, *args)

    def representsQualifier(self, *args):
        """
        representsQualifier(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_representsQualifier(self, *args)

    def isFunction(self, *args):
        """
        isFunction(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isFunction(self, *args)

    def representsUnaryFunction(self, *args):
        """
        representsUnaryFunction(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_representsUnaryFunction(self, *args)

    def representsBinaryFunction(self, *args):
        """
        representsBinaryFunction(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_representsBinaryFunction(self, *args)

    def representsNaryFunction(self, *args):
        """
        representsNaryFunction(self, int type) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_representsNaryFunction(self, *args)

    def isTopLevelMathMLFunctionNodeTag(self, *args):
        """
        isTopLevelMathMLFunctionNodeTag(self, string name) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isTopLevelMathMLFunctionNodeTag(self, *args)

    def isTopLevelMathMLNumberNodeTag(self, *args):
        """
        isTopLevelMathMLNumberNodeTag(self, string name) -> bool

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_isTopLevelMathMLNumberNodeTag(self, *args)

    def getTypeFromName(self, *args):
        """
        getTypeFromName(self, string name) -> int

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getTypeFromName(self, *args)

    def getNameFromType(self, *args):
        """
        getNameFromType(self, int type) -> char

        Internal implementation method.

        """
        return _libsbml.ASTBasePlugin_getNameFromType(self, *args)

ASTBasePlugin_swigregister = _libsbml.ASTBasePlugin_swigregister
ASTBasePlugin_swigregister(ASTBasePlugin)

class CompExtension(SBMLExtension):
    """
    [SBML 'comp' package]  The core module of the &ldquo;comp&rdquo;
    package extension.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompExtension, name)
    __repr__ = _swig_repr
    def getPackageName():
        """
        getPackageName() -> string

        Returns the package name of this extension.

        """
        return _libsbml.CompExtension_getPackageName()

    if _newclass:getPackageName = staticmethod(getPackageName)
    __swig_getmethods__["getPackageName"] = lambda x: getPackageName
    def getDefaultLevel():
        """
        getDefaultLevel() -> unsigned int

        Returns the default SBML Level this extension.

        """
        return _libsbml.CompExtension_getDefaultLevel()

    if _newclass:getDefaultLevel = staticmethod(getDefaultLevel)
    __swig_getmethods__["getDefaultLevel"] = lambda x: getDefaultLevel
    def getDefaultVersion():
        """
        getDefaultVersion() -> unsigned int

        Returns the default SBML Version this extension.

        """
        return _libsbml.CompExtension_getDefaultVersion()

    if _newclass:getDefaultVersion = staticmethod(getDefaultVersion)
    __swig_getmethods__["getDefaultVersion"] = lambda x: getDefaultVersion
    def getDefaultPackageVersion():
        """
        getDefaultPackageVersion() -> unsigned int

        Returns the default SBML version this extension.

        """
        return _libsbml.CompExtension_getDefaultPackageVersion()

    if _newclass:getDefaultPackageVersion = staticmethod(getDefaultPackageVersion)
    __swig_getmethods__["getDefaultPackageVersion"] = lambda x: getDefaultPackageVersion
    def getXmlnsL3V1V1():
        """
        getXmlnsL3V1V1() -> string

        Returns URI of supported versions of this package.

        """
        return _libsbml.CompExtension_getXmlnsL3V1V1()

    if _newclass:getXmlnsL3V1V1 = staticmethod(getXmlnsL3V1V1)
    __swig_getmethods__["getXmlnsL3V1V1"] = lambda x: getXmlnsL3V1V1
    def __init__(self, *args): 
        """
        __init__(self) -> CompExtension
        __init__(self, CompExtension arg0) -> CompExtension

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CompExtension()

        Constructor

        @par <hr> Method variant with the following signature:

            CompExtension(CompExtension)

        Copy constructor.

        """
        this = _libsbml.new_CompExtension(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_CompExtension
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> CompExtension

        Creates and returns a deep copy of this CompExtension object.

        Returns a (deep) copy of this CompExtension object

        """
        return _libsbml.CompExtension_clone(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the name of this package as a short-form label ("comp").

        Returns the name of this package.

        """
        return _libsbml.CompExtension_getName(self)

    def getURI(self, *args):
        """
        getURI(self, unsigned int sbmlLevel, unsigned int sbmlVersion, unsigned int pkgVersion) -> string

        Returns the namespace URI corresponding to the combination of the
        given SBML Level, Version, and package version.

        Parameter 'sbmlLevel' is the level of SBML Parameter 'sbmlVersion' is
        the version of SBML Parameter 'pkgVersion' is the version of package

        Returns a string of the package URI, or an empty string if no
        corresponding URI exists.

        """
        return _libsbml.CompExtension_getURI(self, *args)

    def getLevel(self, *args):
        """
        getLevel(self, string uri) -> unsigned int

        Returns the SBML Level for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;comp&rdquo; package

        Returns the SBML Level with the given URI of this package, or 0 if the
        given URI is invalid.

        """
        return _libsbml.CompExtension_getLevel(self, *args)

    def getVersion(self, *args):
        """
        getVersion(self, string uri) -> unsigned int

        Returns the SBML Version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;comp&rdquo; package

        Returns the SBML version with the given URI of this package, or 0 if
        the given URI is invalid.

        """
        return _libsbml.CompExtension_getVersion(self, *args)

    def getPackageVersion(self, *args):
        """
        getPackageVersion(self, string uri) -> unsigned int

        Returns the package version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;comp&rdquo; package

        Returns the package version with the given URI of this package, or 0
        if the given URI is invalid.

        """
        return _libsbml.CompExtension_getPackageVersion(self, *args)

    def getSBMLExtensionNamespaces(self, *args):
        """
        getSBMLExtensionNamespaces(self, string uri) -> SBMLNamespaces

        Returns an CompPkgNamespaces object.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;comp&rdquo; package

        Returns an CompPkgNamespace object corresponding to the given 'uri',
        or None if the URI is not defined in the Hierarchical Model
        Composition package.

        """
        return _libsbml.CompExtension_getSBMLExtensionNamespaces(self, *args)

    def getStringFromTypeCode(self, *args):
        """
        getStringFromTypeCode(self, int typeCode) -> char

        Takes a type code of the &ldquo;comp&rdquo; package and returns a
        string describing the code.

        """
        return _libsbml.CompExtension_getStringFromTypeCode(self, *args)

    def init():
        """
        init()

        Internal implementation method.

        """
        return _libsbml.CompExtension_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def getErrorTable(self, *args):
        """
        getErrorTable(self, unsigned int index) -> packageErrorTableEntry

        Internal implementation method.

        """
        return _libsbml.CompExtension_getErrorTable(self, *args)

    def getErrorTableIndex(self, *args):
        """
        getErrorTableIndex(self, unsigned int errorId) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.CompExtension_getErrorTableIndex(self, *args)

    def getErrorIdOffset(self):
        """
        getErrorIdOffset(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.CompExtension_getErrorIdOffset(self)

CompExtension_swigregister = _libsbml.CompExtension_swigregister
CompExtension_swigregister(CompExtension)

def CompExtension_getPackageName():
  """
    CompExtension_getPackageName() -> string

    Returns the package name of this extension.

    """
  return _libsbml.CompExtension_getPackageName()

def CompExtension_getDefaultLevel():
  """
    CompExtension_getDefaultLevel() -> unsigned int

    Returns the default SBML Level this extension.

    """
  return _libsbml.CompExtension_getDefaultLevel()

def CompExtension_getDefaultVersion():
  """
    CompExtension_getDefaultVersion() -> unsigned int

    Returns the default SBML Version this extension.

    """
  return _libsbml.CompExtension_getDefaultVersion()

def CompExtension_getDefaultPackageVersion():
  """
    CompExtension_getDefaultPackageVersion() -> unsigned int

    Returns the default SBML version this extension.

    """
  return _libsbml.CompExtension_getDefaultPackageVersion()

def CompExtension_getXmlnsL3V1V1():
  """
    CompExtension_getXmlnsL3V1V1() -> string

    Returns URI of supported versions of this package.

    """
  return _libsbml.CompExtension_getXmlnsL3V1V1()

def CompExtension_init():
  """
    CompExtension_init()

    Internal implementation method.

    """
  return _libsbml.CompExtension_init()

SBML_COMP_SUBMODEL = _libsbml.SBML_COMP_SUBMODEL
SBML_COMP_MODELDEFINITION = _libsbml.SBML_COMP_MODELDEFINITION
SBML_COMP_EXTERNALMODELDEFINITION = _libsbml.SBML_COMP_EXTERNALMODELDEFINITION
SBML_COMP_SBASEREF = _libsbml.SBML_COMP_SBASEREF
SBML_COMP_DELETION = _libsbml.SBML_COMP_DELETION
SBML_COMP_REPLACEDELEMENT = _libsbml.SBML_COMP_REPLACEDELEMENT
SBML_COMP_REPLACEDBY = _libsbml.SBML_COMP_REPLACEDBY
SBML_COMP_PORT = _libsbml.SBML_COMP_PORT
class CompSBasePlugin(SBasePlugin):
    """
    [SBML 'comp' package]  Implementation of the &ldquo;comp&rdquo;
    package extention to the SBase construct.

    The CompSBasePlugin class inherits from the SBasePlugin class,  and
    codifies the extentions to the SBase class defined in the @ref comp
    package (&ldquo;comp&rdquo;).  This extention allows the modeler to
    define one or more submodel elements which the parent SBase object
    replaces, and/or a single submodel element which replaces the parent
    SBase object. This is accomplished through the addition of an optional
    ListOfReplacedElements child, which may contain one or more
    ReplacedElement objects, each of which  references a submodel object
    to be replaced by the containing SBase object,  and through the
    addition of a single optional ReplacedBy child, which  references a
    submodel object which is to replace the containing SBase object. If a
    single SBase element both contains a ListOfReplacedElements and has a
    ReplacedBy child, it and all the referenced ReplacedElement objects
    are to be replaced by the object referenced by the ReplacedBy element.

    See also ReplacedBy.

    """
    __swig_setmethods__ = {}
    for _s in [SBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompSBasePlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompSBasePlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix, CompPkgNamespaces compns) -> CompSBasePlugin
        __init__(self, CompSBasePlugin orig) -> CompSBasePlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CompSBasePlugin(string &uri, string &prefix,
        CompPkgNamespacescompns)

        Constructor.

        @par <hr> Method variant with the following signature:

            CompSBasePlugin(CompSBasePlugin orig)

        Copy constructor. Creates a copy of this CompSBasePlugin object.

        """
        this = _libsbml.new_CompSBasePlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_CompSBasePlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> CompSBasePlugin

        Creates and returns a deep copy of this CompSBasePlugin object.

        Returns a (deep) copy of this CompSBasePlugin object

        """
        return _libsbml.CompSBasePlugin_clone(self)

    def createObject(self, *args):
        """
        createObject(self, XMLInputStream stream) -> SBase

        Internal implementation method.

        """
        return _libsbml.CompSBasePlugin_createObject(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.CompSBasePlugin_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object is
        found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.CompSBasePlugin_getElementByMetaId(self, *args)

    def getListOfReplacedElements(self):
        """
        getListOfReplacedElements(self) -> ListOfReplacedElements

        Returns the ListOf object that holds all replacedElements.

        Returns the ListOf object that holds all replacedElements.

        """
        return _libsbml.CompSBasePlugin_getListOfReplacedElements(self)

    def getReplacedElement(self, *args):
        """
        getReplacedElement(self, unsigned int n) -> ReplacedElement
        getReplacedElement(self, unsigned int n) -> ReplacedElement

        Returns the ReplacedElement with the given index.

        Parameter 'n' is the index number of the ReplacedElement to get.

        Returns the nth ReplacedElement in the ListOfReplacedElements.  If the
        index is invalid, None is returned.

        """
        return _libsbml.CompSBasePlugin_getReplacedElement(self, *args)

    def addReplacedElement(self, *args):
        """
        addReplacedElement(self, ReplacedElement replacedElement) -> int

        Adds a copy of the given ReplacedElement object to the list of
        ReplacedElements.

        Parameter 'replacedElement' is the ReplacedElement object to be added
        to the list of ReplacedElements.  Fails if the added ReplacedElement
        is None, does not match the level/version/package of the parent
        object, or cannot be added to the list of replaced elements.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.CompSBasePlugin_addReplacedElement(self, *args)

    def getNumReplacedElements(self):
        """
        getNumReplacedElements(self) -> unsigned int

        Returns the number of ReplacedElements for this CompSBasePlugin.

        Returns the number of ReplacedElements for this CompSBasePlugin.

        """
        return _libsbml.CompSBasePlugin_getNumReplacedElements(self)

    def clearReplacedElements(self):
        """
        clearReplacedElements(self)

        Remove all ReplacedElements, if any exist.

        """
        return _libsbml.CompSBasePlugin_clearReplacedElements(self)

    def createReplacedElement(self):
        """
        createReplacedElement(self) -> ReplacedElement

        Creates a ReplacedElement object, adds it to the end of the
        ReplacedElement objects list and returns a pointer to the newly
        created object.

        Returns a newly created ReplacedElement object

        """
        return _libsbml.CompSBasePlugin_createReplacedElement(self)

    def removeReplacedElement(self, *args):
        """
        removeReplacedElement(self, unsigned int index) -> ReplacedElement

        Removes the ReplacedElement with the given index.

        A pointer to the ReplacedElement that was removed is returned. If no
        ReplacedElement has been removed, None is returned.

        Parameter 'index' is the index of the ReplacedElement object to remove

        Returns the ReplacedElement object removed.  As mentioned above,  the
        caller owns the returned object. None is returned if  the given index
        is out of range.

        """
        return _libsbml.CompSBasePlugin_removeReplacedElement(self, *args)

    def getReplacedBy(self, *args):
        """
        getReplacedBy(self) -> ReplacedBy
        getReplacedBy(self) -> ReplacedBy

        Get the child ReplacedBy of this SBase.

        Returns the const ReplacedBy child of this SBase

        """
        return _libsbml.CompSBasePlugin_getReplacedBy(self, *args)

    def isSetReplacedBy(self):
        """
        isSetReplacedBy(self) -> bool

        Predicate for testing whether the ReplacedBy for this SBase is set.

        Returns True if the ReplacedBy of this SBase is set, False otherwise.

        """
        return _libsbml.CompSBasePlugin_isSetReplacedBy(self)

    def setReplacedBy(self, *args):
        """
        setReplacedBy(self, ReplacedBy replacedBy) -> int

        Sets the ReplacedBy definition of this SBase to a copy of the given
        ReplacedBy object instance.

        This method fails if the added ReplacedBy does not match the
        level/version/package of the parent object or if the added ReplacedBy
        cannot be copied.

        Parameter 'replacedBy' is the ReplacedBy object instance to use.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.CompSBasePlugin_setReplacedBy(self, *args)

    def createReplacedBy(self):
        """
        createReplacedBy(self) -> ReplacedBy

        Creates a new, empty ReplacedBy, adds it to this CompSBasePlugin and
        returns the created ReplacedBy.

        Returns the newly created ReplacedBy object instance

        """
        return _libsbml.CompSBasePlugin_createReplacedBy(self)

    def unsetReplacedBy(self):
        """
        unsetReplacedBy(self) -> int

        Unsets the child ReplacedBy of this SBase.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.CompSBasePlugin_unsetReplacedBy(self)

    def logInvalidId(self, *args):
        """
        logInvalidId(self, string attribute, string wrongattribute)

        Helper to log a common type of error.

        """
        return _libsbml.CompSBasePlugin_logInvalidId(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.CompSBasePlugin_connectToChild(self)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase parent)

        Internal implementation method.

        """
        return _libsbml.CompSBasePlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.CompSBasePlugin_enablePackageInternal(self, *args)

CompSBasePlugin_swigregister = _libsbml.CompSBasePlugin_swigregister
CompSBasePlugin_swigregister(CompSBasePlugin)

class CompModelPlugin(CompSBasePlugin):
    """
    [SBML 'comp' package]  Implementation of the &ldquo;comp&rdquo;
    package extention to the Model construct.

    The CompModelPlugin class inherits from the SBMLSBasePlugin class, and
    codifies the extentions to the Model class defined in the SBML Level 3
    @ref comp   package (&ldquo;comp&rdquo;).  This extention allows a
    Model to define Submodels (other Models that are instantiated as new
    parts of the parent Model), and Ports, a defined interface for
    including the given Model as a Submodel of a different Model.

    Submodels are stored in an optional child ListOfSubmodels object,
    which,  if present, must contain one or more Submodel objects.  All of
    the Submodels present in the ListOfSubmodels are defined to be
    instantiated in the 'complete' Model.

    Ports are stored in an optional child ListOfPorts object, which,  if
    present, must contain one or more Port objects.  All of the Ports
    present in the ListOfPorts collectively define the 'port interface' of
    the Model.

    """
    __swig_setmethods__ = {}
    for _s in [CompSBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompModelPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CompSBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompModelPlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix, CompPkgNamespaces compns) -> CompModelPlugin
        __init__(self, CompModelPlugin orig) -> CompModelPlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CompModelPlugin(string &uri, string &prefix,
        CompPkgNamespacescompns)

        Constructor.

        @par <hr> Method variant with the following signature:

            CompModelPlugin(CompModelPlugin orig)

        Copy constructor. Creates a copy of this CompModelPlugin object.

        """
        this = _libsbml.new_CompModelPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_CompModelPlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> CompModelPlugin

        Creates and returns a deep copy of this CompModelPlugin object.

        Returns a (deep) copy of this CompModelPlugin object

        """
        return _libsbml.CompModelPlugin_clone(self)

    def createObject(self, *args):
        """
        createObject(self, XMLInputStream stream) -> SBase

        Internal implementation method.

        """
        return _libsbml.CompModelPlugin_createObject(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is a string representing the id of objects to find.

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.CompModelPlugin_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given meta
        identifier, or itself if it has the given 'metaid', or None if no such
        object is found.

        Parameter 'metaid' is a string representing the metaid of objects to
        find.

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.CompModelPlugin_getElementByMetaId(self, *args)

    def getListOfSubmodels(self):
        """
        getListOfSubmodels(self) -> ListOfSubmodels

        Returns the ListOf object that holds all submodels.

        Returns the ListOf object that holds all submodels.

        """
        return _libsbml.CompModelPlugin_getListOfSubmodels(self)

    def getSubmodel(self, *args):
        """
        getSubmodel(self, unsigned int n) -> Submodel
        getSubmodel(self, unsigned int n) -> Submodel
        getSubmodel(self, string id) -> Submodel
        getSubmodel(self, string id) -> Submodel

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getSubmodel(string id)

        Returns the submodel with the given identifier.

        Parameter 'id' is the identifier of the Submodel to get.

        Returns the Submodel in the ListOfSubmodels with the given identifier.
        If no submodel with identifier 'id' exists, None is returned.

         @par <hr> Method variant with the following signature:

            getSubmodel(long n)

        Returns the submodel with the given index.

        Parameter 'n' is the index number of the Submodel to get.

        Returns the nth Submodel in the ListOfSubmodels.  If the index 'n' is
        invalid, None is returned.

        """
        return _libsbml.CompModelPlugin_getSubmodel(self, *args)

    def addSubmodel(self, *args):
        """
        addSubmodel(self, Submodel submodel) -> int

        Adds a copy of the given Submodel object to the list of submodels.

        Fails if the added submodel is None, does not match the
        level/version/package of the parent object, or cannot be added to the
        list of submodels.

        Parameter 'submodel' is the Submodel object to be added to the list of
        submodels.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.CompModelPlugin_addSubmodel(self, *args)

    def getNumSubmodels(self):
        """
        getNumSubmodels(self) -> unsigned int

        Returns the number of submodels for this CompModelPlugin.

        Returns the number of submodels for this CompModelPlugin.

        """
        return _libsbml.CompModelPlugin_getNumSubmodels(self)

    def createSubmodel(self):
        """
        createSubmodel(self) -> Submodel

        Creates a Submodel object, adds it to the end of the submodel objects
        list and returns a pointer to the newly created object.

        Returns a newly created Submodel object

        """
        return _libsbml.CompModelPlugin_createSubmodel(self)

    def removeSubmodel(self, *args):
        """
        removeSubmodel(self, unsigned int index) -> Submodel

        Removes the submodel with the given index. A pointer to the submodel
        that was removed is returned.

        Parameter 'index' is the index of the Submodel object to remove

        Returns the Submodel object removed.  As mentioned above, the caller
        owns the returned object. None is returned if the given 'index' is out
        of range and no submodel has been removed, None is returned.

        """
        return _libsbml.CompModelPlugin_removeSubmodel(self, *args)

    def getListOfPorts(self):
        """
        getListOfPorts(self) -> ListOfPorts

        Returns the ListOf object that holds all ports.

        Returns the ListOf object that holds all ports.

        """
        return _libsbml.CompModelPlugin_getListOfPorts(self)

    def getPort(self, *args):
        """
        getPort(self, unsigned int n) -> Port
        getPort(self, unsigned int n) -> Port
        getPort(self, string id) -> Port
        getPort(self, string id) -> Port

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getPort(string id)

        Returns the port with the given identifier.

        Parameter 'id' is the id of the Port to get.

        Returns the Port in the ListOfPorts with the given identifier.  If the
        identifier is invalid, None is returned.

        @par <hr> Method variant with the following signature:

            getPort(long n)

        Returns the port with the given index.

        Parameter 'n' is the index number of the Port to get.

        Returns the nth Port in the ListOfPorts. If the index 'n' is invalid,
        None is returned.

        """
        return _libsbml.CompModelPlugin_getPort(self, *args)

    def addPort(self, *args):
        """
        addPort(self, Port port) -> int

        Adds a copy of the given Port object to the list of ports.

        Parameter 'port' is the Port object to be added to the list of ports.
        Fails if the added port is None, does not match the
        level/version/package of the parent object, or cannot be added to the
        list of ports.

        Returns integer value indicating success/failure of the operation. The
        possible return values:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.CompModelPlugin_addPort(self, *args)

    def getNumPorts(self):
        """
        getNumPorts(self) -> unsigned int

        Returns the number of ports for this CompModelPlugin.

        Returns the number of ports for this CompModelPlugin.

        """
        return _libsbml.CompModelPlugin_getNumPorts(self)

    def createPort(self):
        """
        createPort(self) -> Port

        Creates a Port object, adds it to the end of the port objects list and
        returns a pointer to the newly created object.

        Returns a newly created Port object

        """
        return _libsbml.CompModelPlugin_createPort(self)

    def removePort(self, *args):
        """
        removePort(self, unsigned int index) -> Port

        Removes the port with the given index.

        Parameter 'index' is the index of the Port object to remove

        Returns the Port object removed.  As mentioned above,  the caller owns
        the returned object. None is returned if  the given index is out of
        range.

        """
        return _libsbml.CompModelPlugin_removePort(self, *args)

    def setDivider(self, *args):
        """
        setDivider(self, string divider) -> int

        Set the string used as the divider between names when renaming and
        flattening models.

        The divider string consists of two underscore characters ("__") by
        default.  This method will fail if called with an empty 'divider', or
        a 'divider' that cannot be used internally as part of a valid SBML
        SId.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.CompModelPlugin_setDivider(self, *args)

    def getDivider(self):
        """
        getDivider(self) -> string

        Get the string used as the divider between names when renaming and
        flattening models.

        The divider string consists of two underscore characters ("__") by
        default, and can be overridden with the setDivider() function.

        See also setDivider().

        """
        return _libsbml.CompModelPlugin_getDivider(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.CompModelPlugin_connectToChild(self)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase parent)

        Internal implementation method.

        """
        return _libsbml.CompModelPlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.CompModelPlugin_enablePackageInternal(self, *args)

    def setTransformer(self, *args):
        """
        setTransformer(self, PrefixTransformer transformer)

        Sets the custom transformer that is to be used, instead of the
        standard prefixing with the given divider. This makes it possible to
        finely control how elements are altered.

        If not set, only ids and meta ids will be prefixed.

        NOTE: the model plugin only holds the pointer to the element it does
        not  take ownership of it. Thus the calling program is responsible of
        freeing the transformer when no longer needed (i.e after the  SBML
        document has been deleted)

        """
        return _libsbml.CompModelPlugin_setTransformer(self, *args)

    def getTransformer(self):
        """
        getTransformer(self) -> PrefixTransformer

        Returns any custom transformer set for prefix operations, will be None
        by default.

        """
        return _libsbml.CompModelPlugin_getTransformer(self)

    def isSetTransformer(self):
        """
        isSetTransformer(self) -> bool

        Returns an indicator, whether a custom transformer has been set.

        """
        return _libsbml.CompModelPlugin_isSetTransformer(self)

    def unsetTransformer(self):
        """
        unsetTransformer(self)

        Unsets any custom prefix transformers.

        """
        return _libsbml.CompModelPlugin_unsetTransformer(self)

CompModelPlugin_swigregister = _libsbml.CompModelPlugin_swigregister
CompModelPlugin_swigregister(CompModelPlugin)

class CompSBMLDocumentPlugin(SBMLDocumentPlugin):
    """
    [SBML 'comp' package]  Implementation of the &ldquo;comp&rdquo;
    package extention to the SBMLDocument construct.

    The CompSBMLDocumentPlugin class inherits from the SBMLDocumentPlugin
    class, and codifies the extentions to the SBMLDocument class defined
    in the SBML Level 3 @ref comp

    package (&ldquo;comp&rdquo;).  This extention allows multiple Model
    objects to be defined in a single SBMLDocument, stored in an optional
    child ListOfModelDefinitions object, as well as define references to
    Model objects in other files, stored in the optional child
    ListOfExternalModelDefinitions object.  These model definitions, if
    present, allow Submodel objects to reference other Models to
    instantiate.

    The presence of ModelDefinitions and ExternalModelDefinitions in an
    SBMLDocument does not change the default Model in the file.  If a
    SBMLDocument is submitted somewhere to be simulated, it is still the
    <model> child of the <sbml> element that should be simulated.

    In addition, as all packages do, the CompSBMLDocumentPlugin defines a
    required flag named required, which indicates whether
    &ldquo;comp&rdquo; constructs can be used to change the core
    mathematics of the <model> child of the <sbml> element. Because they
    can, this attribute must be set True.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLDocumentPlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompSBMLDocumentPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLDocumentPlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompSBMLDocumentPlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix, CompPkgNamespaces compns) -> CompSBMLDocumentPlugin
        __init__(self, CompSBMLDocumentPlugin orig) -> CompSBMLDocumentPlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CompSBMLDocumentPlugin(string &uri, string &prefix,
        CompPkgNamespacescompns)

        Constructor.

        @par <hr> Method variant with the following signature:

            CompSBMLDocumentPlugin(CompSBMLDocumentPlugin orig)

        Copy constructor. Creates a copy of this CompSBMLDocumentPlugin
        object.

        """
        this = _libsbml.new_CompSBMLDocumentPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_CompSBMLDocumentPlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> CompSBMLDocumentPlugin

        Creates and returns a deep copy of this CompSBMLDocumentPlugin object.

        Returns a (deep) copy of this CompSBMLDocumentPlugin object

        """
        return _libsbml.CompSBMLDocumentPlugin_clone(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the identifier of objects to
        find

        Returns a pointer to the SBase element with the given 'id'.

        Note:

        The comp SBML document plugin has multiple model-wide SId namespaces,
        so a valid document may well contain multiple elements with the same
        SId that reside in separate models.  It is not recommended to ever
        call this function -- instead, call the function on the child
        ModelDefinition objects.

        """
        return _libsbml.CompSBMLDocumentPlugin_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object is
        found.

        Parameter 'metaid' is string representing the meta identifier of
        objects to find

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.CompSBMLDocumentPlugin_getElementByMetaId(self, *args)

    def createObject(self, *args):
        """
        createObject(self, XMLInputStream stream) -> SBase

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_createObject(self, *args)

    def isCompFlatteningImplemented(self):
        """
        isCompFlatteningImplemented(self) -> bool

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_isCompFlatteningImplemented(self)

    def checkConsistency(self):
        """
        checkConsistency(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_checkConsistency(self)

    def getListOfModelDefinitions(self):
        """
        getListOfModelDefinitions(self) -> ListOfModelDefinitions

        Returns the ListOf object that holds all ModelDefinitions.

        Returns the ListOf object that holds all ModelDefinitions.

        """
        return _libsbml.CompSBMLDocumentPlugin_getListOfModelDefinitions(self)

    def getModelDefinition(self, *args):
        """
        getModelDefinition(self, unsigned int n) -> ModelDefinition
        getModelDefinition(self, unsigned int n) -> ModelDefinition
        getModelDefinition(self, string sid) -> ModelDefinition
        getModelDefinition(self, string sid) -> ModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getModelDefinition(long n)

        Returns the ModelDefinition with the given index.

        Parameter 'n' is the index number of the ModelDefinition to get.

        Returns the nth ModelDefinition in the ListOfModelDefinitions.  If the
        index 'n' is invalid, None is returned.

        @par <hr> Method variant with the following signature:

            getModelDefinition(string sid)

        Returns the model definition object based on its identifier.

        Parameter 'sid' is a string representing the identifier  of the model
        definition to get.

        Returns ModelDefinition in the ListOfModelDefinitions with the given
        'sid' or None if no such ModelDefinition exists.

        See also getListOfModelDefinitions().

        """
        return _libsbml.CompSBMLDocumentPlugin_getModelDefinition(self, *args)

    def addModelDefinition(self, *args):
        """
        addModelDefinition(self, ModelDefinition modelDefinition) -> int

        Adds a copy of the given ModelDefinition object to the list of
        ModelDefinitions.

        Parameter 'modelDefinition' is the ModelDefinition object to be added
        to the list of ModelDefinitions.  Fails if the added ModelDefinition
        is None, does not match the level/version/package of the parent
        object, or cannot be added to the list of replaced elements.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.CompSBMLDocumentPlugin_addModelDefinition(self, *args)

    def getNumModelDefinitions(self):
        """
        getNumModelDefinitions(self) -> unsigned int

        Returns the number of ModelDefinitions for this SBMLDocumentPlugin.

        Returns the number of ModelDefinitions.

        """
        return _libsbml.CompSBMLDocumentPlugin_getNumModelDefinitions(self)

    def createModelDefinition(self):
        """
        createModelDefinition(self) -> ModelDefinition

        Creates a ModelDefinition object, adds it to the end of the
        ModelDefinition objects list and returns a pointer to the newly
        created object.

        Returns a newly created ModelDefinition object

        """
        return _libsbml.CompSBMLDocumentPlugin_createModelDefinition(self)

    def removeModelDefinition(self, *args):
        """
        removeModelDefinition(self, unsigned int index) -> ModelDefinition
        removeModelDefinition(self, string id) -> ModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeModelDefinition(string id)

        Removes the ModelDefinition with the given 'id' from the
        CompSBMLDocumentPlugin.

        A pointer to the ModelDefinition that was removed is returned. If no
        ModelDefinition has been removed, None is returned.

        Parameter 'id' is the id of the ModelDefinition object to remove

        Returns the ModelDefinition object removed.  As mentioned above,  the
        caller owns the returned object. None is returned if  the given index
        is out of range.

        @par <hr> Method variant with the following signature:

            removeModelDefinition(long index)

        Removes the ModelDefinition with the given index from the
        CompSBMLDocumentPlugin.

        A pointer to the ModelDefinition that was removed is returned. If no
        ModelDefinition has been removed, None is returned.

        Parameter 'index' is the index of the ModelDefinition object to remove

        Returns the ModelDefinition object removed.  As mentioned above,  the
        caller owns the returned object. None is returned if  the given index
        is out of range.

        """
        return _libsbml.CompSBMLDocumentPlugin_removeModelDefinition(self, *args)

    def getListOfExternalModelDefinitions(self):
        """
        getListOfExternalModelDefinitions(self) -> ListOfExternalModelDefinitions

        Returns the ListOf object that holds all ExternalModelDefinitions.

        Returns the ListOf object that holds all ExternalModelDefinitions.

        """
        return _libsbml.CompSBMLDocumentPlugin_getListOfExternalModelDefinitions(self)

    def getExternalModelDefinition(self, *args):
        """
        getExternalModelDefinition(self, unsigned int n) -> ExternalModelDefinition
        getExternalModelDefinition(self, unsigned int n) -> ExternalModelDefinition
        getExternalModelDefinition(self, string sid) -> ExternalModelDefinition
        getExternalModelDefinition(self, string sid) -> ExternalModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getExternalModelDefinition(long n)

        Returns the ExternalModelDefinition with the given index.

        Parameter 'n' is the index number of the ExternalModelDefinition to
        get.

        Returns the nth ExternalModelDefinition in the
        ListOfExternalModelDefinitions.  If the index is invalid, None is
        returned.

        @par <hr> Method variant with the following signature:

            getExternalModelDefinition(string sid)

        Returns the model definition object based on its identifier.

        Parameter 'sid' is a string representing the identifier  of the model
        definition to get.

        Returns ExternalModelDefinition in the ListOfExternalModelDefinitions
        with the given 'sid' or None if no such ExternalModelDefinition
        exists.

        See also getListOfExternalModelDefinitions().

        """
        return _libsbml.CompSBMLDocumentPlugin_getExternalModelDefinition(self, *args)

    def getModel(self, *args):
        """
        getModel(self, string sid) -> SBase
        getModel(self, string sid) -> SBase

        Searches the model namespace of the document and returns the Model,
        ModelDefinition, or ExternalModelDefintion object with the given
        identifier.

        Parameter 'sid' is a string representing the identifier of the model
        definition to get.

        Returns The SBase corresponding to the given 'sid' or None if no such
        model exists.  If no such model exists, this will return None.

        """
        return _libsbml.CompSBMLDocumentPlugin_getModel(self, *args)

    def setRequired(self, *args):
        """
        setRequired(self, bool value) -> int

        Sets the bool value of 'required' attribute of corresponding package
        in SBMLDocument element.  The only legal value is 'true' for the
        Hierarchical Model Composition package.

        Parameter 'value' is the bool value of 'required' attribute of
        corresponding  package in SBMLDocument element.

        Returns integer value indicating success/failure of the function.  The
        possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.CompSBMLDocumentPlugin_setRequired(self, *args)

    def addExternalModelDefinition(self, *args):
        """
        addExternalModelDefinition(self, ExternalModelDefinition externalModelDefinition) -> int

        Adds a copy of the given ExternalModelDefinition object to the list of
        ExternalModelDefinitions.

        Parameter 'externalModelDefinition' is the ExternalModelDefinition
        object to be added to the list of ExternalModelDefinitions.  Fails if
        the added ExternalModelDefinition is None, does not match the
        level/version/package of the parent object, or cannot be added to the
        list of external model definitions.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.CompSBMLDocumentPlugin_addExternalModelDefinition(self, *args)

    def getNumExternalModelDefinitions(self):
        """
        getNumExternalModelDefinitions(self) -> unsigned int

        Returns the number of ExternalModelDefinitions for this
        SBMLDocumentPlugin.

        Returns the number of ExternalModelDefinitions for this
        SBMLDocumentPlugin.

        """
        return _libsbml.CompSBMLDocumentPlugin_getNumExternalModelDefinitions(self)

    def createExternalModelDefinition(self):
        """
        createExternalModelDefinition(self) -> ExternalModelDefinition

        Creates a ExternalModelDefinition object, adds it to the end of the
        ExternalModelDefinition objects list and returns a pointer to the
        newly created object.

        Returns a newly created ExternalModelDefinition object

        """
        return _libsbml.CompSBMLDocumentPlugin_createExternalModelDefinition(self)

    def removeExternalModelDefinition(self, *args):
        """
        removeExternalModelDefinition(self, unsigned int index) -> ExternalModelDefinition
        removeExternalModelDefinition(self, string id) -> ExternalModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeExternalModelDefinition(string id)

        Removes the ExternalModelDefinition with the given 'id'.

        A pointer to the ExternalModelDefinition that was removed is returned.
        If no ExternalModelDefinition has been removed, None is returned.

        Parameter 'id' is the id of the ExternalModelDefinition object to
        remove

        Returns the ExternalModelDefinition object removed.  As mentioned
        above,  the caller owns the returned object. None is returned if  the
        given index is out of range.

        @par <hr> Method variant with the following signature:

            removeExternalModelDefinition(long index)

        Removes the ExternalModelDefinition with the given index.

        A pointer to the ExternalModelDefinition that was removed is returned.
        If no ExternalModelDefinition has been removed, None is returned.

        Parameter 'index' is the index of the ExternalModelDefinition object
        to remove

        Returns the ExternalModelDefinition object removed.  As mentioned
        above,  the caller owns the returned object. None is returned if  the
        given index is out of range.

        """
        return _libsbml.CompSBMLDocumentPlugin_removeExternalModelDefinition(self, *args)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_connectToChild(self)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase parent)

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_enablePackageInternal(self, *args)

    def getOverrideCompFlattening(self):
        """
        getOverrideCompFlattening(self) -> bool

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_getOverrideCompFlattening(self)

    def setOverrideCompFlattening(self, *args):
        """
        setOverrideCompFlattening(self, bool overrideCompFlattening)

        Internal implementation method.

        """
        return _libsbml.CompSBMLDocumentPlugin_setOverrideCompFlattening(self, *args)

CompSBMLDocumentPlugin_swigregister = _libsbml.CompSBMLDocumentPlugin_swigregister
CompSBMLDocumentPlugin_swigregister(CompSBMLDocumentPlugin)

class SBMLUri(_object):
    """
    [SBML 'comp' package]  utility class for handling URIs.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This class implements functionality for parsing URIs and extracting
    information about them.

    See also SBMLFileResolver.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLUri, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLUri, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri) -> SBMLUri
        __init__(self, SBMLUri orig) -> SBMLUri

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLUri(string uri)

        Creates a new SBMLUri from the given string URI.

        @par <hr> Method variant with the following signature:

            SBMLUri(SBMLUri orig)

        Copy constructor.  Creates a copy of an SBMLUri object.

        Parameter 'orig' is the SBMLUri object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_SBMLUri(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLUri
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLUri

        Creates and returns a deep copy of this SBMLUri object.

        Returns a (deep) copy of this SBMLFileResolver object.

        """
        return _libsbml.SBMLUri_clone(self)

    def getScheme(self):
        """
        getScheme(self) -> string

        Returns the scheme of the stored URI.

        The scheme of the URI is the text before the first colon character.
        Typical examples of what this might return are the strings 'file' or
        'http'.  If the current URI does not have a scheme, this method
        returns an empty string.

        Returns the parsed scheme, such as 'http', or an empty string if no
        scheme exists for the current URI.

        """
        return _libsbml.SBMLUri_getScheme(self)

    def getHost(self):
        """
        getHost(self) -> string

        Returns the host portion of the stored URI.

        For a scheme such as 'http', this method returns the part of the URI
        after 'http://' and before the next '/' character.  URIs with file or
        URN schemes have no host; in that case, this method returns an empty
        string.

        Returns the host of the URI, or an empty string in the case of files
        or URNs schemes that do not possess a host portion.

        """
        return _libsbml.SBMLUri_getHost(self)

    def getPath(self):
        """
        getPath(self) -> string

        Returns the path and filename portion of the stored URI.

        This method returns the text after the scheme, colon, and host (if
        present), and before the next '?' character.  The result may be an
        empty string for some URIs.

        Returns the path of the URI (i.e., the full filename with path)

        """
        return _libsbml.SBMLUri_getPath(self)

    def getQuery(self):
        """
        getQuery(self) -> string

        Returns the query portion of the stored URI.

        The equery portion of a URI is the text after a filename, starting
        with the character '?'.  For many URIs, this is an empty string.

        Returns the query of the URI (i.e., the part after the full filename
        with path)

        """
        return _libsbml.SBMLUri_getQuery(self)

    def getUri(self):
        """
        getUri(self) -> string

        Returns the full stored URI, after replacing backslashes with slashes.

        Returns the original URI, with backslashes replaced with slashes.

        """
        return _libsbml.SBMLUri_getUri(self)

    def relativeTo(self, *args):
        """
        relativeTo(self, string uri) -> SBMLUri

        Constructs a new URI relative to this object and the given URI.

        For example,

          SBMLUri('c:\test').relativeTo('test.xml')

        would construct a new file URI, with path c:/test/test.xml.

        Parameter 'uri' is a URI to be added to this object

        Returns the resulting new URI

        """
        return _libsbml.SBMLUri_relativeTo(self, *args)

SBMLUri_swigregister = _libsbml.SBMLUri_swigregister
SBMLUri_swigregister(SBMLUri)

class SBMLResolver(_object):
    """
    [SBML 'comp' package]  Base class for SBML resolvers.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    The SBMLResolver class is the base class for the various SBML
    resolvers: facilities that take a unique identifier as input and
    return the document associated with that identifier.  In SBML,
    resolvers come into play with the SBML Level 3 Hierarchical Model
    Composition package; this package includes features that allow a model
    to be composed from pieces that are external to a given SBML document,
    which implies the need to be able to identify and locate those
    external pieces.  The SBMLResolver class and its subclasses provide
    facilities for software applications to be able to do these tasks.

    LibSBML provides a number of built-in resolvers, and applications can
    create their own by subclassing SBMLResolver and following the
    examples of the existing resolvers.  The following are the built-in
    resolvers in libSBML 5.10.1:

       * SBMLFileResolver

    More resolvers may be provided by libSBML in the future.  Application
    authors may also write their own.

    See also SBMLUri.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLResolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLResolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLResolver
        __init__(self, SBMLResolver c) -> SBMLResolver

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLResolver()

        Creates a new SBMLResolver object.

        @par <hr> Method variant with the following signature:

            SBMLResolver(SBMLResolver c)

        Copy constructor.  Creates a copy of an SBMLResolver object.

        Parameter 'c' is the SBMLResolver object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        """
        this = _libsbml.new_SBMLResolver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLResolver
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLResolver

        Creates and returns a deep copy of this SBMLResolver object.

        Returns a (deep) copy of this SBMLResolver object.

        """
        return _libsbml.SBMLResolver_clone(self)

    def resolve(self, *args):
        """
        resolve(self, string uri, string baseUri = "") -> SBMLDocument
        resolve(self, string uri) -> SBMLDocument

        Resolves the document for the given URI.

        Parameter 'uri' is the URI to the target document Parameter 'baseUri'
        is base URI, in case the URI is a relative one

        Returns the document, if this resolver can resolve the document or
        None.

        """
        return _libsbml.SBMLResolver_resolve(self, *args)

    def resolveUri(self, *args):
        """
        resolveUri(self, string uri, string baseUri = "") -> SBMLUri
        resolveUri(self, string uri) -> SBMLUri

        Resolves the full URI for the given URI without actually reading the
        document.

        Parameter 'uri' is the URI to the target document Parameter 'baseUri'
        is base URI, in case the URI is a relative one

        Returns the full URI to the document, if this resolver can resolve the
        document or None.

        """
        return _libsbml.SBMLResolver_resolveUri(self, *args)

SBMLResolver_swigregister = _libsbml.SBMLResolver_swigregister
SBMLResolver_swigregister(SBMLResolver)

class SBMLFileResolver(SBMLResolver):
    """
    [SBML 'comp' package]  A resolver for documents stored on a file
    system.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    In SBML, resolvers come into play with the SBML Level 3 Hierarchical
    Model Composition package (&ldquo;comp&rdquo;); this package includes
    features that allow a model to be composed from pieces that are
    external to a given SBML document, which implies the need to be able
    to identify and locate those external pieces.  The identifiers used in
    &ldquo;comp&rdquo; are URIs (Uniform Resource Identifiers).

    SBMLFileResolver is a class implementing the ability to resolve URIs
    to files.  It works on the local file system only.  It can resolve
    relative and absolute paths, and directories to be searched can be
    specified using the methods  SBMLFileResolver.addAdditionalDir() and
    SBMLFileResolver.clearAdditionalDirs().

    See also SBMLUri.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLResolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLFileResolver, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLResolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLFileResolver, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SBMLFileResolver
        __init__(self, SBMLFileResolver c) -> SBMLFileResolver

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLFileResolver(SBMLFileResolver c)

        Copy constructor.  Creates a copy of an SBMLFileResolver object.

        Parameter 'c' is the SBMLFileResolver object to copy.

        Throws ValueError:  Thrown if the argument 'orig' is None.

        @par <hr> Method variant with the following signature:

            SBMLFileResolver()

        Creates a new SBMLFileResolver object.

        """
        this = _libsbml.new_SBMLFileResolver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SBMLFileResolver
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> SBMLFileResolver

        Creates and returns a deep copy of this SBMLFileResolver object.

        Returns a (deep) copy of this SBMLFileResolver object.

        """
        return _libsbml.SBMLFileResolver_clone(self)

    def resolve(self, *args):
        """
        resolve(self, string uri, string baseUri = "") -> SBMLDocument
        resolve(self, string uri) -> SBMLDocument

        Resolves the document for the given URI.

        Parameter 'uri' is the URI to the target document Parameter 'baseUri'
        is base URI, in case the URI is a relative one

        Returns the document, if this resolver can resolve the document or
        None.

        """
        return _libsbml.SBMLFileResolver_resolve(self, *args)

    def resolveUri(self, *args):
        """
        resolveUri(self, string uri, string baseUri = "") -> SBMLUri
        resolveUri(self, string uri) -> SBMLUri

        Resolves the full URI for a given URI without actually reading the
        document.

        Parameter 'uri' is the URI to the target document Parameter 'baseUri'
        is base URI, in case the URI is a relative one

        Returns the full URI to the document, if this resolver can resolve the
        document or None.

        """
        return _libsbml.SBMLFileResolver_resolveUri(self, *args)

    def clearAdditionalDirs(self):
        """
        clearAdditionalDirs(self)

        Removes the list of directories to search for files to resolve.

        After this method is called, SBMLFileResolver.resolve() will only
        search absolute or relative directories.  New directories can be added
        using SBMLFileResolver.addAdditionalDir() .

        See also addAdditionalDir().

        """
        return _libsbml.SBMLFileResolver_clearAdditionalDirs(self)

    def addAdditionalDir(self, *args):
        """
        addAdditionalDir(self, string dir)

        Adds a directory to the list of directories to search for files to
        resolve.

        Parameter 'dir' is the directory to add.

        See also clearAdditionalDirs().

        """
        return _libsbml.SBMLFileResolver_addAdditionalDir(self, *args)

SBMLFileResolver_swigregister = _libsbml.SBMLFileResolver_swigregister
SBMLFileResolver_swigregister(SBMLFileResolver)

class SBMLResolverRegistry(_object):
    """
    [SBML 'comp' package]  Registry of all SBML resolvers.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    LibSBML provides facilities for resolving SBML documents in various
    ways from a given URI. Resolvers are implemented as objects derived
    from the class SBMLResolver.

    The resolver registry maintains a list of known resolvers and provides
    methods for discovering them.  It is implemented as a singleton object
    of class SBMLResolverRegistry.  Callers can use the method
    SBMLResolverRegistry.getNumResolvers() to find out how many resolvers
    are registered, then use SBMLResolverRegistry.getResolverByIndex() to
    iterate over each one;

    See also SBMLFileResolver.

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBMLResolverRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBMLResolverRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getInstance():
        """
        getInstance() -> SBMLResolverRegistry

        Returns the singleton instance for the resolver registry.

        Prior to using the registry, callers have to obtain a copy of the
        registry.  This static method provides the means for doing that.

        Returns the singleton for the resolver registry.

        """
        return _libsbml.SBMLResolverRegistry_getInstance()

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
    def addResolver(self, *args):
        """
        addResolver(self, SBMLResolver resolver) -> int

        Adds the given resolver to the registry of SBML resolvers.

        Parameter 'resolver' is the resolver to add to the registry.

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.SBMLResolverRegistry_addResolver(self, *args)

    def removeResolver(self, *args):
        """
        removeResolver(self, int index) -> int

        Removes the resolver with the given index.

        Parameter 'index' is the index of the resolver to be removed

        Returns integer value indicating the success/failure of the operation.
        The possible values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

        """
        return _libsbml.SBMLResolverRegistry_removeResolver(self, *args)

    def getResolverByIndex(self, *args):
        """
        getResolverByIndex(self, int index) -> SBMLResolver

        Returns the resolver with the given index number.

        Resolvers are given arbitrary index numbers by the registry.  Callers
        can use the method SBMLResolverRegistry.getNumResolvers() to find out
        how many resolvers are registered, then use this method to iterate
        over the list and obtain each one in turn.

        Parameter 'index' is the zero-based index of the resolver to fetch.

        Returns the resolver with the given index number, or None if the
        number is less than 0 or there is no resolver at the given index
        position.

        """
        return _libsbml.SBMLResolverRegistry_getResolverByIndex(self, *args)

    def getNumResolvers(self):
        """
        getNumResolvers(self) -> int

        Returns the number of resolvers known by the registry.

        Returns the number of registered resolvers.

        See also getResolverByIndex().

        """
        return _libsbml.SBMLResolverRegistry_getNumResolvers(self)

    __swig_destroy__ = _libsbml.delete_SBMLResolverRegistry
    __del__ = lambda self : None;
    def resolve(self, *args):
        """
        resolve(self, string uri, string baseUri = "") -> SBMLDocument
        resolve(self, string uri) -> SBMLDocument

        Resolves the document for the given URI.

        Parameter 'uri' is the URI to the target document Parameter 'baseUri'
        is base URI, in case the URI is a relative one

        Returns the document, if this resolver can resolve the document or
        None.

        """
        return _libsbml.SBMLResolverRegistry_resolve(self, *args)

    def resolveUri(self, *args):
        """
        resolveUri(self, string uri, string baseUri = "") -> SBMLUri
        resolveUri(self, string uri) -> SBMLUri

        Resolves the full URI for the given URI without actually reading the
        document.

        Parameter 'uri' is the URI to the target document Parameter 'baseUri'
        is base URI, in case the URI is a relative one

        Returns the full URI to the document, if this resolver can resolve the
        document or None.

        """
        return _libsbml.SBMLResolverRegistry_resolveUri(self, *args)

SBMLResolverRegistry_swigregister = _libsbml.SBMLResolverRegistry_swigregister
SBMLResolverRegistry_swigregister(SBMLResolverRegistry)

def SBMLResolverRegistry_getInstance():
  """
    SBMLResolverRegistry_getInstance() -> SBMLResolverRegistry

    Returns the singleton instance for the resolver registry.

    Prior to using the registry, callers have to obtain a copy of the
    registry.  This static method provides the means for doing that.

    Returns the singleton for the resolver registry.

    """
  return _libsbml.SBMLResolverRegistry_getInstance()

class CompFlatteningConverter(SBMLConverter):
    """
    [SBML 'comp' package]  Flattening converter for the
    &ldquo;comp&rdquo; package.

    This class of objects is defined by libSBML only and has no direct
    equivalent in terms of SBML components. It is a class used in the
    implementation of extra functionality provided by libSBML.

    This converter translates a hierarchical model defined with the
    Hierarchical Model Composition package to a 'flattened' version of the
    same model defined without use of the Hierarchical Model Composition
    package.  All of the mathematics of the model will remain, but the
    hierarchical structure will be removed.

    Specifically, the following actions are carried out:

       * Each Submodel is instantiated, that is, copies of the Model it
    points to are created.  The IDs of their elements are changed such
    that the ID of the Submodel is prepended to all IDs, plus a digit if
    needed to ensure uniqueness, plus two underscores ('__').  Typically,
    this results in IDs of the form 'SUBMODELID__ORIGINALID'.  If that
    instantiated Model itself has Submodel children, they too are
    instantiated.

       * All deleted elements are removed from the Model and all
    instantiated Submodels.

       * All replaced elements are removed from the Model and all
    instantiated Submodels.

       * All references to replaced elements are changed to point to the
    replacement element.

       * All remaining elements are placed in a single Model object, which
    is made the new child of the SBMLDocument object.  The original Model,
    ModelDefinition, and ExternalModelDefinition objects are all deleted.

    Note that this means that if this converter is successful, all old
    pointers to the document's Model and any of its children will be
    rendered  obsolete, and will no longer work.

    If package information is present, the same rules apply to that
    package, assuming a flattening implementation exists for that package
    information. If not, the behavior of the converter depends on the
    states of the 'abortIfUnflattenable' and 'stripUnflattenablePackages'
    settings.  Specifically:

        * If 'abortIfUnflattenable' is set to 'all', if any package
    information is found for which there is no flattening algorithm
    available, the converter will abort, return failure, and avoid
    changing the original SBMLDocument

        * If 'abortIfUnflattenable' is set to 'requiredOnly' (the
    default), if any package information is found for a package set
    'required=true' for which there is no flattening algorithm available,
    the converter will abort, return failure, and avoid changing the
    original SBMLDocument.  Package information from packages set
    'required=false' for which there is no flattening algorithm available
    will be ignored, and that information will stay or be removed
    according to the  status of the 'stripUnflattenablePackages' setting.

        * If 'abortIfUnflattenable' is set to 'none', all unflattenable
    packages are ignored, and their information will stay or be removed
    according to the  status of the 'stripUnflattenablePackages' setting.

    For all cases above where the package is ignored, the
    'stripUnflattenablePackages' option is examined:

        * If 'stripUnflattenablePackages' is set to 'true', any
    unflattenable  package information ignored because of the
    'abortIfUnflattenable' option  will be removed from the SBMLDocument
    entirely, including the declaration  of the package's namespace.

        * If 'stripUnflattenablePackages' is set to 'false' (the default),
    any ignored unflattenable package information will remain if it was
    present in the original Model object of the SBMLDocument.  Any package
    information from an instantiated Submodel that was not a child of a
    retained element will be lost.

    Other options are also available, though all have default values:

        * 'basePath':

        *     * If there are ExternalModelDefinitions that are to be
    instantiated in a flattened Submodel, the 'basePath' option may be set
    to a location where those external models may be found.  The default
    is the working directory ('.').

    'leavePorts':

        * If 'leavePorts' is set to 'false' (the default), the flattened
    model will have no Port elements in it.  If set to 'true', any Port
    objects not  referenced by any Replacement or Deletion will be left in
    the resulting  flattened Model.

    'listModelDefinitions':

        * If 'listModelDefinitions' is set to 'false' (the default), no
    ModelDefinition or ExternalModelDefinition objects will be present in
    the flattened SBMLDocument.  If set to 'true', they will remain,
    though they will no longer be referenced by any Submodel in the
    flattened Model child of the SBMLDocument.

    Note:

    If both 'leavePorts' and 'listModelDefinitions' are set to 'false'
    (which they are by default), the Hierarchical Model Composition
    namespace will be removed from the resulting SBMLDocument.

    'performValidation':

        * If 'performValidation' is set to 'true' (the default), the
    SBMLDocument will first be validated before flattening is attempted.
    If there are any validation errors, those errors will be set on the
    SBMLDocument, which will remain otherwise unchanged, and the
    conversion attempt will return failure. Similarly, if the flattened
    Model is not valid, those validation errors will be added to the
    SBMLDocument, which will remain otherwise unchanged, and the
    conversion attempt will return failure.

        * If 'performValidation' is set to 'false', the SBMLDocument will
    be flattened irrespective of any validation errors that may exist.
    The conversion may yet fail if insurmountable errors are encountered
    in the course of trying to flatten the model (for instance, if an
    element is replaced by something that does not exist), but no separate
    validation steps are performed.

    Configuration and use of SBMLIdConverter
    ======================================================================

    CompFlatteningConverter is enabled by creating a ConversionProperties
    object with the option 'flatten comp', and passing this properties
    object to SBMLDocument.convert().  The converter also accepts the
    following options, all of which are optional, and have default values:

        * 'abortIfUnflattenable': 'all', 'requiredOnly' (the default), or
    'none'

       * 'stripUnflattenablePackages': 'true' or 'false' (the default).

       * 'basePath': A string representing the path where the converter
    should search for any ExternalModelDefinitions (default '.')

       * 'leavePorts': 'true' or 'false' (the default).

       * 'listModelDefinitions': 'true' or 'false' (the default).

       * 'performValidation': 'true' (the default) or 'false'

    General information about the use of SBML converters
    ======================================================================

    The use of all the converters follows a similar approach.  First, one
    creates a ConversionProperties object and calls
    ConversionProperties.addOption() on this object with one arguments: a
    text string that identifies the desired converter.  (The text string
    is specific to each converter; consult the documentation for a given
    converter to find out how it should be enabled.)

    Next, for some converters, the caller can optionally set some
    converter-specific properties using additional calls to
    ConversionProperties.addOption().  Many converters provide the ability
    to configure their behavior to some extent; this is realized through
    the use of properties that offer different options.  The default
    property values for each converter can be interrogated using the
    method SBMLConverter.getDefaultProperties() on the converter class in
    question .

    Finally, the caller should invoke the method SBMLDocument.convert()
    with the ConversionProperties object as an argument.

    Example of invoking an SBML converter
    ......................................................................

    The following code fragment illustrates an example using
    SBMLReactionConverter, which is invoked using the option string
    'replaceReactions':

      ConversionProperties props;
      props.addOption('replaceReactions');

    In the case of SBMLReactionConverter, there are no options to affect
    its behavior, so the next step is simply to invoke the converter on an
    SBMLDocument object.  This is also simple to do:

      // Assume that the variable 'document' has been set to an SBMLDocument object.
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to perform conversion due to the following:' << endl;
          document->printErrors(cerr);
      }

    Here is an example of using a converter that offers an option. The
    following code invokes SBMLStripPackageConverter to remove the SBML
    Level 3 'Layout' package from a model.  It sets the name of the
    package to be removed by adding a value for the option named 'package'
    defined by that converter:

      ConversionProperties props;
      props.addOption('stripPackage');
      props.addOption('package', 'layout');
      
      int success = document->convert(props);
      if (success != LIBSBML_OPERATION_SUCCESS)
      {
          cerr << 'Unable to strip the Layout package from the model';
          cerr << 'Error returned: ' << success;
      }

    Available SBML converters in libSBML
    ......................................................................

    LibSBML provides a number of built-in converters; by convention, their
    names end in Converter. The following are the built-in converters
    provided by libSBML 5.10.1:

    @copydetails doc_list_of_libsbml_converters

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompFlatteningConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompFlatteningConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.CompFlatteningConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> CompFlatteningConverter
        __init__(self, CompFlatteningConverter arg0) -> CompFlatteningConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CompFlatteningConverter()

        Constructor.

        @par <hr> Method variant with the following signature:

            CompFlatteningConverter(CompFlatteningConverter)

        Copy constructor.

        """
        this = _libsbml.new_CompFlatteningConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this CompFlatteningConverter.

        Returns a (deep) copy of this CompFlatteningConverter.

        """
        return _libsbml.CompFlatteningConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_CompFlatteningConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        This function determines whether a given converter matches the
        configuration properties given.

        Parameter 'props' is the properties to match

        Returns True if this converter is a match, False otherwise.

        """
        return _libsbml.CompFlatteningConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        Performs the actual conversion.

        Returns status code represeting success/failure/conversion impossible

        """
        return _libsbml.CompFlatteningConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        The properties for the CompFlatteningConverter are:

           * 'flatten comp': the name of this converter

           * 'basePath': the base directory to find external references in

           * 'leavePorts': boolean indicating whether unused ports  should be
        listed in the flattened model; default = false

           * 'listModelDefinitions': boolean indicating whether the model
        definitions should be listed in the flattened model; default = false

           * 'stripUnflattenablePackages': boolean indicating whether packages
        that cannot be flattened should be removed; default = true

           * 'performValidation': boolean indicating whether validation should
        be  performed. When True either an invalid source document or  an
        invalid flattened document will cause flattening to fail; default =
        true

           * 'abortIfUnflattenable': string indicating the required status of
        any unflattenable packages that should cause flattening to fail.
        Possible values are 'none', 'requiredOnly' and 'all'; default =
        requiredOnly

        Note:

        previously there was an 'ignorePackages' option; whose name proved to
        be very misleading. This option has been deprecated and  replaced by
        the 'stripUnflattenablePackages' but will still work.

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.CompFlatteningConverter_getDefaultProperties(self)

CompFlatteningConverter_swigregister = _libsbml.CompFlatteningConverter_swigregister
CompFlatteningConverter_swigregister(CompFlatteningConverter)

def CompFlatteningConverter_init():
  """CompFlatteningConverter_init()"""
  return _libsbml.CompFlatteningConverter_init()

class CompBase(SBase):
    """
    [SBML 'comp' package]  A convenience subclass of &ldquo;comp&rdquo;
    package SBase-derived classes

    The CompBase class derives from SBase, and defines a few functions and
    features common to all SBase-derived classes in the SBML Level 3 @ref
    comp  package (&ldquo;comp&rdquo;).

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_CompBase
    __del__ = lambda self : None;
    def getPackageURI(self):
        """
        getPackageURI(self) -> string

        Returns the XML namespace (URI) of the package extension of this
        object.

        Returns the URI of the package extension of this plugin object.

        """
        return _libsbml.CompBase_getPackageURI(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the package name of this plugin object.

        Returns the package name of this plugin object.

        """
        return _libsbml.CompBase_getPackageName(self)

    def getPackageVersion(self):
        """
        getPackageVersion(self) -> unsigned int

        Returns the package version of the package extension of this plugin
        object.

        Returns the package version of the package extension of this plugin
        object.

        """
        return _libsbml.CompBase_getPackageVersion(self)

    def getParentModel(*args):
        """
        getParentModel(SBase child) -> Model

        Returns the Model object to which the referenced child object belongs.

        """
        return _libsbml.CompBase_getParentModel(*args)

    if _newclass:getParentModel = staticmethod(getParentModel)
    __swig_getmethods__["getParentModel"] = lambda x: getParentModel
CompBase_swigregister = _libsbml.CompBase_swigregister
CompBase_swigregister(CompBase)

def CompBase_getParentModel(*args):
  """
    CompBase_getParentModel(SBase child) -> Model

    Returns the Model object to which the referenced child object belongs.

    """
  return _libsbml.CompBase_getParentModel(*args)

class SBaseRef(CompBase):
    """
    [SBML 'comp' package]  Implementation of the SBaseRef construct from
    the &ldquo;comp&rdquo; package.

    The SBaseRef class was introduced by the SBML Level 3 @ref comp
    package (&ldquo;comp&rdquo;) as the principle way by which submodel
    elements may be referenced.  The SBaseRef class is usually found as
    the base class of a Port, Deletion, ReplacedElement, or ReplacedBy
    class, but may appear as an child of one of the above classes if the
    parent object references a Submodel.

    An SBaseRef object must reference an element using exactly one of the
    optional attributes of the class.  Subclasses of SBaseRef may define
    additional optional attributes that are legal ways to reference an
    element.

    SBaseRef objects may reference elements that do not live in the Model
    parent  of the SBaseRef object.  However, the SBaseRef class itself
    does not  provide a method of determining which Model or Submodel is
    being referenced. The subclasses of SBaseRef provide methods for this
    instead.

    Once the Model to which the SBaseRef object is referencing has been
    established, there are four optional attributes defined in the
    SBaseRef class that are each methods of referencing an element:

        * 'portRef' (type PortSIdRef):  As its name implies, this
    attribute is used to refer to a port identifier, in the case when the
    reference being constructed with the SBaseRef is intended to refer to
    a port on a submodel.  The namespace of the PortSIdRef value is the
    set of identifiers of type PortSId defined in the submodel, not the
    parent model.

       * 'idRef' (type SIdRef): As its name implies, this attribute is
    used to refer to a regular identifier (i.e., the value of an 'id'
    attribute on some other object), in the case when the reference being
    constructed with the SBaseRef is intended to refer to an object that
    does not have a port identifier.  The namespace of the SIdRef value is
    the set of identifiers of type SId defined in the submodel, not the
    parent model.

       * 'unitRef' (type UnitSIdRef): This attribute is used to refer to
    the identifier of a UnitDefinition object.  The namespace of the
    UnitSIdRef value is the set of unit identifiers defined in the
    submodel, not the parent model. (Note that even though this attribute
    is of type UnitSIdRef, the reserved unit identifiers that are defined
    by SBML Level 3 (see Section 3.1.10 of the core specification) are
    *not* permitted as values of 'unitRef'.  Reserved unit identifiers may
    not be replaced or deleted.)

       * 'metaIdRef' (type IDREF): This attribute is used to refer to a
    'metaid' attribute value on some other object, in the case when the
    reference being constructed with the SBaseRef is intended to refer to
    an object that does not have a port identifier.  The namespace of the
    'metaIdRef' value is the entire document in which the referenced model
    resides, but must refer to a subelement of the referenced model.
    Since meta identifiers are optional attributes of SBase, all SBML
    objects have the potential to have a meta identifier value.

    An SBaseRef object may have up to one subcomponent named 'sBaseRef',
    of type SBaseRef.  This permits recursive structures to be constructed
    so that objects inside submodels can be referenced.

    The form of such recursive references must be as follows.  The
    highest-level SBaseRef object of such a chain (which will necessarily
    be an object of class Port, Deletion, ReplacedElement or ReplacedBy,
    because they are the only classes derived from the class SBaseRef)
    must refer to a Submodel object in the containing model.  All child
    SBaseRef objects in the chain must refer to components inside the
    Model instance to which the Submodel refers.

    """
    __swig_setmethods__ = {}
    for _s in [CompBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBaseRef, name, value)
    __swig_getmethods__ = {}
    for _s in [CompBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SBaseRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> SBaseRef
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> SBaseRef
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> SBaseRef
        __init__(self) -> SBaseRef
        __init__(self, CompPkgNamespaces compns) -> SBaseRef
        __init__(self, SBaseRef source) -> SBaseRef

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBaseRef(long level      = CompExtension.getDefaultLevel(), long
        version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new SBaseRef with the given level, version, and package
        version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            SBaseRef(CompPkgNamespaces compns)

        Creates a new SBaseRef with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        @par <hr> Method variant with the following signature:

            SBaseRef(SBaseRef source)

        Copy constructor.

        """
        this = _libsbml.new_SBaseRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBaseRef

        Creates and returns a deep copy of this SBaseRef object.

        Returns a (deep) copy of this SBaseRef object

        """
        return _libsbml.SBaseRef_clone(self)

    __swig_destroy__ = _libsbml.delete_SBaseRef
    __del__ = lambda self : None;
    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.SBaseRef_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object is
        found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.SBaseRef_getElementByMetaId(self, *args)

    def getMetaIdRef(self):
        """
        getMetaIdRef(self) -> string

        Returns the value of the 'metaIdRef' attribute of this SBaseRef.

        Returns the value of the 'metaIdRef' attribute of this SBaseRef.

        """
        return _libsbml.SBaseRef_getMetaIdRef(self)

    def isSetMetaIdRef(self):
        """
        isSetMetaIdRef(self) -> bool

        Predicate returning True or False depending on whether this SBaseRef's
        'metaIdRef' attribute has been set.

        Returns True if this SBaseRef's 'metaIdRef' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.SBaseRef_isSetMetaIdRef(self)

    def setMetaIdRef(self, *args):
        """
        setMetaIdRef(self, string id) -> int

        Sets the value of the 'metaIdRef' attribute of this SBaseRef.

        This method fails if the id is not a valid syntax for an IDREF
        (libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE), or if the SBaseRef already
        points to an element of the submodel using a different interface
        (libsbml.LIBSBML_OPERATION_FAILED).  An sBaseRef must use exactly one
        method to point to a submodel element.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_setMetaIdRef(self, *args)

    def unsetMetaIdRef(self):
        """
        unsetMetaIdRef(self) -> int

        Unsets the value of the 'metaIdRef' attribute of this SBaseRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_unsetMetaIdRef(self)

    def getPortRef(self):
        """
        getPortRef(self) -> string

        Returns the value of the 'portRef' attribute of this SBaseRef.

        Returns the value of the 'portRef' attribute of this SBaseRef.

        """
        return _libsbml.SBaseRef_getPortRef(self)

    def isSetPortRef(self):
        """
        isSetPortRef(self) -> bool

        Predicate returning True or False depending on whether this SBaseRef's
        'portRef' attribute has been set.

        Returns True if this SBaseRef's 'portRef' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.SBaseRef_isSetPortRef(self)

    def setPortRef(self, *args):
        """
        setPortRef(self, string id) -> int

        Sets the value of the 'portRef' attribute of this SBaseRef.  Fails if
        the id is not a valid syntax for a PortSIdRef
        (libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE), or if the SBaseRef already
        points to an element of the submodel using a different interface
        (libsbml.LIBSBML_OPERATION_FAILED).  An SBaseRef must use exactly one
        method to point to a submodel element.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_setPortRef(self, *args)

    def unsetPortRef(self):
        """
        unsetPortRef(self) -> int

        Unsets the value of the 'portRef' attribute of this SBaseRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_unsetPortRef(self)

    def getIdRef(self):
        """
        getIdRef(self) -> string

        Returns the value of the 'idRef' attribute of this SBaseRef.

        Returns the value of the 'idRef' attribute of this SBaseRef.

        """
        return _libsbml.SBaseRef_getIdRef(self)

    def isSetIdRef(self):
        """
        isSetIdRef(self) -> bool

        Predicate returning True or False depending on whether this SBaseRef's
        'idRef' attribute has been set.

        Returns True if this SBaseRef's 'idRef' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.SBaseRef_isSetIdRef(self)

    def setIdRef(self, *args):
        """
        setIdRef(self, string id) -> int

        Sets the value of the 'idRef' attribute of this SBaseRef.

        This method fails if the id is not a valid syntax for an SIdRef
        (libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE), or if the SBaseRef already
        points to an element of the submodel using a different interface
        (libsbml.LIBSBML_OPERATION_FAILED).  A sBaseRef must use exactly one
        method to point to a submodel element.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_setIdRef(self, *args)

    def unsetIdRef(self):
        """
        unsetIdRef(self) -> int

        Unsets the value of the 'idRef' attribute of this SBaseRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_unsetIdRef(self)

    def getUnitRef(self):
        """
        getUnitRef(self) -> string

        Returns the value of the 'unitRef' attribute of this SBaseRef.

        Returns the value of the 'unitRef' attribute of this SBaseRef.

        """
        return _libsbml.SBaseRef_getUnitRef(self)

    def isSetUnitRef(self):
        """
        isSetUnitRef(self) -> bool

        Predicate returning True or False depending on whether this SBaseRef's
        'unitRef' attribute has been set.

        Returns True if this SBaseRef's 'unitRef' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.SBaseRef_isSetUnitRef(self)

    def setUnitRef(self, *args):
        """
        setUnitRef(self, string id) -> int

        Sets the value of the 'unitRef' attribute of this SBaseRef.

        This method fails if the id is not a valid syntax for a UnitSIdRef
        (libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE), or if the SBaseRef already
        points to an element of the submodel using a different interface
        (libsbml.LIBSBML_OPERATION_FAILED).  A sBaseRef must use exactly one
        method to point to a submodel element.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_setUnitRef(self, *args)

    def unsetUnitRef(self):
        """
        unsetUnitRef(self) -> int

        Unsets the value of the 'unitRef' attribute of this SBaseRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_unsetUnitRef(self)

    def getSBaseRef(self, *args):
        """
        getSBaseRef(self) -> SBaseRef
        getSBaseRef(self) -> SBaseRef

        Get the child sBaseRef of this sBaseRef.

        Returns the const SBaseRef child of this SBaseRef, or None if none
        exists.

        """
        return _libsbml.SBaseRef_getSBaseRef(self, *args)

    def isSetSBaseRef(self):
        """
        isSetSBaseRef(self) -> bool

        Predicate for testing whether the sBaseRef for this SBaseRef is set.

        Returns True if the sBaseRef of this SBaseRef is set, False otherwise.

        """
        return _libsbml.SBaseRef_isSetSBaseRef(self)

    def setSBaseRef(self, *args):
        """
        setSBaseRef(self, SBaseRef sBaseRef) -> int

        Sets the sBaseRef definition of this SBaseRef to a copy of the given
        SBaseRef object instance.

        This method fails if the added sBaseRef does not match the
        level/version/package of the parent object or if the added sBaseRef
        cannot be copied.

        Parameter 'sBaseRef' is the SBaseRef object instance to use.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.SBaseRef_setSBaseRef(self, *args)

    def createSBaseRef(self):
        """
        createSBaseRef(self) -> SBaseRef

        Creates a new, empty SBaseRef, adds it to this SBaseRef and  returns
        the created SBaseRef.

        Returns the newly created SBaseRef object instance.

        """
        return _libsbml.SBaseRef_createSBaseRef(self)

    def unsetSBaseRef(self):
        """
        unsetSBaseRef(self) -> int

        Unsets the child SBaseRef of this SBaseRef.  Deletes the former
        SBaseRef child, if one existed.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_unsetSBaseRef(self)

    def getNumReferents(self):
        """
        getNumReferents(self) -> int

        Returns how many elements are being referred to by this SBaseRef.  A
        valid SBaseRef will have exactly one.  Possible referents are portRef,
        idRef, unitRef, and metaIdRef.

        Returns integer value between 0 and 4: the number of different ways
        this element points to its referent.

        """
        return _libsbml.SBaseRef_getNumReferents(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Returns true if getNumReferents() is exactly 1.

        Returns boolean: 'true' if the attributes are correctly set; 'false'
        if not.

        """
        return _libsbml.SBaseRef_hasRequiredAttributes(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.SBaseRef_renameSIdRefs(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.SBaseRef_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_COMP_SBASEREF

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.SBaseRef_getTypeCode(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.SBaseRef_connectToChild(self)

    def getReferencedElementFrom(self, *args):
        """
        getReferencedElementFrom(self, Model model) -> SBase

        Examines the referenced Model for the referenced object, and returns
        it, if found.

        Parameter 'model' is the Model in which to look for the object
        referenced by this SBaseRef.

        Returns the element in the referenced Model to which this SBaseRef
        refers.  If this object references an object in a Submodel, the
        returned object will be in the instantiated Model in that Submodel.

        """
        return _libsbml.SBaseRef_getReferencedElementFrom(self, *args)

    def saveReferencedElement(self):
        """
        saveReferencedElement(self) -> int

        Finds and stores the referenced object by finding the Model it needs
        to point to, calling 'saveReferencedElement' on its parent (which will
        also be a SBaseRef or one of its subclasses), and the storing the
        result.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_saveReferencedElement(self)

    def getReferencedElement(self):
        """
        getReferencedElement(self) -> SBase

        Returns the object pointed to by this element.  If that element was
        previously found and set with 'saveReferencedElement', that element is
        returned; otherwise, 'saveReferencedElement' is called first, and the
        found element is returned.

        """
        return _libsbml.SBaseRef_getReferencedElement(self)

    def clearReferencedElement(self):
        """
        clearReferencedElement(self)

        Removes the saved referenced element, if it had been saved earlier.

        """
        return _libsbml.SBaseRef_clearReferencedElement(self)

    def performDeletion(self):
        """
        performDeletion(self) -> int

        DEPRECATED FUNCTION:  DO NOT USE

        Deletes the referenced object, plus any other elements that element
        points to through ReplacedElement or ReplacedBy children.  Instead of
        calling this function directly, use
        'CompModelPlugin::instantiateSubmodels' instead, which deals with all
        the intricacies of replacements and deletions, and gives you access to
        the non-flattened hierarchical form of the model.

        """
        return _libsbml.SBaseRef_performDeletion(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this SBaseRef's parent, which can either be a List or can be
        another SBaseRef, and tells it to remove this.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.SBaseRef_removeFromParentAndDelete(self)

SBaseRef_swigregister = _libsbml.SBaseRef_swigregister
SBaseRef_swigregister(SBaseRef)

class Replacing(SBaseRef):
    """
    [SBML 'comp' package]  A convenience subclass of the ReplacedElement
    and ReplacedBy constructs from the &ldquo;comp&rdquo; package.

    The Replacing class does not exist officialy in the the @ref comp
    package (&ldquo;comp&rdquo;), but is implemented here as a convenience
    subclass of the ReplacedElement and ReplacedBy classes, since both of
    those classes define a 'submodelRef' attribute.

    The required attribute 'submodelRef' takes a value of type SIdRef,
    which must be the identifier of a Submodel object in the containing
    model.  The model referenced by the Submodel object establishes the
    object namespaces for the 'portRef', 'idRef', 'unitRef' and
    'metaIdRef' attributes: only objects within the Model object may be
    referenced by those attributes.

    """
    __swig_setmethods__ = {}
    for _s in [SBaseRef]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Replacing, name, value)
    __swig_getmethods__ = {}
    for _s in [SBaseRef]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Replacing, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_Replacing
    __del__ = lambda self : None;
    def getSubmodelRef(self):
        """
        getSubmodelRef(self) -> string

        Returns the value of the 'submodelRef' attribute of this SBaseRef.

        Returns the value of the 'submodelRef' attribute of this SBaseRef.

        """
        return _libsbml.Replacing_getSubmodelRef(self)

    def isSetSubmodelRef(self):
        """
        isSetSubmodelRef(self) -> bool

        Predicate returning True or False depending on whether this SBaseRef's
        'submodelRef' attribute has been set.

        Returns True if this SBaseRef's 'submodelRef' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Replacing_isSetSubmodelRef(self)

    def setSubmodelRef(self, *args):
        """
        setSubmodelRef(self, string id) -> int

        Sets the value of the 'submodelRef' attribute of this SBaseRef.  Fails
        if the id is not a valid syntax for an SIdRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Replacing_setSubmodelRef(self, *args)

    def unsetSubmodelRef(self):
        """
        unsetSubmodelRef(self) -> int

        Unsets the value of the 'SubmodelRef' attribute of this SBaseRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Replacing_unsetSubmodelRef(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Returns true if getNumReferents() is exactly 1 and if the submodelRef
        is set.

        Returns boolean: 'true' if the attributes are correctly set; 'false'
        if not.

        """
        return _libsbml.Replacing_hasRequiredAttributes(self)

    def saveReferencedElement(self):
        """
        saveReferencedElement(self) -> int

        Finds and stores the referenced object.  Finds the Submodel to which
        it refers, getting the instantiated Model inside that Submodel,
        calling 'getReferencedElementFrom' on that model, and storing the
        result.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Replacing_saveReferencedElement(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Replacing_renameSIdRefs(self, *args)

    def performReplacement(self):
        """
        performReplacement(self) -> int

        DEPRECATED FUNCTION:  DO NOT USE

        To retain old functionality, this function calls
        performReplacementAndCollect, and then actually removes the now-
        redundant element.  However, this can lead to doubly-deleted elements,
        as well as the incorrect interpretation of some models.  The
        replacement function performReplacementAndCollect has been marked
        protected, in the hopes that people will instead simply use
        CompModelPlugin::instantiateSubmodels, which hides all the complexity
        while still allowing access to a non-flattened version of a
        hierarchical model.

        """
        return _libsbml.Replacing_performReplacement(self)

    def replaceWithAndMaybeDelete(self, *args):
        """
        replaceWithAndMaybeDelete(self, SBase replacement, bool deleteme, ASTNode conversionFactor) -> int

        Internal implementation method.

        """
        return _libsbml.Replacing_replaceWithAndMaybeDelete(self, *args)

Replacing_swigregister = _libsbml.Replacing_swigregister
Replacing_swigregister(Replacing)

class Deletion(SBaseRef):
    """
    [SBML 'comp' package]  Implementation of the Deletion construct from
    the &ldquo;comp&rdquo; package.

    The Deletion class was introduced by the SBML Level 3 @ref comp
    package (&ldquo;comp&rdquo;) to allow elements of submodels to be
    removed before instantiation. The Deletion object class is used to
    define a deletion operation to be applied when a submodel instantiates
    a model definition. Deletions may be useful in hierarchical model
    composition scenarios for various reasons.  For example, some
    components in a submodel may be redundant in the composed model,
    perhaps because the same features are implemented in a different way
    in the new model. Deletions function as follows.  When the Model to
    which the Submodel object refers (via the 'modelRef' attribute) is
    read and processed for inclusion into the composed model, each
    Deletion object identifies an object to remove from that Model
    instance.  The resulting submodel instance consists of everything in
    the Model object instance minus the entities referenced by the list of
    Deletion objects.

    As might be expected, deletions can have wide-ranging implications,
    especially when the object deleted has substantial substructure, as in
    the case of reactions.  The following are rules regarding deletions
    and their effects.

        * An object that has been deleted is considered inaccessible. Any
    element that has been deleted (or replaced) may not be referenced by
    an SBaseRef object.

       * If the deleted object has child objects and other structures, the
    child objects and substructure are also considered to be deleted.

       * It is not an error to delete explicitly an object that is already
    deleted by implication (for example as a result of the second point
    above).  The resulting model is the same.

       * If the deleted object is from an SBML namespace that is not
    understood by the interpreter, the deletion must be ignored -- the
    object will not need to be deleted, as the interpreter could not
    understand the package.  If an interpreter cannot tell whether  a
    referenced object does not exist or if exists in an unparsed namespace
    it may produce a warning.

    The Deletion object class is subclassed from SBaseRef, and reuses all
    the  machinery provided by SBaseRef.  In addition, it defines two
    optional  attributes, 'id' and 'name'.  The 'id' attribute can be used
    to give an identifier to a given deletion operation.  The identifier
    has no mathematical meaning, but it may be useful for creating
    submodels that can be manipulated more directly by other submodels.
    (Indeed, it is legitimate for an enclosing model definition to delete
    a deletion!)

    The optional 'name' attribute is provided on Deletion for the same
    reason it is provided on other elements that have identifiers; viz.,
    to provide for the possibility of giving a human-readable name to the
    object.  The name may be useful in situations when deletions are
    displayed to modelers.

    """
    __swig_setmethods__ = {}
    for _s in [SBaseRef]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deletion, name, value)
    __swig_getmethods__ = {}
    for _s in [SBaseRef]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Deletion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> Deletion
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> Deletion
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> Deletion
        __init__(self) -> Deletion
        __init__(self, CompPkgNamespaces compns) -> Deletion
        __init__(self, Deletion source) -> Deletion

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Deletion(Deletion source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Deletion(long level      = CompExtension.getDefaultLevel(), long
        version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new Deletion with the given level, version, and package
        version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            Deletion(CompPkgNamespaces compns)

        Creates a new Deletion with the given CompPkgNamespaces object.

        """
        this = _libsbml.new_Deletion(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Deletion

        Creates and returns a deep copy of this Deletion object.

        Returns a (deep) copy of this Deletion object

        """
        return _libsbml.Deletion_clone(self)

    __swig_destroy__ = _libsbml.delete_Deletion
    __del__ = lambda self : None;
    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Deletion.

        This method fails if the 'id' is not a valid syntax for an SId.

        Parameter 'id' is the identifier to use

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Deletion_setId(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Deletion.

        Returns the name of this Deletion.

        """
        return _libsbml.Deletion_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this object's
        'id' attribute has been set.

        Some words of explanation about the set/unset/isSet methods: The SBML
        specifications define certain attributes on some classes of objects as
        being optional. This requires an application to be careful about the
        distinction between two cases when reading a model: (1) a given
        attribute has never been set to a value, and therefore should be
        assumed to have the SBML-defined default value if one exists, and (2)
        a given attribute has been set to a value, but the value happens to be
        an empty string. The situation can be ambiguous when reading a model
        from a file or data stream and then examining the data objects that
        libSBML constructs as a result. LibSBML supports these distinctions by
        providing methods to set, unset, and query the status of attributes
        that are optional. The methods have names of the form
        setAttribute(...), unsetAttribute(), and isSetAttribute(), where
        Attribute is the the name of the optional attribute in question.

        Returns True if the 'id' attribute of this object has been set, False
        otherwise.

        """
        return _libsbml.Deletion_isSetId(self)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Deletion.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Deletion_unsetId(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Deletion.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the Deletion

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Deletion_setName(self, *args)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Deletion.

        Returns the name of this Deletion.

        """
        return _libsbml.Deletion_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this object's
        'name' attribute has been set.

        Some words of explanation about the set/unset/isSet methods: The SBML
        specifications define certain attributes on some classes of objects as
        being optional. This requires an application to be careful about the
        distinction between two cases when reading a model: (1) a given
        attribute has never been set to a value, and therefore should be
        assumed to have the SBML-defined default value if one exists, and (2)
        a given attribute has been set to a value, but the value happens to be
        an empty string. The situation can be ambiguous when reading a model
        from a file or data stream and then examining the data objects that
        libSBML constructs as a result. LibSBML supports these distinctions by
        providing methods to set, unset, and query the status of attributes
        that are optional. The methods have names of the form
        setAttribute(...), unsetAttribute(), and isSetAttribute(), where
        Attribute is the the name of the optional attribute in question.

        Returns True if the 'name' attribute of this object has been set,
        false otherwise.

        """
        return _libsbml.Deletion_isSetName(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Deletion.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Deletion_unsetName(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.Deletion_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_COMP_DELETION

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Deletion_getTypeCode(self)

    def saveReferencedElement(self):
        """
        saveReferencedElement(self) -> int

        Finds and stores the referenced object.  It finds its Submodel parent,
        gets its instantiated Model object, calls 'getReferencedElementFrom'
        on that model, and stores the result.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Deletion_saveReferencedElement(self)

Deletion_swigregister = _libsbml.Deletion_swigregister
Deletion_swigregister(Deletion)

class ExternalModelDefinition(CompBase):
    """
    [SBML 'comp' package]  Implementation of the ExternalModelDefinition
    construct from the &ldquo;comp&rdquo; package.

    The ExternalModelDefinition class was introduced by the SBML Level 3
    @ref comp   package (&ldquo;comp&rdquo;) to define references to Model
    objects defined in other files.

    ExternalModelDefinition objects are model definitions -- in and of
    themselves, they are definitions of models but not uses of those
    models. The class provides a way to declare and identify them so that
    Model objects in the present SBML document can use them in Submodel
    objects.

    ExternalModelDefinition contains two required attributes ('source' and
    'id') and three optional attributes ('modelRef', 'md5' and 'name').

    The 'id' attribute serves to provide a handle for the external model
    reference so that Submodel objects can refer to it.  Crucially, it is
    not the identifier of the model being referenced; rather, it is an
    identifier for this ExternalModelDefinition object within the current
    SBML document.  The 'id' attribute takes a required value of type SId,
    and must be unique across all Model and ExternalModelDefinition
    objects present in the document.

    ExternalModelDefinition also has an optional 'name' attribute, of type
    'string'.  The 'name' attribute may be used to provide a human-
    readable description of the ExternalModelDefintion object.

    The required attribute 'source' is used to locate the SBML document
    containing an external model definition.  The value of this attribute
    must be of type anyURI.  Since URIs may be either URLs, URNs, or
    relative or absolute file locations, this offers flexibility in
    referencing SBML documents.  In all cases, the 'source' attribute
    value must refer specifically to an SBML Level 3 Version 1 document;
    prior Levels/Versions of SBML are not supported by this package.  The
    entire file at the given location is referenced.  The 'source'
    attribute must have a value for every ExternalModelDefinition
    instance.

    ExternalModelDefinition's optional attribute 'modelRef', of type
    SIdRef, is used to identify a Model or ExternalModelDefinition object
    within the SBML document located at 'source'.  The object referenced
    may be the main model in the document, or it may be a model definition
    contained in the SBML document's ListOfModelDefinitions or
    ListOfExternalModelDefinitions lists.  Loops are not allowed: it must
    be possible to follow a chain of ExternalModelDefinition objects to
    its end in a Model object.

    In core SBML, the 'id' on Model is an optional attribute, and
    therefore, it is possible that the Model object in a given SBML
    document does not have an identifier.  In that case, there is no value
    to give to the 'modelRef' attribute in ExternalModelDefinition.  If
    'modelRef' does not have a value, then the main model (i.e., the
    <model> element within the <sbml> element) in the referenced file is
    interpreted as being the model referenced by this
    ExternalModelDefinition instance.

    Finally, the optional 'md5' attribute takes a string value.  If set,
    it must be an MD5 checksum value computed over the document referenced
    by 'source'.  This checksum can serve as a data integrity check over
    the contents of the 'source'.  Applications may use this to verify
    that the contents have not changed since the time that the
    ExternalModelDefinition reference was constructed.

    """
    __swig_setmethods__ = {}
    for _s in [CompBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalModelDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [CompBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalModelDefinition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ExternalModelDefinition
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ExternalModelDefinition
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ExternalModelDefinition
        __init__(self) -> ExternalModelDefinition
        __init__(self, CompPkgNamespaces compns) -> ExternalModelDefinition
        __init__(self, ExternalModelDefinition source) -> ExternalModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ExternalModelDefinition(long level      =
        CompExtension.getDefaultLevel(), long version    =
        CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ExternalModelDefinition with the given level, version,
        and package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ExternalModelDefinition(CompPkgNamespaces compns)

        Creates a new ExternalModelDefinition with the given CompPkgNamespaces
        object.

        Parameter 'compns' is the namespace to use.

        @par <hr> Method variant with the following signature:

            ExternalModelDefinition(ExternalModelDefinition source)

        Copy constructor.

        Parameter 'source' is the object to copy.

        """
        this = _libsbml.new_ExternalModelDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ExternalModelDefinition

        Creates and returns a deep copy of this ExternalModelDefinition
        object.

        Returns a (deep) copy of this ExternalModelDefinition object

        """
        return _libsbml.ExternalModelDefinition_clone(self)

    __swig_destroy__ = _libsbml.delete_ExternalModelDefinition
    __del__ = lambda self : None;
    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this ExternalModelDefinition.

        This method fails if the 'id' is not a valid syntax for an SId.

        Parameter 'id' is the identifier to use

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ExternalModelDefinition_setId(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this
        ExternalModelDefinition.

        Returns the name of this ExternalModelDefinition.

        """
        return _libsbml.ExternalModelDefinition_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this object's
        'id' attribute has been set.

        Some words of explanation about the set/unset/isSet methods: The SBML
        specifications define certain attributes on some classes of objects as
        being optional. This requires an application to be careful about the
        distinction between two cases when reading a model: (1) a given
        attribute has never been set to a value, and therefore should be
        assumed to have the SBML-defined default value if one exists, and (2)
        a given attribute has been set to a value, but the value happens to be
        an empty string. The situation can be ambiguous when reading a model
        from a file or data stream and then examining the data objects that
        libSBML constructs as a result. LibSBML supports these distinctions by
        providing methods to set, unset, and query the status of attributes
        that are optional. The methods have names of the form
        setAttribute(...), unsetAttribute(), and isSetAttribute(), where
        Attribute is the the name of the optional attribute in question.

        Returns True if the 'id' attribute of this object has been set, False
        otherwise.

        """
        return _libsbml.ExternalModelDefinition_isSetId(self)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this
        ExternalModelDefinition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ExternalModelDefinition_unsetId(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this
        ExternalModelDefinition.

        The string in 'name' is copied.

        Parameter 'name' is the new name for the ExternalModelDefinition

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ExternalModelDefinition_setName(self, *args)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this
        ExternalModelDefinition.

        Returns the name of this ExternalModelDefinition.

        """
        return _libsbml.ExternalModelDefinition_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this object's
        'name' attribute has been set.

        Some words of explanation about the set/unset/isSet methods: The SBML
        specifications define certain attributes on some classes of objects as
        being optional. This requires an application to be careful about the
        distinction between two cases when reading a model: (1) a given
        attribute has never been set to a value, and therefore should be
        assumed to have the SBML-defined default value if one exists, and (2)
        a given attribute has been set to a value, but the value happens to be
        an empty string. The situation can be ambiguous when reading a model
        from a file or data stream and then examining the data objects that
        libSBML constructs as a result. LibSBML supports these distinctions by
        providing methods to set, unset, and query the status of attributes
        that are optional. The methods have names of the form
        setAttribute(...), unsetAttribute(), and isSetAttribute(), where
        Attribute is the the name of the optional attribute in question.

        Returns True if the 'name' attribute of this object has been set,
        False otherwise.

        """
        return _libsbml.ExternalModelDefinition_isSetName(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this
        ExternalModelDefinition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ExternalModelDefinition_unsetName(self)

    def getModelRef(self):
        """
        getModelRef(self) -> string

        Returns the value of the 'modelRef' attribute of this
        ExternalModelDefinition.

        Returns the value of the 'modelRef' attribute of this
        ExternalModelDefinition.

        """
        return _libsbml.ExternalModelDefinition_getModelRef(self)

    def isSetModelRef(self):
        """
        isSetModelRef(self) -> bool

        Predicate returning True or False depending on whether this
        ExternalModelDefinition's 'modelRef' attribute has been set.

        Returns True if this ExternalModelDefinition's 'modelRef' attribute
        has been set, otherwise False is returned.

        """
        return _libsbml.ExternalModelDefinition_isSetModelRef(self)

    def setModelRef(self, *args):
        """
        setModelRef(self, string id) -> int

        Sets the value of the 'modelRef' attribute of this
        ExternalModelDefinition.  Fails if the 'id' is not a valid syntax for
        an SIdRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ExternalModelDefinition_setModelRef(self, *args)

    def unsetModelRef(self):
        """
        unsetModelRef(self) -> int

        Unsets the value of the 'modelRef' attribute of this
        ExternalModelDefinition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ExternalModelDefinition_unsetModelRef(self)

    def getMd5(self):
        """
        getMd5(self) -> string

        Returns the value of the 'md5' attribute of this
        ExternalModelDefinition.

        Returns the value of the 'md5' attribute of this
        ExternalModelDefinition.

        """
        return _libsbml.ExternalModelDefinition_getMd5(self)

    def isSetMd5(self):
        """
        isSetMd5(self) -> bool

        Predicate returning True or False depending on whether this
        ExternalModelDefinition's 'md5' attribute has been set.

        Returns True if this ExternalModelDefinition's 'md5' attribute has
        been set, otherwise False is returned.

        """
        return _libsbml.ExternalModelDefinition_isSetMd5(self)

    def setMd5(self, *args):
        """
        setMd5(self, string md5) -> int

        Sets the value of the 'md5' attribute of this ExternalModelDefinition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ExternalModelDefinition_setMd5(self, *args)

    def unsetMd5(self):
        """
        unsetMd5(self) -> int

        Unsets the value of the 'md5' attribute of this
        ExternalModelDefinition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ExternalModelDefinition_unsetMd5(self)

    def getSource(self):
        """
        getSource(self) -> string

        Returns the value of the 'source' attribute of this
        ExternalModelDefinition.

        Returns the value of the 'source' attribute of this
        ExternalModelDefinition.

        """
        return _libsbml.ExternalModelDefinition_getSource(self)

    def isSetSource(self):
        """
        isSetSource(self) -> bool

        Predicate returning True or False depending on whether this
        ExternalModelDefinition's 'source' attribute has been set.

        Returns True if this ExternalModelDefinition's 'source' attribute has
        been set, otherwise False is returned.

        """
        return _libsbml.ExternalModelDefinition_isSetSource(self)

    def setSource(self, *args):
        """
        setSource(self, string source) -> int

        Sets the value of the 'source' attribute of this
        ExternalModelDefinition.

        Parameter 'source' is the value to use for the 'source' attribute.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ExternalModelDefinition_setSource(self, *args)

    def unsetSource(self):
        """
        unsetSource(self) -> int

        Unsets the value of the 'source' attribute of this
        ExternalModelDefinition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ExternalModelDefinition_unsetSource(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Returns true if the 'modelRef' and 'id' attributes are set, and false
        if not.

        This method does not check to see if the referred-to model actually
        exists.

        Returns boolean: True if the attributes are correctly set; False if
        not.

        """
        return _libsbml.ExternalModelDefinition_hasRequiredAttributes(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ExternalModelDefinition_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_COMP_EXTERNALMODELDEFINITION

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ExternalModelDefinition_getTypeCode(self)

    def getReferencedModel(self):
        """getReferencedModel(self) -> Model"""
        return _libsbml.ExternalModelDefinition_getReferencedModel(self)

ExternalModelDefinition_swigregister = _libsbml.ExternalModelDefinition_swigregister
ExternalModelDefinition_swigregister(ExternalModelDefinition)

class ListOfDeletions(ListOf):
    """
    [SBML 'comp' package]  Implementation of the ListOfDeletions
    construct from the &ldquo;comp&rdquo; package.

    The ListOfDeletions is a container for the &ldquo;comp&rdquo; Submodel
    that defines elements to be removed before instantiation.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ListOfSubmodels.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfDeletions, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfDeletions, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfDeletions

        Creates and returns a deep copy of this ListOfDeletions object.

        Returns a (deep) copy of this ListOfDeletions.

        """
        return _libsbml.ListOfDeletions_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ListOfDeletions
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ListOfDeletions
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ListOfDeletions
        __init__(self) -> ListOfDeletions
        __init__(self, CompPkgNamespaces compns) -> ListOfDeletions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfDeletions(long level      = CompExtension.getDefaultLevel(),
        long version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ListOfDeletions with the given level, version, and
        package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ListOfDeletions(CompPkgNamespaces compns)

        Creates a new ListOfDeletions with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_ListOfDeletions(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> Deletion
        get(self, unsigned int n) -> Deletion
        get(self, string sid) -> Deletion
        get(self, string sid) -> Deletion

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Deletion from the ListOfDeletions.

        Parameter 'n' is the index number of the Deletion to get.

        Returns the nth Deletion in this ListOfDeletions.

        See also size(), size().

        """
        return _libsbml.ListOfDeletions_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Deletion
        remove(self, string sid) -> Deletion

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfDeletions items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size(), size().

        """
        return _libsbml.ListOfDeletions_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Deletion objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_COMP_DELETION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfDeletions_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfDeletions_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfDeletions
    __del__ = lambda self : None;
ListOfDeletions_swigregister = _libsbml.ListOfDeletions_swigregister
ListOfDeletions_swigregister(ListOfDeletions)

class ListOfExternalModelDefinitions(ListOf):
    """
    [SBML 'comp' package]  Implementation of the
    ListOfExternalModelDefinitions construct from the &ldquo;comp&rdquo;
    package.

    The ListOfExternalModelDefinitions is a container for the extended
    SBMLDocument that defines references to Models defined in external
    files.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ListOfSubmodels.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfExternalModelDefinitions, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfExternalModelDefinitions, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfExternalModelDefinitions

        Creates and returns a deep copy of this ListOfExternalModelDefinitions
        object.

        Returns a (deep) copy of this ListOfExternalModelDefinitions.

        """
        return _libsbml.ListOfExternalModelDefinitions_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ListOfExternalModelDefinitions
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ListOfExternalModelDefinitions
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ListOfExternalModelDefinitions
        __init__(self) -> ListOfExternalModelDefinitions
        __init__(self, CompPkgNamespaces compns) -> ListOfExternalModelDefinitions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfExternalModelDefinitions(long level      =
        CompExtension.getDefaultLevel(), long version    =
        CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ListOfExternalModelDefinitions with the given level,
        version, and package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ListOfExternalModelDefinitions(CompPkgNamespaces compns)

        Creates a new ListOfExternalModelDefinitions with the given
        CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_ListOfExternalModelDefinitions(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> ExternalModelDefinition
        get(self, unsigned int n) -> ExternalModelDefinition
        get(self, string sid) -> ExternalModelDefinition
        get(self, string sid) -> ExternalModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a ExternalModelDefinition from the ListOfExternalModelDefinitions.

        Parameter 'n' is the index number of the ExternalModelDefinition to
        get.

        Returns the nth ExternalModelDefinition in this
        ListOfExternalModelDefinitions.

        See also size(), size().

        """
        return _libsbml.ListOfExternalModelDefinitions_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> ExternalModelDefinition
        remove(self, string sid) -> ExternalModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfExternalModelDefinitions items
        and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size(), size().

        """
        return _libsbml.ListOfExternalModelDefinitions_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Model objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_COMP_EXTERNALMODELDEFINITION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfExternalModelDefinitions_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfExternalModelDefinitions_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfExternalModelDefinitions
    __del__ = lambda self : None;
ListOfExternalModelDefinitions_swigregister = _libsbml.ListOfExternalModelDefinitions_swigregister
ListOfExternalModelDefinitions_swigregister(ListOfExternalModelDefinitions)

class ListOfModelDefinitions(ListOf):
    """
    [SBML 'comp' package]  Implementation of the ListOfModelDefinitions
    construct from the &ldquo;comp&rdquo; package.

    The ListOfModelDefinitions is a container for the extended
    SBMLDocument that allows one to define multiple Models in a single
    file for use in Submodel objects.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ListOfSubmodels.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfModelDefinitions, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfModelDefinitions, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfModelDefinitions

        Creates and returns a deep copy of this ListOfModelDefinitions object.

        Returns a (deep) copy of this ListOfModelDefinitions.

        """
        return _libsbml.ListOfModelDefinitions_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ListOfModelDefinitions
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ListOfModelDefinitions
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ListOfModelDefinitions
        __init__(self) -> ListOfModelDefinitions
        __init__(self, CompPkgNamespaces compns) -> ListOfModelDefinitions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfModelDefinitions(long level      =
        CompExtension.getDefaultLevel(), long version    =
        CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ListOfModelDefinitions with the given level, version,
        and package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ListOfModelDefinitions(CompPkgNamespaces compns)

        Creates a new ListOfModelDefinitions with the given CompPkgNamespaces
        object.

        """
        this = _libsbml.new_ListOfModelDefinitions(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> ModelDefinition
        get(self, unsigned int n) -> ModelDefinition
        get(self, string sid) -> ModelDefinition
        get(self, string sid) -> ModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a ModelDefinition from the ListOfModelDefinitions.

        Parameter 'n' is the index number of the ModelDefinition to get.

        Returns the nth ModelDefinition in this ListOfModelDefinitions.

        See also size(), size().

        """
        return _libsbml.ListOfModelDefinitions_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> ModelDefinition
        remove(self, string sid) -> ModelDefinition

        Removes the nth item from this ListOfModelDefinitions items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        """
        return _libsbml.ListOfModelDefinitions_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., ModelDefinition objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_COMP_MODELDEFINITION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfModelDefinitions_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfModelDefinitions_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfModelDefinitions
    __del__ = lambda self : None;
ListOfModelDefinitions_swigregister = _libsbml.ListOfModelDefinitions_swigregister
ListOfModelDefinitions_swigregister(ListOfModelDefinitions)

class ListOfPorts(ListOf):
    """
    [SBML 'comp' package]  Implementation of the ListOfPorts construct
    from the &ldquo;comp&rdquo; package.

    The ListOfPorts is a container for the extended  Model for Port
    objects for that Model.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ListOfSubmodels.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfPorts, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfPorts, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfPorts

        Creates and returns a deep copy of this ListOfPorts object.

        Returns a (deep) copy of this ListOfPorts.

        """
        return _libsbml.ListOfPorts_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ListOfPorts
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ListOfPorts
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ListOfPorts
        __init__(self) -> ListOfPorts
        __init__(self, CompPkgNamespaces compns) -> ListOfPorts

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfPorts(long level      = CompExtension.getDefaultLevel(),
        long version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ListOfPorts with the given level, version, and package
        version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ListOfPorts(CompPkgNamespaces compns)

        Creates a new ListOfPorts with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_ListOfPorts(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> Port
        get(self, unsigned int n) -> Port
        get(self, string sid) -> Port
        get(self, string sid) -> Port

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Port from the ListOfPorts.

        Parameter 'n' is the index number of the Port to get.

        Returns the nth Port in this ListOfPorts.

        See also size(), size().

        """
        return _libsbml.ListOfPorts_get(self, *args)

    def remove(self, *args):
        """
        remove(self, string sid) -> Port
        remove(self, unsigned int n) -> Port

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfPorts items and returns a pointer
        to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size(), size().

        """
        return _libsbml.ListOfPorts_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Port objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_COMP_PORT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfPorts_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfPorts_getElementName(self)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.  Since
        the id of Port objects are in the PortSId namespace, no Port object is
        returned by this function.

        Parameter 'id' is string representing the id of objects to find

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.ListOfPorts_getElementBySId(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfPorts
    __del__ = lambda self : None;
ListOfPorts_swigregister = _libsbml.ListOfPorts_swigregister
ListOfPorts_swigregister(ListOfPorts)

class ListOfReplacedElements(ListOf):
    """
    [SBML 'comp' package]  Implementation of the ListOfReplacedElements
    construct from the &ldquo;comp&rdquo; package.

    The ListOfReplacedElements is a container for any SBase object.  It
    contains ReplacedElement objects, which point to elements the parent
    SBase object is to replace.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ListOfSubmodels.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfReplacedElements, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfReplacedElements, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfReplacedElements

        Creates and returns a deep copy of this ListOfReplacedElements object.

        Returns a (deep) copy of this ListOfReplacedElements.

        """
        return _libsbml.ListOfReplacedElements_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ListOfReplacedElements
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ListOfReplacedElements
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ListOfReplacedElements
        __init__(self) -> ListOfReplacedElements
        __init__(self, CompPkgNamespaces compns) -> ListOfReplacedElements

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfReplacedElements(long level      =
        CompExtension.getDefaultLevel(), long version    =
        CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ListOfReplacedElements with the given level, version,
        and package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ListOfReplacedElements(CompPkgNamespaces compns)

        Creates a new ListOfReplacedElements with the given CompPkgNamespaces
        object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_ListOfReplacedElements(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> ReplacedElement
        get(self, unsigned int n) -> ReplacedElement

        Get a ReplacedElement from the ListOfReplacedElements.

        Parameter 'n' is the index number of the ReplacedElement to get.

        Returns the nth ReplacedElement in this ListOfReplacedElements.

        See also size().

        """
        return _libsbml.ListOfReplacedElements_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> ReplacedElement

        Removes the nth item from this ListOfReplacedElements items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        """
        return _libsbml.ListOfReplacedElements_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., ReplacedElements objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_COMP_REPLACEDELEMENT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfReplacedElements_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfReplacedElements_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfReplacedElements
    __del__ = lambda self : None;
ListOfReplacedElements_swigregister = _libsbml.ListOfReplacedElements_swigregister
ListOfReplacedElements_swigregister(ListOfReplacedElements)

class ListOfSubmodels(ListOf):
    """
    [SBML 'comp' package]  Implementation of the ListOfSubmodels
    construct from the &ldquo;comp&rdquo; package.

    The ListOfSubmodels is a container for the extended  Model that
    contains Submodel objects to be instantiated in that Model.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ListOfReplacedElements.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfSubmodels, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfSubmodels, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfSubmodels

        Creates and returns a deep copy of this ListOfSubmodels object.

        Returns a (deep) copy of this ListOfSubmodels.

        """
        return _libsbml.ListOfSubmodels_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ListOfSubmodels
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ListOfSubmodels
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ListOfSubmodels
        __init__(self) -> ListOfSubmodels
        __init__(self, CompPkgNamespaces compns) -> ListOfSubmodels

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfSubmodels(long level      = CompExtension.getDefaultLevel(),
        long version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ListOfSubmodels with the given level, version, and
        package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ListOfSubmodels(CompPkgNamespaces compns)

        Creates a new ListOfSubmodels with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_ListOfSubmodels(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> Submodel
        get(self, unsigned int n) -> Submodel
        get(self, string sid) -> Submodel
        get(self, string sid) -> Submodel

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Submodel from the ListOfSubmodels.

        Parameter 'n' is the index number of the Submodel to get.

        Returns the nth Submodel in this ListOfSubmodels.

        See also size(), size().

        """
        return _libsbml.ListOfSubmodels_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Submodel
        remove(self, string sid) -> Submodel

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfSubmodels items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size(), size().

        """
        return _libsbml.ListOfSubmodels_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., Submodel objects, if the list is non-empty).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_COMP_SUBMODEL (default).

        See also getPackageName().

        """
        return _libsbml.ListOfSubmodels_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfSubmodels_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfSubmodels
    __del__ = lambda self : None;
ListOfSubmodels_swigregister = _libsbml.ListOfSubmodels_swigregister
ListOfSubmodels_swigregister(ListOfSubmodels)

class ModelDefinition(Model):
    """
    [SBML 'comp' package]  Implementation of the ModelDefinition
    construct from the &ldquo;comp&rdquo; package.

    The @ref comp   package (&ldquo;comp&rdquo;) allows multiple Model
    objects to be defined in a single SBMLDocument.  While these new Model
    objects are not new SBML classes, they are given a new name,
    <modelDefinition>, and reside in ListOfModelDefinition objects.  In
    libSBML, this class inherits from the Model class, changing only the
    expected parent of the object, and the XML name.

    An additional restriction is placed on the 'id' attribute of
    ModelDefinition objects:  not only must it be unique across all such
    attributes of type SId  within the ModelDefintion, it must also be
    unique across all Model,  ModelDefinition, and ExternalModelDefinition
    objects in the same SBMLDocument.

    """
    __swig_setmethods__ = {}
    for _s in [Model]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [Model]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelDefinition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ModelDefinition
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ModelDefinition
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ModelDefinition
        __init__(self) -> ModelDefinition
        __init__(self, CompPkgNamespaces compns) -> ModelDefinition
        __init__(self, Model source) -> ModelDefinition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ModelDefinition(Model source)

        Copy constructor from base Model object.

        @par <hr> Method variant with the following signature:

            ModelDefinition(long level      = CompExtension.getDefaultLevel(),
        long version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ModelDefinition with the given level, version, and
        package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ModelDefinition(CompPkgNamespaces compns)

        Creates a new ModelDefinition with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_ModelDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ModelDefinition

        Creates and returns a deep copy of this ModelDefinition object.

        Returns a (deep) copy of this ModelDefinition object

        """
        return _libsbml.ModelDefinition_clone(self)

    __swig_destroy__ = _libsbml.delete_ModelDefinition
    __del__ = lambda self : None;
    def getElementName(self):
        """
        getElementName(self) -> string

        The only difference between a Model and a ModelDefinition is the
        element name ('modelDefinition')

        Returns the string of the name of this element ('modelDefintion'). See
        also getTypeCode().

        """
        return _libsbml.ModelDefinition_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_COMP_MODELDEFINITION

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ModelDefinition_getTypeCode(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this Model's parent ListOfModelDefinitions and removes itself
        from it and deletes itself.

        This method actually just calls the SBase function, since the Model
        class overrides it, but that's actually what we want to happen here.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ModelDefinition_removeFromParentAndDelete(self)

ModelDefinition_swigregister = _libsbml.ModelDefinition_swigregister
ModelDefinition_swigregister(ModelDefinition)

class Port(SBaseRef):
    """
    [SBML 'comp' package]  Implementation of the Port construct from the
    &ldquo;comp&rdquo; package.

    The Port class was introduced by the SBML Level 3 @ref comp  package
    (&ldquo;comp&rdquo;) to allow a Model to define a standard interface
    between it and other models that might use it as a submodel.  It
    derives from the SBaseRef class, and the elements defined there refer
    to elements in the same parent Model as the Port object.  A Port
    object instance therefore uses those attributes to define a port for a
    component in a model.  When other SBaseRef or SBaseRef-derived classes
    refer to a Port object using a 'portRef' attribute, the element being
    referenced is the element the Port object itself points to.

    In the present formulation of the Hierarchical Model Composition
    package, the use of ports is not enforced, nor is there any mechanism
    to restrict which ports may be used in what ways -- they are only an
    advisory construct.  Future versions of this SBML package may provide
    additional functionality to support explicit restrictions on port use.
    For the present definition of Hierarchical Model Composition, users of
    models containing ports are encouraged to respect the modeler's
    intention in defining ports, and use the port definitions to interact
    with components through their ports (when they have ports defined)
    rather than interact directly with the components.

    The required attribute 'id' is used to give an identifier to a Port
    object so that other objects can refer to it.  The attribute has type
    PortSId and is essentially identical to the SBML primitive type SId,
    except that its namespace is limited to the identifiers of Port
    objects defined within a Model object.  In parallel, the PortSId type
    has a companion type, PortSIdRef, that corresponds to the SBML
    primitive type SIdRef; the value space of PortSIdRef is limited to
    PortSId values.

    """
    __swig_setmethods__ = {}
    for _s in [SBaseRef]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    for _s in [SBaseRef]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> Port
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> Port
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> Port
        __init__(self) -> Port
        __init__(self, CompPkgNamespaces compns) -> Port
        __init__(self, Port source) -> Port

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Port(long level      = CompExtension.getDefaultLevel(), long
        version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new Port with the given level, version, and package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            Port(Port source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Port(CompPkgNamespaces compns)

        Creates a new Port with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_Port(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Port

        Creates and returns a deep copy of this Port object.

        Returns a (deep) copy of this Port object

        """
        return _libsbml.Port_clone(self)

    __swig_destroy__ = _libsbml.delete_Port
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Port.

        Returns the value of the 'id' attribute of this Port.

        """
        return _libsbml.Port_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this Port's
        'id' attribute has been set.

        Returns True if this Port's 'id' attribute has been set,  otherwise
        False is returned.

        """
        return _libsbml.Port_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Port.

        This method fails if the 'id' is not a valid syntax for an SId.

        Parameter 'id' is the identifier for the port

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Port_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Port.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Port_unsetId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Port.

        Returns the value of the 'name' attribute of this Port.

        """
        return _libsbml.Port_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this Port's
        'name' attribute has been set.

        Returns True if this Port's 'name' attribute has been set,  otherwise
        False is returned.

        """
        return _libsbml.Port_isSetName(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Port.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Port_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Port.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Port_unsetName(self)

    def setPortRef(self, *args):
        """
        setPortRef(self, string id) -> int

        Overrides SBaseRef::setPortRef to always fail, because Port objects
        themselves cannot refer to model elements by PortSId.

        Parameter 'id' is the identifier to set for the port reference

        Returns integer value indicating failure of the function.   The
        possible value returned by this function is:

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Port_setPortRef(self, *args)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Returns true if the 'id' attribute is set, and if exactly one of the
        optional attributes of SBaseRef (portRef, idRef, metaIdRef,  and
        unitRef)are set.

        Returns boolean: 'true' if the attributes are correctly set; 'false'
        if not.

        """
        return _libsbml.Port_hasRequiredAttributes(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.Port_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_COMP_PORT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Port_getTypeCode(self)

    def saveReferencedElement(self):
        """
        saveReferencedElement(self) -> int

        Finds and stores the referenced object by finding its Model parent,
        calling 'getReferencedElementFrom()' on that model, and storing the
        result.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Port_saveReferencedElement(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Port_renameSIdRefs(self, *args)

    def renameUnitSIdRefs(self, *args):
        """
        renameUnitSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given UnitSIdRef type attribute value with
        another value.

        @par In SBML, unit definitions have identifiers of type UnitSId.  In
        SBML Level 3, an explicit data type called UnitSIdRef was introduced
        for attribute values that refer to UnitSId values; in previous Levels
        of SBML, this data type did not exist and attributes were simply
        described to as 'referring to a unit identifier', but the effective
        data type was the same as UnitSIdRef in Level 3.  These and other
        methods of libSBML refer to the type UnitSIdRef for all Levels of
        SBML, even if the corresponding SBML specification did not explicitly
        name the data type.

        This method works by looking at all unit identifier attribute values
        (including, if appropriate, inside mathematical formulas), comparing
        the referenced unit identifiers to the value of 'oldid'.  If any
        matches are found, the matching values are replaced with 'newid'.  The
        method does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Port_renameUnitSIdRefs(self, *args)

    def renameMetaIdRefs(self, *args):
        """
        renameMetaIdRefs(self, string oldid, string newid)

        Replaces all uses of a given meta identifier attribute value with
        another value.

        @par In SBML, object 'meta' identifiers are of the XML data type ID;
        the SBML object attribute itself is typically named metaid.  All
        attributes that hold values referring to values of type ID are of the
        XML data type IDREF.  They are also sometimes informally referred to
        as 'metaid refs', in analogy to the SBML-defined type SIdRef.

        This method works by looking at all meta-identifier attribute values,
        comparing the identifiers to the value of 'oldid'.  If any matches are
        found, the matching identifiers are replaced with 'newid'.  The method
        does not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Port_renameMetaIdRefs(self, *args)

Port_swigregister = _libsbml.Port_swigregister
Port_swigregister(Port)

class ReplacedBy(Replacing):
    """
    [SBML 'comp' package]  Implementation of the ReplacedBy construct
    from the &ldquo;comp&rdquo; package.

    The ReplacedBy class was introduced by the SBML Level 3 @ref comp

    package (&ldquo;comp&rdquo;) to allow submodel elements to be
    'canonical' versions of the element while still allowing the parent
    model to reference those elements.  Whereas a ReplacedElement object
    indicates that the containing object replaces another, a ReplacedBy
    object indicates the converse: the parent object is to be replaced by
    another object. As is the case with ReplacedElement, the ReplacedBy
    class inherits from SBaseRef.   It additionally defines one required
    attribute ('submodelRef'), defined in  libSBML in the Replacing class.

    """
    __swig_setmethods__ = {}
    for _s in [Replacing]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplacedBy, name, value)
    __swig_getmethods__ = {}
    for _s in [Replacing]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReplacedBy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ReplacedBy
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ReplacedBy
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ReplacedBy
        __init__(self) -> ReplacedBy
        __init__(self, CompPkgNamespaces compns) -> ReplacedBy
        __init__(self, ReplacedBy source) -> ReplacedBy

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ReplacedBy(ReplacedBy source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            ReplacedBy(long level      = CompExtension.getDefaultLevel(), long
        version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ReplacedBy with the given level, version, and package
        version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ReplacedBy(CompPkgNamespaces compns)

        Creates a new ReplacedBy with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_ReplacedBy(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ReplacedBy

        Creates and returns a deep copy of this ReplacedBy object.

        Returns a (deep) copy of this ReplacedBy object

        """
        return _libsbml.ReplacedBy_clone(self)

    __swig_destroy__ = _libsbml.delete_ReplacedBy
    __del__ = lambda self : None;
    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ReplacedBy_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_COMP_REPLACEDBY

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ReplacedBy_getTypeCode(self)

    def removeFromParentAndDelete(self):
        """
        removeFromParentAndDelete(self) -> int

        Finds this ReplacedBy's SBase parent, gets the &ldquo;comp&rdquo;
        plugin from it, and tells that to remove this.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ReplacedBy_removeFromParentAndDelete(self)

    def updateIDs(self, *args):
        """
        updateIDs(self, SBase oldnames, SBase newnames) -> int

        Internal implementation method.

        """
        return _libsbml.ReplacedBy_updateIDs(self, *args)

ReplacedBy_swigregister = _libsbml.ReplacedBy_swigregister
ReplacedBy_swigregister(ReplacedBy)

class ReplacedElement(Replacing):
    """
    [SBML 'comp' package]  Implementation of the ReplacedElement
    construct from the &ldquo;comp&rdquo; package.

    The ReplacedElement class was introduced by the SBML Level 3 @ref comp
    package (&ldquo;comp&rdquo;) to allow submodel elements to be
    replaced, but still allow references to those elements to be valid.  A
    ReplacedElement object is essentially a pointer to a submodel object
    that should be considered 'replaced'.  The object holding the
    ReplacedElement instance is the one doing the replacing; the object
    pointed to by the ReplacedElement object is the object being replaced.

    A replacement implies that dependencies involving the replaced object
    must be updated: all references to the replaced object elsewhere in
    the model are taken to refer to the replacement object instead.  For
    example, if one species replaces another, then any reference to the
    original species in mathematical formulas, or lists of reactants or
    products or modifiers in reactions, or initial assignments, or any
    other SBML construct, are taken to refer to the replacement species,
    with its value possibly modified by either this object's
    'conversionFactor' attribute or the relevant submodel's conversion
    factors. Moreover, any  annotations that refer to the replaced
    species' 'metaid' value must be made to refer to the replacement
    species' 'metaid' value instead; and anything else that referred
    either to an object identifier (i.e., attributes such as the 'id'
    attribute whose types inherit from the SId primitive data type) or the
    meta identifier (i.e., the 'metaid' attribute or any other attribute
    that inherits from the ID primitive data type) must be made to refer
    to the replacement species object instead.

    It is worth noting that local parameters (inside Reaction objects)
    pose an interesting edge case for these rules. In order to determine
    which element is pointed to by a <cn> element within the <math>
    element of a KineticLaw object, it is necessary to examine the local
    parameters of that kinetic law's parent Reaction object.  Whether the
    <cn> element is considered to point to something new, then, depends on
    whether it pointed to the local parameter and whether that local
    parameter was replaced, even if the text of the element matched the
    SId value of another element in the model. Note that local parameters
    may only effectively be replaced by global parameters, since
    references to its SId are only valid from within the Reaction element
    to which it belongs.

    When referencing an element within the Submodel pointed to by the
    'submodelRef' attribute (defined in libSBML in the Replacing class),
    any of the four attributes inherited from  SBaseRef for the purpose
    may be used (portRef, idRef, unitRef, or  metaIdRef), or a new
    optional attribute 'deletion' may be used.  This attribute must be the
    identifier of a Deletion object in the parent Model of the
    ReplacedElement (i.e., the value of some Deletion object's 'id'
    attribute).  When 'deletion' is set, it means the ReplacedElement
    object is actually an annotation to indicate that the replacement
    object replaces something deleted from a submodel.  The use of the
    'deletion' attribute overrides the use of the attributes inherited
    from SBaseRef: instead of using, e.g., 'portRef' or 'idRef', the
    ReplacedElement instance sets 'deletion' to the identifier of the
    Deletion object.  In addition, the referenced Deletion must be a child
    of the Submodel referenced by the 'submodelRef' attribute.

    The use of ReplacedElement objects to refer to deletions has no effect
    on the composition of models or the mathematical properties of the
    result.  It serves instead to help record the decision-making process
    that lead to a given model.  It can be particularly useful for
    visualization purposes, as well as to serve as scaffolding where other
    types of annotations can be added using the normal Annotation
    subcomponents available on all SBase objects in SBML.

    As with the Submodel class, it may be that the units of the replaced
    element may not match the units of the replacement element.  In this
    case,  the optional 'conversionFactor' attribute may be used.  This
    attribute, if present, defines how to transform or rescale the
    replaced object's value so that it is appropriate for the new contexts
    in which the object appears.  This attribute takes a value of type
    SIdRef, and the value must refer to a Parameter object instance
    defined in the model.  This parameter then acts as a conversion
    factor.

    The value of the conversion factor should be defined such that a
    single unit of the replaced element multiplied by the conversion
    factor should equal a single unit of the replacement element, and the
    units of the conversion factor should be commensurate with that
    transformation.  The referenced Parameter may be non-constant,
    particularly if a Species is replaced by a Species with a different
    'hasOnlySubstanceUnits' attribute value, thus changing amount to
    concentration, or visa versa.

    """
    __swig_setmethods__ = {}
    for _s in [Replacing]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReplacedElement, name, value)
    __swig_getmethods__ = {}
    for _s in [Replacing]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReplacedElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> ReplacedElement
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> ReplacedElement
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> ReplacedElement
        __init__(self) -> ReplacedElement
        __init__(self, CompPkgNamespaces compns) -> ReplacedElement
        __init__(self, ReplacedElement source) -> ReplacedElement

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ReplacedElement(long level      = CompExtension.getDefaultLevel(),
        long version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new ReplacedElement with the given level, version, and
        package version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            ReplacedElement(CompPkgNamespaces compns)

        Creates a new ReplacedElement with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        @par <hr> Method variant with the following signature:

            ReplacedElement(ReplacedElement source)

        Copy constructor.

        """
        this = _libsbml.new_ReplacedElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ReplacedElement

        Creates and returns a deep copy of this ReplacedElement object.

        Returns a (deep) copy of this ReplacedElement object

        """
        return _libsbml.ReplacedElement_clone(self)

    __swig_destroy__ = _libsbml.delete_ReplacedElement
    __del__ = lambda self : None;
    def getConversionFactor(self):
        """
        getConversionFactor(self) -> string

        Returns the value of the 'conversionFactor' attribute of this
        ReplacedElement.

        Returns the value of the 'conversionFactor' attribute of this
        ReplacedElement.

        """
        return _libsbml.ReplacedElement_getConversionFactor(self)

    def isSetConversionFactor(self):
        """
        isSetConversionFactor(self) -> bool

        Predicate returning True or False depending on whether this
        ReplacedElement's 'conversionFactor' attribute has been set.

        Returns True if this ReplacedElement's 'conversionFactor' attribute
        has been set,  otherwise False is returned.

        """
        return _libsbml.ReplacedElement_isSetConversionFactor(self)

    def setConversionFactor(self, *args):
        """
        setConversionFactor(self, string id) -> int

        Sets the value of the 'conversionFactor' attribute of this
        ReplacedElement.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ReplacedElement_setConversionFactor(self, *args)

    def unsetConversionFactor(self):
        """
        unsetConversionFactor(self) -> int

        Unsets the value of the 'conversionFactor' attribute of this
        ReplacedElement.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ReplacedElement_unsetConversionFactor(self)

    def getDeletion(self):
        """
        getDeletion(self) -> string

        Returns the value of the 'deletion' attribute of this ReplacedElement.

        Returns the value of the 'deletion' attribute of this ReplacedElement.

        """
        return _libsbml.ReplacedElement_getDeletion(self)

    def isSetDeletion(self):
        """
        isSetDeletion(self) -> bool

        Predicate returning True or False depending on whether this SBaseRef's
        'deletion' attribute has been set.

        Returns True if this ReplacedElement's 'deletion' attribute has been
        set,  otherwise False is returned.

        """
        return _libsbml.ReplacedElement_isSetDeletion(self)

    def setDeletion(self, *args):
        """
        setDeletion(self, string id) -> int

        Sets the value of the 'deletion' attribute of this ReplacedElement.

        This method fails if the id is not a valid syntax for an SIdRef
        (libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE), or if the SBaseRef already
        points to an element of the submodel using a different interface
        (libsbml.LIBSBML_OPERATION_FAILED).  A ReplacedElement must use
        exactly one method to point to a submodel element: deletion, port,
        idRef, unitRef, or metaIdRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ReplacedElement_setDeletion(self, *args)

    def unsetDeletion(self):
        """
        unsetDeletion(self) -> int

        Unsets the value of the 'deletion' attribute of this ReplacedElement.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ReplacedElement_unsetDeletion(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ReplacedElement_getElementName(self)

    def getNumReferents(self):
        """
        getNumReferents(self) -> int

        Returns how many elements are being referred to by this
        ReplacedElement.  A valid ReplacedElement will have exactly one.
        Possible referents are deletion, port, idRef, unitRef, and metaIdRef.

        Returns integer value between 0 and 5: the number of different ways
        this element points to its referent.

        """
        return _libsbml.ReplacedElement_getNumReferents(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_COMP_REPLACEDELEMENT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ReplacedElement_getTypeCode(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.ReplacedElement_renameSIdRefs(self, *args)

    def getReferencedElementFrom(self, *args):
        """
        getReferencedElementFrom(self, Model model) -> SBase

        Finds the SBase object this ReplacedElement object points to, if any.

        """
        return _libsbml.ReplacedElement_getReferencedElementFrom(self, *args)

ReplacedElement_swigregister = _libsbml.ReplacedElement_swigregister
ReplacedElement_swigregister(ReplacedElement)

class Submodel(CompBase):
    """
    [SBML 'comp' package]  Implementation of the Submodel construct from
    the &ldquo;comp&rdquo; package.

    The Submodel class was introduced by the SBML Level 3 @ref comp
    package (&ldquo;comp&rdquo;) as the principle way by which models are
    structured hierarchically.  Submodels are instantiations of models
    contained within other models.  They reference another Model that is
    to be instantiated within its parent Model, and additionally define
    how that Model is to be modified before instantiation.

    The Submodel object class has a required attribute 'modelRef', which
    must reference another Model or ExternalModelDefinition object present
    in the SBML Document.  This referenced Model is the model to be
    instantiated.

    It also has a required attribute, 'id', to give the submodel a unique
    identifier by which other parts of an SBML model definition can refer
    to it, and an optional 'name' attribute of type string.  Identifiers
    and names must be used according to the guidelines described in the
    SBML specification.

    The Submodel class also provides constructs that define how the
    referenced Model object is to be modified before it is instantiated in
    the enclosing model.  If numerical values in the referenced model must
    be changed in order  to fit them into their new context as part of the
    submodel, the changes can  be handled through conversion factors.  If
    one or more structural features  in the referenced model are
    undesirable and should be removed, the changes  can be handled through
    deletions.  (For example, an initial assignment or  reaction may not
    be relevant in its new context and should be removed.)

    In some cases, the referenced Model may have been written with
    different units than the containing model.  For most model elements,
    this is not a problem: it is already possible to have Species and
    Parameter objects with different units in a single model, for example,
    so in this case the resulting hierarchical model would be treated in
    exactly the same way as any other model with Species and Parameters
    with different units.

    However, two units in SBML models are fixed and must not vary between
    SBML elements: time and extent.  The units of time are set once per
    model, and affect the core elements of RateRule, KineticLaw, Delay,
    and the csymbols 'time' and 'delay'.  Even if the model does not
    explicitly state what the units of time actually are, they are defined
    to be consistent across the model, and therefore might differ from the
    units of time across a parent model.  To correct this imbalance, the
    optional attribute 'timeConversionFactor' may be used, which, if
    defined, must reference a constant parameter in the parent model. The
    value of the time conversion factor should be defined such that a
    single unit of time in the Submodel multiplied by the time conversion
    factor should equal a single unit of time in the parent model.

    Extent is the unit in SBML that defines how the KineticLaw of a
    Reaction affects species quantities: kinetic laws are defined to be in
    units of extent/time.  No other SBML core construct is defined in
    terms of extent. If the effective units of extent in a submodel differ
    from the effective units of extent in the parent model (regardless of
    whether either defined what those units actually are), the optional
    attribute 'extentConversionFactor' may be used, which, if defined,
    must reference a constant parameter in the parent model. The value of
    the extent conversion factor should be defined such that a single unit
    of extent in the Submodel multiplied by the extent conversion factor
    should equal a single unit of extent in the parent model.

    If features of the referenced model must be removed, a Deletion should
    be added  to the Submodel object.  A Submodel may contain a child
    ListOfDeletions, which in turn may contain one or more Deletion items.
    Each Deletion references a single element of the referenced Model that
    must be removed before instantiating that Model as a submodel of the
    parent Model.

    """
    __swig_setmethods__ = {}
    for _s in [CompBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Submodel, name, value)
    __swig_getmethods__ = {}
    for _s in [CompBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Submodel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> Submodel
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> Submodel
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> Submodel
        __init__(self) -> Submodel
        __init__(self, CompPkgNamespaces compns) -> Submodel
        __init__(self, Submodel source) -> Submodel

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Submodel(long level      = CompExtension.getDefaultLevel(), long
        version    = CompExtension.getDefaultVersion(), long pkgVersion =
        CompExtension.getDefaultPackageVersion())

        Creates a new Submodel with the given level, version, and package
        version.

        Parameter 'level' is the SBML Level Parameter 'version' is the Version
        within the SBML Level Parameter 'pkgVersion' is the version of the
        package

        @par <hr> Method variant with the following signature:

            Submodel(Submodel source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Submodel(CompPkgNamespaces compns)

        Creates a new Submodel with the given CompPkgNamespaces object.

        Parameter 'compns' is the namespace to use

        """
        this = _libsbml.new_Submodel(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Submodel

        Creates and returns a deep copy of this Submodel object.

        Returns a (deep) copy of this Submodel object

        """
        return _libsbml.Submodel_clone(self)

    __swig_destroy__ = _libsbml.delete_Submodel
    __del__ = lambda self : None;
    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.Submodel_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object is
        found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.Submodel_getElementByMetaId(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Submodel.

        Returns the value of the 'id' attribute of this Submodel.

        """
        return _libsbml.Submodel_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this Submodel's
        'id' attribute has been set.

        Returns True if this Submodel's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Submodel_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Submodel.  Fails if the
        id is not a valid syntax for an SId.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Submodel_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Submodel.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Submodel_unsetId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Submodel.

        Returns the value of the 'name' attribute of this Submodel.

        """
        return _libsbml.Submodel_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this Submodel's
        'name' attribute has been set.

        Returns True if this Submodel's 'name' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Submodel_isSetName(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Submodel.  Fails if the
        name is empty.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Submodel_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Submodel.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Submodel_unsetName(self)

    def getModelRef(self):
        """
        getModelRef(self) -> string

        Returns the value of the 'modelRef' attribute of this Submodel.

        Returns the value of the 'modelRef' attribute of this Submodel.

        """
        return _libsbml.Submodel_getModelRef(self)

    def isSetModelRef(self):
        """
        isSetModelRef(self) -> bool

        Predicate returning True or False depending on whether this Submodel's
        'modelRef' attribute has been set.

        Returns True if this Submodel's 'modelRef' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Submodel_isSetModelRef(self)

    def setModelRef(self, *args):
        """
        setModelRef(self, string modelRef) -> int

        Sets the value of the 'modelRef' attribute of this Submodel.  Fails if
        the modelRef is not a valid syntax for an SIdRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Submodel_setModelRef(self, *args)

    def unsetModelRef(self):
        """
        unsetModelRef(self) -> int

        Unsets the value of the 'modelRef' attribute of this Submodel.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Submodel_unsetModelRef(self)

    def getSubstanceConversionFactor(self):
        """
        getSubstanceConversionFactor(self) -> string

        Returns an empty string, since 'substanceConversionFactor' is not a
        part of the comp spec.

        Returns an empty string

        """
        return _libsbml.Submodel_getSubstanceConversionFactor(self)

    def isSetSubstanceConversionFactor(self):
        """
        isSetSubstanceConversionFactor(self) -> bool

        Returns False, since 'substanceConversionFactor' is not a part of the
        comp spec.

        Returns False.

        """
        return _libsbml.Submodel_isSetSubstanceConversionFactor(self)

    def setSubstanceConversionFactor(self, *args):
        """
        setSubstanceConversionFactor(self, string id) -> int

        Automatically fails, since 'substanceConversionFactor' is not a part
        of the comp spec.

        Returns integer value indicating success/failure of the operation. The
        possible return value is:

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Submodel_setSubstanceConversionFactor(self, *args)

    def unsetSubstanceConversionFactor(self):
        """
        unsetSubstanceConversionFactor(self) -> int

        Automatically fails, since 'substanceConversionFactor' is not a part
        of the comp spec.

        Returns integer value indicating success/failure of the operation. The
        possible return value is:

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Submodel_unsetSubstanceConversionFactor(self)

    def getTimeConversionFactor(self):
        """
        getTimeConversionFactor(self) -> string

        Returns the value of the 'timeConversionFactor' attribute of this
        Submodel.

        Returns the value of the 'timeConversionFactor' attribute of this
        Submodel.

        """
        return _libsbml.Submodel_getTimeConversionFactor(self)

    def isSetTimeConversionFactor(self):
        """
        isSetTimeConversionFactor(self) -> bool

        Predicate returning True or False depending on whether this Submodel's
        'timeConversionFactor' attribute has been set.

        Returns True if this Submodel's 'timeConversionFactor' attribute has
        been set,  otherwise False is returned.

        """
        return _libsbml.Submodel_isSetTimeConversionFactor(self)

    def setTimeConversionFactor(self, *args):
        """
        setTimeConversionFactor(self, string id) -> int

        Sets the value of the 'timeConversionFactor' attribute of this
        Submodel. Fails if the id is not a valid syntax for an SIdRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Submodel_setTimeConversionFactor(self, *args)

    def unsetTimeConversionFactor(self):
        """
        unsetTimeConversionFactor(self) -> int

        Unsets the value of the 'timeConversionFactor' attribute of this
        Submodel.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Submodel_unsetTimeConversionFactor(self)

    def getExtentConversionFactor(self):
        """
        getExtentConversionFactor(self) -> string

        Returns the value of the 'extentConversionFactor' attribute of this
        Submodel.

        Returns the value of the 'extentConversionFactor' attribute of this
        Submodel.

        """
        return _libsbml.Submodel_getExtentConversionFactor(self)

    def isSetExtentConversionFactor(self):
        """
        isSetExtentConversionFactor(self) -> bool

        Predicate returning True or False depending on whether this Submodel's
        'extentConversionFactor' attribute has been set.

        Returns True if this Submodel's 'extentConversionFactor' attribute has
        been set,  otherwise False is returned.

        """
        return _libsbml.Submodel_isSetExtentConversionFactor(self)

    def setExtentConversionFactor(self, *args):
        """
        setExtentConversionFactor(self, string id) -> int

        Sets the value of the 'extentConversionFactor' attribute of this
        Submodel.  Fails if the id is not a valid syntax for an SIdRef.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Submodel_setExtentConversionFactor(self, *args)

    def unsetExtentConversionFactor(self):
        """
        unsetExtentConversionFactor(self) -> int

        Unsets the value of the 'extentConversionFactor' attribute of this
        Submodel.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Submodel_unsetExtentConversionFactor(self)

    def getListOfDeletions(self, *args):
        """
        getListOfDeletions(self) -> ListOfDeletions
        getListOfDeletions(self) -> ListOfDeletions

        Returns the ListOf object that holds all deletions.

        Returns the ListOf object that holds all deletions.

        """
        return _libsbml.Submodel_getListOfDeletions(self, *args)

    def getDeletion(self, *args):
        """
        getDeletion(self, unsigned int n) -> Deletion
        getDeletion(self, unsigned int n) -> Deletion
        getDeletion(self, string id) -> Deletion
        getDeletion(self, string id) -> Deletion

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getDeletion(string id)

        Returns the deletion with the given 'id'. If the id is invalid, None
        is returned.

        Parameter 'id' is the id of the Deletion to get.

        Returns the Deletion in the ListOfDeletions with the given 'id'.

        @par <hr> Method variant with the following signature:

            getDeletion(long n)

        Returns the deletion with the given index. If the index is invalid,
        None is returned.

        Parameter 'n' is the index number of the Deletion to get.

        Returns the nth Deletion in the ListOfDeletions.

        """
        return _libsbml.Submodel_getDeletion(self, *args)

    def addDeletion(self, *args):
        """
        addDeletion(self, Deletion deletion) -> int

        Adds a copy of the given Deletion object to the list of deletions.

        Parameter 'deletion' is the Deletion object to be added to the list of
        deletions.  Fails if the added deletion is None, does not match the
        level/version/package of the parent object, or cannot be added to the
        list of deletions.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

        """
        return _libsbml.Submodel_addDeletion(self, *args)

    def getNumDeletions(self):
        """
        getNumDeletions(self) -> unsigned int

        Returns the number of deletions for this Submodel.

        Returns the number of deletions for this Submodel.

        """
        return _libsbml.Submodel_getNumDeletions(self)

    def createDeletion(self):
        """
        createDeletion(self) -> Deletion

        Creates a Deletion object, adds it to the end of the deletion objects
        list and returns a pointer to the newly created object.

        Returns a newly created Deletion object

        """
        return _libsbml.Submodel_createDeletion(self)

    def removeDeletion(self, *args):
        """
        removeDeletion(self, unsigned int index) -> Deletion
        removeDeletion(self, string sid) -> Deletion

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeDeletion(long index)

        Removes the deletion with the given index from the Submodel. A pointer
        to the deletion that was removed is returned. If no deletion has been
        removed, None is returned.

        Parameter 'index' is the index of the Deletion object to remove

        Returns the Deletion object removed.  As mentioned above,  the caller
        owns the returned object. None is returned if  the given index is out
        of range.

        @par <hr> Method variant with the following signature:

            removeDeletion(string sid)

        Removes the deletion with the given identifier from the Submodel. A
        pointer to the deletion that was removed is returned. If no deletion
        has been removed, None is returned.

        Parameter 'sid' is string representing the identifier of the Deletion
        object to remove

        Returns the Deletion object removed.  As mentioned above,  the caller
        owns the returned object. None is returned if  the given 'sid' is not
        found.

        """
        return _libsbml.Submodel_removeDeletion(self, *args)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Returns true if the 'submodel' attribute is set, and if
        getNumReferents() is exactly 1.

        Returns boolean: 'true' if the attributes are correctly set; 'false'
        if not.

        """
        return _libsbml.Submodel_hasRequiredAttributes(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.Submodel_getElementName(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Renames the conversion factor attributes on this element if 'oldid'
        matches.

        """
        return _libsbml.Submodel_renameSIdRefs(self, *args)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_COMP_SUBMODEL

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Submodel_getTypeCode(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Submodel_connectToChild(self)

    def createObject(self, *args):
        """
        createObject(self, XMLInputStream stream) -> SBase

        Internal implementation method.

        """
        return _libsbml.Submodel_createObject(self, *args)

    def instantiate(self):
        """
        instantiate(self) -> int

        Find and create a local copy of the Model object referenced by this
        Submodel.  Is recursive, in that if the instantiated Model contains
        any Submodel objects, those Submodels will themselves be instantiated.
        If an instantiated model previously existed, it is deleted and a new
        one is created.  For this reason, call this function only once, or
        call Submodel.getInstantiation().

        Returns an integer value indicating success/failure of the operation.
        Possible return values from this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED In this case, 'invalid object'
        means that this Submodel itself is invalid, and no Model can be
        instantiated from it.

        """
        return _libsbml.Submodel_instantiate(self)

    def performDeletions(self):
        """
        performDeletions(self) -> int

        Delete elements in the instantiated submodel, based on any Deletions
        from this Submodel's listOfDeletions.

        Returns an integer value indicating success/failure of the operation.
        Possible return values from this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED In this case, 'invalid object'
        means that this Submodel itself is invalid, and no Model can be
        instantiated from it.

        """
        return _libsbml.Submodel_performDeletions(self)

    def replaceElement(self, *args):
        """
        replaceElement(self, SBase toReplace, SBase replacement) -> int

        Delete the element in question from the stored instantiated Model, and
        replace all references to it with references to the replacement
        object. libsbml.LIBSBML_INVALID_OBJECT means that this Submodel itself
        or one of the passed-in objects are invalid.
        libsbml.LIBSBML_OPERATION_FAILED means that the routine failed for
        some othe reason.

        Returns an integer value indicating success/failure of the operation.
        Possible return values from this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_OBJECT

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Submodel_replaceElement(self, *args)

    def getInstantiation(self, *args):
        """
        getInstantiation(self) -> Model
        getInstantiation(self) -> Model

        Get the instantiated Model this Submodel contains rules to create.
        Calls instantiate() automatically if this operation has not yet been
        performed, and/or if the operation failed the last time it was called.
        Any modifictions that have been performed with performDeletions(),
        replaceElement(), or convertTimeAndExtent() function calls will be
        included.

        Returns the instantiated Model object: a clone of the original,
        modified according to the performDeletions() and replaceElement()
        functions that have been called.  Returns None if any error is
        encountered.

        """
        return _libsbml.Submodel_getInstantiation(self, *args)

    def clearInstantiation(self):
        """
        clearInstantiation(self)

        Delete the instantiated Model, if it exists.

        """
        return _libsbml.Submodel_clearInstantiation(self)

    def convertTimeAndExtent(self):
        """
        convertTimeAndExtent(self) -> int

        Convert all references to time and extent in the instantiated Model,
        according to the timeConversionFactor and extentConversionFactor
        attributes.

        """
        return _libsbml.Submodel_convertTimeAndExtent(self)

    def getListOfAllInstantiatedElements(self):
        """getListOfAllInstantiatedElements(self) -> SBaseList"""
        return _libsbml.Submodel_getListOfAllInstantiatedElements(self)

Submodel_swigregister = _libsbml.Submodel_swigregister
Submodel_swigregister(Submodel)

CompUnknown = _libsbml.CompUnknown
CompNSUndeclared = _libsbml.CompNSUndeclared
CompElementNotInNs = _libsbml.CompElementNotInNs
CompDuplicateComponentId = _libsbml.CompDuplicateComponentId
CompUniqueModelIds = _libsbml.CompUniqueModelIds
CompUniquePortIds = _libsbml.CompUniquePortIds
CompInvalidSIdSyntax = _libsbml.CompInvalidSIdSyntax
CompInvalidSubmodelRefSyntax = _libsbml.CompInvalidSubmodelRefSyntax
CompInvalidDeletionSyntax = _libsbml.CompInvalidDeletionSyntax
CompInvalidConversionFactorSyntax = _libsbml.CompInvalidConversionFactorSyntax
CompInvalidNameSyntax = _libsbml.CompInvalidNameSyntax
CompReplacedUnitsShouldMatch = _libsbml.CompReplacedUnitsShouldMatch
CompOneListOfReplacedElements = _libsbml.CompOneListOfReplacedElements
CompLOReplaceElementsAllowedElements = _libsbml.CompLOReplaceElementsAllowedElements
CompLOReplacedElementsAllowedAttribs = _libsbml.CompLOReplacedElementsAllowedAttribs
CompEmptyLOReplacedElements = _libsbml.CompEmptyLOReplacedElements
CompOneReplacedByElement = _libsbml.CompOneReplacedByElement
CompAttributeRequiredMissing = _libsbml.CompAttributeRequiredMissing
CompAttributeRequiredMustBeBoolean = _libsbml.CompAttributeRequiredMustBeBoolean
CompRequiredTrueIfElementsRemain = _libsbml.CompRequiredTrueIfElementsRemain
CompRequiredFalseIfAllElementsReplaced = _libsbml.CompRequiredFalseIfAllElementsReplaced
CompOneListOfModelDefinitions = _libsbml.CompOneListOfModelDefinitions
CompEmptyLOModelDefs = _libsbml.CompEmptyLOModelDefs
CompLOModelDefsAllowedElements = _libsbml.CompLOModelDefsAllowedElements
CompLOExtModelDefsAllowedElements = _libsbml.CompLOExtModelDefsAllowedElements
CompLOModelDefsAllowedAttributes = _libsbml.CompLOModelDefsAllowedAttributes
CompLOExtModDefsAllowedAttributes = _libsbml.CompLOExtModDefsAllowedAttributes
CompOneListOfExtModelDefinitions = _libsbml.CompOneListOfExtModelDefinitions
CompAttributeRequiredMustBeTrue = _libsbml.CompAttributeRequiredMustBeTrue
CompExtModDefAllowedCoreAttributes = _libsbml.CompExtModDefAllowedCoreAttributes
CompExtModDefAllowedElements = _libsbml.CompExtModDefAllowedElements
CompExtModDefAllowedAttributes = _libsbml.CompExtModDefAllowedAttributes
CompReferenceMustBeL3 = _libsbml.CompReferenceMustBeL3
CompModReferenceMustIdOfModel = _libsbml.CompModReferenceMustIdOfModel
CompExtModMd5DoesNotMatch = _libsbml.CompExtModMd5DoesNotMatch
CompInvalidSourceSyntax = _libsbml.CompInvalidSourceSyntax
CompInvalidModelRefSyntax = _libsbml.CompInvalidModelRefSyntax
CompInvalidMD5Syntax = _libsbml.CompInvalidMD5Syntax
CompCircularExternalModelReference = _libsbml.CompCircularExternalModelReference
CompOneListOfOnModel = _libsbml.CompOneListOfOnModel
CompNoEmptyListOfOnModel = _libsbml.CompNoEmptyListOfOnModel
CompLOSubmodelsAllowedElements = _libsbml.CompLOSubmodelsAllowedElements
CompLOPortsAllowedElements = _libsbml.CompLOPortsAllowedElements
CompLOSubmodelsAllowedAttributes = _libsbml.CompLOSubmodelsAllowedAttributes
CompLOPortsAllowedAttributes = _libsbml.CompLOPortsAllowedAttributes
CompSubmodelAllowedCoreAttributes = _libsbml.CompSubmodelAllowedCoreAttributes
CompSubmodelAllowedElements = _libsbml.CompSubmodelAllowedElements
CompOneListOfDeletionOnSubmodel = _libsbml.CompOneListOfDeletionOnSubmodel
CompSubmodelNoEmptyLODeletions = _libsbml.CompSubmodelNoEmptyLODeletions
CompLODeletionsAllowedElements = _libsbml.CompLODeletionsAllowedElements
CompLODeletionAllowedAttributes = _libsbml.CompLODeletionAllowedAttributes
CompSubmodelAllowedAttributes = _libsbml.CompSubmodelAllowedAttributes
CompModReferenceSyntax = _libsbml.CompModReferenceSyntax
CompInvalidTimeConvFactorSyntax = _libsbml.CompInvalidTimeConvFactorSyntax
CompInvalidExtentConvFactorSyntax = _libsbml.CompInvalidExtentConvFactorSyntax
CompSubmodelMustReferenceModel = _libsbml.CompSubmodelMustReferenceModel
CompSubmodelCannotReferenceSelf = _libsbml.CompSubmodelCannotReferenceSelf
CompModCannotCircularlyReferenceSelf = _libsbml.CompModCannotCircularlyReferenceSelf
CompTimeConversionMustBeParameter = _libsbml.CompTimeConversionMustBeParameter
CompExtentConversionMustBeParameter = _libsbml.CompExtentConversionMustBeParameter
CompPortRefMustReferencePort = _libsbml.CompPortRefMustReferencePort
CompIdRefMustReferenceObject = _libsbml.CompIdRefMustReferenceObject
CompUnitRefMustReferenceUnitDef = _libsbml.CompUnitRefMustReferenceUnitDef
CompMetaIdRefMustReferenceObject = _libsbml.CompMetaIdRefMustReferenceObject
CompParentOfSBRefChildMustBeSubmodel = _libsbml.CompParentOfSBRefChildMustBeSubmodel
CompInvalidPortRefSyntax = _libsbml.CompInvalidPortRefSyntax
CompInvalidIdRefSyntax = _libsbml.CompInvalidIdRefSyntax
CompInvalidUnitRefSyntax = _libsbml.CompInvalidUnitRefSyntax
CompInvalidMetaIdRefSyntax = _libsbml.CompInvalidMetaIdRefSyntax
CompOneSBaseRefOnly = _libsbml.CompOneSBaseRefOnly
CompDeprecatedSBaseRefSpelling = _libsbml.CompDeprecatedSBaseRefSpelling
CompSBaseRefMustReferenceObject = _libsbml.CompSBaseRefMustReferenceObject
CompSBaseRefMustReferenceOnlyOneObject = _libsbml.CompSBaseRefMustReferenceOnlyOneObject
CompNoMultipleReferences = _libsbml.CompNoMultipleReferences
CompPortMustReferenceObject = _libsbml.CompPortMustReferenceObject
CompPortMustReferenceOnlyOneObject = _libsbml.CompPortMustReferenceOnlyOneObject
CompPortAllowedAttributes = _libsbml.CompPortAllowedAttributes
CompPortReferencesUnique = _libsbml.CompPortReferencesUnique
CompDeletionMustReferenceObject = _libsbml.CompDeletionMustReferenceObject
CompDeletionMustReferOnlyOneObject = _libsbml.CompDeletionMustReferOnlyOneObject
CompDeletionAllowedAttributes = _libsbml.CompDeletionAllowedAttributes
CompReplacedElementMustRefObject = _libsbml.CompReplacedElementMustRefObject
CompReplacedElementMustRefOnlyOne = _libsbml.CompReplacedElementMustRefOnlyOne
CompReplacedElementAllowedAttributes = _libsbml.CompReplacedElementAllowedAttributes
CompReplacedElementSubModelRef = _libsbml.CompReplacedElementSubModelRef
CompReplacedElementDeletionRef = _libsbml.CompReplacedElementDeletionRef
CompReplacedElementConvFactorRef = _libsbml.CompReplacedElementConvFactorRef
CompReplacedElementSameReference = _libsbml.CompReplacedElementSameReference
CompReplacedElementNoDelAndConvFact = _libsbml.CompReplacedElementNoDelAndConvFact
CompReplacedByMustRefObject = _libsbml.CompReplacedByMustRefObject
CompReplacedByMustRefOnlyOne = _libsbml.CompReplacedByMustRefOnlyOne
CompReplacedByAllowedAttributes = _libsbml.CompReplacedByAllowedAttributes
CompReplacedBySubModelRef = _libsbml.CompReplacedBySubModelRef
CompMustReplaceSameClass = _libsbml.CompMustReplaceSameClass
CompMustReplaceIDs = _libsbml.CompMustReplaceIDs
CompMustReplaceMetaIDs = _libsbml.CompMustReplaceMetaIDs
CompMustReplacePackageIDs = _libsbml.CompMustReplacePackageIDs
CompUnresolvedReference = _libsbml.CompUnresolvedReference
CompNoModelInReference = _libsbml.CompNoModelInReference
CompExtModDefBad = _libsbml.CompExtModDefBad
CompModelFlatteningFailed = _libsbml.CompModelFlatteningFailed
CompFlatModelNotValid = _libsbml.CompFlatModelNotValid
CompLineNumbersUnreliable = _libsbml.CompLineNumbersUnreliable
CompFlatteningNotRecognisedReqd = _libsbml.CompFlatteningNotRecognisedReqd
CompFlatteningNotRecognisedNotReqd = _libsbml.CompFlatteningNotRecognisedNotReqd
CompFlatteningNotImplementedNotReqd = _libsbml.CompFlatteningNotImplementedNotReqd
CompFlatteningNotImplementedReqd = _libsbml.CompFlatteningNotImplementedReqd
CompFlatteningWarning = _libsbml.CompFlatteningWarning
CompDeprecatedDeleteFunction = _libsbml.CompDeprecatedDeleteFunction
CompDeprecatedReplaceFunction = _libsbml.CompDeprecatedReplaceFunction
CompDeletedReplacement = _libsbml.CompDeletedReplacement
CompIdRefMayReferenceUnknownPackage = _libsbml.CompIdRefMayReferenceUnknownPackage
CompMetaIdRefMayReferenceUnknownPkg = _libsbml.CompMetaIdRefMayReferenceUnknownPkg
class CompPkgNamespaces(SBMLNamespaces):
    """
    Class to store the Level, Version and XML namespace information of
    an SBML extension package.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompPkgNamespaces, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompPkgNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_CompPkgNamespaces
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion(), 
            string prefix = CompExtension::getPackageName()) -> CompPkgNamespaces
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion(), 
            unsigned int pkgVersion = CompExtension::getDefaultPackageVersion()) -> CompPkgNamespaces
        __init__(self, unsigned int level = CompExtension::getDefaultLevel(), 
            unsigned int version = CompExtension::getDefaultVersion()) -> CompPkgNamespaces
        __init__(self, unsigned int level = CompExtension::getDefaultLevel()) -> CompPkgNamespaces
        __init__(self) -> CompPkgNamespaces
        __init__(self, CompPkgNamespaces orig) -> CompPkgNamespaces

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(long level        =
        SBMLExtensionType.getDefaultLevel(), long version      =
        SBMLExtensionType.getDefaultVersion(), long pkgVersion   =
        SBMLExtensionType.getDefaultPackageVersion(), string prefix =
        SBMLExtensionType.getPackageName())

        Creates a new SBMLExtensionNamespaces object corresponding to the
        given SBML 'level', 'version' and 'package' version.

        Note:

        SBMLExtensionException will be thrown if the extension module that
        supports the combination of the given sbml level, sbml version,
        package name, and package version has not been registered.

        Parameter 'level' is the SBML level Parameter 'version' is the SBML
        version Parameter 'pkgVersion' is the package version Parameter
        'prefix' is the prefix of the package namespace (e.g. 'layout',
        'multi')  to be added. The package's name will be used if the given
        string is empty  (default).

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(SBMLExtensionNamespaces orig)

        Copy constructor; creates a copy of a SBMLExtensionNamespaces.

        Parameter 'orig' is the SBMLExtensionNamespaces instance to copy.

        """
        this = _libsbml.new_CompPkgNamespaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ISBMLExtensionNamespaces

        Creates and returns a deep copy of this SBMLNamespaces.

        Returns a (deep) copy of this SBMLNamespaces.

        """
        return _libsbml.CompPkgNamespaces_clone(self)

    def getURI(self):
        """
        getURI(self) -> string

        Returns a string representing the SBML XML namespace of this object.

        Returns a string representing the SBML namespace that reflects the
        SBML Level and Version of this object.

        """
        return _libsbml.CompPkgNamespaces_getURI(self)

    def getPackageVersion(self):
        """getPackageVersion(self) -> unsigned int"""
        return _libsbml.CompPkgNamespaces_getPackageVersion(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the name of the main package for this namespace.

        Returns the name of the main package for this namespace. 'core' will
        be returned if this namespace is defined in the SBML  core.

        """
        return _libsbml.CompPkgNamespaces_getPackageName(self)

CompPkgNamespaces_swigregister = _libsbml.CompPkgNamespaces_swigregister
CompPkgNamespaces_swigregister(CompPkgNamespaces)

class FbcPkgNamespaces(SBMLNamespaces):
    """
    Class to store the Level, Version and XML namespace information of
    an SBML extension package.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FbcPkgNamespaces, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FbcPkgNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_FbcPkgNamespaces
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion(), 
            string prefix = FbcExtension::getPackageName()) -> FbcPkgNamespaces
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> FbcPkgNamespaces
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> FbcPkgNamespaces
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> FbcPkgNamespaces
        __init__(self) -> FbcPkgNamespaces
        __init__(self, FbcPkgNamespaces orig) -> FbcPkgNamespaces

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(long level        =
        SBMLExtensionType.getDefaultLevel(), long version      =
        SBMLExtensionType.getDefaultVersion(), long pkgVersion   =
        SBMLExtensionType.getDefaultPackageVersion(), string prefix =
        SBMLExtensionType.getPackageName())

        Creates a new SBMLExtensionNamespaces object corresponding to the
        given SBML 'level', 'version' and 'package' version.

        Note:

        SBMLExtensionException will be thrown if the extension module that
        supports the combination of the given sbml level, sbml version,
        package name, and package version has not been registered.

        Parameter 'level' is the SBML level Parameter 'version' is the SBML
        version Parameter 'pkgVersion' is the package version Parameter
        'prefix' is the prefix of the package namespace (e.g. 'layout',
        'multi')  to be added. The package's name will be used if the given
        string is empty  (default).

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(SBMLExtensionNamespaces orig)

        Copy constructor; creates a copy of a SBMLExtensionNamespaces.

        Parameter 'orig' is the SBMLExtensionNamespaces instance to copy.

        """
        this = _libsbml.new_FbcPkgNamespaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ISBMLExtensionNamespaces

        Creates and returns a deep copy of this SBMLNamespaces.

        Returns a (deep) copy of this SBMLNamespaces.

        """
        return _libsbml.FbcPkgNamespaces_clone(self)

    def getURI(self):
        """
        getURI(self) -> string

        Returns a string representing the SBML XML namespace of this object.

        Returns a string representing the SBML namespace that reflects the
        SBML Level and Version of this object.

        """
        return _libsbml.FbcPkgNamespaces_getURI(self)

    def getPackageVersion(self):
        """getPackageVersion(self) -> unsigned int"""
        return _libsbml.FbcPkgNamespaces_getPackageVersion(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the name of the main package for this namespace.

        Returns the name of the main package for this namespace. 'core' will
        be returned if this namespace is defined in the SBML  core.

        """
        return _libsbml.FbcPkgNamespaces_getPackageName(self)

FbcPkgNamespaces_swigregister = _libsbml.FbcPkgNamespaces_swigregister
FbcPkgNamespaces_swigregister(FbcPkgNamespaces)

class FbcExtension(SBMLExtension):
    """
    [SBML 'fbc' package]  The core module of the 'fbc' package
    extension.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FbcExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FbcExtension, name)
    __repr__ = _swig_repr
    def getPackageName():
        """
        getPackageName() -> string

        Returns the package name of this extension.

        """
        return _libsbml.FbcExtension_getPackageName()

    if _newclass:getPackageName = staticmethod(getPackageName)
    __swig_getmethods__["getPackageName"] = lambda x: getPackageName
    def getDefaultLevel():
        """
        getDefaultLevel() -> unsigned int

        Returns the default SBML Level this extension.

        """
        return _libsbml.FbcExtension_getDefaultLevel()

    if _newclass:getDefaultLevel = staticmethod(getDefaultLevel)
    __swig_getmethods__["getDefaultLevel"] = lambda x: getDefaultLevel
    def getDefaultVersion():
        """
        getDefaultVersion() -> unsigned int

        Returns the default SBML Version this extension.

        """
        return _libsbml.FbcExtension_getDefaultVersion()

    if _newclass:getDefaultVersion = staticmethod(getDefaultVersion)
    __swig_getmethods__["getDefaultVersion"] = lambda x: getDefaultVersion
    def getDefaultPackageVersion():
        """
        getDefaultPackageVersion() -> unsigned int

        Returns the default SBML version this extension.

        """
        return _libsbml.FbcExtension_getDefaultPackageVersion()

    if _newclass:getDefaultPackageVersion = staticmethod(getDefaultPackageVersion)
    __swig_getmethods__["getDefaultPackageVersion"] = lambda x: getDefaultPackageVersion
    def getXmlnsL3V1V1():
        """
        getXmlnsL3V1V1() -> string

        Returns URI of supported versions of this package.

        """
        return _libsbml.FbcExtension_getXmlnsL3V1V1()

    if _newclass:getXmlnsL3V1V1 = staticmethod(getXmlnsL3V1V1)
    __swig_getmethods__["getXmlnsL3V1V1"] = lambda x: getXmlnsL3V1V1
    def __init__(self, *args): 
        """
        __init__(self) -> FbcExtension
        __init__(self, FbcExtension arg0) -> FbcExtension

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FbcExtension()

        Constructor

        @par <hr> Method variant with the following signature:

            FbcExtension(FbcExtension)

        Copy constructor.

        """
        this = _libsbml.new_FbcExtension(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_FbcExtension
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> FbcExtension

        Creates and returns a deep copy of this FbcExtension object.

        Returns a (deep) copy of this FbcExtension object

        """
        return _libsbml.FbcExtension_clone(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the name of this package ('fbc')

        Returns the name of this package ('fbc')

        """
        return _libsbml.FbcExtension_getName(self)

    def getURI(self, *args):
        """
        getURI(self, unsigned int sbmlLevel, unsigned int sbmlVersion, unsigned int pkgVersion) -> string

        Returns the namespace URI corresponding to the combination of the
        given SBML Level, Version, and package version.

        Parameter 'sbmlLevel' is the level of SBML Parameter 'sbmlVersion' is
        the version of SBML Parameter 'pkgVersion' is the version of package

        Returns a string of the package URI, or an empty string if no
        corresponding URI exists.

        """
        return _libsbml.FbcExtension_getURI(self, *args)

    def getLevel(self, *args):
        """
        getLevel(self, string uri) -> unsigned int

        Returns the SBML Level for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;fbc&rdquo; package

        Returns the SBML Level with the given URI of this package, or 0 if the
        given URI is invalid.

        """
        return _libsbml.FbcExtension_getLevel(self, *args)

    def getVersion(self, *args):
        """
        getVersion(self, string uri) -> unsigned int

        Returns the SBML Version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;fbc&rdquo; package

        Returns the SBML version with the given URI of this package, or 0 if
        the given URI is invalid.

        """
        return _libsbml.FbcExtension_getVersion(self, *args)

    def getPackageVersion(self, *args):
        """
        getPackageVersion(self, string uri) -> unsigned int

        Returns the package version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;fbc&rdquo; package

        Returns the package version with the given URI of this package, or 0
        if the given URI is invalid.

        """
        return _libsbml.FbcExtension_getPackageVersion(self, *args)

    def getSBMLExtensionNamespaces(self, *args):
        """
        getSBMLExtensionNamespaces(self, string uri) -> SBMLNamespaces

        Returns an FbcPkgNamespaces object.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;fbc&rdquo; package

        Returns an FbcPkgNamespace object corresponding to the given 'uri', or
        None if the URI is not defined in the FBC package.

        """
        return _libsbml.FbcExtension_getSBMLExtensionNamespaces(self, *args)

    def getStringFromTypeCode(self, *args):
        """
        getStringFromTypeCode(self, int typeCode) -> char

        Takes a type code of the &ldquo;fbc&rdquo; package and returns a
        string describing the code.

        """
        return _libsbml.FbcExtension_getStringFromTypeCode(self, *args)

    def init():
        """
        init()

        Internal implementation method.

        """
        return _libsbml.FbcExtension_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def getErrorTable(self, *args):
        """
        getErrorTable(self, unsigned int index) -> packageErrorTableEntry

        Internal implementation method.

        """
        return _libsbml.FbcExtension_getErrorTable(self, *args)

    def getErrorTableIndex(self, *args):
        """
        getErrorTableIndex(self, unsigned int errorId) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.FbcExtension_getErrorTableIndex(self, *args)

    def getErrorIdOffset(self):
        """
        getErrorIdOffset(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.FbcExtension_getErrorIdOffset(self)

FbcExtension_swigregister = _libsbml.FbcExtension_swigregister
FbcExtension_swigregister(FbcExtension)

def FbcExtension_getPackageName():
  """
    FbcExtension_getPackageName() -> string

    Returns the package name of this extension.

    """
  return _libsbml.FbcExtension_getPackageName()

def FbcExtension_getDefaultLevel():
  """
    FbcExtension_getDefaultLevel() -> unsigned int

    Returns the default SBML Level this extension.

    """
  return _libsbml.FbcExtension_getDefaultLevel()

def FbcExtension_getDefaultVersion():
  """
    FbcExtension_getDefaultVersion() -> unsigned int

    Returns the default SBML Version this extension.

    """
  return _libsbml.FbcExtension_getDefaultVersion()

def FbcExtension_getDefaultPackageVersion():
  """
    FbcExtension_getDefaultPackageVersion() -> unsigned int

    Returns the default SBML version this extension.

    """
  return _libsbml.FbcExtension_getDefaultPackageVersion()

def FbcExtension_getXmlnsL3V1V1():
  """
    FbcExtension_getXmlnsL3V1V1() -> string

    Returns URI of supported versions of this package.

    """
  return _libsbml.FbcExtension_getXmlnsL3V1V1()

def FbcExtension_init():
  """
    FbcExtension_init()

    Internal implementation method.

    """
  return _libsbml.FbcExtension_init()

SBML_FBC_ASSOCIATION = _libsbml.SBML_FBC_ASSOCIATION
SBML_FBC_FLUXBOUND = _libsbml.SBML_FBC_FLUXBOUND
SBML_FBC_FLUXOBJECTIVE = _libsbml.SBML_FBC_FLUXOBJECTIVE
SBML_FBC_GENEASSOCIATION = _libsbml.SBML_FBC_GENEASSOCIATION
SBML_FBC_OBJECTIVE = _libsbml.SBML_FBC_OBJECTIVE
class FbcModelPlugin(SBasePlugin):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package extention
    to the Model construct.

    """
    __swig_setmethods__ = {}
    for _s in [SBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FbcModelPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FbcModelPlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix,  fbcns) -> FbcModelPlugin
        __init__(self, FbcModelPlugin orig) -> FbcModelPlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FbcModelPlugin(string &uri, string &prefix, FbcPkgNamespacesfbcns)

        Constructor

        @par <hr> Method variant with the following signature:

            FbcModelPlugin(FbcModelPlugin orig)

        Copy constructor. Creates a copy of this FbcModelPlugin object.

        """
        this = _libsbml.new_FbcModelPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_FbcModelPlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> FbcModelPlugin

        Creates and returns a deep copy of this FbcModelPlugin  object.

        Returns a (deep) copy of this FbcModelPlugin object

        """
        return _libsbml.FbcModelPlugin_clone(self)

    def createObject(self, *args):
        """
        createObject(self, XMLInputStream stream) -> SBase

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_createObject(self, *args)

    def writeAttributes(self, *args):
        """
        writeAttributes(self, XMLOutputStream stream)

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_writeAttributes(self, *args)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_hasRequiredElements(self)

    def readOtherXML(self, *args):
        """
        readOtherXML(self, SBase parentObject, XMLInputStream stream) -> bool

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_readOtherXML(self, *args)

    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.FbcModelPlugin_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object is
        found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.FbcModelPlugin_getElementByMetaId(self, *args)

    def appendFrom(self, *args):
        """
        appendFrom(self, Model model) -> int

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_appendFrom(self, *args)

    def getListOfFluxBounds(self, *args):
        """
        getListOfFluxBounds(self) -> ListOfFluxBounds
        getListOfFluxBounds(self) -> ListOfFluxBounds

        Returns the ListOfFluxBounds in this plugin object.

        Returns ListOfFluxBounds object in this plugin object.

        """
        return _libsbml.FbcModelPlugin_getListOfFluxBounds(self, *args)

    def getFluxBound(self, *args):
        """
        getFluxBound(self, unsigned int n) -> FluxBound
        getFluxBound(self, unsigned int n) -> FluxBound
        getFluxBound(self, string sid) -> FluxBound
        getFluxBound(self, string sid) -> FluxBound

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getFluxBound(long n)

        Returns the FluxBound object that belongs to the given index. If the
        index is invalid, None is returned.

        Parameter 'n' is the index number of the FluxBound to get.

        Returns the nth FluxBound in the ListOfFluxBounds.

        @par <hr> Method variant with the following signature:

            getFluxBound(string sid)

        Returns the FluxBound object based on its identifier.

        Parameter 'sid' is a string representing the identifier  of the
        FluxBound to get.

        Returns FluxBound in the ListOfFluxBounds with the given 'sid'  or
        None if no such FluxBound exists.

        See also getListOfFluxBounds().

        """
        return _libsbml.FbcModelPlugin_getFluxBound(self, *args)

    def addFluxBound(self, *args):
        """
        addFluxBound(self, FluxBound bound) -> int

        Adds a copy of the given FluxBound object to the list of FluxBounds.

        Parameter 'bound' is the FluxBound object to be added to the list of
        FluxBounds.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.FbcModelPlugin_addFluxBound(self, *args)

    def createFluxBound(self):
        """
        createFluxBound(self) -> FluxBound

        Creates a new FluxBound object and adds it to the list of FluxBound
        objects and returns it.

        Returns a newly created FluxBound object

        """
        return _libsbml.FbcModelPlugin_createFluxBound(self)

    def removeFluxBound(self, *args):
        """
        removeFluxBound(self, unsigned int n) -> FluxBound
        removeFluxBound(self, string sid) -> FluxBound

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeFluxBound(long n)

        Removes the nth FluxBound object from this plugin object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the FluxBound object to remove

        Returns the FluxBound object removed.  As mentioned above, the  caller
        owns the returned object. None is returned if the  given index is out
        of range.

        @par <hr> Method variant with the following signature:

            removeFluxBound(string sid)

        Removes the FluxBound object with the given 'sid' attribute from  this
        plugin object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the id attribute of the FluxBound object to remove

        Returns the FluxBound object removed.  As mentioned above, the  caller
        owns the returned object. None is returned if the  given index is out
        of range.

        """
        return _libsbml.FbcModelPlugin_removeFluxBound(self, *args)

    def getNumFluxBounds(self):
        """
        getNumFluxBounds(self) -> unsigned int

        Returns the number of FluxBound object in this plugin object.

        Returns the number of FluxBound object in this plugin object.

        """
        return _libsbml.FbcModelPlugin_getNumFluxBounds(self)

    def getListOfObjectives(self, *args):
        """
        getListOfObjectives(self) -> ListOfObjectives
        getListOfObjectives(self) -> ListOfObjectives

        Returns the ListOfObjectives in this plugin object.

        Returns ListOfObjectives object in this plugin object.

        """
        return _libsbml.FbcModelPlugin_getListOfObjectives(self, *args)

    def getObjective(self, *args):
        """
        getObjective(self, unsigned int n) -> Objective
        getObjective(self, unsigned int n) -> Objective
        getObjective(self, string sid) -> Objective
        getObjective(self, string sid) -> Objective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getObjective(long n)

        Returns the Objective object that belongs to the given index. If the
        index is invalid, None is returned.

        Parameter 'n' is the index number of the Objective to get.

        Returns the nth Objective in the ListOfObjectives.

        @par <hr> Method variant with the following signature:

            getObjective(string sid)

        Returns the Objective object based on its identifier.

        Parameter 'sid' is a string representing the identifier  of the
        Objective to get.

        Returns Objective in the ListOfObjectives with the given 'sid'  or
        None if no such Objective exists.

        See also getListOfObjectives().

        """
        return _libsbml.FbcModelPlugin_getObjective(self, *args)

    def addObjective(self, *args):
        """
        addObjective(self, Objective bound) -> int

        Adds a copy of the given Objective object to the list of Objectives.

        Parameter 'bound' is the Objective object to be added to the list of
        Objectives.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.FbcModelPlugin_addObjective(self, *args)

    def createObjective(self):
        """
        createObjective(self) -> Objective

        Creates a new Objective object and adds it to the list of Objective
        objects and returns it.

        Returns a newly created Objective object

        """
        return _libsbml.FbcModelPlugin_createObjective(self)

    def removeObjective(self, *args):
        """
        removeObjective(self, unsigned int n) -> Objective
        removeObjective(self, string sid) -> Objective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeObjective(long n)

        Removes the nth Objective object from this plugin object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Objective object to remove

        Returns the Objective object removed.  As mentioned above, the  caller
        owns the returned object. None is returned if the  given index is out
        of range.

        @par <hr> Method variant with the following signature:

            removeObjective(string sid)

        Removes the Objective object with the given 'sid' attribute from  this
        plugin object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the id attribute of the Objective object to remove

        Returns the Objective object removed.  As mentioned above, the  caller
        owns the returned object. None is returned if the  given index is out
        of range.

        """
        return _libsbml.FbcModelPlugin_removeObjective(self, *args)

    def getNumObjectives(self):
        """
        getNumObjectives(self) -> unsigned int

        Returns the number of Objective object in this plugin object.

        Returns the number of Objective object in this plugin object.

        """
        return _libsbml.FbcModelPlugin_getNumObjectives(self)

    def getActiveObjective(self, *args):
        """
        getActiveObjective(self) -> Objective
        getActiveObjective(self) -> Objective

        Returns the current active objective.

        """
        return _libsbml.FbcModelPlugin_getActiveObjective(self, *args)

    def setActiveObjectiveId(self, *args):
        """
        setActiveObjectiveId(self, string objectiveId) -> int

        Sets the id of the active objective.

        """
        return _libsbml.FbcModelPlugin_setActiveObjectiveId(self, *args)

    def getActiveObjectiveId(self):
        """
        getActiveObjectiveId(self) -> string

        returns the id of the current active objective.

        """
        return _libsbml.FbcModelPlugin_getActiveObjectiveId(self)

    def unsetActiveObjectiveId(self):
        """
        unsetActiveObjectiveId(self)

        Unsets the active objective.

        """
        return _libsbml.FbcModelPlugin_unsetActiveObjectiveId(self)

    def getListOfGeneAssociations(self, *args):
        """
        getListOfGeneAssociations(self) -> ListOfGeneAssociations
        getListOfGeneAssociations(self) -> ListOfGeneAssociations

        Returns the ListOfObjectives in this plugin object.

        Returns ListOfObjectives object in this plugin object.

        """
        return _libsbml.FbcModelPlugin_getListOfGeneAssociations(self, *args)

    def getGeneAssociation(self, *args):
        """
        getGeneAssociation(self, unsigned int n) -> GeneAssociation
        getGeneAssociation(self, unsigned int n) -> GeneAssociation
        getGeneAssociation(self, string sid) -> GeneAssociation
        getGeneAssociation(self, string sid) -> GeneAssociation

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getGeneAssociation(long n)

        Returns the GeneAssociation object that belongs to the given index. If
        the index is invalid, None is returned.

        Parameter 'n' is the index number of the GeneAssociation to get.

        Returns the nth GeneAssociation in the ListOfGeneAssociations.

        @par <hr> Method variant with the following signature:

            getGeneAssociation(string sid)

        Returns the GeneAssociation object based on its identifier.

        Parameter 'sid' is a string representing the identifier  of the
        GeneAssociation to get.

        Returns GeneAssociation in the ListOfGeneAssociations with the given
        'sid'  or None if no such GeneAssociation exists.

        See also getListOfGeneAssociations().

        """
        return _libsbml.FbcModelPlugin_getGeneAssociation(self, *args)

    def addGeneAssociation(self, *args):
        """
        addGeneAssociation(self, GeneAssociation association) -> int

        Adds a copy of the given GeneAssociation object to the list of
        GeneAssociations.

        Parameter 'association' is the GeneAssociation object to be added to
        the list of GeneAssociations.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.FbcModelPlugin_addGeneAssociation(self, *args)

    def createGeneAssociation(self):
        """
        createGeneAssociation(self) -> GeneAssociation

        Creates a new GeneAssociation object and adds it to the list of
        GeneAssociation objects and returns it.

        Returns a newly created GeneAssociation object

        """
        return _libsbml.FbcModelPlugin_createGeneAssociation(self)

    def removeGeneAssociation(self, *args):
        """
        removeGeneAssociation(self, unsigned int n) -> GeneAssociation
        removeGeneAssociation(self, string sid) -> GeneAssociation

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeGeneAssociation(long n)

        Removes the nth GeneAssociation object from this plugin object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the GeneAssociation object to remove

        Returns the GeneAssociation object removed.  As mentioned above, the
        caller owns the returned object. None is returned if the  given index
        is out of range.

        @par <hr> Method variant with the following signature:

            removeGeneAssociation(string sid)

        Removes the GeneAssociation object with the given 'sid' attribute from
        this plugin object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the id attribute of the GeneAssociation object to
        remove

        Returns the GeneAssociation object removed.  As mentioned above, the
        caller owns the returned object. None is returned if the  given index
        is out of range.

        """
        return _libsbml.FbcModelPlugin_removeGeneAssociation(self, *args)

    def getNumGeneAssociations(self):
        """
        getNumGeneAssociations(self) -> int

        Returns the number of GeneAssociation object in this plugin object.

        Returns the number of GeneAssociation object in this plugin object.

        """
        return _libsbml.FbcModelPlugin_getNumGeneAssociations(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_connectToChild(self)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase sbase)

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.FbcModelPlugin_enablePackageInternal(self, *args)

    def getFluxBoundsForReaction(self, *args):
        """
        getFluxBoundsForReaction(self, string reaction) -> ListOfFluxBounds

        """
        return _libsbml.FbcModelPlugin_getFluxBoundsForReaction(self, *args)

FbcModelPlugin_swigregister = _libsbml.FbcModelPlugin_swigregister
FbcModelPlugin_swigregister(FbcModelPlugin)

class FbcSpeciesPlugin(SBasePlugin):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package extention
    to the Species construct.

    The Flux Balance Constraints package extends the SBML Level 3 Version
    1 Core Species class with the addition of two attributes: 'charge' and
    'chemicalFormula'.

    """
    __swig_setmethods__ = {}
    for _s in [SBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FbcSpeciesPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FbcSpeciesPlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix,  fbcns) -> FbcSpeciesPlugin
        __init__(self, FbcSpeciesPlugin orig) -> FbcSpeciesPlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FbcSpeciesPlugin(string &uri, string &prefix,
        FbcPkgNamespacesfbcns)

        Constructor

        @par <hr> Method variant with the following signature:

            FbcSpeciesPlugin(FbcSpeciesPlugin orig)

        Copy constructor. Creates a copy of this FbcSpeciesPlugin object.

        """
        this = _libsbml.new_FbcSpeciesPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_FbcSpeciesPlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> FbcSpeciesPlugin

        Creates and returns a deep copy of this FbcSpeciesPlugin  object.

        Returns a (deep) copy of this FbcSpeciesPlugin object

        """
        return _libsbml.FbcSpeciesPlugin_clone(self)

    def isSetCharge(self):
        """
        isSetCharge(self) -> bool

        Predicate returning True or False depending on whether this
        FbcSpeciesPlugin 'charge' attribute has been set.

        Returns True if this FbcSpeciesPlugin 'charge' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FbcSpeciesPlugin_isSetCharge(self)

    def setCharge(self, *args):
        """
        setCharge(self, int charge) -> int

        Sets the value of the 'charge' attribute of this FbcSpeciesPlugin.

        Returns integer value indicating success/failure of the function.
        The only possible value returned by this function is:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.FbcSpeciesPlugin_setCharge(self, *args)

    def getCharge(self):
        """
        getCharge(self) -> int

        Returns the value of the 'charge' attribute of this FbcSpeciesPlugin.

        Returns the value of the 'charge' attribute of this FbcSpeciesPlugin.

        """
        return _libsbml.FbcSpeciesPlugin_getCharge(self)

    def unsetCharge(self):
        """
        unsetCharge(self) -> int

        Unsets the value of the 'charge' attribute of this FbcSpeciesPlugin.

        Returns integer value indicating success/failure of the function.
        The only possible value returned by this function is:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.FbcSpeciesPlugin_unsetCharge(self)

    def isSetChemicalFormula(self):
        """
        isSetChemicalFormula(self) -> bool

        Predicate returning True or False depending on whether this
        FbcSpeciesPlugin 'chemicalFormula' attribute has been set.

        Returns True if this FbcSpeciesPlugin 'chemicalFormula' attribute has
        been set, otherwise False is returned.

        """
        return _libsbml.FbcSpeciesPlugin_isSetChemicalFormula(self)

    def setChemicalFormula(self, *args):
        """
        setChemicalFormula(self, string chemicalFormula) -> int

        Sets the value of the 'chemicalFormula' attribute of this
        FbcSpeciesPlugin. The format of chemicalFormula must consist only of
        atomic names (as in the Periodic Table) or user defined compounds
        either of which take the form of a single capital letter followed by
        zero or more lowercase letters. Where there is more than a single atom
        present, this is indicated with an integer. With regards to order (and
        enhance inter-operability) it is recommended to use the Hill system
        order.  (However, no error-checking is performed by this routine.)

        Returns integer value indicating success/failure of the function.
        The only possible value returned by this function is:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.FbcSpeciesPlugin_setChemicalFormula(self, *args)

    def getChemicalFormula(self):
        """
        getChemicalFormula(self) -> string

        Returns the value of the 'chemicalFormula' attribute of this
        FbcSpeciesPlugin.

        Returns the value of the 'chemicalFormula' attribute of this
        FbcSpeciesPlugin.

        """
        return _libsbml.FbcSpeciesPlugin_getChemicalFormula(self)

    def unsetChemicalFormula(self):
        """
        unsetChemicalFormula(self) -> int

        Unsets the value of the 'chemicalFormula' attribute of this
        FbcSpeciesPlugin.

        Returns integer value indicating success/failure of the function.
        The only possible value returned by this function is:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.FbcSpeciesPlugin_unsetChemicalFormula(self)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase sbase)

        Internal implementation method.

        """
        return _libsbml.FbcSpeciesPlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.FbcSpeciesPlugin_enablePackageInternal(self, *args)

FbcSpeciesPlugin_swigregister = _libsbml.FbcSpeciesPlugin_swigregister
FbcSpeciesPlugin_swigregister(FbcSpeciesPlugin)

class CobraToFbcConverter(SBMLConverter):
    """
    [SBML 'fbc' package]  Implementation of a COBRA to SBML Level 3
    'fbc' package converter.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CobraToFbcConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CobraToFbcConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.CobraToFbcConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> CobraToFbcConverter
        __init__(self, CobraToFbcConverter arg0) -> CobraToFbcConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CobraToFbcConverter()

        Constructor.

        @par <hr> Method variant with the following signature:

            CobraToFbcConverter(CobraToFbcConverter)

        Copy constructor.

        """
        this = _libsbml.new_CobraToFbcConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this CobraToFbcConverter.

        Returns a (deep) copy of this CobraToFbcConverter.

        """
        return _libsbml.CobraToFbcConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_CobraToFbcConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        This function determines whether a given converter matches the
        configuration properties given.

        Parameter 'props' is the properties to match

        Returns <c>true</c> if this converter is a match, <c>false</c>
        otherwise.

        """
        return _libsbml.CobraToFbcConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        the actual conversion

        Returns status code represeting success/failure/conversion impossible

        """
        return _libsbml.CobraToFbcConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        The properties for the CobraToFbcConverter are: 'convert cobra' - the
        name of this converter

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.CobraToFbcConverter_getDefaultProperties(self)

CobraToFbcConverter_swigregister = _libsbml.CobraToFbcConverter_swigregister
CobraToFbcConverter_swigregister(CobraToFbcConverter)

def CobraToFbcConverter_init():
  """CobraToFbcConverter_init()"""
  return _libsbml.CobraToFbcConverter_init()

class FbcToCobraConverter(SBMLConverter):
    """
    [SBML 'fbc' package]  Implementation of a SBML Level 3 'fbc' package
    to COBRA converter.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FbcToCobraConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FbcToCobraConverter, name)
    __repr__ = _swig_repr
    def init():
        """init()"""
        return _libsbml.FbcToCobraConverter_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def __init__(self, *args): 
        """
        __init__(self) -> FbcToCobraConverter
        __init__(self, FbcToCobraConverter arg0) -> FbcToCobraConverter

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FbcToCobraConverter()

        Constructor.

        @par <hr> Method variant with the following signature:

            FbcToCobraConverter(FbcToCobraConverter)

        Copy constructor.

        """
        this = _libsbml.new_FbcToCobraConverter(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> SBMLConverter

        Creates and returns a deep copy of this FbcToCobraConverter.

        Returns a (deep) copy of this FbcToCobraConverter.

        """
        return _libsbml.FbcToCobraConverter_clone(self)

    __swig_destroy__ = _libsbml.delete_FbcToCobraConverter
    __del__ = lambda self : None;
    def matchesProperties(self, *args):
        """
        matchesProperties(self, ConversionProperties props) -> bool

        This function determines whether a given converter matches the
        configuration properties given.

        Parameter 'props' is the properties to match

        Returns <c>true</c> if this converter is a match, <c>false</c>
        otherwise.

        """
        return _libsbml.FbcToCobraConverter_matchesProperties(self, *args)

    def convert(self):
        """
        convert(self) -> int

        the actual conversion

        Returns status code represeting success/failure/conversion impossible

        """
        return _libsbml.FbcToCobraConverter_convert(self)

    def getDefaultProperties(self):
        """
        getDefaultProperties(self) -> ConversionProperties

        Returns the default properties of this converter.

        A given converter exposes one or more properties that can be adjusted
        in order to influence the behavior of the converter.  This method
        returns the default property settings for this converter.  It is meant
        to be called in order to discover all the settings for the converter
        object.

        The properties for the FbcToCobraConverter are: 'convert cobra' - the
        name of this converter

        Returns the ConversionProperties object describing the default
        properties for this converter.

        """
        return _libsbml.FbcToCobraConverter_getDefaultProperties(self)

FbcToCobraConverter_swigregister = _libsbml.FbcToCobraConverter_swigregister
FbcToCobraConverter_swigregister(FbcToCobraConverter)

def FbcToCobraConverter_init():
  """FbcToCobraConverter_init()"""
  return _libsbml.FbcToCobraConverter_init()

GENE_ASSOCIATION = _libsbml.GENE_ASSOCIATION
AND_ASSOCIATION = _libsbml.AND_ASSOCIATION
OR_ASSOCIATION = _libsbml.OR_ASSOCIATION
UNKNOWN_ASSOCIATION = _libsbml.UNKNOWN_ASSOCIATION
class Association(SBase):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' proposed package
    Association construct.

    The Association class is not part of the official Flux Balance
    specification, but is instead a proposed future development of the
    package.  If adopted, it would be a child of a GeneAssociation that
    would describe a single 'and' or 'or' relationship between two or more
    genes or other associations.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Association, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Association, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> Association
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> Association
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> Association
        __init__(self) -> Association
        __init__(self, XMLNode node,  fbcns) -> Association
        __init__(self,  fbcns) -> Association
        __init__(self, Association source) -> Association

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Association(XMLNode node, FbcPkgNamespaces fbcns)

         @par <hr> Method variant with the following signature:

            Association(Association source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Association(long level      = FbcExtension.getDefaultLevel(), long
        version    = FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new Association with the given level, version, and package
        version.

        @par <hr> Method variant with the following signature:

            Association(FbcPkgNamespaces fbcns)

        Creates a new Association with the given FbcPkgNamespaces object.

        """
        this = _libsbml.new_Association(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_Association
    __del__ = lambda self : None;
    def getType(self):
        """
        getType(self) -> AssociationTypeCode_t

        Returns the string of the 'type' attribute of this Association.

        Returns the string of the 'type' attribute of this Association.

        """
        return _libsbml.Association_getType(self)

    def isSetType(self):
        """
        isSetType(self) -> bool

        Predicate returning True or False depending on whether this
        Association's 'type' attribute has been set.

        Returns True if this Association's 'type' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Association_isSetType(self)

    def setType(self, *args):
        """
        setType(self, AssociationTypeCode_t type) -> int

        Sets the SIdRef string of the 'type' attribute of this Association.

        Parameter 'type' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Association_setType(self, *args)

    def unsetType(self):
        """
        unsetType(self) -> int

        Unsets the value of the 'id' attribute of this Association.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Association_unsetType(self)

    def getReference(self):
        """
        getReference(self) -> string

        Returns the string of the 'reference' attribute of this Association.

        Returns the string of the 'reference' attribute of this Association.

        """
        return _libsbml.Association_getReference(self)

    def isSetReference(self):
        """
        isSetReference(self) -> bool

        Predicate returning True or False depending on whether this
        Association's 'reference' attribute has been set.

        Returns True if this Association's 'reference' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Association_isSetReference(self)

    def setReference(self, *args):
        """
        setReference(self, string reference) -> int

        Sets the SIdRef string of the 'reference' attribute of this
        Association.

        Parameter 'reference' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Association_setReference(self, *args)

    def unsetReference(self):
        """
        unsetReference(self) -> int

        Unsets the value of the 'id' attribute of this Association.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Association_unsetReference(self)

    def addGene(self, *args):
        """
        addGene(self, string id) -> int

        Add a gene with the given 'id' to the association.

        """
        return _libsbml.Association_addGene(self, *args)

    def getNumAssociations(self):
        """
        getNumAssociations(self) -> unsigned int

        Returns the number of child Associations of this Association.

        """
        return _libsbml.Association_getNumAssociations(self)

    def addAssociation(self, *args):
        """
        addAssociation(self, Association association) -> int

        Adds a child Association to this Association.

        """
        return _libsbml.Association_addAssociation(self, *args)

    def removeAssociation(self, *args):
        """
        removeAssociation(self, int index) -> int

        Removes the child Associations with the given 'index' from this
        Association.

        """
        return _libsbml.Association_removeAssociation(self, *args)

    def clearAssociations(self):
        """
        clearAssociations(self) -> int

        Returns the number of child Associations of this Association.

        """
        return _libsbml.Association_clearAssociations(self)

    def createAnd(self):
        """
        createAnd(self) -> Association

        Creates and returns a new Association of type 'and'.  Does not
        actually add the created Association as a child of this Association or
        do anything else with it--the returning pointer is now owned by the
        caller.

        """
        return _libsbml.Association_createAnd(self)

    def createOr(self):
        """
        createOr(self) -> Association

        Creates and returns a new Association of type 'or'.  Does not actually
        add the created Association as a child of this Association or do
        anything else with it--the returning pointer is now owned by the
        caller.

        """
        return _libsbml.Association_createOr(self)

    def createGene(self, reference = ""):
        """
        createGene(self, string reference = "") -> Association
        createGene(self) -> Association

        Creates and returns a new Association of type 'and', and with the gene
        reference 'reference'.  Does not actually add the created Association
        as a child of this Association or do anything else with it--the
        returning pointer is now owned by the caller.

        """
        return _libsbml.Association_createGene(self, reference)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.Association_toXML(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.Association_getElementName(self)

    def clone(self):
        """
        clone(self) -> Association

        Creates and returns a deep copy of this Association.

        Returns a (deep) copy of this Association.

        """
        return _libsbml.Association_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_FBC_ASSOCIATION

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Association_getTypeCode(self)

    def parseInfixAssociation(*args):
        """
        parseInfixAssociation(string association) -> Association

        Parses a gene association in infix format. These look like this:

        (b2422) and (b2425) and (b2423) and (b2424) or (b2422) and (b2423) and
        (b2424) and (b2413) and (b3917)

        Returns the parsed association, or None in case of an error.

        """
        return _libsbml.Association_parseInfixAssociation(*args)

    if _newclass:parseInfixAssociation = staticmethod(parseInfixAssociation)
    __swig_getmethods__["parseInfixAssociation"] = lambda x: parseInfixAssociation
    def toInfix(self):
        """
        toInfix(self) -> string

        Converts this association into an infix string.

        Returns the association as infix string.

        """
        return _libsbml.Association_toInfix(self)

Association_swigregister = _libsbml.Association_swigregister
Association_swigregister(Association)

def Association_parseInfixAssociation(*args):
  """
    Association_parseInfixAssociation(string association) -> Association

    Parses a gene association in infix format. These look like this:

    (b2422) and (b2425) and (b2423) and (b2424) or (b2422) and (b2423) and
    (b2424) and (b2413) and (b3917)

    Returns the parsed association, or None in case of an error.

    """
  return _libsbml.Association_parseInfixAssociation(*args)

FLUXBOUND_OPERATION_LESS_EQUAL = _libsbml.FLUXBOUND_OPERATION_LESS_EQUAL
FLUXBOUND_OPERATION_GREATER_EQUAL = _libsbml.FLUXBOUND_OPERATION_GREATER_EQUAL
FLUXBOUND_OPERATION_LESS = _libsbml.FLUXBOUND_OPERATION_LESS
FLUXBOUND_OPERATION_GREATER = _libsbml.FLUXBOUND_OPERATION_GREATER
FLUXBOUND_OPERATION_EQUAL = _libsbml.FLUXBOUND_OPERATION_EQUAL
FLUXBOUND_OPERATION_UNKNOWN = _libsbml.FLUXBOUND_OPERATION_UNKNOWN
class FluxBound(SBase):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package FluxBound
    construct.

    The FluxBound object holds a single (in)equality that provides the
    maximum or minimum value that a reaction flux can obtain at steady
    state.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FluxBound, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FluxBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> FluxBound
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> FluxBound
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> FluxBound
        __init__(self) -> FluxBound
        __init__(self,  fbcns) -> FluxBound
        __init__(self, FluxBound source) -> FluxBound

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FluxBound(long level      = FbcExtension.getDefaultLevel(), long
        version    = FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new FluxBound with the given level, version, and package
        version.

        @par <hr> Method variant with the following signature:

            FluxBound(FluxBound source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            FluxBound(FbcPkgNamespaces fbcns)

        Creates a new FluxBound with the given FbcPkgNamespaces object.

        """
        this = _libsbml.new_FluxBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_FluxBound
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this FluxBound.

        Returns the value of the 'id' attribute of this FluxBound.

        """
        return _libsbml.FluxBound_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        FluxBound's 'id' attribute has been set.

        Returns True if this FluxBound's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FluxBound_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxBound_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxBound_unsetId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this FluxBound.

        Returns the value of the 'name' attribute of this FluxBound.

        """
        return _libsbml.FluxBound_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this
        FluxBound's 'name' attribute has been set.

        Returns True if this FluxBound's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FluxBound_isSetName(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxBound_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxBound_unsetName(self)

    def getReaction(self):
        """
        getReaction(self) -> string

        Returns the value of the 'reaction' attribute of this FluxBound.

        Returns the value of the 'reaction' attribute of this FluxBound.

        """
        return _libsbml.FluxBound_getReaction(self)

    def isSetReaction(self):
        """
        isSetReaction(self) -> bool

        Predicate returning True or False depending on whether this
        FluxBound's 'reaction' attribute has been set.

        Returns True if this FluxBound's 'reaction' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FluxBound_isSetReaction(self)

    def setReaction(self, *args):
        """
        setReaction(self, string reaction) -> int

        Sets the value of the 'reaction' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxBound_setReaction(self, *args)

    def unsetReaction(self):
        """
        unsetReaction(self) -> int

        Unsets the value of the 'reaction' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxBound_unsetReaction(self)

    def getOperation(self):
        """
        getOperation(self) -> string

        Returns the value of the 'operation' attribute of this FluxBound.

        Returns the value of the 'operation' attribute of this FluxBound.

        """
        return _libsbml.FluxBound_getOperation(self)

    def getFluxBoundOperation(self):
        """
        getFluxBoundOperation(self) -> FluxBoundOperation_t

        Returns the value of the 'operation' attribute of this FluxBound.

        Returns the value of the 'operation' attribute of this FluxBound.

        """
        return _libsbml.FluxBound_getFluxBoundOperation(self)

    def isSetOperation(self):
        """
        isSetOperation(self) -> bool

        Predicate returning True or False depending on whether this
        FluxBound's 'operation' attribute has been set.

        Returns True if this FluxBound's 'operation' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FluxBound_isSetOperation(self)

    def setOperation(self, *args):
        """
        setOperation(self, string operation) -> int
        setOperation(self, FluxBoundOperation_t operation) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setOperation(string operation)

        Sets the value of the 'operation' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        @par <hr> Method variant with the following signature:

            setOperation(FluxBoundOperation_t operation)

        Sets the value of the 'operation' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxBound_setOperation(self, *args)

    def unsetOperation(self):
        """
        unsetOperation(self) -> int

        Unsets the value of the 'operation' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxBound_unsetOperation(self)

    def getValue(self):
        """
        getValue(self) -> double

        Returns the value of the 'value' attribute of this FluxBound.

        Returns the value of the 'value' attribute of this FluxBound.

        """
        return _libsbml.FluxBound_getValue(self)

    def isSetValue(self):
        """
        isSetValue(self) -> bool

        Predicate returning True or False depending on whether this
        FluxBound's 'value' attribute has been set.

        Returns True if this FluxBound's 'value' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FluxBound_isSetValue(self)

    def setValue(self, *args):
        """
        setValue(self, double value) -> int

        Sets the value of the 'value' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxBound_setValue(self, *args)

    def unsetValue(self):
        """
        unsetValue(self) -> int

        Unsets the value of the 'value' attribute of this FluxBound.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxBound_unsetValue(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.FluxBound_renameSIdRefs(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.FluxBound_getElementName(self)

    def clone(self):
        """
        clone(self) -> FluxBound

        Creates and returns a deep copy of this FluxBound.

        Returns a (deep) copy of this FluxBound.

        """
        return _libsbml.FluxBound_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_FBC_FLUXBOUND

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.FluxBound_getTypeCode(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.FluxBound_enablePackageInternal(self, *args)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Internal implementation method.

        """
        return _libsbml.FluxBound_hasRequiredElements(self)

FluxBound_swigregister = _libsbml.FluxBound_swigregister
FluxBound_swigregister(FluxBound)

class ListOfFluxBounds(ListOf):
    """
    [SBML 'fbc' package]  Implementation of the ListOfFluxBounds
    construct from the 'fbc' package.

    The ListOfFluxBounds is a container for the FluxBound elements of a
    Model.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfFluxBounds, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfFluxBounds, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfFluxBounds

        Creates and returns a deep copy of this ListOfFluxBounds.

        Returns a (deep) copy of this ListOfFluxBounds.

        """
        return _libsbml.ListOfFluxBounds_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> ListOfFluxBounds
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> ListOfFluxBounds
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> ListOfFluxBounds
        __init__(self) -> ListOfFluxBounds
        __init__(self,  fbcns) -> ListOfFluxBounds

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfFluxBounds(long level      = FbcExtension.getDefaultLevel(),
        long version    = FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new ListOfFluxBounds with the given level, version, and
        package version.

        @par <hr> Method variant with the following signature:

            ListOfFluxBounds(FbcPkgNamespaces fbcns)

        Creates a new ListOfFluxBounds with the given FbcPkgNamespaces object.

        """
        this = _libsbml.new_ListOfFluxBounds(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> FluxBound
        get(self, unsigned int n) -> FluxBound
        get(self, string sid) -> FluxBound
        get(self, string sid) -> FluxBound

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a FluxBound from the ListOfFluxBounds.

        Parameter 'n' is the index number of the FluxBound to get.

        Returns the nth FluxBound in this ListOfFluxBounds.

        See also size(), size().

        """
        return _libsbml.ListOfFluxBounds_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> FluxBound
        remove(self, string sid) -> FluxBound

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfFluxBounds items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfFluxBounds items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfFluxBounds_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_FBC_FLUXBOUND (default).

        See also getPackageName().

        """
        return _libsbml.ListOfFluxBounds_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfFluxBounds_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfFluxBounds
    __del__ = lambda self : None;
ListOfFluxBounds_swigregister = _libsbml.ListOfFluxBounds_swigregister
ListOfFluxBounds_swigregister(ListOfFluxBounds)

class FluxObjective(SBase):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package
    FluxObjective construct.

    An integral component in a complete description of a steady-state
    model is the so-called 'objective function' which generally consists
    of a linear combination of model variables (fluxes) and a sense
    (direction). In the FBC package this concept is succinctly captured in
    the Objective class.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FluxObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FluxObjective, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> FluxObjective
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> FluxObjective
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> FluxObjective
        __init__(self) -> FluxObjective
        __init__(self,  fbcns) -> FluxObjective
        __init__(self, FluxObjective source) -> FluxObjective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FluxObjective(long level      = FbcExtension.getDefaultLevel(),
        long version    = FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new FluxObjective with the given level, version, and package
        version.

        @par <hr> Method variant with the following signature:

            FluxObjective(FluxObjective source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            FluxObjective(FbcPkgNamespaces fbcns)

        Creates a new FluxObjective with the given FbcPkgNamespaces object.

        """
        this = _libsbml.new_FluxObjective(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_FluxObjective
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this FluxObjective.

        Returns the value of the 'id' attribute of this FluxObjective.

        """
        return _libsbml.FluxObjective_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        FluxObjective 'id' attribute has been set.

        Returns True if this FluxObjective 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FluxObjective_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this FluxObjective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxObjective_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this FluxObjective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxObjective_unsetId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this FluxObjective.

        Returns the value of the 'name' attribute of this FluxObjective.

        """
        return _libsbml.FluxObjective_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this
        FluxObjective 'name' attribute has been set.

        Returns True if this FluxObjective 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.FluxObjective_isSetName(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this FluxObjective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxObjective_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this FluxObjective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxObjective_unsetName(self)

    def getReaction(self):
        """
        getReaction(self) -> string

        Returns the string of the 'reaction' attribute of this FluxObjective.

        Returns the string of the 'reaction' attribute of this FluxObjective.

        """
        return _libsbml.FluxObjective_getReaction(self)

    def isSetReaction(self):
        """
        isSetReaction(self) -> bool

        Predicate returning True or False depending on whether this
        FluxObjective's 'reaction' attribute has been set.

        Returns True if this FluxObjective's 'reaction' attribute has been
        set,  otherwise False is returned.

        """
        return _libsbml.FluxObjective_isSetReaction(self)

    def setReaction(self, *args):
        """
        setReaction(self, string reaction) -> int

        Sets the SIdRef string of the 'reaction' attribute of this
        FluxObjective.

        Parameter 'reaction' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxObjective_setReaction(self, *args)

    def unsetReaction(self):
        """
        unsetReaction(self) -> int

        Unsets the value of the 'id' attribute of this FluxObjective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxObjective_unsetReaction(self)

    def getCoefficient(self):
        """
        getCoefficient(self) -> double

        Returns the value of the 'coefficient' attribute of this
        FluxObjective.

        Returns the value of the 'coefficient' attribute of this
        FluxObjective.

        """
        return _libsbml.FluxObjective_getCoefficient(self)

    def isSetCoefficient(self):
        """
        isSetCoefficient(self) -> bool

        Predicate returning True or False depending on whether this
        FluxObjective's 'coefficient' attribute has been set.

        Returns True if this FluxObjective's 'coefficient' attribute has been
        set,  otherwise False is returned.

        """
        return _libsbml.FluxObjective_isSetCoefficient(self)

    def setCoefficient(self, *args):
        """
        setCoefficient(self, double coefficient) -> int

        Sets the value of the 'coefficient' attribute of this FluxObjective.

        Parameter 'coefficient' is a double coefficient to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FluxObjective_setCoefficient(self, *args)

    def unsetCoefficient(self):
        """
        unsetCoefficient(self) -> int

        Unsets the value of the 'id' attribute of this FluxObjective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FluxObjective_unsetCoefficient(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.FluxObjective_renameSIdRefs(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.FluxObjective_getElementName(self)

    def clone(self):
        """
        clone(self) -> FluxObjective

        Creates and returns a deep copy of this FluxObjective.

        Returns a (deep) copy of this FluxObjective.

        """
        return _libsbml.FluxObjective_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_FBC_FLUXOBJECTIVE

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.FluxObjective_getTypeCode(self)

FluxObjective_swigregister = _libsbml.FluxObjective_swigregister
FluxObjective_swigregister(FluxObjective)

class ListOfFluxObjectives(ListOf):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package
    ListOfFluxObjectives construct.

    The ListOfFluxObjectives is a container for the FluxObjective elements
    of a Model annotation.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, FluxObjective.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfFluxObjectives, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfFluxObjectives, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfFluxObjectives

        Creates and returns a deep copy of this ListOfFluxObjectives.

        Returns a (deep) copy of this ListOfFluxObjectives.

        """
        return _libsbml.ListOfFluxObjectives_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> ListOfFluxObjectives
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> ListOfFluxObjectives
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> ListOfFluxObjectives
        __init__(self) -> ListOfFluxObjectives
        __init__(self,  fbcns) -> ListOfFluxObjectives

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfFluxObjectives(long level      =
        FbcExtension.getDefaultLevel(), long version    =
        FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new ListOfFluxObjectives with the given level, version, and
        package version.

        @par <hr> Method variant with the following signature:

            ListOfFluxObjectives(FbcPkgNamespaces fbcns)

        Creates a new ListOfFluxObjectives with the given FbcPkgNamespaces
        object.

        """
        this = _libsbml.new_ListOfFluxObjectives(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> FluxObjective
        get(self, unsigned int n) -> FluxObjective
        get(self, string sid) -> FluxObjective
        get(self, string sid) -> FluxObjective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a FluxObjective from the ListOfFluxObjectives.

        Parameter 'n' is the index number of the FluxObjective to get.

        Returns the nth FluxObjective in this ListOfFluxObjectives.

        See also size(), size().

        """
        return _libsbml.ListOfFluxObjectives_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> FluxObjective
        remove(self, string sid) -> FluxObjective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfFluxObjectives items and returns
        a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove Returns the item
        removed.  As mentioned above, the caller owns the returned item.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfFluxObjectives items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfFluxObjectives_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_FBC_FLUXOBJECTIVE (default).

        See also getPackageName().

        """
        return _libsbml.ListOfFluxObjectives_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfFluxObjectives_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfFluxObjectives
    __del__ = lambda self : None;
ListOfFluxObjectives_swigregister = _libsbml.ListOfFluxObjectives_swigregister
ListOfFluxObjectives_swigregister(ListOfFluxObjectives)

class GeneAssociation(SBase):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package
    GeneAssociation construct.

    Gene associations are not part of the core FBC specification, but
    rather are a proposed annotation.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneAssociation, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeneAssociation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> GeneAssociation
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> GeneAssociation
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> GeneAssociation
        __init__(self) -> GeneAssociation
        __init__(self, XMLNode node,  fbcns) -> GeneAssociation
        __init__(self,  fbcns) -> GeneAssociation
        __init__(self, GeneAssociation source) -> GeneAssociation

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            GeneAssociation(XMLNode node, FbcPkgNamespaces fbcns)

        Creates a new GeneAssociation with the given 'node' and
        FbcPkgNamespaces 'fbcns'.

        @par <hr> Method variant with the following signature:

            GeneAssociation(long level      = FbcExtension.getDefaultLevel(),
        long version    = FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new GeneAssociation with the given 'level', 'version', and
        'pkgVersion'.

        @par <hr> Method variant with the following signature:

            GeneAssociation(GeneAssociation source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            GeneAssociation(FbcPkgNamespaces fbcns)

        Creates a new GeneAssociation with the given FbcPkgNamespaces object.

        """
        this = _libsbml.new_GeneAssociation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_GeneAssociation
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the string of the 'id' attribute of this GeneAssociation.

        Returns the string of the 'id' attribute of this GeneAssociation.

        """
        return _libsbml.GeneAssociation_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        GeneAssociation's 'id' attribute has been set.

        Returns True if this GeneAssociation's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.GeneAssociation_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the SIdRef string of the 'id' attribute of this GeneAssociation.

        Parameter 'id' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.GeneAssociation_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this GeneAssociation.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.GeneAssociation_unsetId(self)

    def getReaction(self):
        """
        getReaction(self) -> string

        Returns the string of the 'reaction' attribute of this
        GeneAssociation.

        Returns the string of the 'reaction' attribute of this
        GeneAssociation.

        """
        return _libsbml.GeneAssociation_getReaction(self)

    def isSetReaction(self):
        """
        isSetReaction(self) -> bool

        Predicate returning True or False depending on whether this
        GeneAssociation's 'reaction' attribute has been set.

        Returns True if this GeneAssociation's 'reaction' attribute has been
        set,  otherwise False is returned.

        """
        return _libsbml.GeneAssociation_isSetReaction(self)

    def setReaction(self, *args):
        """
        setReaction(self, string reaction) -> int

        Sets the SIdRef string of the 'reaction' attribute of this
        GeneAssociation.

        Parameter 'reaction' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.GeneAssociation_setReaction(self, *args)

    def unsetReaction(self):
        """
        unsetReaction(self) -> int

        Unsets the value of the 'id' attribute of this GeneAssociation.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.GeneAssociation_unsetReaction(self)

    def createAssociation(self):
        """
        createAssociation(self) -> Association

        Creates a new association, sets it to this element and returns it.

        """
        return _libsbml.GeneAssociation_createAssociation(self)

    def getAssociation(self, *args):
        """
        getAssociation(self) -> Association
        getAssociation(self) -> Association

        Returns Association object of this GeneAssociation.

        Returns Association object of this GeneAssociation.

        """
        return _libsbml.GeneAssociation_getAssociation(self, *args)

    def isSetAssociation(self):
        """
        isSetAssociation(self) -> bool

        Predicate returning True or False depending on whether this
        GeneAssociation's 'association' element has been set.

        Returns True if this GeneAssociation's 'association' element has been
        set,  otherwise False is returned.

        """
        return _libsbml.GeneAssociation_isSetAssociation(self)

    def setAssociation(self, *args):
        """
        setAssociation(self, Association association) -> int

        Sets the Association object of this GeneAssociation.

        Parameter 'association' is a Association object to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.GeneAssociation_setAssociation(self, *args)

    def unsetAssociation(self):
        """
        unsetAssociation(self) -> int

        Unsets the Association object of this GeneAssociation.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.GeneAssociation_unsetAssociation(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.GeneAssociation_getElementName(self)

    def clone(self):
        """
        clone(self) -> GeneAssociation

        Creates and returns a deep copy of this GeneAssociation.

        Returns a (deep) copy of this GeneAssociation.

        """
        return _libsbml.GeneAssociation_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_FBC_GENEASSOCIATION

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.GeneAssociation_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.GeneAssociation_toXML(self)

GeneAssociation_swigregister = _libsbml.GeneAssociation_swigregister
GeneAssociation_swigregister(GeneAssociation)

class ListOfGeneAssociations(ListOf):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package suggested
    ListOfGeneAssociations annotation construct.

    The ListOfGeneAssociations is a container for the GeneAssociation
    elements of the proposed Model annotation, and is not part of the
    official FBC specification.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, GeneAssociation.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfGeneAssociations, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfGeneAssociations, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfGeneAssociations

        Creates and returns a deep copy of this ListOfGeneAssociations.

        Returns a (deep) copy of this ListOfGeneAssociations.

        """
        return _libsbml.ListOfGeneAssociations_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> ListOfGeneAssociations
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> ListOfGeneAssociations
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> ListOfGeneAssociations
        __init__(self) -> ListOfGeneAssociations
        __init__(self,  fbcns) -> ListOfGeneAssociations

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfGeneAssociations(long level      =
        FbcExtension.getDefaultLevel(), long version    =
        FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new ListOfGeneAssociations with the given level, version,
        and package version.

        @par <hr> Method variant with the following signature:

            ListOfGeneAssociations(FbcPkgNamespaces fbcns)

        Creates a new ListOfGeneAssociations with the given FbcPkgNamespaces
        object.

        """
        this = _libsbml.new_ListOfGeneAssociations(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> GeneAssociation
        get(self, unsigned int n) -> GeneAssociation
        get(self, string sid) -> GeneAssociation
        get(self, string sid) -> GeneAssociation

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a GeneAssociation from the ListOfGeneAssociations.

        Parameter 'n' is the index number of the GeneAssociation to get.

        Returns the nth GeneAssociation in this ListOfGeneAssociations.

        See also size(), size().

        """
        return _libsbml.ListOfGeneAssociations_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> GeneAssociation
        remove(self, string sid) -> GeneAssociation

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfGeneAssociations items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove Returns the item
        removed.  As mentioned above, the caller owns the returned item.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfGeneAssociations items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfGeneAssociations_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_FBC_GENEASSOCIATION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfGeneAssociations_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfGeneAssociations_getElementName(self)

    __swig_destroy__ = _libsbml.delete_ListOfGeneAssociations
    __del__ = lambda self : None;
ListOfGeneAssociations_swigregister = _libsbml.ListOfGeneAssociations_swigregister
ListOfGeneAssociations_swigregister(ListOfGeneAssociations)

OBJECTIVE_TYPE_MAXIMIZE = _libsbml.OBJECTIVE_TYPE_MAXIMIZE
OBJECTIVE_TYPE_MINIMIZE = _libsbml.OBJECTIVE_TYPE_MINIMIZE
OBJECTIVE_TYPE_UNKNOWN = _libsbml.OBJECTIVE_TYPE_UNKNOWN
class Objective(SBase):
    """
    [SBML 'fbc' package]  Implementation of the 'fbc' package Objective
    construct.

    The FBC Objective class is derived from SBML SBase and inherits metaid
    and sboTerm, as well as the subcomponents for Annotation and Notes. An
    integral component in a complete description of a steady-state model
    is the so-called 'objective function' which generally consists of a
    linear combination of model variables (fluxes) and a sense
    (direction). In the FBC package this concept is succinctly captured in
    the Objective class.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Objective, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Objective, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> Objective
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> Objective
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> Objective
        __init__(self) -> Objective
        __init__(self,  fbcns) -> Objective
        __init__(self, Objective source) -> Objective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Objective(long level      = FbcExtension.getDefaultLevel(), long
        version    = FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new Objective with the given level, version, and package
        version.

        @par <hr> Method variant with the following signature:

            Objective(Objective source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Objective(FbcPkgNamespaces fbcns)

        Creates a new Objective with the given FbcPkgNamespaces object.

        """
        this = _libsbml.new_Objective(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_Objective
    __del__ = lambda self : None;
    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id' in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.Objective_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object is
        found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.Objective_getElementByMetaId(self, *args)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Objective.

        Returns the value of the 'name' attribute of this Objective.

        """
        return _libsbml.Objective_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this
        Objective's 'name' attribute has been set.

        Returns True if this Objective's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Objective_isSetName(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Objective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Objective_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Objective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Objective_unsetName(self)

    def getType(self):
        """
        getType(self) -> string

        Returns the string of the 'type' attribute of this Objective.

        Returns the string of the 'type' attribute of this Objective.

        """
        return _libsbml.Objective_getType(self)

    def getObjectiveType(self):
        """
        getObjectiveType(self) -> ObjectiveType_t

        Returns the ObjectiveType_t of the 'type' attribute of this Objective.

        Returns the ObjectiveType_t of the 'type' attribute of this Objective.

        """
        return _libsbml.Objective_getObjectiveType(self)

    def isSetType(self):
        """
        isSetType(self) -> bool

        Predicate returning True or False depending on whether this
        Objective's 'type' attribute has been set.

        Returns True if this Objective's 'type' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Objective_isSetType(self)

    def setType(self, *args):
        """
        setType(self, string type) -> int
        setType(self, ObjectiveType_t type) -> int

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setType(string type)

        Sets the SIdRef string of the 'type' attribute of this Objective.

        Parameter 'type' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        @par <hr> Method variant with the following signature:

            setType(ObjectiveType_t type)

        Sets the SIdRef string of the 'type' attribute of this Objective.

        Parameter 'type' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Objective_setType(self, *args)

    def unsetType(self):
        """
        unsetType(self) -> int

        Unsets the value of the 'id' attribute of this Objective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Objective_unsetType(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the string of the 'id' attribute of this Objective.

        Returns the string of the 'id' attribute of this Objective.

        """
        return _libsbml.Objective_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        Objective's 'id' attribute has been set.

        Returns True if this Objective's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Objective_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the SIdRef string of the 'id' attribute of this Objective.

        Parameter 'id' is a SIdRef string to be set.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Objective_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Objective.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Objective_unsetId(self)

    def getListOfFluxObjectives(self):
        """
        getListOfFluxObjectives(self) -> ListOfFluxObjectives

        Returns the ListOf object that holds all members.

        Returns the ListOf object that holds all members.

        """
        return _libsbml.Objective_getListOfFluxObjectives(self)

    def getFluxObjective(self, *args):
        """
        getFluxObjective(self, unsigned int n) -> FluxObjective
        getFluxObjective(self, unsigned int n) -> FluxObjective
        getFluxObjective(self, string symbol) -> FluxObjective
        getFluxObjective(self, string symbol) -> FluxObjective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getFluxObjective(string symbol)

        Returns the member with the given symbol. If the index is invalid,
        None is returned.

        Parameter 'symbol' is a string representing the symbol attribute of
        the FluxObjective to get.

        Returns FluxObjective in the ListOfFluxObjectives with the given
        symbol or None if no such FluxObjective exists.

        @par <hr> Method variant with the following signature:

            getFluxObjective(long n)

        Returns the member with the given index. If the index is invalid, None
        is returned.

        Parameter 'n' is the index number of the FluxObjective to get.

        Returns the nth FluxObjective in the ListOfFluxObjectives.

        """
        return _libsbml.Objective_getFluxObjective(self, *args)

    def addFluxObjective(self, *args):
        """
        addFluxObjective(self, FluxObjective member) -> int

        Adds a copy of the given FluxObjective object to the list of members.

        Parameter 'member' is the FluxObjective object to be added to the list
        of  members.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_LEVEL_MISMATCH

           * libsbml.LIBSBML_VERSION_MISMATCH

           * libsbml.LIBSBML_PKG_VERSION_MISMATCH

           * libsbml.LIBSBML_DUPLICATE_OBJECT_ID

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Objective_addFluxObjective(self, *args)

    def getNumFluxObjectives(self):
        """
        getNumFluxObjectives(self) -> unsigned int

        Returns the number of members for this objective.

        Returns the number of members for this objective.

        """
        return _libsbml.Objective_getNumFluxObjectives(self)

    def createFluxObjective(self):
        """
        createFluxObjective(self) -> FluxObjective

        Creates a FluxObjective object, adds it to the end of the member
        objects list and returns a pointer to the newly created object.

        Returns a newly created FluxObjective object

        """
        return _libsbml.Objective_createFluxObjective(self)

    def removeFluxObjective(self, *args):
        """
        removeFluxObjective(self, unsigned int index) -> FluxObjective
        removeFluxObjective(self, string symbol) -> FluxObjective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeFluxObjective(string symbol)

        Removes the member with the given symbol from the objective. A pointer
        to the member that was removed is returned. If no member has been
        removed, None is returned.

        Parameter 'symbol' is the symbol attribute of the FluxObjective object
        to remove

        Returns the FluxObjective object removed.  As mentioned above,  the
        caller owns the returned object. None is returned if  the given index
        is out of range.

        @par <hr> Method variant with the following signature:

            removeFluxObjective(long index)

        Removes the member with the given index from the objective. A pointer
        to the member that was removed is returned. If no member has been
        removed, None is returned.

        Parameter 'index' is the index of the FluxObjective object to remove

        Returns the FluxObjective object removed.  As mentioned above,  the
        caller owns the returned object. None is returned if  the given index
        is out of range.

        """
        return _libsbml.Objective_removeFluxObjective(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.Objective_getElementName(self)

    def clone(self):
        """
        clone(self) -> Objective

        Creates and returns a deep copy of this Objective object.

        Returns a (deep) copy of this Objective.

        """
        return _libsbml.Objective_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_FBC_OBJECTIVE

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Objective_getTypeCode(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Objective_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Objective_enablePackageInternal(self, *args)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Internal implementation method.

        """
        return _libsbml.Objective_hasRequiredElements(self)

    def getIsSetListOfFluxObjectives(self):
        """
        getIsSetListOfFluxObjectives(self) -> bool

        Internal implementation method.

        """
        return _libsbml.Objective_getIsSetListOfFluxObjectives(self)

Objective_swigregister = _libsbml.Objective_swigregister
Objective_swigregister(Objective)

class ListOfObjectives(ListOf):
    """
    [SBML 'fbc' package]  Implementation of the ListOfObjectives
    construct from the 'fbc' package.

    The ListOfObjectives is a container for the Objective elements of
    Model.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, Objective.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfObjectives, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfObjectives, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfObjectives

        Creates and returns a deep copy of this ListOfObjectives object.

        Returns a (deep) copy of this ListOfObjectives.

        """
        return _libsbml.ListOfObjectives_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion(), 
            unsigned int pkgVersion = FbcExtension::getDefaultPackageVersion()) -> ListOfObjectives
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel(), 
            unsigned int version = FbcExtension::getDefaultVersion()) -> ListOfObjectives
        __init__(self, unsigned int level = FbcExtension::getDefaultLevel()) -> ListOfObjectives
        __init__(self) -> ListOfObjectives
        __init__(self,  fbcns) -> ListOfObjectives

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfObjectives(long level      = FbcExtension.getDefaultLevel(),
        long version    = FbcExtension.getDefaultVersion(), long pkgVersion =
        FbcExtension.getDefaultPackageVersion())

        Creates a new ListOfObjectives with the given level, version, and
        package version.

        @par <hr> Method variant with the following signature:

            ListOfObjectives(FbcPkgNamespaces fbcns)

        Creates a new ListOfObjectives with the given FbcPkgNamespaces object.

        """
        this = _libsbml.new_ListOfObjectives(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args):
        """
        get(self, unsigned int n) -> Objective
        get(self, unsigned int n) -> Objective
        get(self, string sid) -> Objective
        get(self, string sid) -> Objective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Objective from the ListOfObjectives.

        Parameter 'n' is the index number of the Objective to get.

        Returns the nth Objective in this ListOfObjectives.

        See also size(), size().

        """
        return _libsbml.ListOfObjectives_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Objective
        remove(self, string sid) -> Objective

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfObjectives items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove Returns the item
        removed.  As mentioned above, the caller owns the returned item.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfObjectives items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfObjectives_remove(self, *args)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the objects contained in this ListOf
        (i.e., libsbml.SBML_FBC_OBJECTIVE).

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_FBC_OBJECTIVE

        See also getPackageName().

        """
        return _libsbml.ListOfObjectives_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        Returns the string of the name of this element.

        """
        return _libsbml.ListOfObjectives_getElementName(self)

    def isSetActiveObjective(self):
        """
        isSetActiveObjective(self) -> bool

        Predicate returning True or False depending on whether this
        ListOfObjective's 'activeObjective' attribute has been set.

        Returns True if this ListOfObjective's 'activeObjective' attribute has
        been set,  otherwise False is returned.

        """
        return _libsbml.ListOfObjectives_isSetActiveObjective(self)

    def setActiveObjective(self, *args):
        """
        setActiveObjective(self, string activeObjective) -> int

        Sets the value of the 'activeObjective' attribute of this
        ListOfObjectives.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ListOfObjectives_setActiveObjective(self, *args)

    def getActiveObjective(self):
        """
        getActiveObjective(self) -> string

        Returns the value of the 'activeObjective' attribute of this
        ListOfObjectives.

        Returns the value of the 'activeObjective' attribute of this
        ListOfObjectives.

        """
        return _libsbml.ListOfObjectives_getActiveObjective(self)

    def unsetActiveObjective(self):
        """
        unsetActiveObjective(self) -> int

        Unsets the value of the 'activeObjective' attribute of this
        ListOfObjectives.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.ListOfObjectives_unsetActiveObjective(self)

    def appendFrom(self, *args):
        """
        appendFrom(self, ListOf list) -> int

        Adds a clone of all items in the provided ListOf to this object.  This
        means that when this ListOf is destroyed, the original items will not
        be destroyed.  In addition, copy over the input ListOfObjectives'
        'activeObjective' attribute, if none is set for this element.

        Parameter 'list' is A list of items to be added.

        See also append().

        """
        return _libsbml.ListOfObjectives_appendFrom(self, *args)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.ListOfObjectives_renameSIdRefs(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfObjectives
    __del__ = lambda self : None;
ListOfObjectives_swigregister = _libsbml.ListOfObjectives_swigregister
ListOfObjectives_swigregister(ListOfObjectives)

FbcUnknown = _libsbml.FbcUnknown
FbcNSUndeclared = _libsbml.FbcNSUndeclared
FbcElementNotInNs = _libsbml.FbcElementNotInNs
FbcDuplicateComponentId = _libsbml.FbcDuplicateComponentId
FbcSBMLSIdSyntax = _libsbml.FbcSBMLSIdSyntax
FbcAttributeRequiredMissing = _libsbml.FbcAttributeRequiredMissing
FbcAttributeRequiredMustBeBoolean = _libsbml.FbcAttributeRequiredMustBeBoolean
FbcRequiredFalse = _libsbml.FbcRequiredFalse
FbcOnlyOneEachListOf = _libsbml.FbcOnlyOneEachListOf
FbcNoEmptyListOfs = _libsbml.FbcNoEmptyListOfs
FbcLOFluxBoundsAllowedElements = _libsbml.FbcLOFluxBoundsAllowedElements
FbcLOObjectivesAllowedElements = _libsbml.FbcLOObjectivesAllowedElements
FbcLOFluxBoundsAllowedAttributes = _libsbml.FbcLOFluxBoundsAllowedAttributes
FbcLOObjectivesAllowedAttributes = _libsbml.FbcLOObjectivesAllowedAttributes
FbcActiveObjectiveSyntax = _libsbml.FbcActiveObjectiveSyntax
FbcActiveObjectiveRefersObjective = _libsbml.FbcActiveObjectiveRefersObjective
FbcSpeciesAllowedL3Attributes = _libsbml.FbcSpeciesAllowedL3Attributes
FbcSpeciesChargeMustBeInteger = _libsbml.FbcSpeciesChargeMustBeInteger
FbcSpeciesFormulaMustBeString = _libsbml.FbcSpeciesFormulaMustBeString
FbcFluxBoundAllowedL3Attributes = _libsbml.FbcFluxBoundAllowedL3Attributes
FbcFluxBoundAllowedElements = _libsbml.FbcFluxBoundAllowedElements
FbcFluxBoundRequiredAttributes = _libsbml.FbcFluxBoundRequiredAttributes
FbcFluxBoundRectionMustBeSIdRef = _libsbml.FbcFluxBoundRectionMustBeSIdRef
FbcFluxBoundNameMustBeString = _libsbml.FbcFluxBoundNameMustBeString
FbcFluxBoundOperationMustBeEnum = _libsbml.FbcFluxBoundOperationMustBeEnum
FbcFluxBoundValueMustBeDouble = _libsbml.FbcFluxBoundValueMustBeDouble
FbcFluxBoundReactionMustExist = _libsbml.FbcFluxBoundReactionMustExist
FbcFluxBoundsForReactionConflict = _libsbml.FbcFluxBoundsForReactionConflict
FbcObjectiveAllowedL3Attributes = _libsbml.FbcObjectiveAllowedL3Attributes
FbcObjectiveAllowedElements = _libsbml.FbcObjectiveAllowedElements
FbcObjectiveRequiredAttributes = _libsbml.FbcObjectiveRequiredAttributes
FbcObjectiveNameMustBeString = _libsbml.FbcObjectiveNameMustBeString
FbcObjectiveTypeMustBeEnum = _libsbml.FbcObjectiveTypeMustBeEnum
FbcObjectiveOneListOfObjectives = _libsbml.FbcObjectiveOneListOfObjectives
FbcObjectiveLOFluxObjMustNotBeEmpty = _libsbml.FbcObjectiveLOFluxObjMustNotBeEmpty
FbcObjectiveLOFluxObjOnlyFluxObj = _libsbml.FbcObjectiveLOFluxObjOnlyFluxObj
FbcObjectiveLOFluxObjAllowedAttribs = _libsbml.FbcObjectiveLOFluxObjAllowedAttribs
FbcFluxObjectAllowedL3Attributes = _libsbml.FbcFluxObjectAllowedL3Attributes
FbcFluxObjectAllowedElements = _libsbml.FbcFluxObjectAllowedElements
FbcFluxObjectRequiredAttributes = _libsbml.FbcFluxObjectRequiredAttributes
FbcFluxObjectNameMustBeString = _libsbml.FbcFluxObjectNameMustBeString
FbcFluxObjectReactionMustBeSIdRef = _libsbml.FbcFluxObjectReactionMustBeSIdRef
FbcFluxObjectReactionMustExist = _libsbml.FbcFluxObjectReactionMustExist
FbcFluxObjectCoefficientMustBeDouble = _libsbml.FbcFluxObjectCoefficientMustBeDouble
SPECIES_ROLE_UNDEFINED = _libsbml.SPECIES_ROLE_UNDEFINED
SPECIES_ROLE_SUBSTRATE = _libsbml.SPECIES_ROLE_SUBSTRATE
SPECIES_ROLE_PRODUCT = _libsbml.SPECIES_ROLE_PRODUCT
SPECIES_ROLE_SIDESUBSTRATE = _libsbml.SPECIES_ROLE_SIDESUBSTRATE
SPECIES_ROLE_SIDEPRODUCT = _libsbml.SPECIES_ROLE_SIDEPRODUCT
SPECIES_ROLE_MODIFIER = _libsbml.SPECIES_ROLE_MODIFIER
SPECIES_ROLE_ACTIVATOR = _libsbml.SPECIES_ROLE_ACTIVATOR
SPECIES_ROLE_INHIBITOR = _libsbml.SPECIES_ROLE_INHIBITOR
class Point(SBase):
    """
    [SBML 'layout' package]

     The representation of a point in the &ldquo;layout&rdquo; package.

    A point is specified via the required attributes 'x', 'y' and an
    optional attribute 'z', all of which are of type double. If the
    attribute z is not specified, the object is a two dimensional object.
    The Point class also has an optional attribute id of type SId. While
    not used in the &ldquo;layout&rdquo; package, it can be used by
    programs to refer to the elements.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> Point
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> Point
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> Point
        __init__(self) -> Point
        __init__(self, LayoutPkgNamespaces layoutns) -> Point
        __init__(self, Point orig) -> Point
        __init__(self, LayoutPkgNamespaces layoutns, double x, double y, double z = 0.0) -> Point
        __init__(self, LayoutPkgNamespaces layoutns, double x, double y) -> Point
        __init__(self, XMLNode node, unsigned int l2version = 4) -> Point
        __init__(self, XMLNode node) -> Point

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Point(Point orig)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Point(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            Point(LayoutPkgNamespaces layoutns, double x, double y, double z
        =0.0)

        Creates a new point with the given ccordinates.

          @par <hr> Method variant with the following signature:

            Point(long level      = LayoutExtension.getDefaultLevel(), long
        version    = LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Creates a new point with x,y and z set to 0.0.

        @par <hr> Method variant with the following signature:

            Point(XMLNode node, long l2version = 4)

        Creates a new Point from the given XMLNode

        """
        this = _libsbml.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_Point
    __del__ = lambda self : None;
    def x(self):
        """
        x(self) -> double

        Returns the x offset.

        """
        return _libsbml.Point_x(self)

    def y(self):
        """
        y(self) -> double

        Returns the y offset.

        """
        return _libsbml.Point_y(self)

    def z(self):
        """
        z(self) -> double

        Returns the z offset.

        """
        return _libsbml.Point_z(self)

    def getXOffset(self):
        """
        getXOffset(self) -> double

        Returns the x offset.

        """
        return _libsbml.Point_getXOffset(self)

    def getYOffset(self):
        """
        getYOffset(self) -> double

        Returns the y offset.

        """
        return _libsbml.Point_getYOffset(self)

    def getZOffset(self):
        """
        getZOffset(self) -> double

        Returns the z offset.

        """
        return _libsbml.Point_getZOffset(self)

    def setX(self, *args):
        """
        setX(self, double x)

        Sets the x offset.

        """
        return _libsbml.Point_setX(self, *args)

    def setY(self, *args):
        """
        setY(self, double y)

        Sets the y offset.

        """
        return _libsbml.Point_setY(self, *args)

    def setZ(self, *args):
        """
        setZ(self, double z)

        Sets the z offset.

        """
        return _libsbml.Point_setZ(self, *args)

    def setXOffset(self, *args):
        """
        setXOffset(self, double x)

        Sets the x offset.

        """
        return _libsbml.Point_setXOffset(self, *args)

    def setYOffset(self, *args):
        """
        setYOffset(self, double y)

        Sets the y offset.

        """
        return _libsbml.Point_setYOffset(self, *args)

    def setZOffset(self, *args):
        """
        setZOffset(self, double z)

        Sets the z offset.

        """
        return _libsbml.Point_setZOffset(self, *args)

    def setOffsets(self, *args):
        """
        setOffsets(self, double x, double y, double z = 0.0)
        setOffsets(self, double x, double y)

        Sets the coordinates to the given values.

        """
        return _libsbml.Point_setOffsets(self, *args)

    def getZOffsetExplicitlySet(self):
        """
        getZOffsetExplicitlySet(self) -> bool

        """
        return _libsbml.Point_getZOffsetExplicitlySet(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Sets the Z offset to 0.0.

        """
        return _libsbml.Point_initDefaults(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Point.

        """
        return _libsbml.Point_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this Point's
        'id' attribute has been set.

        """
        return _libsbml.Point_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Point.

        """
        return _libsbml.Point_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Point.

        """
        return _libsbml.Point_unsetId(self)

    def setElementName(self, *args):
        """
        setElementName(self, string name)

        Sets the element name to be returned by getElementName.

        """
        return _libsbml.Point_setElementName(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.Point_getElementName(self)

    def clone(self):
        """
        clone(self) -> Point

        Creates and returns a deep copy of this Point.

        Returns a (deep) copy of this Point.

        """
        return _libsbml.Point_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_LAYOUT_POINT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Point_getTypeCode(self)

    def toXML(self, *args):
        """
        toXML(self, string name) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.Point_toXML(self, *args)

Point_swigregister = _libsbml.Point_swigregister
Point_swigregister(Point)

class Dimensions(SBase):
    """
    [SBML 'layout' package]

     The Dimensions class describes the overall 2D or 3D shape of a
    &ldquo;layout&rdquo; package object.

    A dimension is specified via the required attributes width, height and
    an optional attribute depth, all of which are of type double. If the
    attribute depth is not specified, the object is a two dimensional
    object. The width attribute of Dimensions specifies the size of the
    object in the direction of the positive x axis, the height attribute
    specifies the size of the object along the positive y axis and the
    depth attribute specifies the size of the object along the positive z
    axis. All sizes for Dimensions objects are positive values, and so the
    attributes are not allowed to take negative values.  The Dimensions
    class also has an optional attribute id of type SId. While not used in
    the &ldquo;layout&rdquo; package, it can be used by programs to refer
    to the elements.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dimensions, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dimensions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> Dimensions
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> Dimensions
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> Dimensions
        __init__(self) -> Dimensions
        __init__(self, LayoutPkgNamespaces layoutns) -> Dimensions
        __init__(self, Dimensions orig) -> Dimensions
        __init__(self, LayoutPkgNamespaces layoutns, double w, double h, double d = 0.0) -> Dimensions
        __init__(self, LayoutPkgNamespaces layoutns, double w, double h) -> Dimensions
        __init__(self, XMLNode node, unsigned int l2version = 4) -> Dimensions
        __init__(self, XMLNode node) -> Dimensions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Dimensions(LayoutPkgNamespaces layoutns, double w, double h,
        double d = 0.0)

        Creates a new Dimensions object with the given sizes.

         @par <hr> Method variant with the following signature:

            Dimensions(LayoutPkgNamespaces layoutns)

        Creates a new Dimensions object with the given LayoutPkgNamespaces
        object.

        @par <hr> Method variant with the following signature:

            Dimensions(Dimensions orig)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Dimensions(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Creates a new Dimensions object with the given level, version, and
        package version and with all sizes set to 0.0.

        @par <hr> Method variant with the following signature:

            Dimensions(XMLNode node, long l2version = 4)

        Creates a new Dimensions object from the given XMLNode

        """
        this = _libsbml.new_Dimensions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_Dimensions
    __del__ = lambda self : None;
    def width(self):
        """
        width(self) -> double

        Returns the width.

        """
        return _libsbml.Dimensions_width(self)

    def height(self):
        """
        height(self) -> double

        Returns the height.

        """
        return _libsbml.Dimensions_height(self)

    def depth(self):
        """
        depth(self) -> double

        Returns the depth.

        """
        return _libsbml.Dimensions_depth(self)

    def getWidth(self):
        """
        getWidth(self) -> double

        Returns the width.

        """
        return _libsbml.Dimensions_getWidth(self)

    def getHeight(self):
        """
        getHeight(self) -> double

        Returns the height.

        """
        return _libsbml.Dimensions_getHeight(self)

    def getDepth(self):
        """
        getDepth(self) -> double

        Returns the depth.

        """
        return _libsbml.Dimensions_getDepth(self)

    def setWidth(self, *args):
        """
        setWidth(self, double w)

        Sets the width to the given value.

        """
        return _libsbml.Dimensions_setWidth(self, *args)

    def setHeight(self, *args):
        """
        setHeight(self, double h)

        Sets the height to the given value.

        """
        return _libsbml.Dimensions_setHeight(self, *args)

    def setDepth(self, *args):
        """
        setDepth(self, double d)

        Sets the depth to the given value.

        """
        return _libsbml.Dimensions_setDepth(self, *args)

    def setBounds(self, *args):
        """
        setBounds(self, double w, double h, double d = 0.0)
        setBounds(self, double w, double h)

        Sets all sizes of the Dimensions object to the given values.

        """
        return _libsbml.Dimensions_setBounds(self, *args)

    def getDExplicitlySet(self):
        """
        getDExplicitlySet(self) -> bool

        """
        return _libsbml.Dimensions_getDExplicitlySet(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Sets the depth to 0.0

        """
        return _libsbml.Dimensions_initDefaults(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Dimensions.

        """
        return _libsbml.Dimensions_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        Dimensions's 'id' attribute has been set.

        """
        return _libsbml.Dimensions_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Dimensions.

        """
        return _libsbml.Dimensions_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Dimensions.

        """
        return _libsbml.Dimensions_unsetId(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.Dimensions_getElementName(self)

    def clone(self):
        """
        clone(self) -> Dimensions

        Creates and returns a deep copy of this Dimensions.

        Returns a (deep) copy of this Dimensions object.

        """
        return _libsbml.Dimensions_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_DIMENSIONS

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Dimensions_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.Dimensions_toXML(self)

Dimensions_swigregister = _libsbml.Dimensions_swigregister
Dimensions_swigregister(Dimensions)

class BoundingBox(SBase):
    """
    [SBML 'layout' package]

     Representation of a bounding box.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> BoundingBox
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> BoundingBox
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> BoundingBox
        __init__(self) -> BoundingBox
        __init__(self, LayoutPkgNamespaces layoutns) -> BoundingBox
        __init__(self, BoundingBox orig) -> BoundingBox
        __init__(self, LayoutPkgNamespaces layoutns, string id) -> BoundingBox
        __init__(self, LayoutPkgNamespaces layoutns, string id, double x, 
            double y, double width, double height) -> BoundingBox
        __init__(self, LayoutPkgNamespaces layoutns, string id, double x, 
            double y, double z, double width, double height, 
            double depth) -> BoundingBox
        __init__(self, LayoutPkgNamespaces layoutns, string id, Point p, Dimensions d) -> BoundingBox
        __init__(self, XMLNode node, unsigned int l2version = 4) -> BoundingBox
        __init__(self, XMLNode node) -> BoundingBox

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            BoundingBox(LayoutPkgNamespaces layoutns, string id, double x,
        double y, double z, double width, double height, double depth)

        Constructor which sets the id, the coordinates and the dimensions to
        the given 3D values.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            BoundingBox(LayoutPkgNamespaces layoutns, string id, Point p,
        Dimensions d)

        Constructor which sets the id, the coordinates and the dimensions to
        the given values.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            BoundingBox(BoundingBox orig)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            BoundingBox(LayoutPkgNamespaces layoutns, string id)

        Constructor set position and dimensions to (0.0,0.0,0.0) and the id to
        a copy of the given string.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            BoundingBox(LayoutPkgNamespaces layoutns, string id, double x,
        double y, double width, double height)

        Constructor which sets the id, the coordinates and the dimensions to
        the given 2D values.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            BoundingBox(XMLNode node, long l2version=4)

        Creates a new BoundingBox from the given XMLNode

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            BoundingBox(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Default Constructor set position and dimensions to (0.0,0.0,0.0) and
        the id to an empty string.

        @par <hr> Method variant with the following signature:

            BoundingBox(LayoutPkgNamespaces layoutns)

        Creates a new BoundingBox object with the given LayoutPkgNamespaces
        object.

        """
        this = _libsbml.new_BoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_BoundingBox
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this BoundingBox.

        """
        return _libsbml.BoundingBox_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        BoundingBox's 'id' attribute has been set.

        """
        return _libsbml.BoundingBox_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this BoundingBox.

        """
        return _libsbml.BoundingBox_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this BoundingBox.

        """
        return _libsbml.BoundingBox_unsetId(self)

    def getPosition(self):
        """
        getPosition(self) -> Point

        Returns the position of the BoundingBox as const referece to a Point
        object.

        """
        return _libsbml.BoundingBox_getPosition(self)

    def getDimensions(self):
        """
        getDimensions(self) -> Dimensions

        Returns the dimensions of the BoundingBox as const referece to a
        Dimensions object.

        """
        return _libsbml.BoundingBox_getDimensions(self)

    def setPosition(self, *args):
        """
        setPosition(self, Point p)

        Sets the position to a copy of the Point object given.

        """
        return _libsbml.BoundingBox_setPosition(self, *args)

    def setDimensions(self, *args):
        """
        setDimensions(self, Dimensions d)

        Sets the dimensions to a copy of the Dimensions object given.

        """
        return _libsbml.BoundingBox_setDimensions(self, *args)

    def getDimensionsExplicitlySet(self):
        """
        getDimensionsExplicitlySet(self) -> bool

        Return true or false based on whether Dimensions have been set

        """
        return _libsbml.BoundingBox_getDimensionsExplicitlySet(self)

    def getPositionExplicitlySet(self):
        """
        getPositionExplicitlySet(self) -> bool

        Return true or false based on whether Dimensions have been set

        """
        return _libsbml.BoundingBox_getPositionExplicitlySet(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Does nothing yet since there are no defaults fo a BoundingBox.

        """
        return _libsbml.BoundingBox_initDefaults(self)

    def x(self):
        """
        x(self) -> double

        Get the x offset of the bounding box.

        """
        return _libsbml.BoundingBox_x(self)

    def y(self):
        """
        y(self) -> double

        Get the y offset of the bounding box.

        """
        return _libsbml.BoundingBox_y(self)

    def z(self):
        """
        z(self) -> double

        Get the z offset of the bounding box.

        """
        return _libsbml.BoundingBox_z(self)

    def width(self):
        """
        width(self) -> double

        Get the width of the bounding box.

        """
        return _libsbml.BoundingBox_width(self)

    def height(self):
        """
        height(self) -> double

        Get the height of the bounding box.

        """
        return _libsbml.BoundingBox_height(self)

    def depth(self):
        """
        depth(self) -> double

        Get the depth of the bounding box.

        """
        return _libsbml.BoundingBox_depth(self)

    def setX(self, *args):
        """
        setX(self, double x)

        Set x offset of the bounding box

        """
        return _libsbml.BoundingBox_setX(self, *args)

    def setY(self, *args):
        """
        setY(self, double y)

        Set y offset of the bounding box

        """
        return _libsbml.BoundingBox_setY(self, *args)

    def setZ(self, *args):
        """
        setZ(self, double z)

        Set z offset of the bounding box

        """
        return _libsbml.BoundingBox_setZ(self, *args)

    def setWidth(self, *args):
        """
        setWidth(self, double width)

        Set width of the bounding box

        """
        return _libsbml.BoundingBox_setWidth(self, *args)

    def setHeight(self, *args):
        """
        setHeight(self, double height)

        Set height of the bounding box

        """
        return _libsbml.BoundingBox_setHeight(self, *args)

    def setDepth(self, *args):
        """
        setDepth(self, double depth)

        Set depth of the bounding box

        """
        return _libsbml.BoundingBox_setDepth(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.BoundingBox_getElementName(self)

    def clone(self):
        """
        clone(self) -> BoundingBox

        Creates and returns a deep copy of this BoundingBox.

        Returns a (deep) copy of this BoundingBox.

        """
        return _libsbml.BoundingBox_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_BOUNDINGBOX

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.BoundingBox_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.BoundingBox_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.BoundingBox_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.BoundingBox_enablePackageInternal(self, *args)

BoundingBox_swigregister = _libsbml.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class GraphicalObject(SBase):
    """
    [SBML 'layout' package]

     The basic &ldquo;layout&rdquo; package element for storing layout
    information.

    All the more specific layout elements (CompartmentGlyph, GeneralGlyph,
    SpeciesGlyph, ReactionGlyph, ReferenceGlyph, TextGlyph, and
    SpeciesReferenceGlyph) are derived from the class GraphicalObject.
    Each object of class GraphicalObject has a mandatory BoundingBox,
    which specifies the position and the size of the object.  While
    GraphicalObject is the base class for most elements in the
    &ldquo;layout&rdquo; package, it is not an abstract class. It can be
    instantiated when used in the listOfAdditionalGraphicalObjects to
    describe additional elements and relationships. Since it only
    describes a BoundingBox, programs are encouraged to add Annotation
    objects that describe program-specific graphical information.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicalObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicalObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> GraphicalObject
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> GraphicalObject
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> GraphicalObject
        __init__(self) -> GraphicalObject
        __init__(self, LayoutPkgNamespaces layoutns) -> GraphicalObject
        __init__(self, LayoutPkgNamespaces layoutns, string id) -> GraphicalObject
        __init__(self, LayoutPkgNamespaces layoutns, string id, double x, 
            double y, double w, double h) -> GraphicalObject
        __init__(self, LayoutPkgNamespaces layoutns, string id, double x, 
            double y, double z, double w, double h, double d) -> GraphicalObject
        __init__(self, LayoutPkgNamespaces layoutns, string id, Point p, Dimensions d) -> GraphicalObject
        __init__(self, LayoutPkgNamespaces layoutns, string id, BoundingBox bb) -> GraphicalObject
        __init__(self, XMLNode node, unsigned int l2version = 4) -> GraphicalObject
        __init__(self, XMLNode node) -> GraphicalObject
        __init__(self, GraphicalObject source) -> GraphicalObject

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            GraphicalObject(LayoutPkgNamespaces layoutns, string id, Point p,
        Dimensions d)

        Creates a new GraphicalObject with the given 'id' and 3D coordinates
        for the bounding box.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            GraphicalObject(GraphicalObject source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            GraphicalObject(LayoutPkgNamespaces layoutns, string id, double x,
        double y, double z, double w, double h, double d)

        Creates a new GraphicalObject with the given 'id' and 3D coordinates
        for the bounding box.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            GraphicalObject(XMLNode node, long l2version=4)

        Creates a new GraphicalObject from the given XMLNode

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            GraphicalObject(LayoutPkgNamespaces layoutns, string id, double x,
        double y, double w, double h)

        Creates a new GraphicalObject with the given 'id' and 2D coordinates
        for the bounding box.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            GraphicalObject(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Creates a new GraphicalObject.

        @par <hr> Method variant with the following signature:

            GraphicalObject(LayoutPkgNamespaces layoutns, string id,
        BoundingBox bb)

        Creates a new GraphicalObject with the given 'id' and 3D coordinates
        for the bounding box.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            GraphicalObject(LayoutPkgNamespaces layoutns)

        Creates a new GraphicalObject with the given LayoutPkgNamespaces

        @par <hr> Method variant with the following signature:

            GraphicalObject(LayoutPkgNamespaces layoutns, string id)

        Creates a new GraphicalObject with the given 'id'.

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_GraphicalObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_GraphicalObject
    __del__ = lambda self : None;
    def initDefaults(self):
        """
        initDefaults(self)

        Does nothing. No defaults are defined for GraphicalObject.

        """
        return _libsbml.GraphicalObject_initDefaults(self)

    def renameMetaIdRefs(self, *args):
        """
        renameMetaIdRefs(self, string oldid, string newid)

        Renames all the MetaIdRef attributes on this element.

        This method works by looking at all meta-attribute values, comparing
        the identifiers to the value of 'oldid'.  If any matches are found,
        the matching identifiers are replaced with 'newid'.  The method does
        not descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.GraphicalObject_renameMetaIdRefs(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this GraphicalObject.

        """
        return _libsbml.GraphicalObject_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        GraphicalObject's 'id' attribute has been set.

        """
        return _libsbml.GraphicalObject_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this GraphicalObject.

        """
        return _libsbml.GraphicalObject_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this GraphicalObject.

        """
        return _libsbml.GraphicalObject_unsetId(self)

    def getMetaIdRef(self):
        """
        getMetaIdRef(self) -> string

        Returns the value of the 'metaidRef' attribute of this
        GraphicalObject.

        """
        return _libsbml.GraphicalObject_getMetaIdRef(self)

    def isSetMetaIdRef(self):
        """
        isSetMetaIdRef(self) -> bool

        Predicate returning True or False depending on whether this
        GraphicalObject's 'metaidRef' attribute has been set.

        """
        return _libsbml.GraphicalObject_isSetMetaIdRef(self)

    def setMetaIdRef(self, *args):
        """
        setMetaIdRef(self, string metaid) -> int

        Sets the value of the 'metaidRef' attribute of this GraphicalObject.

        """
        return _libsbml.GraphicalObject_setMetaIdRef(self, *args)

    def unsetMetaIdRef(self):
        """
        unsetMetaIdRef(self) -> int

        Unsets the value of the 'metaidRef' attribute of this GraphicalObject.

        """
        return _libsbml.GraphicalObject_unsetMetaIdRef(self)

    def setBoundingBox(self, *args):
        """
        setBoundingBox(self, BoundingBox bb)

        Sets the boundingbox for the GraphicalObject.

        """
        return _libsbml.GraphicalObject_setBoundingBox(self, *args)

    def getBoundingBox(self):
        """
        getBoundingBox(self) -> BoundingBox

        Returns the bounding box for the GraphicalObject.

        """
        return _libsbml.GraphicalObject_getBoundingBox(self)

    def getBoundingBoxExplicitlySet(self):
        """
        getBoundingBoxExplicitlySet(self) -> bool

        """
        return _libsbml.GraphicalObject_getBoundingBoxExplicitlySet(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.GraphicalObject_getElementName(self)

    def clone(self):
        """
        clone(self) -> GraphicalObject

        Creates and returns a deep copy of this GraphicalObject.

        Returns a (deep) copy of this GraphicalObject.

        """
        return _libsbml.GraphicalObject_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_GRAPHICALOBJECT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.GraphicalObject_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.GraphicalObject_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.GraphicalObject_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.GraphicalObject_enablePackageInternal(self, *args)

GraphicalObject_swigregister = _libsbml.GraphicalObject_swigregister
GraphicalObject_swigregister(GraphicalObject)

class ListOfGraphicalObjects(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfAdditionalGraphicalObjects construct from
    the &ldquo;layout&rdquo; package.

    The ListOfGraphicalObjects class in libSBML actually represents the
    ListOfAdditionalGraphicalObjects class in the &ldquo;layout&rdquo;
    package, and is a container for the additional GraphicalObject
    elements of a Layout.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, GraphicalObject.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfGraphicalObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfGraphicalObjects, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfGraphicalObjects

        Creates and returns a deep copy of this ListOfGraphicalObjects.

        Returns a (deep) copy of this ListOfGraphicalObjects.

        """
        return _libsbml.ListOfGraphicalObjects_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfGraphicalObjects
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfGraphicalObjects
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfGraphicalObjects
        __init__(self) -> ListOfGraphicalObjects
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfGraphicalObjects

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfGraphicalObjects(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfGraphicalObjects(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfGraphicalObjects(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_GRAPHICALOBJECT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfGraphicalObjects_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfGraphicalObjects_getElementName(self)

    def setElementName(self, *args):
        """
        setElementName(self, string elementName)

        Internal implementation method.

        """
        return _libsbml.ListOfGraphicalObjects_setElementName(self, *args)

    def get(self, *args):
        """
        get(self, unsigned int n) -> GraphicalObject
        get(self, unsigned int n) -> GraphicalObject
        get(self, string sid) -> GraphicalObject
        get(self, string sid) -> GraphicalObject

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a GraphicalObject from the ListOfGraphicalObjects.

        Parameter 'n' is the index number of the GraphicalObject to get.

        Returns the nth GraphicalObject in this ListOfGraphicalObjects.

        See also size(), size().

        """
        return _libsbml.ListOfGraphicalObjects_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> GraphicalObject
        remove(self, string sid) -> GraphicalObject

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfGraphicalObjects items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfGraphicalObjects items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfGraphicalObjects_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfGraphicalObjects_toXML(self)

    __swig_destroy__ = _libsbml.delete_ListOfGraphicalObjects
    __del__ = lambda self : None;
ListOfGraphicalObjects_swigregister = _libsbml.ListOfGraphicalObjects_swigregister
ListOfGraphicalObjects_swigregister(ListOfGraphicalObjects)

class CompartmentGlyph(GraphicalObject):
    """
    [SBML 'layout' package]

     Representation of a compartment glyph.

    """
    __swig_setmethods__ = {}
    for _s in [GraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> CompartmentGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> CompartmentGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> CompartmentGlyph
        __init__(self) -> CompartmentGlyph
        __init__(self, LayoutPkgNamespaces layoutns) -> CompartmentGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id) -> CompartmentGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id, string compartmentId) -> CompartmentGlyph
        __init__(self, XMLNode node, unsigned int l2version = 4) -> CompartmentGlyph
        __init__(self, XMLNode node) -> CompartmentGlyph
        __init__(self, CompartmentGlyph source) -> CompartmentGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CompartmentGlyph(LayoutPkgNamespaces layoutns, string id, string
        compartmentId)

        Constructor which creates a new CompartmentGlyph.  Id and associated
        compartment id are set to copies of the values given as arguments.

        (FOR BACKWARD COMPATIBILITY)

        @par <hr> Method variant with the following signature:

            CompartmentGlyph(XMLNode node, long l2version=4)

        Creates a new CompartmentGlyph from the given XMLNode

        (FOR BACKWARD COMPATIBILITY)

        @par <hr> Method variant with the following signature:

            CompartmentGlyph(CompartmentGlyph source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            CompartmentGlyph(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Default Constructor which creates a new CompartmentGlyph.  Id and
        associated compartment id are unset.

        @par <hr> Method variant with the following signature:

            CompartmentGlyph(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            CompartmentGlyph(LayoutPkgNamespaces layoutns, string id)

        Constructor which creates a new CompartmentGlyph with the given 'id'.

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_CompartmentGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_CompartmentGlyph
    __del__ = lambda self : None;
    def getCompartmentId(self):
        """
        getCompartmentId(self) -> string

        Returns the id of the associated compartment.

        """
        return _libsbml.CompartmentGlyph_getCompartmentId(self)

    def setCompartmentId(self, *args):
        """
        setCompartmentId(self, string id) -> int

        Sets the id of the associated compartment.

        """
        return _libsbml.CompartmentGlyph_setCompartmentId(self, *args)

    def isSetCompartmentId(self):
        """
        isSetCompartmentId(self) -> bool

        Returns true if the id of the associated compartment is not the empty
        string.

        """
        return _libsbml.CompartmentGlyph_isSetCompartmentId(self)

    def getOrder(self):
        """
        getOrder(self) -> double

        Returns the compartment order.

        """
        return _libsbml.CompartmentGlyph_getOrder(self)

    def setOrder(self, *args):
        """
        setOrder(self, double order) -> int

        Sets the compartment order

        """
        return _libsbml.CompartmentGlyph_setOrder(self, *args)

    def unsetOrder(self):
        """
        unsetOrder(self) -> int

        Sets the compartment order

        """
        return _libsbml.CompartmentGlyph_unsetOrder(self)

    def isSetOrder(self):
        """
        isSetOrder(self) -> bool

        Returns true if the compartment order has been set

        """
        return _libsbml.CompartmentGlyph_isSetOrder(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.CompartmentGlyph_renameSIdRefs(self, *args)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults from GraphicalObject.

        """
        return _libsbml.CompartmentGlyph_initDefaults(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.CompartmentGlyph_getElementName(self)

    def clone(self):
        """
        clone(self) -> CompartmentGlyph

        Creates and returns a deep copy of this CompartmentGlyph.

        Returns a (deep) copy of this CompartmentGlyph.

        """
        return _libsbml.CompartmentGlyph_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_COMPARTMENTGLYPH

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.CompartmentGlyph_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.CompartmentGlyph_toXML(self)

CompartmentGlyph_swigregister = _libsbml.CompartmentGlyph_swigregister
CompartmentGlyph_swigregister(CompartmentGlyph)

class LineSegment(SBase):
    """
    [SBML 'layout' package]

     The representation of a line in the &ldquo;layout&rdquo; package.

    The LineSegment class consists of the mandatory attribute xsi:type and
    two child elements of type Point. One is called 'start' and represents
    the starting point of the line, the other is called 'end' and
    represents the endpoint of the line.  The LineSegment class is also
    the base class for CubicBezier, which represent curved lines instead
    of straight ones.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSegment, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineSegment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> LineSegment
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> LineSegment
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> LineSegment
        __init__(self) -> LineSegment
        __init__(self, LayoutPkgNamespaces layoutns) -> LineSegment
        __init__(self, LayoutPkgNamespaces layoutns, double x1, double y1, 
            double x2, double y2) -> LineSegment
        __init__(self, LineSegment orig) -> LineSegment
        __init__(self, LayoutPkgNamespaces layoutns, double x1, double y1, 
            double z1, double x2, double y2, double z2) -> LineSegment
        __init__(self, LayoutPkgNamespaces layoutns, Point start, Point end) -> LineSegment
        __init__(self, XMLNode node, unsigned int l2version = 4) -> LineSegment
        __init__(self, XMLNode node) -> LineSegment

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            LineSegment(LayoutPkgNamespaces layoutns, double x1, double y1,
        double x2, double y2)

        Creates a new line segment with the given 2D coordinates.

        @par <hr> Method variant with the following signature:

            LineSegment(XMLNode node, long l2version=4)

        Creates a new LineSegment from the given XMLNode

        @par <hr> Method variant with the following signature:

            LineSegment(LayoutPkgNamespaces layoutns, Point start, Point end)

        Creates a new line segment with the two given points.

        @par <hr> Method variant with the following signature:

            LineSegment(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Creates a line segment with the given SBML level, version, and package
        version and both points set to (0.0,0.0,0.0)

        @par <hr> Method variant with the following signature:

            LineSegment(LayoutPkgNamespaces layoutns)

        Creates a line segment with the LayoutPkgNamespaces and both points
        set to (0.0,0.0,0.0)

        @par <hr> Method variant with the following signature:

            LineSegment(LayoutPkgNamespaces layoutns, double x1, double y1,
        double z1, double x2, double y2, double z2)

        Creates a new line segment with the given 3D coordinates.

        @par <hr> Method variant with the following signature:

            LineSegment(LineSegment orig)

        Copy constructor.

        """
        this = _libsbml.new_LineSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_LineSegment
    __del__ = lambda self : None;
    def getStart(self):
        """
        getStart(self) -> Point

        Returns the start point of the line.

        """
        return _libsbml.LineSegment_getStart(self)

    def setStart(self, *args):
        """
        setStart(self, Point start)
        setStart(self, double x, double y, double z = 0.0)
        setStart(self, double x, double y)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setStart(Point start)

        Initializes the start point with a copy of the given Point object.

        @par <hr> Method variant with the following signature:

            setStart(double x, double y, double z = 0.0)

        Initializes the start point with the given coordinates.

        """
        return _libsbml.LineSegment_setStart(self, *args)

    def getEnd(self):
        """
        getEnd(self) -> Point

        Returns the end point of the line.

        """
        return _libsbml.LineSegment_getEnd(self)

    def setEnd(self, *args):
        """
        setEnd(self, Point end)
        setEnd(self, double x, double y, double z = 0.0)
        setEnd(self, double x, double y)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setEnd(double x, double y, double z = 0.0)

        Initializes the end point with the given coordinates.

        @par <hr> Method variant with the following signature:

            setEnd(Point end)

        Initializes the end point with a copy of the given Point object.

        """
        return _libsbml.LineSegment_setEnd(self, *args)

    def getStartExplicitlySet(self):
        """
        getStartExplicitlySet(self) -> bool

        Internal implementation method.

        """
        return _libsbml.LineSegment_getStartExplicitlySet(self)

    def getEndExplicitlySet(self):
        """
        getEndExplicitlySet(self) -> bool

        Internal implementation method.

        """
        return _libsbml.LineSegment_getEndExplicitlySet(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Does noting since no defaults are defined for LineSegment.

        """
        return _libsbml.LineSegment_initDefaults(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.LineSegment_getElementName(self)

    def clone(self):
        """
        clone(self) -> LineSegment

        Creates and returns a deep copy of this LineSegment.

        Returns a (deep) copy of this LineSegment.

        """
        return _libsbml.LineSegment_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_LINESEGMENT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.LineSegment_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.LineSegment_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.LineSegment_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.LineSegment_enablePackageInternal(self, *args)

LineSegment_swigregister = _libsbml.LineSegment_swigregister
LineSegment_swigregister(LineSegment)

class CubicBezier(LineSegment):
    """
    [SBML 'layout' package]

     A CubicBezier represents a smooth curve in the &ldquo;layout&rdquo;
    package.

    In order to be able to represent smooth curves the
    &ldquo;layout&rdquo; package defines the class CubicBezier. It
    represents a Bezier curve, and is readily available in most graphics
    APIs.  The class CubicBezier is derived from LineSegment. It consists
    of four elements: the two inherited elements 'start' and 'end', which
    specify the starting point and the endpoint of the cubic bezier curve,
    and two elements 'basePoint1' and 'basePoint2', which specify the two
    additional base points that are needed to describe a cubic bezier
    curve.

    """
    __swig_setmethods__ = {}
    for _s in [LineSegment]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicBezier, name, value)
    __swig_getmethods__ = {}
    for _s in [LineSegment]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicBezier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> CubicBezier
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> CubicBezier
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> CubicBezier
        __init__(self) -> CubicBezier
        __init__(self, LayoutPkgNamespaces layoutns) -> CubicBezier
        __init__(self, LayoutPkgNamespaces layoutns, double x1, double y1, 
            double x2, double y2) -> CubicBezier
        __init__(self, LayoutPkgNamespaces layoutns, double x1, double y1, 
            double z1, double x2, double y2, double z2) -> CubicBezier
        __init__(self, CubicBezier orig) -> CubicBezier
        __init__(self, LayoutPkgNamespaces layoutns, Point start, Point end) -> CubicBezier
        __init__(self, LayoutPkgNamespaces layoutns, Point start, Point base1, 
            Point base2, Point end) -> CubicBezier
        __init__(self, XMLNode node, unsigned int l2version = 4) -> CubicBezier
        __init__(self, XMLNode node) -> CubicBezier

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            CubicBezier(CubicBezier orig)

        Copy constructor.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            CubicBezier(LayoutPkgNamespaces layoutns, double x1, double y1,
        double x2, double y2)

        Creates a CubicBezier with the given 2D coordinates and returns the
        pointer.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            CubicBezier(XMLNode node, long l2version=4)

        Creates a new Layout from the given XMLNode

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            CubicBezier(LayoutPkgNamespaces layoutns, double x1, double y1,
        double z1, double x2, double y2, double z2)

        Creates a CubicBezier with the given 3D coordinates and returns the
        pointer.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            CubicBezier(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Creates a CubicBezier and returns the pointer.

        @par <hr> Method variant with the following signature:

            CubicBezier(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            CubicBezier(LayoutPkgNamespaces layoutns, Point start, Point end)

        Creates a CubicBezier with the given points and returns the pointer.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            CubicBezier(LayoutPkgNamespaces layoutns, Point start, Point
        base1, Point base2, Point end)

        Creates a CubicBezier with the given points and returns the pointer.

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_CubicBezier(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_CubicBezier
    __del__ = lambda self : None;
    def getBasePoint1(self):
        """
        getBasePoint1(self) -> Point

        Returns the first base point of the curve (the one closer to the
        starting point).

        """
        return _libsbml.CubicBezier_getBasePoint1(self)

    def setBasePoint1(self, *args):
        """
        setBasePoint1(self, Point p)
        setBasePoint1(self, double x, double y, double z = 0.0)
        setBasePoint1(self, double x, double y)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setBasePoint1(double x, double y, double z = 0.0)

        Initializes first base point with the given coordinates.

        @par <hr> Method variant with the following signature:

            setBasePoint1(Point p)

        Initializes first base point with a copy of the given point.

        """
        return _libsbml.CubicBezier_setBasePoint1(self, *args)

    def getBasePoint2(self):
        """
        getBasePoint2(self) -> Point

        Returns the second base point of the curve (the one closer to the end
        point).

        """
        return _libsbml.CubicBezier_getBasePoint2(self)

    def setBasePoint2(self, *args):
        """
        setBasePoint2(self, Point p)
        setBasePoint2(self, double x, double y, double z = 0.0)
        setBasePoint2(self, double x, double y)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setBasePoint2(double x, double y, double z = 0.0)

        Initializes second base point with the given coordinates.

        @par <hr> Method variant with the following signature:

            setBasePoint2(Point p)

        Initializes second base point with a copy of the given point.

        """
        return _libsbml.CubicBezier_setBasePoint2(self, *args)

    def getBasePt1ExplicitlySet(self):
        """
        getBasePt1ExplicitlySet(self) -> bool

        Internal implementation method.

        """
        return _libsbml.CubicBezier_getBasePt1ExplicitlySet(self)

    def getBasePt2ExplicitlySet(self):
        """
        getBasePt2ExplicitlySet(self) -> bool

        Internal implementation method.

        """
        return _libsbml.CubicBezier_getBasePt2ExplicitlySet(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults from LineSegment.

        """
        return _libsbml.CubicBezier_initDefaults(self)

    def straighten(self):
        """
        straighten(self)

        Makes a line from a CubicBezier by setting both base points into the
        middle between the start and the end point.

        """
        return _libsbml.CubicBezier_straighten(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.CubicBezier_getElementName(self)

    def clone(self):
        """
        clone(self) -> CubicBezier

        Creates and returns a deep copy of this CubicBezier.

        Returns a (deep) copy of this CubicBezier.

        """
        return _libsbml.CubicBezier_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_CUBICBEZIER

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.CubicBezier_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.CubicBezier_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.CubicBezier_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.CubicBezier_enablePackageInternal(self, *args)

CubicBezier_swigregister = _libsbml.CubicBezier_swigregister
CubicBezier_swigregister(CubicBezier)

class ListOfLineSegments(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfLineSegments construct from the 'layout'
    package.

    The ListOfLineSegments is a container for the LineSegment elements of
    a Curve.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, Input.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfLineSegments, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfLineSegments, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfLineSegments

        Creates and returns a deep copy of this ListOfLineSegments.

        Returns a (deep) copy of this ListOfLineSegments.

        """
        return _libsbml.ListOfLineSegments_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfLineSegments
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfLineSegments
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfLineSegments
        __init__(self) -> ListOfLineSegments
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfLineSegments

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfLineSegments(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfLineSegments(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfLineSegments(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_LINESEGMENT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfLineSegments_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfLineSegments_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> LineSegment
        get(self, unsigned int n) -> LineSegment

        Get a LineSegment from the ListOfLineSegments.

        Parameter 'n' is the index number of the LineSegment to get.

        Returns the nth LineSegment in this ListOfLineSegments.

        See also size().

        """
        return _libsbml.ListOfLineSegments_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> LineSegment

        Removes the nth item from this ListOfLineSegments items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        """
        return _libsbml.ListOfLineSegments_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfLineSegments_toXML(self)

    __swig_destroy__ = _libsbml.delete_ListOfLineSegments
    __del__ = lambda self : None;
ListOfLineSegments_swigregister = _libsbml.ListOfLineSegments_swigregister
ListOfLineSegments_swigregister(ListOfLineSegments)

class Curve(SBase):
    """
    [SBML 'layout' package]

     The Curve class describes how to connect elements in a diagram
    defined with the use of the &ldquo;layout&rdquo; package. A curve is
    fully specified by a mandatory listOfCurveSegments element and is used
    in four places in the &ldquo;layout&rdquo; package:

        * SpeciesReferenceGlyph: Here it describes a curve from/to the
    center piece of the parent ReactionGlyph to/from the SpeciesGlyph it
    represents.

        * ReactionGlyph: Here it describes a curve for the center piece of
    a reaction.

        * ReferenceGlyph: Here it describes a curve from/to the center
    piece of the parent GeneralGlyph to/from the glyph it represents.

        * GeneralGlyph: Here it describes a curve for the center piece of
    an additional relationship.

    In the text above, the term 'center piece' refers to either the Curve
    element of a ReactionGlyph, or its BoundingBox.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> Curve
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> Curve
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> Curve
        __init__(self) -> Curve
        __init__(self, LayoutPkgNamespaces layoutns) -> Curve
        __init__(self, XMLNode node, unsigned int l2version = 4) -> Curve
        __init__(self, XMLNode node) -> Curve
        __init__(self, Curve source) -> Curve

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Curve(LayoutPkgNamespaces layoutns)

        Creates a new Curve with the given LayoutPkgNamespaces object.

        @par <hr> Method variant with the following signature:

            Curve(XMLNode node, long l2version=4)

        Creates a new Curve from the given XMLNode

        @par <hr> Method variant with the following signature:

            Curve(long level      = LayoutExtension.getDefaultLevel(), long
        version    = LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Creates a curve with an empty list of segments.

        @par <hr> Method variant with the following signature:

            Curve(Curve source)

        Copy constructor.

        """
        this = _libsbml.new_Curve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_Curve
    __del__ = lambda self : None;
    def initDefaults(self):
        """
        initDefaults(self)

        Does nothing since no defaults are defined for Curve.

        """
        return _libsbml.Curve_initDefaults(self)

    def getListOfCurveSegments(self):
        """
        getListOfCurveSegments(self) -> ListOfLineSegments

        Returns a reference to the ListOf object that holds all the curve
        segments.

        """
        return _libsbml.Curve_getListOfCurveSegments(self)

    def getCurveSegment(self, *args):
        """
        getCurveSegment(self, unsigned int index) -> LineSegment
        getCurveSegment(self, unsigned int index) -> LineSegment

        Returns a pointer to the curve segment with the given index. If the
        index is invalid, None is returned.

        """
        return _libsbml.Curve_getCurveSegment(self, *args)

    def addCurveSegment(self, *args):
        """
        addCurveSegment(self, LineSegment segment)

        Adds a new CurveSegment to the end of the list.

        """
        return _libsbml.Curve_addCurveSegment(self, *args)

    def getNumCurveSegments(self):
        """
        getNumCurveSegments(self) -> unsigned int

        Returns the number of curve segments.

        """
        return _libsbml.Curve_getNumCurveSegments(self)

    def createLineSegment(self):
        """
        createLineSegment(self) -> LineSegment

        Creates a new LineSegment and adds it to the end of the list.  A
        reference to the new LineSegment object is returned.

        """
        return _libsbml.Curve_createLineSegment(self)

    def createCubicBezier(self):
        """
        createCubicBezier(self) -> CubicBezier

        Creates a new CubicBezier and adds it to the end of the list.  A
        reference to the new CubicBezier object is returned.

        """
        return _libsbml.Curve_createCubicBezier(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.Curve_getElementName(self)

    def clone(self):
        """
        clone(self) -> Curve

        Creates and returns a deep copy of this Curve.

        Returns a (deep) copy of this Curve.

        """
        return _libsbml.Curve_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_LAYOUT_CURVE

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Curve_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.Curve_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Curve_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Curve_enablePackageInternal(self, *args)

Curve_swigregister = _libsbml.Curve_swigregister
Curve_swigregister(Curve)

class SpeciesReferenceGlyph(GraphicalObject):
    """
    [SBML 'layout' package]

     A SpeciesReferenceGlyph represents a reactant or product from a
    Reaction in the &ldquo;layout&rdquo; package.

    The SpeciesReferenceGlyph element describes the graphical connection
    between a SpeciesGlyph and a ReactionGlyph (which would be an arrow or
    some curve in most cases). A SpeciesReferenceGlyph inherits from
    GraphicalObject, and adds a mandatory attribute 'speciesGlyph' and two
    optional attributes 'speciesReference' and 'role'. Optionally, the
    SpeciesReferenceGlyph also has a child element 'curve'.

    If the curve is specified, it overrides the inherited bounding box.

    """
    __swig_setmethods__ = {}
    for _s in [GraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpeciesReferenceGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpeciesReferenceGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> SpeciesReferenceGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> SpeciesReferenceGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> SpeciesReferenceGlyph
        __init__(self) -> SpeciesReferenceGlyph
        __init__(self, LayoutPkgNamespaces layoutns) -> SpeciesReferenceGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string sid, string speciesGlyphId, 
            string speciesReferenceId, SpeciesReferenceRole_t role) -> SpeciesReferenceGlyph
        __init__(self, XMLNode node, unsigned int l2version = 4) -> SpeciesReferenceGlyph
        __init__(self, XMLNode node) -> SpeciesReferenceGlyph
        __init__(self, SpeciesReferenceGlyph source) -> SpeciesReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SpeciesReferenceGlyph(SpeciesReferenceGlyph source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            SpeciesReferenceGlyph(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            SpeciesReferenceGlyph(XMLNode node, long l2version=4)

        Creates a new SpeciesReferenceGlyph from the given XMLNode

        @par <hr> Method variant with the following signature:

            SpeciesReferenceGlyph(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Creates a new SpeciesReferenceGlyph with the given SBML level, version
        and package version.  The id if the associated species reference and
        the id of the associated species glyph are set to the empty string.
        The role is set to SPECIES_ROLE_UNDEFINED.

        @par <hr> Method variant with the following signature:

            SpeciesReferenceGlyph(LayoutPkgNamespaces layoutns, string sid,
        string speciesGlyphId, string speciesReferenceId,
        SpeciesReferenceRole_t role )

        Creates a new SpeciesReferenceGlyph.  The id is given as the first
        argument, the id of the associated species glyph is given as the
        second argument.  The third argument is the id of the associated
        species reference and the fourth argument is the role.

        """
        this = _libsbml.new_SpeciesReferenceGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SpeciesReferenceGlyph
    __del__ = lambda self : None;
    def getSpeciesGlyphId(self):
        """
        getSpeciesGlyphId(self) -> string

        Returns the id of the associated SpeciesGlyph.

        """
        return _libsbml.SpeciesReferenceGlyph_getSpeciesGlyphId(self)

    def setSpeciesGlyphId(self, *args):
        """
        setSpeciesGlyphId(self, string speciesGlyphId)

        Sets the id of the associated species glyph.

        """
        return _libsbml.SpeciesReferenceGlyph_setSpeciesGlyphId(self, *args)

    def getSpeciesReferenceId(self):
        """
        getSpeciesReferenceId(self) -> string

        Returns the id of the associated species reference.

        """
        return _libsbml.SpeciesReferenceGlyph_getSpeciesReferenceId(self)

    def setSpeciesReferenceId(self, *args):
        """
        setSpeciesReferenceId(self, string id)

        Sets the id of the associated species reference.

        """
        return _libsbml.SpeciesReferenceGlyph_setSpeciesReferenceId(self, *args)

    def getRoleString(self):
        """
        getRoleString(self) -> string

        Returns a string representation of the role.

        """
        return _libsbml.SpeciesReferenceGlyph_getRoleString(self)

    def getRole(self):
        """
        getRole(self) -> SpeciesReferenceRole_t

        Returns the role.

        """
        return _libsbml.SpeciesReferenceGlyph_getRole(self)

    def setRole(self, *args):
        """
        setRole(self, string role)
        setRole(self, SpeciesReferenceRole_t role)

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            setRole(SpeciesReferenceRole_t role)

        Sets the role.

        @par <hr> Method variant with the following signature:

            setRole(string role)

        Sets the role based on a string. The String can be one of: SUBSTRATE
        PRODUCT SIDESUBSTRATE SIDEPRODUCT MODIFIER ACTIVATOR INHIBITOR

        """
        return _libsbml.SpeciesReferenceGlyph_setRole(self, *args)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.SpeciesReferenceGlyph_renameSIdRefs(self, *args)

    def getCurve(self, *args):
        """
        getCurve(self) -> Curve
        getCurve(self) -> Curve

        Returns the curve object for the species reference glyph

        """
        return _libsbml.SpeciesReferenceGlyph_getCurve(self, *args)

    def setCurve(self, *args):
        """
        setCurve(self, Curve curve)

        Sets the curve object for the species reference glyph.

        """
        return _libsbml.SpeciesReferenceGlyph_setCurve(self, *args)

    def isSetCurve(self):
        """
        isSetCurve(self) -> bool

        Returns true if the curve consists of one or more segments.

        """
        return _libsbml.SpeciesReferenceGlyph_isSetCurve(self)

    def getCurveExplicitlySet(self):
        """
        getCurveExplicitlySet(self) -> bool

        """
        return _libsbml.SpeciesReferenceGlyph_getCurveExplicitlySet(self)

    def isSetSpeciesGlyphId(self):
        """
        isSetSpeciesGlyphId(self) -> bool

        Returns true if the id of the associated species glyph is not the
        empty string.

        """
        return _libsbml.SpeciesReferenceGlyph_isSetSpeciesGlyphId(self)

    def isSetSpeciesReferenceId(self):
        """
        isSetSpeciesReferenceId(self) -> bool

        Returns true if the id of the associated species reference is not the
        empty string.

        """
        return _libsbml.SpeciesReferenceGlyph_isSetSpeciesReferenceId(self)

    def isSetRole(self):
        """
        isSetRole(self) -> bool

        Returns true of role is different from SPECIES_ROLE_UNDEFINED.

        """
        return _libsbml.SpeciesReferenceGlyph_isSetRole(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults on GraphicalObject and sets role to
        SPECIES_ROLE_UNDEFINED.

        """
        return _libsbml.SpeciesReferenceGlyph_initDefaults(self)

    def createLineSegment(self):
        """
        createLineSegment(self) -> LineSegment

        Creates a new LineSegment object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.SpeciesReferenceGlyph_createLineSegment(self)

    def createCubicBezier(self):
        """
        createCubicBezier(self) -> CubicBezier

        Creates a new CubicBezier object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.SpeciesReferenceGlyph_createCubicBezier(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.SpeciesReferenceGlyph_getElementName(self)

    def clone(self):
        """
        clone(self) -> SpeciesReferenceGlyph

        Creates and returns a deep copy of this SpeciesReferenceGlyph.

        Returns a (deep) copy of this SpeciesReferenceGlyph.

        """
        return _libsbml.SpeciesReferenceGlyph_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_SPECIESREFERENCEGLYPH

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.SpeciesReferenceGlyph_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.SpeciesReferenceGlyph_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.SpeciesReferenceGlyph_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.SpeciesReferenceGlyph_enablePackageInternal(self, *args)

SpeciesReferenceGlyph_swigregister = _libsbml.SpeciesReferenceGlyph_swigregister
SpeciesReferenceGlyph_swigregister(SpeciesReferenceGlyph)

class ReferenceGlyph(GraphicalObject):
    """
    [SBML 'layout' package]

     The ReferenceGlyph is used by the &ldquo;layout&rdquo; package to
    connect a GraphicalObject and a GeneralGlyph.

    The ReferenceGlyph element describes the graphical connection between
    an arbitrary GraphicalObject (or derived element) and a GeneralGlyph
    (which would be an arrow or some curve in most cases). A
    ReferenceGlyph inherits from GraphicalObject. Additionally it has a
    mandatory attribute 'glyph' and two optional attributes 'reference'
    and 'role'. Optionally, the ReferenceGlyph also has an element
    'curve'.  The ReferenceGlyph should either contain a bounding box or a
    curve specification.  If both are given, the bounding box should be
    ignored.

    """
    __swig_setmethods__ = {}
    for _s in [GraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ReferenceGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ReferenceGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ReferenceGlyph
        __init__(self) -> ReferenceGlyph
        __init__(self, LayoutPkgNamespaces layoutns) -> ReferenceGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string sid, string glyphId, 
            string referenceId, string role) -> ReferenceGlyph
        __init__(self, XMLNode node, unsigned int l2version = 4) -> ReferenceGlyph
        __init__(self, XMLNode node) -> ReferenceGlyph
        __init__(self, ReferenceGlyph source) -> ReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ReferenceGlyph(LayoutPkgNamespaces layoutns, string sid, string
        glyphId, string referenceId, string role )

        Creates a new ReferenceGlyph.  The id is given as the first argument,
        the id of the associated glyph is given as the second argument.  The
        third argument is the id of the associated reference and the fourth
        argument is the role.

        @par <hr> Method variant with the following signature:

            ReferenceGlyph(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ReferenceGlyph(XMLNode node, long l2version=4)

        Creates a new ReferenceGlyph from the given XMLNode

        @par <hr> Method variant with the following signature:

            ReferenceGlyph(ReferenceGlyph source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            ReferenceGlyph(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Creates a new ReferenceGlyph with the given SBML level, version and
        package version.  The id if the associated  reference and the id of
        the associated  glyph are set to the empty string.  The role is set to
        empty.

        """
        this = _libsbml.new_ReferenceGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ReferenceGlyph
    __del__ = lambda self : None;
    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.ReferenceGlyph_renameSIdRefs(self, *args)

    def getGlyphId(self):
        """
        getGlyphId(self) -> string

        Returns the id of the associated glyph.

        """
        return _libsbml.ReferenceGlyph_getGlyphId(self)

    def setGlyphId(self, *args):
        """
        setGlyphId(self, string glyphId)

        Sets the id of the associated glyph.

        """
        return _libsbml.ReferenceGlyph_setGlyphId(self, *args)

    def getReferenceId(self):
        """
        getReferenceId(self) -> string

        Returns the id of the associated sbml reference.

        """
        return _libsbml.ReferenceGlyph_getReferenceId(self)

    def setReferenceId(self, *args):
        """
        setReferenceId(self, string id)

        Sets the id of the associated sbml reference.

        """
        return _libsbml.ReferenceGlyph_setReferenceId(self, *args)

    def getRole(self):
        """
        getRole(self) -> string

        Returns a string representation of the role.

        """
        return _libsbml.ReferenceGlyph_getRole(self)

    def setRole(self, *args):
        """
        setRole(self, string role)

        Sets the role.

        """
        return _libsbml.ReferenceGlyph_setRole(self, *args)

    def getCurve(self, *args):
        """
        getCurve(self) -> Curve
        getCurve(self) -> Curve

        Returns the curve object for the reference glyph

        """
        return _libsbml.ReferenceGlyph_getCurve(self, *args)

    def setCurve(self, *args):
        """
        setCurve(self, Curve curve)

        Sets the curve object for the reference glyph.

        """
        return _libsbml.ReferenceGlyph_setCurve(self, *args)

    def isSetCurve(self):
        """
        isSetCurve(self) -> bool

        Returns true if the curve consists of one or more segments.

        """
        return _libsbml.ReferenceGlyph_isSetCurve(self)

    def getCurveExplicitlySet(self):
        """
        getCurveExplicitlySet(self) -> bool

        """
        return _libsbml.ReferenceGlyph_getCurveExplicitlySet(self)

    def isSetGlyphId(self):
        """
        isSetGlyphId(self) -> bool

        Returns true if the id of the associated glyph is not the empty
        string.

        """
        return _libsbml.ReferenceGlyph_isSetGlyphId(self)

    def isSetReferenceId(self):
        """
        isSetReferenceId(self) -> bool

        Returns true if the id of the associated reference is not the empty
        string.

        """
        return _libsbml.ReferenceGlyph_isSetReferenceId(self)

    def isSetRole(self):
        """
        isSetRole(self) -> bool

        Returns true of role is different from the empty string.

        """
        return _libsbml.ReferenceGlyph_isSetRole(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults on GraphicalObject

        """
        return _libsbml.ReferenceGlyph_initDefaults(self)

    def createLineSegment(self):
        """
        createLineSegment(self) -> LineSegment

        Creates a new LineSegment object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.ReferenceGlyph_createLineSegment(self)

    def createCubicBezier(self):
        """
        createCubicBezier(self) -> CubicBezier

        Creates a new CubicBezier object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.ReferenceGlyph_createCubicBezier(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ReferenceGlyph_getElementName(self)

    def clone(self):
        """
        clone(self) -> ReferenceGlyph

        Creates and returns a deep copy of this ReferenceGlyph.

        Returns a (deep) copy of this ReferenceGlyph.

        """
        return _libsbml.ReferenceGlyph_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_REFERENCEGLYPH

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ReferenceGlyph_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ReferenceGlyph_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.ReferenceGlyph_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.ReferenceGlyph_enablePackageInternal(self, *args)

ReferenceGlyph_swigregister = _libsbml.ReferenceGlyph_swigregister
ReferenceGlyph_swigregister(ReferenceGlyph)

class ListOfReferenceGlyphs(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfReferenceGlyphs construct from the
    &ldquo;layout&rdquo; package.

    The ListOfReferenceGlyphs is a container for the ReferenceGlyph
    elements of a GeneralGlyph.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ReferenceGlyph.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfReferenceGlyphs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfReferenceGlyphs, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfReferenceGlyphs

        Creates and returns a deep copy of this ListOfReferenceGlyphs.

        Returns a (deep) copy of this ListOfReferenceGlyphs.

        """
        return _libsbml.ListOfReferenceGlyphs_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfReferenceGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfReferenceGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfReferenceGlyphs
        __init__(self) -> ListOfReferenceGlyphs
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfReferenceGlyphs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfReferenceGlyphs(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfReferenceGlyphs(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfReferenceGlyphs(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_REFERENCEGLYPH (default).

        See also getPackageName().

        """
        return _libsbml.ListOfReferenceGlyphs_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfReferenceGlyphs_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> ReferenceGlyph
        get(self, unsigned int n) -> ReferenceGlyph
        get(self, string sid) -> ReferenceGlyph
        get(self, string sid) -> ReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a ReferenceGlyph from the ListOfReferenceGlyphs.

        Parameter 'n' is the index number of the ReferenceGlyph to get.

        Returns the nth ReferenceGlyph in this ListOfReferenceGlyphs.

        See also size(), size().

        """
        return _libsbml.ListOfReferenceGlyphs_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> ReferenceGlyph
        remove(self, string sid) -> ReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfReferenceGlyphs items and returns
        a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfReferenceGlyphs items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfReferenceGlyphs_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfReferenceGlyphs_toXML(self)

    __swig_destroy__ = _libsbml.delete_ListOfReferenceGlyphs
    __del__ = lambda self : None;
ListOfReferenceGlyphs_swigregister = _libsbml.ListOfReferenceGlyphs_swigregister
ListOfReferenceGlyphs_swigregister(ListOfReferenceGlyphs)

class GeneralGlyph(GraphicalObject):
    """
    [SBML 'layout' package]

     The GeneralGlyph is used by the &ldquo;layout&rdquo; package to
    represent any SBML object.

    The GeneralGlyph is used to facilitate the representation of elements
    other than Compartment, Species and Reaction and thus can be used for
    the display of relationships of Rule or elements defined by other SBML
    packages. It closely follows the structure of the ReactionGlyph.
    GeneralGlyph is defined to have an optional attribute reference as
    well as the elements curve, listOfReferenceGlyphs and listOfSubGlyphs.

    """
    __swig_setmethods__ = {}
    for _s in [GraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> GeneralGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> GeneralGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> GeneralGlyph
        __init__(self) -> GeneralGlyph
        __init__(self, LayoutPkgNamespaces layoutns) -> GeneralGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id) -> GeneralGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id, string referenceId) -> GeneralGlyph
        __init__(self, XMLNode node, unsigned int l2version = 4) -> GeneralGlyph
        __init__(self, XMLNode node) -> GeneralGlyph
        __init__(self, GeneralGlyph source) -> GeneralGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            GeneralGlyph(GeneralGlyph source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            GeneralGlyph(LayoutPkgNamespaces layoutns, string id, string
        referenceId)

        Creates a glyph with the given LayoutPkgNamespaces, id and set the id
        of the associated element to the second argument.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            GeneralGlyph(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Creates a new GeneralGlyph.  The list of reference glyph and subglyphs
        is empty and the id of the associated element is set to the empty
        string.

        @par <hr> Method variant with the following signature:

            GeneralGlyph(XMLNode node, long l2version = 4)

        Creates a new GeneralGlyph from the given XMLNode

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            GeneralGlyph(LayoutPkgNamespaces layoutns)

        Creates a new GeneralGlyph with the given LayoutPkgNamespaces object.

        @par <hr> Method variant with the following signature:

            GeneralGlyph(LayoutPkgNamespaces layoutns, string id)

        Creates a glyph with the given LayoutPkgNamespaces and id.

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_GeneralGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_GeneralGlyph
    __del__ = lambda self : None;
    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.GeneralGlyph_renameSIdRefs(self, *args)

    def getReferenceId(self):
        """
        getReferenceId(self) -> string

        Returns the id of the associated element.

        """
        return _libsbml.GeneralGlyph_getReferenceId(self)

    def setReferenceId(self, *args):
        """
        setReferenceId(self, string id) -> int

        Sets the id of the associated element.

        """
        return _libsbml.GeneralGlyph_setReferenceId(self, *args)

    def isSetReferenceId(self):
        """
        isSetReferenceId(self) -> bool

        Returns true if the id of the associated element is not the empty
        string.

        """
        return _libsbml.GeneralGlyph_isSetReferenceId(self)

    def getListOfReferenceGlyphs(self, *args):
        """
        getListOfReferenceGlyphs(self) -> ListOfReferenceGlyphs
        getListOfReferenceGlyphs(self) -> ListOfReferenceGlyphs

        Returns the ListOf object that hold the reference glyphs.

        """
        return _libsbml.GeneralGlyph_getListOfReferenceGlyphs(self, *args)

    def getListOfSubGlyphs(self, *args):
        """
        getListOfSubGlyphs(self) -> ListOfGraphicalObjects
        getListOfSubGlyphs(self) -> ListOfGraphicalObjects

        Returns the ListOf object that hold the sub glyphs.

        """
        return _libsbml.GeneralGlyph_getListOfSubGlyphs(self, *args)

    def getReferenceGlyph(self, *args):
        """
        getReferenceGlyph(self, unsigned int index) -> ReferenceGlyph
        getReferenceGlyph(self, unsigned int index) -> ReferenceGlyph

        Returns the reference glyph with the given index. If the index is
        invalid, None is returned.

        """
        return _libsbml.GeneralGlyph_getReferenceGlyph(self, *args)

    def getSubGlyph(self, *args):
        """
        getSubGlyph(self, unsigned int index) -> GraphicalObject
        getSubGlyph(self, unsigned int index) -> GraphicalObject

        Returns the sub glyph with the given index. If the index is invalid,
        None is returned.

        """
        return _libsbml.GeneralGlyph_getSubGlyph(self, *args)

    def addReferenceGlyph(self, *args):
        """
        addReferenceGlyph(self, ReferenceGlyph glyph)

        Adds a new reference glyph to the list.

        """
        return _libsbml.GeneralGlyph_addReferenceGlyph(self, *args)

    def addSubGlyph(self, *args):
        """
        addSubGlyph(self, GraphicalObject glyph)

        Adds a new subglyph to the list.

        """
        return _libsbml.GeneralGlyph_addSubGlyph(self, *args)

    def getNumReferenceGlyphs(self):
        """
        getNumReferenceGlyphs(self) -> unsigned int

        Returns the number of reference glyph objects.

        """
        return _libsbml.GeneralGlyph_getNumReferenceGlyphs(self)

    def getNumSubGlyphs(self):
        """
        getNumSubGlyphs(self) -> unsigned int

        Returns the number of subglyph objects.

        """
        return _libsbml.GeneralGlyph_getNumSubGlyphs(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults from GraphicalObject.

        """
        return _libsbml.GeneralGlyph_initDefaults(self)

    def getCurve(self, *args):
        """
        getCurve(self) -> Curve
        getCurve(self) -> Curve

        Returns the curve object for the reaction glyph

        """
        return _libsbml.GeneralGlyph_getCurve(self, *args)

    def setCurve(self, *args):
        """
        setCurve(self, Curve curve)

        Sets the curve object for the reaction glyph.

        """
        return _libsbml.GeneralGlyph_setCurve(self, *args)

    def isSetCurve(self):
        """
        isSetCurve(self) -> bool

        Returns true if the curve consists of one or more segments.

        """
        return _libsbml.GeneralGlyph_isSetCurve(self)

    def getCurveExplicitlySet(self):
        """
        getCurveExplicitlySet(self) -> bool

        """
        return _libsbml.GeneralGlyph_getCurveExplicitlySet(self)

    def createReferenceGlyph(self):
        """
        createReferenceGlyph(self) -> ReferenceGlyph

        Creates a new ReferenceGlyph object, adds it to the end of the list of
        reference objects and returns a reference to the newly created object.

        """
        return _libsbml.GeneralGlyph_createReferenceGlyph(self)

    def createLineSegment(self):
        """
        createLineSegment(self) -> LineSegment

        Creates a new LineSegment object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.GeneralGlyph_createLineSegment(self)

    def createCubicBezier(self):
        """
        createCubicBezier(self) -> CubicBezier

        Creates a new CubicBezier object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.GeneralGlyph_createCubicBezier(self)

    def removeReferenceGlyph(self, *args):
        """
        removeReferenceGlyph(self, unsigned int index) -> ReferenceGlyph
        removeReferenceGlyph(self, string id) -> ReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeReferenceGlyph(long index)

        Remove the reference glyph with the given index. A pointer to the
        object is returned. If no object has been removed, None is returned.

        @par <hr> Method variant with the following signature:

            removeReferenceGlyph(string id)

        Remove the reference glyph with the given 'id'. A pointer to the
        object is returned. If no object has been removed, None is returned.

        """
        return _libsbml.GeneralGlyph_removeReferenceGlyph(self, *args)

    def removeSubGlyph(self, *args):
        """
        removeSubGlyph(self, unsigned int index) -> GraphicalObject
        removeSubGlyph(self, string id) -> GraphicalObject

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeSubGlyph(long index)

        Remove the subglyph with the given index. A pointer to the object is
        returned. If no object has been removed, None is returned.

        @par <hr> Method variant with the following signature:

            removeSubGlyph(string id)

        Remove the subglyph with the given 'id'. A pointer to the object is
        returned. If no object has been removed, None is returned.

        """
        return _libsbml.GeneralGlyph_removeSubGlyph(self, *args)

    def getIndexForReferenceGlyph(self, *args):
        """
        getIndexForReferenceGlyph(self, string id) -> unsigned int

        Returns the index of the reference glyph with the given 'id'. If the
        glyph does not contain a reference glyph with this id, the value of
        the maximum long integer is returned as an indicator.

        """
        return _libsbml.GeneralGlyph_getIndexForReferenceGlyph(self, *args)

    def getIndexForSubGlyph(self, *args):
        """
        getIndexForSubGlyph(self, string id) -> unsigned int

        Returns the index of the subglyph with the given 'id'. If the glyph
        does not contain a subglyph with this id, the value of the maximum
        long integer is returned as an indicator.

        """
        return _libsbml.GeneralGlyph_getIndexForSubGlyph(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.GeneralGlyph_getElementName(self)

    def clone(self):
        """
        clone(self) -> GeneralGlyph

        Creates and returns a deep copy of this GeneralGlyph.

        Returns a (deep) copy of this GeneralGlyph.

        """
        return _libsbml.GeneralGlyph_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_GENERALGLYPH

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.GeneralGlyph_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.GeneralGlyph_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.GeneralGlyph_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.GeneralGlyph_enablePackageInternal(self, *args)

GeneralGlyph_swigregister = _libsbml.GeneralGlyph_swigregister
GeneralGlyph_swigregister(GeneralGlyph)

class ListOfSpeciesReferenceGlyphs(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfSpeciesReferenceGlyphs construct from the
    &ldquo;layout&rdquo; package.

    The ListOfSpeciesReferenceGlyphs is a container for the
    SpeciesReferenceGlyphs elements of a ReactionGlyph.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, SpeciesReferenceGlyph.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfSpeciesReferenceGlyphs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfSpeciesReferenceGlyphs, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfSpeciesReferenceGlyphs

        Creates and returns a deep copy of this ListOfSpeciesReferenceGlyphs.

        Returns a (deep) copy of this ListOfSpeciesReferenceGlyphs.

        """
        return _libsbml.ListOfSpeciesReferenceGlyphs_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfSpeciesReferenceGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfSpeciesReferenceGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfSpeciesReferenceGlyphs
        __init__(self) -> ListOfSpeciesReferenceGlyphs
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfSpeciesReferenceGlyphs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesReferenceGlyphs(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesReferenceGlyphs(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfSpeciesReferenceGlyphs(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_SPECIESREFERENCEGLYPH (default).

        See also getPackageName().

        """
        return _libsbml.ListOfSpeciesReferenceGlyphs_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfSpeciesReferenceGlyphs_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> SpeciesReferenceGlyph
        get(self, unsigned int n) -> SpeciesReferenceGlyph
        get(self, string sid) -> SpeciesReferenceGlyph
        get(self, string sid) -> SpeciesReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a SpeciesReferenceGlyph from the ListOfSpeciesReferenceGlyphs.

        Parameter 'n' is the index number of the SpeciesReferenceGlyph to get.

        Returns the nth SpeciesReferenceGlyph in this
        ListOfSpeciesReferenceGlyphs.

        See also size(), size().

        """
        return _libsbml.ListOfSpeciesReferenceGlyphs_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> SpeciesReferenceGlyph
        remove(self, string sid) -> SpeciesReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfSpeciesReferenceGlyphs items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfSpeciesReferenceGlyphs items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfSpeciesReferenceGlyphs_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfSpeciesReferenceGlyphs_toXML(self)

    __swig_destroy__ = _libsbml.delete_ListOfSpeciesReferenceGlyphs
    __del__ = lambda self : None;
ListOfSpeciesReferenceGlyphs_swigregister = _libsbml.ListOfSpeciesReferenceGlyphs_swigregister
ListOfSpeciesReferenceGlyphs_swigregister(ListOfSpeciesReferenceGlyphs)

class ReactionGlyph(GraphicalObject):
    """
    [SBML 'layout' package]

     The ReactionGlyph is used to represent Reaction elements in the
    layout.

    Analogous to how a Reaction object has to at least have one reactant
    or product, the ReactionGlyph has to at least have one
    SpeciesReferenceGlyph stored in the ListOfSpeciesReferenceGlyphs.
    Figure 12 on the following page provides the UML diagram for the class
    definition.  The ReactionGlyph inherits from GraphicalObject. In
    addition to the attributes inherited from GraphicalObject, the
    ReactionGlyph is described by an attribute reaction, a Curve element
    and a listOfSpeciesReferenceGlyphs element.  The Curve describes the
    center section of a ReactionGlyph. The center section is frequently
    used by tools to separate the point where substrates arcs come
    together, from the point where product arcs split off. The Curve is
    optional, and when not present the dimensions of the inherited
    BoundingBox describes the center section, by storing its position and
    dimension.

    """
    __swig_setmethods__ = {}
    for _s in [GraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ReactionGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ReactionGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ReactionGlyph
        __init__(self) -> ReactionGlyph
        __init__(self, LayoutPkgNamespaces layoutns) -> ReactionGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id) -> ReactionGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id, string reactionId) -> ReactionGlyph
        __init__(self, XMLNode node, unsigned int l2version = 4) -> ReactionGlyph
        __init__(self, XMLNode node) -> ReactionGlyph
        __init__(self, ReactionGlyph source) -> ReactionGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ReactionGlyph(ReactionGlyph source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            ReactionGlyph(LayoutPkgNamespaces layoutns, string id, string
        reactionId)

        Creates a ResctionGlyph with the given LayoutPkgNamespaces, id and set
        the id of the associated reaction to the second argument.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            ReactionGlyph(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Creates a new ReactionGlyph.  The list of species reference glyph is
        empty and the id of the associated reaction is set to the empty
        string.

        @par <hr> Method variant with the following signature:

            ReactionGlyph(XMLNode node, long l2version = 4)

        Creates a new ReactionGlyph from the given XMLNode

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            ReactionGlyph(LayoutPkgNamespaces layoutns)

        Creates a new ReactionGlyph with the given LayoutPkgNamespaces object.

        @par <hr> Method variant with the following signature:

            ReactionGlyph(LayoutPkgNamespaces layoutns, string id)

        Creates a ResctionGlyph with the given LayoutPkgNamespaces and id.

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_ReactionGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_ReactionGlyph
    __del__ = lambda self : None;
    def getReactionId(self):
        """
        getReactionId(self) -> string

        Returns the id of the associated reaction.

        """
        return _libsbml.ReactionGlyph_getReactionId(self)

    def setReactionId(self, *args):
        """
        setReactionId(self, string id) -> int

        Sets the id of the associated reaction.

        """
        return _libsbml.ReactionGlyph_setReactionId(self, *args)

    def isSetReactionId(self):
        """
        isSetReactionId(self) -> bool

        Returns true if the id of the associated reaction is not the empty
        string.

        """
        return _libsbml.ReactionGlyph_isSetReactionId(self)

    def getListOfSpeciesReferenceGlyphs(self):
        """
        getListOfSpeciesReferenceGlyphs(self) -> ListOfSpeciesReferenceGlyphs

        Returns the ListOf object that hold the species reference glyphs.

        """
        return _libsbml.ReactionGlyph_getListOfSpeciesReferenceGlyphs(self)

    def getSpeciesReferenceGlyph(self, *args):
        """
        getSpeciesReferenceGlyph(self, unsigned int index) -> SpeciesReferenceGlyph
        getSpeciesReferenceGlyph(self, unsigned int index) -> SpeciesReferenceGlyph

        Returns the species reference glyph with the given index. If the index
        is invalid, None is returned.

        """
        return _libsbml.ReactionGlyph_getSpeciesReferenceGlyph(self, *args)

    def addSpeciesReferenceGlyph(self, *args):
        """
        addSpeciesReferenceGlyph(self, SpeciesReferenceGlyph glyph)

        Adds a new species reference glyph to the list.

        """
        return _libsbml.ReactionGlyph_addSpeciesReferenceGlyph(self, *args)

    def getNumSpeciesReferenceGlyphs(self):
        """
        getNumSpeciesReferenceGlyphs(self) -> unsigned int

        Returns the number of species reference glyph objects.

        """
        return _libsbml.ReactionGlyph_getNumSpeciesReferenceGlyphs(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults from GraphicalObject.

        """
        return _libsbml.ReactionGlyph_initDefaults(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.ReactionGlyph_renameSIdRefs(self, *args)

    def getCurve(self, *args):
        """
        getCurve(self) -> Curve
        getCurve(self) -> Curve

        Returns the curve object for the reaction glyph

        """
        return _libsbml.ReactionGlyph_getCurve(self, *args)

    def setCurve(self, *args):
        """
        setCurve(self, Curve curve)

        Sets the curve object for the reaction glyph.

        """
        return _libsbml.ReactionGlyph_setCurve(self, *args)

    def isSetCurve(self):
        """
        isSetCurve(self) -> bool

        Returns true if the curve consists of one or more segments.

        """
        return _libsbml.ReactionGlyph_isSetCurve(self)

    def getCurveExplicitlySet(self):
        """
        getCurveExplicitlySet(self) -> bool

        """
        return _libsbml.ReactionGlyph_getCurveExplicitlySet(self)

    def createSpeciesReferenceGlyph(self):
        """
        createSpeciesReferenceGlyph(self) -> SpeciesReferenceGlyph

        Creates a new SpeciesReferenceGlyph object, adds it to the end of the
        list of species reference objects and returns a reference to the newly
        created object.

        """
        return _libsbml.ReactionGlyph_createSpeciesReferenceGlyph(self)

    def createLineSegment(self):
        """
        createLineSegment(self) -> LineSegment

        Creates a new LineSegment object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.ReactionGlyph_createLineSegment(self)

    def createCubicBezier(self):
        """
        createCubicBezier(self) -> CubicBezier

        Creates a new CubicBezier object, adds it to the end of the list of
        curve segment objects of the curve and returns a reference to the
        newly created object.

        """
        return _libsbml.ReactionGlyph_createCubicBezier(self)

    def removeSpeciesReferenceGlyph(self, *args):
        """
        removeSpeciesReferenceGlyph(self, unsigned int index) -> SpeciesReferenceGlyph
        removeSpeciesReferenceGlyph(self, string id) -> SpeciesReferenceGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeSpeciesReferenceGlyph(long index)

        Remove the species reference glyph with the given index. A pointer to
        the object is returned. If no object has been removed, None is
        returned.

        @par <hr> Method variant with the following signature:

            removeSpeciesReferenceGlyph(string id)

        Remove the species reference glyph with the given 'id'. A pointer to
        the object is returned. If no object has been removed, None is
        returned.

        """
        return _libsbml.ReactionGlyph_removeSpeciesReferenceGlyph(self, *args)

    def getIndexForSpeciesReferenceGlyph(self, *args):
        """
        getIndexForSpeciesReferenceGlyph(self, string id) -> unsigned int

        Returns the index of the species reference glyph with the given 'id'.
        If the reaction glyph does not contain a species reference glyph with
        this id, the value of the maximum long integer is returned as an
        indicator.

        """
        return _libsbml.ReactionGlyph_getIndexForSpeciesReferenceGlyph(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ReactionGlyph_getElementName(self)

    def clone(self):
        """
        clone(self) -> ReactionGlyph

        Creates and returns a deep copy of this ReactionGlyph object.

        Returns a (deep) copy of this ReactionGlyph.

        """
        return _libsbml.ReactionGlyph_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_REACTIONGLYPH

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.ReactionGlyph_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ReactionGlyph_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.ReactionGlyph_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.ReactionGlyph_enablePackageInternal(self, *args)

ReactionGlyph_swigregister = _libsbml.ReactionGlyph_swigregister
ReactionGlyph_swigregister(ReactionGlyph)

class SpeciesGlyph(GraphicalObject):
    """
    [SBML 'layout' package]

     The SpeciesGlyph represents a Species in the &ldquo;layout&rdquo;
    package.

    In addition to the attributes it inherits from GraphicalObject, the
    SpeciesGlyph object has an optional 'species' attribute.

    """
    __swig_setmethods__ = {}
    for _s in [GraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpeciesGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpeciesGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> SpeciesGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> SpeciesGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> SpeciesGlyph
        __init__(self) -> SpeciesGlyph
        __init__(self, LayoutPkgNamespaces layoutns) -> SpeciesGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id) -> SpeciesGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id, string speciesId) -> SpeciesGlyph
        __init__(self, XMLNode node, unsigned int l2version = 4) -> SpeciesGlyph
        __init__(self, XMLNode node) -> SpeciesGlyph
        __init__(self, SpeciesGlyph source) -> SpeciesGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SpeciesGlyph(XMLNode node, long l2version=4)

        Creates a new SpeciesGlyph from the given XMLNode

        @par <hr> Method variant with the following signature:

            SpeciesGlyph(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Creates a new SpeciesGlyph with the given SBML level, version, and
        package version and the id of the associated species set to the empty
        string.

        @par <hr> Method variant with the following signature:

            SpeciesGlyph(LayoutPkgNamespaces layoutns, string id, string
        speciesId)

        Creates a new SpeciesGlyph with the given 'id' and the id of the
        associated species object set to the second argument.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            SpeciesGlyph(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            SpeciesGlyph(SpeciesGlyph source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            SpeciesGlyph(LayoutPkgNamespaces layoutns, string id)

        Creates a new SpeciesGlyph with the given 'id'.

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_SpeciesGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_SpeciesGlyph
    __del__ = lambda self : None;
    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.SpeciesGlyph_renameSIdRefs(self, *args)

    def getSpeciesId(self):
        """
        getSpeciesId(self) -> string

        Returns the id of the associated species object.

        """
        return _libsbml.SpeciesGlyph_getSpeciesId(self)

    def setSpeciesId(self, *args):
        """
        setSpeciesId(self, string id)

        Sets the id of the associated species object.

        """
        return _libsbml.SpeciesGlyph_setSpeciesId(self, *args)

    def isSetSpeciesId(self):
        """
        isSetSpeciesId(self) -> bool

        Returns true if the id of the associated species object is not the
        empty string.

        """
        return _libsbml.SpeciesGlyph_isSetSpeciesId(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults from GraphicalObject.

        """
        return _libsbml.SpeciesGlyph_initDefaults(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.SpeciesGlyph_getElementName(self)

    def clone(self):
        """
        clone(self) -> SpeciesGlyph

        Creates and returns a deep copy of this SpeciesGlyph.

        Returns a (deep) copy of this SpeciesGlyph.

        """
        return _libsbml.SpeciesGlyph_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_SPECIESGLYPH

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.SpeciesGlyph_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.SpeciesGlyph_toXML(self)

SpeciesGlyph_swigregister = _libsbml.SpeciesGlyph_swigregister
SpeciesGlyph_swigregister(SpeciesGlyph)

class TextGlyph(GraphicalObject):
    """
    [SBML 'layout' package]

     The TextGlyph class describes the position and dimension of text
    labels in the &ldquo;layout&rdquo; package.

    It inherits from GraphicalObject and adds the attributes
    graphicalObject, text and originOfText.

    """
    __swig_setmethods__ = {}
    for _s in [GraphicalObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextGlyph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicalObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextGlyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> TextGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> TextGlyph
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> TextGlyph
        __init__(self) -> TextGlyph
        __init__(self, LayoutPkgNamespaces layoutns) -> TextGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id) -> TextGlyph
        __init__(self, LayoutPkgNamespaces layoutns, string id, string text) -> TextGlyph
        __init__(self, XMLNode node, unsigned int l2version = 4) -> TextGlyph
        __init__(self, XMLNode node) -> TextGlyph
        __init__(self, TextGlyph source) -> TextGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            TextGlyph(XMLNode node, long l2version=4)

        Creates a new TextGlyph from the given XMLNode

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            TextGlyph(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Creates a new TextGlyph with the given SBML level, versin and package
        version. The ids of the associated GraphicalObject and the
        originOfText are set to the empty string. The actual text is set to
        the empty string as well.

        @par <hr> Method variant with the following signature:

            TextGlyph(LayoutPkgNamespaces layoutns, string id, string text)

        Creates a new TextGlyph. The id is given as the first argument, the
        text to be displayed as the second.  All other attirbutes are set to
        the empty string.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            TextGlyph(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            TextGlyph(TextGlyph source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            TextGlyph(LayoutPkgNamespaces layoutns, string id)

        Creates a new TextGlyph. The id is given as the first argument.

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_TextGlyph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_TextGlyph
    __del__ = lambda self : None;
    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.TextGlyph_renameSIdRefs(self, *args)

    def getText(self):
        """
        getText(self) -> string

        Returns the text to be displayed by the text glyph.

        """
        return _libsbml.TextGlyph_getText(self)

    def setText(self, *args):
        """
        setText(self, string text)

        Sets the text to be displayed by the text glyph.

        """
        return _libsbml.TextGlyph_setText(self, *args)

    def getGraphicalObjectId(self):
        """
        getGraphicalObjectId(self) -> string

        Returns the id of the associated graphical object.

        """
        return _libsbml.TextGlyph_getGraphicalObjectId(self)

    def setGraphicalObjectId(self, *args):
        """
        setGraphicalObjectId(self, string id) -> int

        Sets the id of the associated graphical object.

        """
        return _libsbml.TextGlyph_setGraphicalObjectId(self, *args)

    def getOriginOfTextId(self):
        """
        getOriginOfTextId(self) -> string

        Returns the id of the origin of text.

        """
        return _libsbml.TextGlyph_getOriginOfTextId(self)

    def setOriginOfTextId(self, *args):
        """
        setOriginOfTextId(self, string orig) -> int

        Sets the id of the origin of text.

        """
        return _libsbml.TextGlyph_setOriginOfTextId(self, *args)

    def isSetText(self):
        """
        isSetText(self) -> bool

        Returns true if the text is not the empty string.

        """
        return _libsbml.TextGlyph_isSetText(self)

    def isSetOriginOfTextId(self):
        """
        isSetOriginOfTextId(self) -> bool

        Returns true if the id of the origin of text is not the empty string.

        """
        return _libsbml.TextGlyph_isSetOriginOfTextId(self)

    def isSetGraphicalObjectId(self):
        """
        isSetGraphicalObjectId(self) -> bool

        Returns true if the id of the associated graphical object is not the
        empty string.

        """
        return _libsbml.TextGlyph_isSetGraphicalObjectId(self)

    def initDefaults(self):
        """
        initDefaults(self)

        Calls initDefaults from GraphicalObject.

        """
        return _libsbml.TextGlyph_initDefaults(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.TextGlyph_getElementName(self)

    def clone(self):
        """
        clone(self) -> TextGlyph

        Creates and returns a deep copy of this TextGlyph.

        Returns a (deep) copy of this TextGlyph.

        """
        return _libsbml.TextGlyph_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_LAYOUT_TEXTGLYPH

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.TextGlyph_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.TextGlyph_toXML(self)

TextGlyph_swigregister = _libsbml.TextGlyph_swigregister
TextGlyph_swigregister(TextGlyph)

class ListOfCompartmentGlyphs(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfCompartmentGlyphs construct from the
    &ldquo;layout&rdquo; package.

    The ListOfCompartmentGlyphs is a container for the CompartmentGlyph
    elements of a Layout.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, CompartmentGlyph.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfCompartmentGlyphs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfCompartmentGlyphs, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfCompartmentGlyphs

        Creates and returns a deep copy of this ListOfCompartmentGlyphs.

        Returns a (deep) copy of this ListOfCompartmentGlyphs.

        """
        return _libsbml.ListOfCompartmentGlyphs_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfCompartmentGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfCompartmentGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfCompartmentGlyphs
        __init__(self) -> ListOfCompartmentGlyphs
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfCompartmentGlyphs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfCompartmentGlyphs(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfCompartmentGlyphs(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfCompartmentGlyphs(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_COMPARTMENTGLYPH (default).

        See also getPackageName().

        """
        return _libsbml.ListOfCompartmentGlyphs_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfCompartmentGlyphs_getElementName(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfCompartmentGlyphs_toXML(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> CompartmentGlyph
        get(self, unsigned int n) -> CompartmentGlyph
        get(self, string sid) -> CompartmentGlyph
        get(self, string sid) -> CompartmentGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a CompartmentGlyph from the ListOfCompartmentGlyphs.

        Parameter 'n' is the index number of the CompartmentGlyph to get.

        Returns the nth CompartmentGlyph in this ListOfCompartmentGlyphs.

        See also size(), size().

        """
        return _libsbml.ListOfCompartmentGlyphs_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> CompartmentGlyph
        remove(self, string sid) -> CompartmentGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfCompartmentGlyphs items and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfCompartmentGlyphs items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfCompartmentGlyphs_remove(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfCompartmentGlyphs
    __del__ = lambda self : None;
ListOfCompartmentGlyphs_swigregister = _libsbml.ListOfCompartmentGlyphs_swigregister
ListOfCompartmentGlyphs_swigregister(ListOfCompartmentGlyphs)

class ListOfSpeciesGlyphs(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfSpeciesGlyphs construct from the
    &ldquo;layout&rdquo; package.

    The ListOfSpeciesGlyphs is a container for the SpeciesGlyph elements
    of a Layout.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, SpeciesGlyph.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfSpeciesGlyphs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfSpeciesGlyphs, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfSpeciesGlyphs

        Creates and returns a deep copy of this ListOfSpeciesGlyphs.

        Returns a (deep) copy of this ListOfSpeciesGlyphs.

        """
        return _libsbml.ListOfSpeciesGlyphs_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfSpeciesGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfSpeciesGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfSpeciesGlyphs
        __init__(self) -> ListOfSpeciesGlyphs
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfSpeciesGlyphs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesGlyphs(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfSpeciesGlyphs(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfSpeciesGlyphs(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_SPECIESGLYPH (default).

        See also getPackageName().

        """
        return _libsbml.ListOfSpeciesGlyphs_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfSpeciesGlyphs_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> SpeciesGlyph
        get(self, unsigned int n) -> SpeciesGlyph
        get(self, string sid) -> SpeciesGlyph
        get(self, string sid) -> SpeciesGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a SpeciesGlyph from the ListOfSpeciesGlyphs.

        Parameter 'n' is the index number of the SpeciesGlyph to get.

        Returns the nth SpeciesGlyph in this ListOfSpeciesGlyphs.

        See also size(), size().

        """
        return _libsbml.ListOfSpeciesGlyphs_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> SpeciesGlyph
        remove(self, string sid) -> SpeciesGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfSpeciesGlyphs items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfSpeciesGlyphs items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfSpeciesGlyphs_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfSpeciesGlyphs_toXML(self)

    __swig_destroy__ = _libsbml.delete_ListOfSpeciesGlyphs
    __del__ = lambda self : None;
ListOfSpeciesGlyphs_swigregister = _libsbml.ListOfSpeciesGlyphs_swigregister
ListOfSpeciesGlyphs_swigregister(ListOfSpeciesGlyphs)

class ListOfReactionGlyphs(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfReactionGlyphs construct from the
    &ldquo;layout&rdquo; package.

    The ListOfReactionGlyphs is a container for the ReactionGlyph elements
    of a Layout.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, ReactionGlyph.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfReactionGlyphs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfReactionGlyphs, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfReactionGlyphs

        Creates and returns a deep copy of this ListOfReactionGlyphs.

        Returns a (deep) copy of this ListOfReactionGlyphs.

        """
        return _libsbml.ListOfReactionGlyphs_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfReactionGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfReactionGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfReactionGlyphs
        __init__(self) -> ListOfReactionGlyphs
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfReactionGlyphs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfReactionGlyphs(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfReactionGlyphs(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfReactionGlyphs(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_REACTIONGLYPH (default).

        See also getPackageName().

        """
        return _libsbml.ListOfReactionGlyphs_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfReactionGlyphs_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> ReactionGlyph
        get(self, unsigned int n) -> ReactionGlyph
        get(self, string sid) -> ReactionGlyph
        get(self, string sid) -> ReactionGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a ReactionGlyph from the ListOfReactionGlyphs.

        Parameter 'n' is the index number of the ReactionGlyph to get.

        Returns the nth ReactionGlyph in this ListOfReactionGlyphs.

        See also size(), size().

        """
        return _libsbml.ListOfReactionGlyphs_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> ReactionGlyph
        remove(self, string sid) -> ReactionGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfReactionGlyphs items and returns
        a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfReactionGlyphs items with the given
        identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfReactionGlyphs_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfReactionGlyphs_toXML(self)

    __swig_destroy__ = _libsbml.delete_ListOfReactionGlyphs
    __del__ = lambda self : None;
ListOfReactionGlyphs_swigregister = _libsbml.ListOfReactionGlyphs_swigregister
ListOfReactionGlyphs_swigregister(ListOfReactionGlyphs)

class ListOfTextGlyphs(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the ListOfTextGlyphs construct from the
    &ldquo;layout&rdquo; package.

    The ListOfTextGlyphs is a container for the TextGlyph elements of a
    Layout.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, TextGlyph.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfTextGlyphs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfTextGlyphs, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfTextGlyphs

        Creates and returns a deep copy of this ListOfTextGlyphs.

        Returns a (deep) copy of this ListOfTextGlyphs.

        """
        return _libsbml.ListOfTextGlyphs_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfTextGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfTextGlyphs
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfTextGlyphs
        __init__(self) -> ListOfTextGlyphs
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfTextGlyphs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfTextGlyphs(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfTextGlyphs(long level      =
        LayoutExtension.getDefaultLevel(), long version    =
        LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfTextGlyphs(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_TEXTGLYPH (default).

        See also getPackageName().

        """
        return _libsbml.ListOfTextGlyphs_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfTextGlyphs_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> TextGlyph
        get(self, unsigned int n) -> TextGlyph
        get(self, string sid) -> TextGlyph
        get(self, string sid) -> TextGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a TextGlyph from the ListOfTextGlyphs.

        Parameter 'n' is the index number of the TextGlyph to get.

        Returns the nth TextGlyph in this ListOfTextGlyphs.

        See also size(), size().

        """
        return _libsbml.ListOfTextGlyphs_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> TextGlyph
        remove(self, string sid) -> TextGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfTextGlyphs items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfTextGlyphs items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfTextGlyphs_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfTextGlyphs_toXML(self)

    __swig_destroy__ = _libsbml.delete_ListOfTextGlyphs
    __del__ = lambda self : None;
ListOfTextGlyphs_swigregister = _libsbml.ListOfTextGlyphs_swigregister
ListOfTextGlyphs_swigregister(ListOfTextGlyphs)

class Layout(SBase):
    """
    [SBML 'layout' package]

     Each Layout object stores a set of layout information for objects in
    the Model.

    The Layout class stores layout information for some or all elements of
    the SBML model as well as additional objects that need not be
    connected to the model. The Layout has two attributes: id and name.
    Additionally, a Dimensions element specifies the size of the layout.
    The actual layout elements are contained in several lists, namely: a
    ListOfCompartmentGlyphs, a ListOfSpeciesGlyphs, a
    ListOfReactionGlyphs, a ListOfTextGlyphs, and a
    ListOfAdditionalGraphicalObjects. Each of these lists can only occur
    once, and, if present, are not allowed to be empty.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layout, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layout, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> Layout
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> Layout
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> Layout
        __init__(self) -> Layout
        __init__(self, LayoutPkgNamespaces layoutns) -> Layout
        __init__(self, LayoutPkgNamespaces layoutns, string id, Dimensions dimensions) -> Layout
        __init__(self, XMLNode node, unsigned int l2version = 4) -> Layout
        __init__(self, XMLNode node) -> Layout
        __init__(self, Layout source) -> Layout

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Layout(Layout source)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            Layout(LayoutPkgNamespaces layoutns)

        Creates a new Layout with the given LayoutPkgNamespaces object.

        @par <hr> Method variant with the following signature:

            Layout(LayoutPkgNamespaces layoutns, string id, Dimensions
        dimensions)

        Creates a new Layout with the given 'id' and dimensions.

        (FOR BACKWARD COMPATIBILITY)

         @par <hr> Method variant with the following signature:

            Layout(long level      = LayoutExtension.getDefaultLevel(), long
        version    = LayoutExtension.getDefaultVersion(), long pkgVersion =
        LayoutExtension.getDefaultPackageVersion())

        Creates a new Layout with the given level, version, and package
        version.

        @par <hr> Method variant with the following signature:

            Layout(XMLNode node, long l2version = 4)

        Creates a new Layout from the given XMLNode (only for SBML Level2)

        (FOR BACKWARD COMPATIBILITY)

        """
        this = _libsbml.new_Layout(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_Layout
    __del__ = lambda self : None;
    def initDefaults(self):
        """
        initDefaults(self)

        Does nothing since no defaults are defined for Layout.

        """
        return _libsbml.Layout_initDefaults(self)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Layout.

        """
        return _libsbml.Layout_getId(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this Layout's
        'id' attribute has been set.

        """
        return _libsbml.Layout_isSetId(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Layout.

        """
        return _libsbml.Layout_setId(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Layout.

        """
        return _libsbml.Layout_unsetId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Layout.

        """
        return _libsbml.Layout_getName(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this Layout's
        'name' attribute has been set.

        """
        return _libsbml.Layout_isSetName(self)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Layout.

        """
        return _libsbml.Layout_setName(self, *args)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Layout.

        """
        return _libsbml.Layout_unsetName(self)

    def getDimensions(self):
        """
        getDimensions(self) -> Dimensions

        Returns the dimensions of the layout.

        """
        return _libsbml.Layout_getDimensions(self)

    def setDimensions(self, *args):
        """
        setDimensions(self, Dimensions dimensions)

        Sets the dimensions of the layout.

        """
        return _libsbml.Layout_setDimensions(self, *args)

    def getDimensionsExplicitlySet(self):
        """
        getDimensionsExplicitlySet(self) -> bool

        Predicate returning true if the dimensions has been set

        """
        return _libsbml.Layout_getDimensionsExplicitlySet(self)

    def getListOfCompartmentGlyphs(self):
        """
        getListOfCompartmentGlyphs(self) -> ListOfCompartmentGlyphs

        Returns the ListOf object that holds all compartment glyphs.

        """
        return _libsbml.Layout_getListOfCompartmentGlyphs(self)

    def getListOfSpeciesGlyphs(self):
        """
        getListOfSpeciesGlyphs(self) -> ListOfSpeciesGlyphs

        Returns the ListOf object that holds all species glyphs.

        """
        return _libsbml.Layout_getListOfSpeciesGlyphs(self)

    def getListOfReactionGlyphs(self):
        """
        getListOfReactionGlyphs(self) -> ListOfReactionGlyphs

        Returns the ListOf object that holds all reaction glyphs.

        """
        return _libsbml.Layout_getListOfReactionGlyphs(self)

    def getListOfTextGlyphs(self):
        """
        getListOfTextGlyphs(self) -> ListOfTextGlyphs

        Returns the ListOf object that holds all text glyphs.

        """
        return _libsbml.Layout_getListOfTextGlyphs(self)

    def getListOfAdditionalGraphicalObjects(self):
        """
        getListOfAdditionalGraphicalObjects(self) -> ListOfGraphicalObjects

        Returns the ListOf object that holds all additonal graphical objects.

        """
        return _libsbml.Layout_getListOfAdditionalGraphicalObjects(self)

    def getCompartmentGlyph(self, *args):
        """
        getCompartmentGlyph(self, unsigned int index) -> CompartmentGlyph
        getCompartmentGlyph(self, unsigned int index) -> CompartmentGlyph
        getCompartmentGlyph(self, string id) -> CompartmentGlyph
        getCompartmentGlyph(self, string id) -> CompartmentGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getCompartmentGlyph(long index)

        Returns the compartment glyph with the given index. If the index is
        invalid, None is returned.

        @par <hr> Method variant with the following signature:

            getCompartmentGlyph(string id)

        Returns the compartment glyph that has the given 'id', or None if no
        compartment glyph has the id.

        """
        return _libsbml.Layout_getCompartmentGlyph(self, *args)

    def getSpeciesGlyph(self, *args):
        """
        getSpeciesGlyph(self, unsigned int index) -> SpeciesGlyph
        getSpeciesGlyph(self, unsigned int index) -> SpeciesGlyph
        getSpeciesGlyph(self, string id) -> SpeciesGlyph
        getSpeciesGlyph(self, string id) -> SpeciesGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getSpeciesGlyph(long index)

        Returns the species glyph with the given index. If the index is
        invalid, None is returned.

        @par <hr> Method variant with the following signature:

            getSpeciesGlyph(string id)

        Returns the species glyph that has the given 'id', or None if no
        species glyph has the id.

        """
        return _libsbml.Layout_getSpeciesGlyph(self, *args)

    def getReactionGlyph(self, *args):
        """
        getReactionGlyph(self, unsigned int index) -> ReactionGlyph
        getReactionGlyph(self, unsigned int index) -> ReactionGlyph
        getReactionGlyph(self, string id) -> ReactionGlyph
        getReactionGlyph(self, string id) -> ReactionGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getReactionGlyph(long index)

        Returns the reaction glyph with the given index. If the index is
        invalid, None is returned.

        @par <hr> Method variant with the following signature:

            getReactionGlyph(string id)

        Returns the reaction glyph that has the given 'id', or None if no
        reaction glyph has the id.

        """
        return _libsbml.Layout_getReactionGlyph(self, *args)

    def getTextGlyph(self, *args):
        """
        getTextGlyph(self, unsigned int index) -> TextGlyph
        getTextGlyph(self, unsigned int index) -> TextGlyph
        getTextGlyph(self, string id) -> TextGlyph
        getTextGlyph(self, string id) -> TextGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getTextGlyph(long index)

        Returns the text glyph with the given index. If the index is invalid,
        None is returned.

        @par <hr> Method variant with the following signature:

            getTextGlyph(string id)

        Returns the text glyph that has the given 'id', or None if no text
        glyph has the id.

        """
        return _libsbml.Layout_getTextGlyph(self, *args)

    def getAdditionalGraphicalObject(self, *args):
        """
        getAdditionalGraphicalObject(self, unsigned int index) -> GraphicalObject
        getAdditionalGraphicalObject(self, unsigned int index) -> GraphicalObject
        getAdditionalGraphicalObject(self, string id) -> GraphicalObject
        getAdditionalGraphicalObject(self, string id) -> GraphicalObject

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getAdditionalGraphicalObject(long index)

        Returns the additional graphical object with the given index. If the
        index is invalid, None is returned.

        @par <hr> Method variant with the following signature:

            getAdditionalGraphicalObject(string id)

        Returns the additional graphical object that has the given 'id', or
        None if no graphical object has the id.

        """
        return _libsbml.Layout_getAdditionalGraphicalObject(self, *args)

    def getGeneralGlyph(self, *args):
        """
        getGeneralGlyph(self, unsigned int index) -> GeneralGlyph
        getGeneralGlyph(self, unsigned int index) -> GeneralGlyph
        getGeneralGlyph(self, string id) -> GeneralGlyph
        getGeneralGlyph(self, string id) -> GeneralGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getGeneralGlyph(long index)

        Returns the general glyph with the given index. If the index is
        invalid, None is returned.

        @par <hr> Method variant with the following signature:

            getGeneralGlyph(string id)

        Returns the general glyph that has the given 'id', or None if no
        graphical object has the id.

        """
        return _libsbml.Layout_getGeneralGlyph(self, *args)

    def addCompartmentGlyph(self, *args):
        """
        addCompartmentGlyph(self, CompartmentGlyph glyph)

        Adds a new compartment glyph.

        """
        return _libsbml.Layout_addCompartmentGlyph(self, *args)

    def addSpeciesGlyph(self, *args):
        """
        addSpeciesGlyph(self, SpeciesGlyph glyph)

        Adds a new species glyph.

        """
        return _libsbml.Layout_addSpeciesGlyph(self, *args)

    def addReactionGlyph(self, *args):
        """
        addReactionGlyph(self, ReactionGlyph glyph)

        Adds a new reaction glyph.

        """
        return _libsbml.Layout_addReactionGlyph(self, *args)

    def addTextGlyph(self, *args):
        """
        addTextGlyph(self, TextGlyph glyph)

        Adds a new text glyph.

        """
        return _libsbml.Layout_addTextGlyph(self, *args)

    def addAdditionalGraphicalObject(self, *args):
        """
        addAdditionalGraphicalObject(self, GraphicalObject glyph)

        Adds a new additional graphical object glyph.

        """
        return _libsbml.Layout_addAdditionalGraphicalObject(self, *args)

    def addGeneralGlyph(self, *args):
        """
        addGeneralGlyph(self, GeneralGlyph glyph)

        Adds a new general glyph.

        """
        return _libsbml.Layout_addGeneralGlyph(self, *args)

    def getNumCompartmentGlyphs(self):
        """
        getNumCompartmentGlyphs(self) -> unsigned int

        Returns the number of compartment glyphs for the layout.

        """
        return _libsbml.Layout_getNumCompartmentGlyphs(self)

    def getNumSpeciesGlyphs(self):
        """
        getNumSpeciesGlyphs(self) -> unsigned int

        Returns the number of species glyphs for the layout.

        """
        return _libsbml.Layout_getNumSpeciesGlyphs(self)

    def getNumReactionGlyphs(self):
        """
        getNumReactionGlyphs(self) -> unsigned int

        Returns the number of reaction glyphs for the layout.

        """
        return _libsbml.Layout_getNumReactionGlyphs(self)

    def getNumTextGlyphs(self):
        """
        getNumTextGlyphs(self) -> unsigned int

        Returns the number of text glyphs for the layout.

        """
        return _libsbml.Layout_getNumTextGlyphs(self)

    def getNumAdditionalGraphicalObjects(self):
        """
        getNumAdditionalGraphicalObjects(self) -> unsigned int

        Returns the number of additional graphical objects for the layout.

        """
        return _libsbml.Layout_getNumAdditionalGraphicalObjects(self)

    def getNumGeneralGlyphs(self):
        """
        getNumGeneralGlyphs(self) -> unsigned int

        Returns the number of general glyphs for the layout.

        """
        return _libsbml.Layout_getNumGeneralGlyphs(self)

    def createCompartmentGlyph(self):
        """
        createCompartmentGlyph(self) -> CompartmentGlyph

        Creates a CompartmentGlyph object, adds it to the end of the
        compartment glyph objects list and returns a pointer to the newly
        created object.

        """
        return _libsbml.Layout_createCompartmentGlyph(self)

    def createSpeciesGlyph(self):
        """
        createSpeciesGlyph(self) -> SpeciesGlyph

        Creates a SpeciesGlyph object, adds it to the end of the species glyph
        objects list and returns a pointer to the newly created object.

        """
        return _libsbml.Layout_createSpeciesGlyph(self)

    def createReactionGlyph(self):
        """
        createReactionGlyph(self) -> ReactionGlyph

        Creates a ReactionGlyph object, adds it to the end of the reaction
        glyph objects list and returns a pointer to the newly created object.

        """
        return _libsbml.Layout_createReactionGlyph(self)

    def createGeneralGlyph(self):
        """
        createGeneralGlyph(self) -> GeneralGlyph

        Creates a GeneralGlyph object, adds it to the end of the additional
        objects list and returns a reference to the newly created object.

        """
        return _libsbml.Layout_createGeneralGlyph(self)

    def createTextGlyph(self):
        """
        createTextGlyph(self) -> TextGlyph

        Creates a TextGlyph object, adds it to the end of the text glyph
        objects list and returns a pointer to the newly created object.

        """
        return _libsbml.Layout_createTextGlyph(self)

    def createAdditionalGraphicalObject(self):
        """
        createAdditionalGraphicalObject(self) -> GraphicalObject

        Creates a GraphicalObject object, adds it to the end of the additional
        graphical objects list and returns a pointer to the newly created
        object.

        """
        return _libsbml.Layout_createAdditionalGraphicalObject(self)

    def createSpeciesReferenceGlyph(self):
        """
        createSpeciesReferenceGlyph(self) -> SpeciesReferenceGlyph

        Creates a new SpeciesReferenceGlyph for the last ReactionGlyph and
        adds it to its list of SpeciesReferenceGlyph objects.  A pointer to
        the newly created object is returned.

        """
        return _libsbml.Layout_createSpeciesReferenceGlyph(self)

    def createLineSegment(self):
        """
        createLineSegment(self) -> LineSegment

        Creates a new LineSegment for the Curve object of the last
        ReactionGlyph or the last SpeciesReferenceGlyph in the last
        ReactionGlyph and adds it to its list of SpeciesReferenceGlyph
        objects.  A pointer to the newly created object is returned.

        """
        return _libsbml.Layout_createLineSegment(self)

    def createCubicBezier(self):
        """
        createCubicBezier(self) -> CubicBezier

        Creates a new CubicBezier for the Curve object of the last
        ReactionGlyph or the last SpeciesReferenceGlyph in the last
        ReactionGlyph and adds it to its list of SpeciesReferenceGlyph
        objects.  A pointer to the newly created object is returned.

        """
        return _libsbml.Layout_createCubicBezier(self)

    def removeCompartmentGlyph(self, *args):
        """
        removeCompartmentGlyph(self, unsigned int index) -> CompartmentGlyph
        removeCompartmentGlyph(self, string id) -> CompartmentGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeCompartmentGlyph(string id)

        Remove the compartment glyph with the given 'id'. A pointer to the
        removed compartment glyph is returned. If no compartment glyph has
        been removed, None is returned.

        @par <hr> Method variant with the following signature:

            removeCompartmentGlyph(long index)

        Removes the compartment glyph with the given index from the layout. A
        pointer to the compartment glyph that was removed is returned. If no
        compartment glyph has been removed, None is returned.

        """
        return _libsbml.Layout_removeCompartmentGlyph(self, *args)

    def removeSpeciesGlyph(self, *args):
        """
        removeSpeciesGlyph(self, unsigned int index) -> SpeciesGlyph
        removeSpeciesGlyph(self, string id) -> SpeciesGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeSpeciesGlyph(string id)

        Remove the species glyph with the given 'id'. A pointer to the removed
        species glyph is returned. If no species glyph has been removed, None
        is returned.

        @par <hr> Method variant with the following signature:

            removeSpeciesGlyph(long index)

        Removes the species glyph with the given index from the layout. A
        pointer to the species glyph that was removed is returned. If no
        species glyph has been removed, None is returned.

        """
        return _libsbml.Layout_removeSpeciesGlyph(self, *args)

    def removeReactionGlyph(self, *args):
        """
        removeReactionGlyph(self, unsigned int index) -> ReactionGlyph
        removeReactionGlyph(self, string id) -> ReactionGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeReactionGlyph(string id)

        Remove the reaction glyph with the given 'id'. A pointer to the
        removed reaction glyph is returned. If no reaction glyph has been
        removed, None is returned.

        @par <hr> Method variant with the following signature:

            removeReactionGlyph(long index)

        Removes the reaction glyph with the given index from the layout. A
        pointer to the reaction glyph that was removed is returned. If no
        reaction glyph has been removed, None is returned.

        """
        return _libsbml.Layout_removeReactionGlyph(self, *args)

    def removeSpeciesReferenceGlyph(self, *args):
        """
        removeSpeciesReferenceGlyph(self, string id) -> SpeciesReferenceGlyph

        Remove the species reference glyph with the given 'id'. A pointer to
        the removed species reference glyph is returned. If no species
        reference glyph has been removed, None is returned.

        """
        return _libsbml.Layout_removeSpeciesReferenceGlyph(self, *args)

    def removeTextGlyph(self, *args):
        """
        removeTextGlyph(self, unsigned int index) -> TextGlyph
        removeTextGlyph(self, string id) -> TextGlyph

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeTextGlyph(string id)

        Remove the text glyph with the given 'id'. A pointer to the removed
        text glyph is returned. If no text glyph has been removed, None is
        returned.

        @par <hr> Method variant with the following signature:

            removeTextGlyph(long index)

        Removes the text glyph with the given index from the layout. A pointer
        to the text glyph that was removed is returned. If no text glyph has
        been removed, None is returned.

        """
        return _libsbml.Layout_removeTextGlyph(self, *args)

    def removeAdditionalGraphicalObject(self, *args):
        """
        removeAdditionalGraphicalObject(self, unsigned int index) -> GraphicalObject
        removeAdditionalGraphicalObject(self, string id) -> GraphicalObject

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeAdditionalGraphicalObject(string id)

        Remove the graphical object with the given 'id'. A pointer to the
        removed graphical object is returned. If no graphical object has been
        removed, None is returned.

        @par <hr> Method variant with the following signature:

            removeAdditionalGraphicalObject(long index)

        Removes the graphical object with the given index from the layout. A
        pointer to the graphical object that was removed is returned. If no
        graphical object has been removed, None is returned.

        """
        return _libsbml.Layout_removeAdditionalGraphicalObject(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.Layout_getElementName(self)

    def clone(self):
        """
        clone(self) -> Layout

        Creates and returns a deep copy of this Layout.

        Returns a (deep) copy of this Layout.

        """
        return _libsbml.Layout_clone(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_LAYOUT_LAYOUT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Layout_getTypeCode(self)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.Layout_toXML(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Layout_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Layout_enablePackageInternal(self, *args)

Layout_swigregister = _libsbml.Layout_swigregister
Layout_swigregister(Layout)

class ListOfLayouts(ListOf):
    """
    [SBML 'layout' package]

     Implementation of the * ListOfLayouts construct from the
    &ldquo;layout&rdquo; package.

    The ListOfLayouts is a container for the Layout elements of an
    extended Model element.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, Layout.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfLayouts, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfLayouts, name)
    __repr__ = _swig_repr
    def clone(self):
        """
        clone(self) -> ListOfLayouts

        Creates and returns a deep copy of this ListOfLayouts.

        Returns a (deep) copy of this ListOfLayouts.

        """
        return _libsbml.ListOfLayouts_clone(self)

    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> ListOfLayouts
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> ListOfLayouts
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> ListOfLayouts
        __init__(self) -> ListOfLayouts
        __init__(self, LayoutPkgNamespaces layoutns) -> ListOfLayouts

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfLayouts(LayoutPkgNamespaces layoutns)

        Ctor.

        @par <hr> Method variant with the following signature:

            ListOfLayouts(long level      = LayoutExtension.getDefaultLevel(),
        long version    = LayoutExtension.getDefaultVersion(), long pkgVersion
        = LayoutExtension.getDefaultPackageVersion())

        Ctor.

        """
        this = _libsbml.new_ListOfLayouts(*args)
        try: self.this.append(this)
        except: self.this = this
    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_LAYOUT_LAYOUT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfLayouts_getItemTypeCode(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this SBML object.

        """
        return _libsbml.ListOfLayouts_getElementName(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Layout
        get(self, unsigned int n) -> Layout
        get(self, string sid) -> Layout
        get(self, string sid) -> Layout

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Layout from the ListOfLayouts.

        Parameter 'n' is the index number of the Layout to get.

        Returns the nth Layout in this ListOfLayouts.

        See also size(), size().

        """
        return _libsbml.ListOfLayouts_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Layout
        remove(self, string sid) -> Layout

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth item from this ListOfLayouts items and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the item to remove

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes item in this ListOfLayouts items with the given identifier.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the item to remove

        Returns the item removed.  As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfLayouts_remove(self, *args)

    def toXML(self):
        """
        toXML(self) -> XMLNode

        Creates an XMLNode object from this.

        """
        return _libsbml.ListOfLayouts_toXML(self)

    def resetElementNamespace(self, *args):
        """
        resetElementNamespace(self, string uri)

        """
        return _libsbml.ListOfLayouts_resetElementNamespace(self, *args)

    __swig_destroy__ = _libsbml.delete_ListOfLayouts
    __del__ = lambda self : None;
ListOfLayouts_swigregister = _libsbml.ListOfLayouts_swigregister
ListOfLayouts_swigregister(ListOfLayouts)

class LayoutExtension(SBMLExtension):
    """
    [SBML 'layout' package]

     The core module of the 'layout' package extension.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutExtension, name)
    __repr__ = _swig_repr
    def getPackageName():
        """
        getPackageName() -> string

        Returns the package name of this extension.

        """
        return _libsbml.LayoutExtension_getPackageName()

    if _newclass:getPackageName = staticmethod(getPackageName)
    __swig_getmethods__["getPackageName"] = lambda x: getPackageName
    def getDefaultLevel():
        """
        getDefaultLevel() -> unsigned int

        Returns the default SBML Level this extension.

        """
        return _libsbml.LayoutExtension_getDefaultLevel()

    if _newclass:getDefaultLevel = staticmethod(getDefaultLevel)
    __swig_getmethods__["getDefaultLevel"] = lambda x: getDefaultLevel
    def getDefaultVersion():
        """
        getDefaultVersion() -> unsigned int

        Returns the default SBML Version this extension.

        """
        return _libsbml.LayoutExtension_getDefaultVersion()

    if _newclass:getDefaultVersion = staticmethod(getDefaultVersion)
    __swig_getmethods__["getDefaultVersion"] = lambda x: getDefaultVersion
    def getDefaultPackageVersion():
        """
        getDefaultPackageVersion() -> unsigned int

        Returns the default SBML version this extension.

        """
        return _libsbml.LayoutExtension_getDefaultPackageVersion()

    if _newclass:getDefaultPackageVersion = staticmethod(getDefaultPackageVersion)
    __swig_getmethods__["getDefaultPackageVersion"] = lambda x: getDefaultPackageVersion
    def getXmlnsL3V1V1():
        """
        getXmlnsL3V1V1() -> string

        Returns URI of supported versions of this package.

        """
        return _libsbml.LayoutExtension_getXmlnsL3V1V1()

    if _newclass:getXmlnsL3V1V1 = staticmethod(getXmlnsL3V1V1)
    __swig_getmethods__["getXmlnsL3V1V1"] = lambda x: getXmlnsL3V1V1
    def getXmlnsL2():
        """
        getXmlnsL2() -> string

        """
        return _libsbml.LayoutExtension_getXmlnsL2()

    if _newclass:getXmlnsL2 = staticmethod(getXmlnsL2)
    __swig_getmethods__["getXmlnsL2"] = lambda x: getXmlnsL2
    def getXmlnsXSI():
        """
        getXmlnsXSI() -> string

        """
        return _libsbml.LayoutExtension_getXmlnsXSI()

    if _newclass:getXmlnsXSI = staticmethod(getXmlnsXSI)
    __swig_getmethods__["getXmlnsXSI"] = lambda x: getXmlnsXSI
    def __init__(self, *args): 
        """
        __init__(self) -> LayoutExtension
        __init__(self, LayoutExtension arg0) -> LayoutExtension

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            LayoutExtension()

        Constructor

        @par <hr> Method variant with the following signature:

            LayoutExtension(LayoutExtension)

        Copy constructor.

        """
        this = _libsbml.new_LayoutExtension(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_LayoutExtension
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> LayoutExtension

        Creates and returns a deep copy of this LayoutExtension object.

        Returns a (deep) copy of this LayoutExtension object

        """
        return _libsbml.LayoutExtension_clone(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the name of this package ('layout')

        Returns the name of this package ('layout')

        """
        return _libsbml.LayoutExtension_getName(self)

    def getURI(self, *args):
        """
        getURI(self, unsigned int sbmlLevel, unsigned int sbmlVersion, unsigned int pkgVersion) -> string

        Returns the namespace URI corresponding to the combination of the
        given SBML Level, Version, and package version.

        Parameter 'sbmlLevel' is the level of SBML Parameter 'sbmlVersion' is
        the version of SBML Parameter 'pkgVersion' is the version of package

        Returns a string of the package URI, or an empty string if no
        corresponding URI exists.

        """
        return _libsbml.LayoutExtension_getURI(self, *args)

    def getLevel(self, *args):
        """
        getLevel(self, string uri) -> unsigned int

        Returns the SBML Level for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;layout&rdquo; package

        Returns the SBML Level with the given URI of this package, or 0 if the
        given URI is invalid.

        """
        return _libsbml.LayoutExtension_getLevel(self, *args)

    def getVersion(self, *args):
        """
        getVersion(self, string uri) -> unsigned int

        Returns the SBML Version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;layout&rdquo; package

        Returns the SBML version with the given URI of this package, or 0 if
        the given URI is invalid.

        """
        return _libsbml.LayoutExtension_getVersion(self, *args)

    def getPackageVersion(self, *args):
        """
        getPackageVersion(self, string uri) -> unsigned int

        Returns the package version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;layout&rdquo; package

        Returns the package version with the given URI of this package, or 0
        if the given URI is invalid.

        """
        return _libsbml.LayoutExtension_getPackageVersion(self, *args)

    def getStringFromTypeCode(self, *args):
        """
        getStringFromTypeCode(self, int typeCode) -> char

        Takes a type code of the &ldquo;layout&rdquo; package and returns a
        string describing the code.

        """
        return _libsbml.LayoutExtension_getStringFromTypeCode(self, *args)

    def getSBMLExtensionNamespaces(self, *args):
        """
        getSBMLExtensionNamespaces(self, string uri) -> SBMLNamespaces

        Returns an LayoutPkgNamespaces object.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;layout&rdquo; package

        Returns an LayoutPkgNamespace object corresponding to the given 'uri',
        or None if the URI is not defined in the Layout package.

        """
        return _libsbml.LayoutExtension_getSBMLExtensionNamespaces(self, *args)

    def init():
        """
        init()

        Internal implementation method.

        """
        return _libsbml.LayoutExtension_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def removeL2Namespaces(self, *args):
        """
        removeL2Namespaces(self, XMLNamespaces xmlns)

        Removes the L2 Namespace from a document.

        This method should be overridden by all extensions that want to
        serialize to an L2 annotation.

        """
        return _libsbml.LayoutExtension_removeL2Namespaces(self, *args)

    def addL2Namespaces(self, *args):
        """
        addL2Namespaces(self, XMLNamespaces xmlns)

        adds all L2 Extension namespaces to the namespace list.

        This method should be overridden by all extensions that want to
        serialize to an L2 annotation.

        """
        return _libsbml.LayoutExtension_addL2Namespaces(self, *args)

    def enableL2NamespaceForDocument(self, *args):
        """
        enableL2NamespaceForDocument(self, SBMLDocument doc)

        Adds the L2 Namespace to the document and enables the extension.

        If the extension supports serialization to SBML L2 Annotations, this
        method should be overrridden, so it will be activated.

        """
        return _libsbml.LayoutExtension_enableL2NamespaceForDocument(self, *args)

    def isInUse(self, *args):
        """
        isInUse(self, SBMLDocument doc) -> bool

        Determines whether this extension is being used by the given
        SBMLDocument

        The implementation returns true if the model object contains one  or
        more layouts.

        Parameter 'doc' is the sbml document to test.

        Returns a boolean indicating whether the extension is actually being
        used byy the document.

        """
        return _libsbml.LayoutExtension_isInUse(self, *args)

    def getErrorTable(self, *args):
        """
        getErrorTable(self, unsigned int index) -> packageErrorTableEntry

        Internal implementation method.

        """
        return _libsbml.LayoutExtension_getErrorTable(self, *args)

    def getErrorTableIndex(self, *args):
        """
        getErrorTableIndex(self, unsigned int errorId) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.LayoutExtension_getErrorTableIndex(self, *args)

    def getErrorIdOffset(self):
        """
        getErrorIdOffset(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.LayoutExtension_getErrorIdOffset(self)

LayoutExtension_swigregister = _libsbml.LayoutExtension_swigregister
LayoutExtension_swigregister(LayoutExtension)

def LayoutExtension_getPackageName():
  """
    LayoutExtension_getPackageName() -> string

    Returns the package name of this extension.

    """
  return _libsbml.LayoutExtension_getPackageName()

def LayoutExtension_getDefaultLevel():
  """
    LayoutExtension_getDefaultLevel() -> unsigned int

    Returns the default SBML Level this extension.

    """
  return _libsbml.LayoutExtension_getDefaultLevel()

def LayoutExtension_getDefaultVersion():
  """
    LayoutExtension_getDefaultVersion() -> unsigned int

    Returns the default SBML Version this extension.

    """
  return _libsbml.LayoutExtension_getDefaultVersion()

def LayoutExtension_getDefaultPackageVersion():
  """
    LayoutExtension_getDefaultPackageVersion() -> unsigned int

    Returns the default SBML version this extension.

    """
  return _libsbml.LayoutExtension_getDefaultPackageVersion()

def LayoutExtension_getXmlnsL3V1V1():
  """
    LayoutExtension_getXmlnsL3V1V1() -> string

    Returns URI of supported versions of this package.

    """
  return _libsbml.LayoutExtension_getXmlnsL3V1V1()

def LayoutExtension_getXmlnsL2():
  """
    LayoutExtension_getXmlnsL2() -> string

    """
  return _libsbml.LayoutExtension_getXmlnsL2()

def LayoutExtension_getXmlnsXSI():
  """
    LayoutExtension_getXmlnsXSI() -> string

    """
  return _libsbml.LayoutExtension_getXmlnsXSI()

def LayoutExtension_init():
  """
    LayoutExtension_init()

    Internal implementation method.

    """
  return _libsbml.LayoutExtension_init()

SBML_LAYOUT_BOUNDINGBOX = _libsbml.SBML_LAYOUT_BOUNDINGBOX
SBML_LAYOUT_COMPARTMENTGLYPH = _libsbml.SBML_LAYOUT_COMPARTMENTGLYPH
SBML_LAYOUT_CUBICBEZIER = _libsbml.SBML_LAYOUT_CUBICBEZIER
SBML_LAYOUT_CURVE = _libsbml.SBML_LAYOUT_CURVE
SBML_LAYOUT_DIMENSIONS = _libsbml.SBML_LAYOUT_DIMENSIONS
SBML_LAYOUT_GRAPHICALOBJECT = _libsbml.SBML_LAYOUT_GRAPHICALOBJECT
SBML_LAYOUT_LAYOUT = _libsbml.SBML_LAYOUT_LAYOUT
SBML_LAYOUT_LINESEGMENT = _libsbml.SBML_LAYOUT_LINESEGMENT
SBML_LAYOUT_POINT = _libsbml.SBML_LAYOUT_POINT
SBML_LAYOUT_REACTIONGLYPH = _libsbml.SBML_LAYOUT_REACTIONGLYPH
SBML_LAYOUT_SPECIESGLYPH = _libsbml.SBML_LAYOUT_SPECIESGLYPH
SBML_LAYOUT_SPECIESREFERENCEGLYPH = _libsbml.SBML_LAYOUT_SPECIESREFERENCEGLYPH
SBML_LAYOUT_TEXTGLYPH = _libsbml.SBML_LAYOUT_TEXTGLYPH
SBML_LAYOUT_REFERENCEGLYPH = _libsbml.SBML_LAYOUT_REFERENCEGLYPH
SBML_LAYOUT_GENERALGLYPH = _libsbml.SBML_LAYOUT_GENERALGLYPH
class LayoutModelPlugin(SBasePlugin):
    """
    [SBML 'layout' package]

     Implementation of the 'layout' package extention to the Model
    construct.

    """
    __swig_setmethods__ = {}
    for _s in [SBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutModelPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutModelPlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix, LayoutPkgNamespaces layoutns) -> LayoutModelPlugin
        __init__(self, LayoutModelPlugin orig) -> LayoutModelPlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            LayoutModelPlugin(LayoutModelPlugin orig)

        Copy constructor. Creates a copy of this SBase object.

        @par <hr> Method variant with the following signature:

            LayoutModelPlugin(string &uri, string &prefix, LayoutPkgNamespaces
        layoutns)

        Constructor

        """
        this = _libsbml.new_LayoutModelPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_LayoutModelPlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> LayoutModelPlugin

        Creates and returns a deep copy of this LayoutModelPlugin object.

        Returns a (deep) copy of this LayoutModelPlugin object

        """
        return _libsbml.LayoutModelPlugin_clone(self)

    def getListOfLayouts(self, *args):
        """
        getListOfLayouts(self) -> ListOfLayouts
        getListOfLayouts(self) -> ListOfLayouts

        Returns the ListOfLayouts object for this Model.

        Returns the ListOfLayouts object for this Model.

        """
        return _libsbml.LayoutModelPlugin_getListOfLayouts(self, *args)

    def getLayout(self, *args):
        """
        getLayout(self, unsigned int index) -> Layout
        getLayout(self, unsigned int index) -> Layout
        getLayout(self, string sid) -> Layout
        getLayout(self, string sid) -> Layout

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getLayout(long index)

        Returns the layout object that belongs to the given index. If the
        index is invalid, None is returned.

        Parameter 'index' is the index of list of layout objects.

        Returns the Layout object that belongs to the given index. None is
        returned if the index is invalid.

        @par <hr> Method variant with the following signature:

            getLayout(string sid)

        Returns the layout object with the given 'sid' attribute. If the id is
        invalid, None is returned.

        Parameter 'sid' is the id attribute of the layout object.

        Returns the Layout object with the given 'sid' attribute. None is
        returned if the given 'sid' is invalid.

        """
        return _libsbml.LayoutModelPlugin_getLayout(self, *args)

    def addLayout(self, *args):
        """
        addLayout(self, Layout layout) -> int

        Adds a copy of the layout object to the list of layouts.

        Parameter 'layout' is the layout object to be added.

        Returns integer value indicating success/failure of the function.
        The possible values returned by this function are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.LayoutModelPlugin_addLayout(self, *args)

    def createLayout(self):
        """
        createLayout(self) -> Layout

        Creates a new layout object and adds it to the list of layout objects
        and returns it.

        Returns a new layout object.

        """
        return _libsbml.LayoutModelPlugin_createLayout(self)

    def removeLayout(self, *args):
        """
        removeLayout(self, unsigned int n) -> Layout

        Removes the nth Layout object from this Model object and returns a
        pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Layout object to remove

        Returns the Layout object removed.  As mentioned above, the caller
        owns the returned object. None is returned if the given index is out
        of range.

        """
        return _libsbml.LayoutModelPlugin_removeLayout(self, *args)

    def getNumLayouts(self):
        """
        getNumLayouts(self) -> int

        Returns the number of layout objects.

        Returns the number of layout objects.

        """
        return _libsbml.LayoutModelPlugin_getNumLayouts(self)

    def appendFrom(self, *args):
        """
        appendFrom(self, Model model) -> int

        Internal implementation method.

        """
        return _libsbml.LayoutModelPlugin_appendFrom(self, *args)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase sbase)

        Internal implementation method.

        """
        return _libsbml.LayoutModelPlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.LayoutModelPlugin_enablePackageInternal(self, *args)

LayoutModelPlugin_swigregister = _libsbml.LayoutModelPlugin_swigregister
LayoutModelPlugin_swigregister(LayoutModelPlugin)

class LayoutSpeciesReferencePlugin(SBasePlugin):
    """
    [SBML 'layout' package]

     Implementation of the 'layout' package extention to the
    SpeciesReference construct.

    """
    __swig_setmethods__ = {}
    for _s in [SBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutSpeciesReferencePlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutSpeciesReferencePlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix, LayoutPkgNamespaces layoutns) -> LayoutSpeciesReferencePlugin
        __init__(self, LayoutSpeciesReferencePlugin orig) -> LayoutSpeciesReferencePlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            LayoutSpeciesReferencePlugin(string &uri, string &prefix,
        LayoutPkgNamespaces layoutns)

        Constructor

        @par <hr> Method variant with the following signature:

            LayoutSpeciesReferencePlugin(LayoutSpeciesReferencePlugin orig)

        Copy constructor. Creates a copy of this SBase object.

        """
        this = _libsbml.new_LayoutSpeciesReferencePlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_LayoutSpeciesReferencePlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> LayoutSpeciesReferencePlugin

        Creates and returns a deep copy of this LayoutSpeciesReferencePlugin
        object.

        Returns a (deep) copy of this LayoutSpeciesReferencePlugin object

        """
        return _libsbml.LayoutSpeciesReferencePlugin_clone(self)

LayoutSpeciesReferencePlugin_swigregister = _libsbml.LayoutSpeciesReferencePlugin_swigregister
LayoutSpeciesReferencePlugin_swigregister(LayoutSpeciesReferencePlugin)


def parseLayoutAnnotation(*args):
  """
    parseLayoutAnnotation(XMLNode annotation, ListOfLayouts layouts)

    takes an annotation that has been read into the model identifies the
    RDF elements and creates a List of Layouts from the annotation

    """
  return _libsbml.parseLayoutAnnotation(*args)

def deleteLayoutAnnotation(*args):
  """
    deleteLayoutAnnotation(XMLNode pAnnotation) -> XMLNode

    Takes an XMLNode and tries to find the layout annotation node and
    deletes it if it was found.

    """
  return _libsbml.deleteLayoutAnnotation(*args)

def parseLayouts(*args):
  """
    parseLayouts(Model pModel) -> XMLNode

    Creates an XMLNode that represents the layouts of the model from the
    given Model object.

    """
  return _libsbml.parseLayouts(*args)

def parseSpeciesReferenceAnnotation(*args):
  """
    parseSpeciesReferenceAnnotation(XMLNode annotation, SimpleSpeciesReference sr)

    takes an annotation that has been read into the species reference
    identifies the id elements and set the id of the species reference

    """
  return _libsbml.parseSpeciesReferenceAnnotation(*args)

def deleteLayoutIdAnnotation(*args):
  """
    deleteLayoutIdAnnotation(XMLNode pAnnotation) -> XMLNode

    Takes an XMLNode and tries to find the layoutId annotation node and
    deletes it if it was found.

    """
  return _libsbml.deleteLayoutIdAnnotation(*args)

def parseLayoutId(*args):
  """
    parseLayoutId(SimpleSpeciesReference sr) -> XMLNode

    Creates an XMLNode that represents the layoutId annotation of the
    species reference from the given SpeciesReference object.

    """
  return _libsbml.parseLayoutId(*args)
LayoutUnknownError = _libsbml.LayoutUnknownError
LayoutNSUndeclared = _libsbml.LayoutNSUndeclared
LayoutElementNotInNs = _libsbml.LayoutElementNotInNs
LayoutDuplicateComponentId = _libsbml.LayoutDuplicateComponentId
LayoutSIdSyntax = _libsbml.LayoutSIdSyntax
LayoutXsiTypeAllowedLocations = _libsbml.LayoutXsiTypeAllowedLocations
LayoutXsiTypeSyntax = _libsbml.LayoutXsiTypeSyntax
LayoutAttributeRequiredMissing = _libsbml.LayoutAttributeRequiredMissing
LayoutAttributeRequiredMustBeBoolean = _libsbml.LayoutAttributeRequiredMustBeBoolean
LayoutRequiredFalse = _libsbml.LayoutRequiredFalse
LayoutOnlyOneLOLayouts = _libsbml.LayoutOnlyOneLOLayouts
LayoutLOLayoutsNotEmpty = _libsbml.LayoutLOLayoutsNotEmpty
LayoutLOLayoutsAllowedElements = _libsbml.LayoutLOLayoutsAllowedElements
LayoutLOLayoutsAllowedAttributes = _libsbml.LayoutLOLayoutsAllowedAttributes
LayoutLayoutAllowedElements = _libsbml.LayoutLayoutAllowedElements
LayoutLayoutAllowedCoreAttributes = _libsbml.LayoutLayoutAllowedCoreAttributes
LayoutOnlyOneEachListOf = _libsbml.LayoutOnlyOneEachListOf
LayoutNoEmptyListOfs = _libsbml.LayoutNoEmptyListOfs
LayoutLayoutAllowedAttributes = _libsbml.LayoutLayoutAllowedAttributes
LayoutLayoutNameMustBeString = _libsbml.LayoutLayoutNameMustBeString
LayoutLOCompGlyphAllowedAttributes = _libsbml.LayoutLOCompGlyphAllowedAttributes
LayoutLOCompGlyphAllowedElements = _libsbml.LayoutLOCompGlyphAllowedElements
LayoutLOSpeciesGlyphAllowedAttributes = _libsbml.LayoutLOSpeciesGlyphAllowedAttributes
LayoutLOSpeciesGlyphAllowedElements = _libsbml.LayoutLOSpeciesGlyphAllowedElements
LayoutLORnGlyphAllowedAttributes = _libsbml.LayoutLORnGlyphAllowedAttributes
LayoutLORnGlyphAllowedElements = _libsbml.LayoutLORnGlyphAllowedElements
LayoutLOAddGOAllowedAttribut = _libsbml.LayoutLOAddGOAllowedAttribut
LayoutLOAddGOAllowedElements = _libsbml.LayoutLOAddGOAllowedElements
LayoutLayoutMustHaveDimensions = _libsbml.LayoutLayoutMustHaveDimensions
LayoutLOTextGlyphAllowedAttributes = _libsbml.LayoutLOTextGlyphAllowedAttributes
LayoutLOTextGlyphAllowedElements = _libsbml.LayoutLOTextGlyphAllowedElements
LayoutGOAllowedCoreElements = _libsbml.LayoutGOAllowedCoreElements
LayoutGOAllowedCoreAttributes = _libsbml.LayoutGOAllowedCoreAttributes
LayoutGOAllowedElements = _libsbml.LayoutGOAllowedElements
LayoutGOAllowedAttributes = _libsbml.LayoutGOAllowedAttributes
LayoutGOMetaIdRefMustBeIDREF = _libsbml.LayoutGOMetaIdRefMustBeIDREF
LayoutGOMetaIdRefMustReferenceObject = _libsbml.LayoutGOMetaIdRefMustReferenceObject
LayoutGOMustContainBoundingBox = _libsbml.LayoutGOMustContainBoundingBox
LayoutCGAllowedCoreElements = _libsbml.LayoutCGAllowedCoreElements
LayoutCGAllowedCoreAttributes = _libsbml.LayoutCGAllowedCoreAttributes
LayoutCGAllowedElements = _libsbml.LayoutCGAllowedElements
LayoutCGAllowedAttributes = _libsbml.LayoutCGAllowedAttributes
LayoutCGMetaIdRefMustBeIDREF = _libsbml.LayoutCGMetaIdRefMustBeIDREF
LayoutCGMetaIdRefMustReferenceObject = _libsbml.LayoutCGMetaIdRefMustReferenceObject
LayoutCGCompartmentSyntax = _libsbml.LayoutCGCompartmentSyntax
LayoutCGCompartmentMustRefComp = _libsbml.LayoutCGCompartmentMustRefComp
LayoutCGNoDuplicateReferences = _libsbml.LayoutCGNoDuplicateReferences
LayoutCGOrderMustBeDouble = _libsbml.LayoutCGOrderMustBeDouble
LayoutSGAllowedCoreElements = _libsbml.LayoutSGAllowedCoreElements
LayoutSGAllowedCoreAttributes = _libsbml.LayoutSGAllowedCoreAttributes
LayoutSGAllowedElements = _libsbml.LayoutSGAllowedElements
LayoutSGAllowedAttributes = _libsbml.LayoutSGAllowedAttributes
LayoutSGMetaIdRefMustBeIDREF = _libsbml.LayoutSGMetaIdRefMustBeIDREF
LayoutSGMetaIdRefMustReferenceObject = _libsbml.LayoutSGMetaIdRefMustReferenceObject
LayoutSGSpeciesSyntax = _libsbml.LayoutSGSpeciesSyntax
LayoutSGSpeciesMustRefSpecies = _libsbml.LayoutSGSpeciesMustRefSpecies
LayoutSGNoDuplicateReferences = _libsbml.LayoutSGNoDuplicateReferences
LayoutRGAllowedCoreElements = _libsbml.LayoutRGAllowedCoreElements
LayoutRGAllowedCoreAttributes = _libsbml.LayoutRGAllowedCoreAttributes
LayoutRGAllowedElements = _libsbml.LayoutRGAllowedElements
LayoutRGAllowedAttributes = _libsbml.LayoutRGAllowedAttributes
LayoutRGMetaIdRefMustBeIDREF = _libsbml.LayoutRGMetaIdRefMustBeIDREF
LayoutRGMetaIdRefMustReferenceObject = _libsbml.LayoutRGMetaIdRefMustReferenceObject
LayoutRGReactionSyntax = _libsbml.LayoutRGReactionSyntax
LayoutRGReactionMustRefReaction = _libsbml.LayoutRGReactionMustRefReaction
LayoutRGNoDuplicateReferences = _libsbml.LayoutRGNoDuplicateReferences
LayoutLOSpeciesRefGlyphAllowedElements = _libsbml.LayoutLOSpeciesRefGlyphAllowedElements
LayoutLOSpeciesRefGlyphAllowedAttribs = _libsbml.LayoutLOSpeciesRefGlyphAllowedAttribs
LayoutLOSpeciesRefGlyphNotEmpty = _libsbml.LayoutLOSpeciesRefGlyphNotEmpty
LayoutGGAllowedCoreElements = _libsbml.LayoutGGAllowedCoreElements
LayoutGGAllowedCoreAttributes = _libsbml.LayoutGGAllowedCoreAttributes
LayoutGGAllowedElements = _libsbml.LayoutGGAllowedElements
LayoutGGAllowedAttributes = _libsbml.LayoutGGAllowedAttributes
LayoutGGMetaIdRefMustBeIDREF = _libsbml.LayoutGGMetaIdRefMustBeIDREF
LayoutGGMetaIdRefMustReferenceObject = _libsbml.LayoutGGMetaIdRefMustReferenceObject
LayoutGGReferenceSyntax = _libsbml.LayoutGGReferenceSyntax
LayoutGGReferenceMustRefObject = _libsbml.LayoutGGReferenceMustRefObject
LayoutGGNoDuplicateReferences = _libsbml.LayoutGGNoDuplicateReferences
LayoutLOReferenceGlyphAllowedElements = _libsbml.LayoutLOReferenceGlyphAllowedElements
LayoutLOReferenceGlyphAllowedAttribs = _libsbml.LayoutLOReferenceGlyphAllowedAttribs
LayoutLOSubGlyphAllowedElements = _libsbml.LayoutLOSubGlyphAllowedElements
LayoutLOSubGlyphAllowedAttribs = _libsbml.LayoutLOSubGlyphAllowedAttribs
LayoutTGAllowedCoreElements = _libsbml.LayoutTGAllowedCoreElements
LayoutTGAllowedCoreAttributes = _libsbml.LayoutTGAllowedCoreAttributes
LayoutTGAllowedElements = _libsbml.LayoutTGAllowedElements
LayoutTGAllowedAttributes = _libsbml.LayoutTGAllowedAttributes
LayoutTGMetaIdRefMustBeIDREF = _libsbml.LayoutTGMetaIdRefMustBeIDREF
LayoutTGMetaIdRefMustReferenceObject = _libsbml.LayoutTGMetaIdRefMustReferenceObject
LayoutTGOriginOfTextSyntax = _libsbml.LayoutTGOriginOfTextSyntax
LayoutTGOriginOfTextMustRefObject = _libsbml.LayoutTGOriginOfTextMustRefObject
LayoutTGNoDuplicateReferences = _libsbml.LayoutTGNoDuplicateReferences
LayoutTGGraphicalObjectSyntax = _libsbml.LayoutTGGraphicalObjectSyntax
LayoutTGGraphicalObjectMustRefObject = _libsbml.LayoutTGGraphicalObjectMustRefObject
LayoutTGTextMustBeString = _libsbml.LayoutTGTextMustBeString
LayoutSRGAllowedCoreElements = _libsbml.LayoutSRGAllowedCoreElements
LayoutSRGAllowedCoreAttributes = _libsbml.LayoutSRGAllowedCoreAttributes
LayoutSRGAllowedElements = _libsbml.LayoutSRGAllowedElements
LayoutSRGAllowedAttributes = _libsbml.LayoutSRGAllowedAttributes
LayoutSRGMetaIdRefMustBeIDREF = _libsbml.LayoutSRGMetaIdRefMustBeIDREF
LayoutSRGMetaIdRefMustReferenceObject = _libsbml.LayoutSRGMetaIdRefMustReferenceObject
LayoutSRGSpeciesReferenceSyntax = _libsbml.LayoutSRGSpeciesReferenceSyntax
LayoutSRGSpeciesRefMustRefObject = _libsbml.LayoutSRGSpeciesRefMustRefObject
LayoutSRGNoDuplicateReferences = _libsbml.LayoutSRGNoDuplicateReferences
LayoutSRGSpeciesGlyphSyntax = _libsbml.LayoutSRGSpeciesGlyphSyntax
LayoutSRGSpeciesGlyphMustRefObject = _libsbml.LayoutSRGSpeciesGlyphMustRefObject
LayoutSRGRoleSyntax = _libsbml.LayoutSRGRoleSyntax
LayoutREFGAllowedCoreElements = _libsbml.LayoutREFGAllowedCoreElements
LayoutREFGAllowedCoreAttributes = _libsbml.LayoutREFGAllowedCoreAttributes
LayoutREFGAllowedElements = _libsbml.LayoutREFGAllowedElements
LayoutREFGAllowedAttributes = _libsbml.LayoutREFGAllowedAttributes
LayoutREFGMetaIdRefMustBeIDREF = _libsbml.LayoutREFGMetaIdRefMustBeIDREF
LayoutREFGMetaIdRefMustReferenceObject = _libsbml.LayoutREFGMetaIdRefMustReferenceObject
LayoutREFGReferenceSyntax = _libsbml.LayoutREFGReferenceSyntax
LayoutREFGReferenceMustRefObject = _libsbml.LayoutREFGReferenceMustRefObject
LayoutREFGNoDuplicateReferences = _libsbml.LayoutREFGNoDuplicateReferences
LayoutREFGGlyphSyntax = _libsbml.LayoutREFGGlyphSyntax
LayoutREFGGlyphMustRefObject = _libsbml.LayoutREFGGlyphMustRefObject
LayoutREFGRoleSyntax = _libsbml.LayoutREFGRoleSyntax
LayoutPointAllowedCoreElements = _libsbml.LayoutPointAllowedCoreElements
LayoutPointAllowedCoreAttributes = _libsbml.LayoutPointAllowedCoreAttributes
LayoutPointAllowedAttributes = _libsbml.LayoutPointAllowedAttributes
LayoutPointAttributesMustBeDouble = _libsbml.LayoutPointAttributesMustBeDouble
LayoutBBoxAllowedCoreElements = _libsbml.LayoutBBoxAllowedCoreElements
LayoutBBoxAllowedCoreAttributes = _libsbml.LayoutBBoxAllowedCoreAttributes
LayoutBBoxAllowedElements = _libsbml.LayoutBBoxAllowedElements
LayoutBBoxAllowedAttributes = _libsbml.LayoutBBoxAllowedAttributes
LayoutBBoxConsistent3DDefinition = _libsbml.LayoutBBoxConsistent3DDefinition
LayoutCurveAllowedCoreElements = _libsbml.LayoutCurveAllowedCoreElements
LayoutCurveAllowedCoreAttributes = _libsbml.LayoutCurveAllowedCoreAttributes
LayoutCurveAllowedElements = _libsbml.LayoutCurveAllowedElements
LayoutCurveAllowedAttributes = _libsbml.LayoutCurveAllowedAttributes
LayoutLOCurveSegsAllowedAttributes = _libsbml.LayoutLOCurveSegsAllowedAttributes
LayoutLOCurveSegsAllowedElements = _libsbml.LayoutLOCurveSegsAllowedElements
LayoutLOCurveSegsNotEmpty = _libsbml.LayoutLOCurveSegsNotEmpty
LayoutLSegAllowedCoreElements = _libsbml.LayoutLSegAllowedCoreElements
LayoutLSegAllowedCoreAttributes = _libsbml.LayoutLSegAllowedCoreAttributes
LayoutLSegAllowedElements = _libsbml.LayoutLSegAllowedElements
LayoutLSegAllowedAttributes = _libsbml.LayoutLSegAllowedAttributes
LayoutCBezAllowedCoreElements = _libsbml.LayoutCBezAllowedCoreElements
LayoutCBezAllowedCoreAttributes = _libsbml.LayoutCBezAllowedCoreAttributes
LayoutCBezAllowedElements = _libsbml.LayoutCBezAllowedElements
LayoutCBezAllowedAttributes = _libsbml.LayoutCBezAllowedAttributes
LayoutDimsAllowedCoreElements = _libsbml.LayoutDimsAllowedCoreElements
LayoutDimsAllowedCoreAttributes = _libsbml.LayoutDimsAllowedCoreAttributes
LayoutDimsAllowedAttributes = _libsbml.LayoutDimsAllowedAttributes
LayoutDimsAttributesMustBeDouble = _libsbml.LayoutDimsAttributesMustBeDouble
class LayoutPkgNamespaces(SBMLNamespaces):
    """
    Class to store the Level, Version and XML namespace information of
    an SBML extension package.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutPkgNamespaces, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutPkgNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_LayoutPkgNamespaces
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion(), 
            string prefix = LayoutExtension::getPackageName()) -> LayoutPkgNamespaces
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion(), 
            unsigned int pkgVersion = LayoutExtension::getDefaultPackageVersion()) -> LayoutPkgNamespaces
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel(), 
            unsigned int version = LayoutExtension::getDefaultVersion()) -> LayoutPkgNamespaces
        __init__(self, unsigned int level = LayoutExtension::getDefaultLevel()) -> LayoutPkgNamespaces
        __init__(self) -> LayoutPkgNamespaces
        __init__(self, LayoutPkgNamespaces orig) -> LayoutPkgNamespaces

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(long level        =
        SBMLExtensionType.getDefaultLevel(), long version      =
        SBMLExtensionType.getDefaultVersion(), long pkgVersion   =
        SBMLExtensionType.getDefaultPackageVersion(), string prefix =
        SBMLExtensionType.getPackageName())

        Creates a new SBMLExtensionNamespaces object corresponding to the
        given SBML 'level', 'version' and 'package' version.

        Note:

        SBMLExtensionException will be thrown if the extension module that
        supports the combination of the given sbml level, sbml version,
        package name, and package version has not been registered.

        Parameter 'level' is the SBML level Parameter 'version' is the SBML
        version Parameter 'pkgVersion' is the package version Parameter
        'prefix' is the prefix of the package namespace (e.g. 'layout',
        'multi')  to be added. The package's name will be used if the given
        string is empty  (default).

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(SBMLExtensionNamespaces orig)

        Copy constructor; creates a copy of a SBMLExtensionNamespaces.

        Parameter 'orig' is the SBMLExtensionNamespaces instance to copy.

        """
        this = _libsbml.new_LayoutPkgNamespaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ISBMLExtensionNamespaces

        Creates and returns a deep copy of this SBMLNamespaces.

        Returns a (deep) copy of this SBMLNamespaces.

        """
        return _libsbml.LayoutPkgNamespaces_clone(self)

    def getURI(self):
        """
        getURI(self) -> string

        Returns a string representing the SBML XML namespace of this object.

        Returns a string representing the SBML namespace that reflects the
        SBML Level and Version of this object.

        """
        return _libsbml.LayoutPkgNamespaces_getURI(self)

    def getPackageVersion(self):
        """getPackageVersion(self) -> unsigned int"""
        return _libsbml.LayoutPkgNamespaces_getPackageVersion(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the name of the main package for this namespace.

        Returns the name of the main package for this namespace. 'core' will
        be returned if this namespace is defined in the SBML  core.

        """
        return _libsbml.LayoutPkgNamespaces_getPackageName(self)

LayoutPkgNamespaces_swigregister = _libsbml.LayoutPkgNamespaces_swigregister
LayoutPkgNamespaces_swigregister(LayoutPkgNamespaces)

class QualPkgNamespaces(SBMLNamespaces):
    """
    Class to store the Level, Version and XML namespace information of
    an SBML extension package.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualPkgNamespaces, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLNamespaces]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QualPkgNamespaces, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbml.delete_QualPkgNamespaces
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion(), 
            string prefix = QualExtension::getPackageName()) -> QualPkgNamespaces
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> QualPkgNamespaces
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> QualPkgNamespaces
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> QualPkgNamespaces
        __init__(self) -> QualPkgNamespaces
        __init__(self, QualPkgNamespaces orig) -> QualPkgNamespaces

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(long level        =
        SBMLExtensionType.getDefaultLevel(), long version      =
        SBMLExtensionType.getDefaultVersion(), long pkgVersion   =
        SBMLExtensionType.getDefaultPackageVersion(), string prefix =
        SBMLExtensionType.getPackageName())

        Creates a new SBMLExtensionNamespaces object corresponding to the
        given SBML 'level', 'version' and 'package' version.

        Note:

        SBMLExtensionException will be thrown if the extension module that
        supports the combination of the given sbml level, sbml version,
        package name, and package version has not been registered.

        Parameter 'level' is the SBML level Parameter 'version' is the SBML
        version Parameter 'pkgVersion' is the package version Parameter
        'prefix' is the prefix of the package namespace (e.g. 'layout',
        'multi')  to be added. The package's name will be used if the given
        string is empty  (default).

        @par <hr> Method variant with the following signature:

            SBMLExtensionNamespaces(SBMLExtensionNamespaces orig)

        Copy constructor; creates a copy of a SBMLExtensionNamespaces.

        Parameter 'orig' is the SBMLExtensionNamespaces instance to copy.

        """
        this = _libsbml.new_QualPkgNamespaces(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ISBMLExtensionNamespaces

        Creates and returns a deep copy of this SBMLNamespaces.

        Returns a (deep) copy of this SBMLNamespaces.

        """
        return _libsbml.QualPkgNamespaces_clone(self)

    def getURI(self):
        """
        getURI(self) -> string

        Returns a string representing the SBML XML namespace of this object.

        Returns a string representing the SBML namespace that reflects the
        SBML Level and Version of this object.

        """
        return _libsbml.QualPkgNamespaces_getURI(self)

    def getPackageVersion(self):
        """getPackageVersion(self) -> unsigned int"""
        return _libsbml.QualPkgNamespaces_getPackageVersion(self)

    def getPackageName(self):
        """
        getPackageName(self) -> string

        Returns the name of the main package for this namespace.

        Returns the name of the main package for this namespace. 'core' will
        be returned if this namespace is defined in the SBML  core.

        """
        return _libsbml.QualPkgNamespaces_getPackageName(self)

QualPkgNamespaces_swigregister = _libsbml.QualPkgNamespaces_swigregister
QualPkgNamespaces_swigregister(QualPkgNamespaces)

class QualExtension(SBMLExtension):
    """
    [SBML 'qual' package]

     The core module of the 'qual' package extension.

    """
    __swig_setmethods__ = {}
    for _s in [SBMLExtension]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualExtension, name, value)
    __swig_getmethods__ = {}
    for _s in [SBMLExtension]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QualExtension, name)
    __repr__ = _swig_repr
    def getPackageName():
        """
        getPackageName() -> string

        Returns the package name of this extension.

        """
        return _libsbml.QualExtension_getPackageName()

    if _newclass:getPackageName = staticmethod(getPackageName)
    __swig_getmethods__["getPackageName"] = lambda x: getPackageName
    def getDefaultLevel():
        """
        getDefaultLevel() -> unsigned int

        Returns the default SBML Level this extension.

        """
        return _libsbml.QualExtension_getDefaultLevel()

    if _newclass:getDefaultLevel = staticmethod(getDefaultLevel)
    __swig_getmethods__["getDefaultLevel"] = lambda x: getDefaultLevel
    def getDefaultVersion():
        """
        getDefaultVersion() -> unsigned int

        Returns the default SBML Version this extension.

        """
        return _libsbml.QualExtension_getDefaultVersion()

    if _newclass:getDefaultVersion = staticmethod(getDefaultVersion)
    __swig_getmethods__["getDefaultVersion"] = lambda x: getDefaultVersion
    def getDefaultPackageVersion():
        """
        getDefaultPackageVersion() -> unsigned int

        Returns the default SBML version this extension.

        """
        return _libsbml.QualExtension_getDefaultPackageVersion()

    if _newclass:getDefaultPackageVersion = staticmethod(getDefaultPackageVersion)
    __swig_getmethods__["getDefaultPackageVersion"] = lambda x: getDefaultPackageVersion
    def getXmlnsL3V1V1():
        """
        getXmlnsL3V1V1() -> string

        Returns URI of supported versions of this package.

        """
        return _libsbml.QualExtension_getXmlnsL3V1V1()

    if _newclass:getXmlnsL3V1V1 = staticmethod(getXmlnsL3V1V1)
    __swig_getmethods__["getXmlnsL3V1V1"] = lambda x: getXmlnsL3V1V1
    def __init__(self, *args): 
        """
        __init__(self) -> QualExtension
        __init__(self, QualExtension orig) -> QualExtension

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            QualExtension(QualExtension orig)

        Copy constructor.

        @par <hr> Method variant with the following signature:

            QualExtension()

        Constructor

        """
        this = _libsbml.new_QualExtension(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_QualExtension
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> QualExtension

        Creates and returns a deep copy of this QualExtension object.

        Returns a (deep) copy of this SBase object

        """
        return _libsbml.QualExtension_clone(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the name of this package ('qual')

        Returns a string representing the name of this package ('qual')

        """
        return _libsbml.QualExtension_getName(self)

    def getURI(self, *args):
        """
        getURI(self, unsigned int sbmlLevel, unsigned int sbmlVersion, unsigned int pkgVersion) -> string

        Returns the namespace URI corresponding to the combination of the
        given SBML Level, Version, and package version.

        Parameter 'sbmlLevel' is the level of SBML Parameter 'sbmlVersion' is
        the version of SBML Parameter 'pkgVersion' is the version of package

        Returns a string of the package URI, or an empty string if no
        corresponding URI exists.

        """
        return _libsbml.QualExtension_getURI(self, *args)

    def getLevel(self, *args):
        """
        getLevel(self, string uri) -> unsigned int

        Returns the SBML Level for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;qual&rdquo; package

        Returns the SBML Level with the given URI of this package, or 0 if the
        given URI is invalid.

        """
        return _libsbml.QualExtension_getLevel(self, *args)

    def getVersion(self, *args):
        """
        getVersion(self, string uri) -> unsigned int

        Returns the SBML Version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;qual&rdquo; package

        Returns the SBML version with the given URI of this package, or 0 if
        the given URI is invalid.

        """
        return _libsbml.QualExtension_getVersion(self, *args)

    def getPackageVersion(self, *args):
        """
        getPackageVersion(self, string uri) -> unsigned int

        Returns the package version for the given URI of this package.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;qual&rdquo; package

        Returns the package version with the given URI of this package, or 0
        if the given URI is invalid.

        """
        return _libsbml.QualExtension_getPackageVersion(self, *args)

    def getSBMLExtensionNamespaces(self, *args):
        """
        getSBMLExtensionNamespaces(self, string uri) -> SBMLNamespaces

        Returns an QualPkgNamespaces object.

        Parameter 'uri' is the string of URI that represents one of versions
        of the &ldquo;qual&rdquo; package

        Returns an QualPkgNamespace object corresponding to the given 'uri',
        or None if the URI is not defined in the Hierarchical Model
        Qualosition package.

        """
        return _libsbml.QualExtension_getSBMLExtensionNamespaces(self, *args)

    def getStringFromTypeCode(self, *args):
        """
        getStringFromTypeCode(self, int typeCode) -> char

        Takes a type code of the &ldquo;qual&rdquo; package and returns a
        string describing the code.

        """
        return _libsbml.QualExtension_getStringFromTypeCode(self, *args)

    def init():
        """
        init()

        Internal implementation method.

        """
        return _libsbml.QualExtension_init()

    if _newclass:init = staticmethod(init)
    __swig_getmethods__["init"] = lambda x: init
    def getErrorTable(self, *args):
        """
        getErrorTable(self, unsigned int index) -> packageErrorTableEntry

        Internal implementation method.

        """
        return _libsbml.QualExtension_getErrorTable(self, *args)

    def getErrorTableIndex(self, *args):
        """
        getErrorTableIndex(self, unsigned int errorId) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.QualExtension_getErrorTableIndex(self, *args)

    def getErrorIdOffset(self):
        """
        getErrorIdOffset(self) -> unsigned int

        Internal implementation method.

        """
        return _libsbml.QualExtension_getErrorIdOffset(self)

QualExtension_swigregister = _libsbml.QualExtension_swigregister
QualExtension_swigregister(QualExtension)

def QualExtension_getPackageName():
  """
    QualExtension_getPackageName() -> string

    Returns the package name of this extension.

    """
  return _libsbml.QualExtension_getPackageName()

def QualExtension_getDefaultLevel():
  """
    QualExtension_getDefaultLevel() -> unsigned int

    Returns the default SBML Level this extension.

    """
  return _libsbml.QualExtension_getDefaultLevel()

def QualExtension_getDefaultVersion():
  """
    QualExtension_getDefaultVersion() -> unsigned int

    Returns the default SBML Version this extension.

    """
  return _libsbml.QualExtension_getDefaultVersion()

def QualExtension_getDefaultPackageVersion():
  """
    QualExtension_getDefaultPackageVersion() -> unsigned int

    Returns the default SBML version this extension.

    """
  return _libsbml.QualExtension_getDefaultPackageVersion()

def QualExtension_getXmlnsL3V1V1():
  """
    QualExtension_getXmlnsL3V1V1() -> string

    Returns URI of supported versions of this package.

    """
  return _libsbml.QualExtension_getXmlnsL3V1V1()

def QualExtension_init():
  """
    QualExtension_init()

    Internal implementation method.

    """
  return _libsbml.QualExtension_init()

SBML_QUAL_QUALITATIVE_SPECIES = _libsbml.SBML_QUAL_QUALITATIVE_SPECIES
SBML_QUAL_TRANSITION = _libsbml.SBML_QUAL_TRANSITION
SBML_QUAL_INPUT = _libsbml.SBML_QUAL_INPUT
SBML_QUAL_OUTPUT = _libsbml.SBML_QUAL_OUTPUT
SBML_QUAL_FUNCTION_TERM = _libsbml.SBML_QUAL_FUNCTION_TERM
SBML_QUAL_DEFAULT_TERM = _libsbml.SBML_QUAL_DEFAULT_TERM
class QualModelPlugin(SBasePlugin):
    """
    [SBML 'qual' package]

     Implementation of the 'qual' package extention to the Model
    construct.  The extension of SBML Level 3 Core's Model class is
    relatively straightforward: the Qualitative Models Package adds two
    lists, one for holding qualitativeSpecies (ListOfQualitativeSpecies),
    and the other for holding transitions (ListOfTransitions).  The Model
    element may contain at most one ListOfQualitativeSpecies, which must
    contain at least one QualitativeSpecies. It may also contain at most
    one ListOfTransitions which must contain at least one Transition.

    """
    __swig_setmethods__ = {}
    for _s in [SBasePlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualModelPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [SBasePlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QualModelPlugin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string uri, string prefix,  qualns) -> QualModelPlugin
        __init__(self, QualModelPlugin orig) -> QualModelPlugin

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            QualModelPlugin(QualModelPlugin orig)

        Copy constructor. Creates a copy of this SBase object.

        @par <hr> Method variant with the following signature:

            QualModelPlugin(string &uri, string &prefix,
        QualPkgNamespacesqualns)

        Constructor

        """
        this = _libsbml.new_QualModelPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbml.delete_QualModelPlugin
    __del__ = lambda self : None;
    def clone(self):
        """
        clone(self) -> QualModelPlugin

        Creates and returns a deep copy of this QualModelPlugin object.

        Returns a (deep) copy of this SBase object

        """
        return _libsbml.QualModelPlugin_clone(self)

    def createObject(self, *args):
        """
        createObject(self, XMLInputStream stream) -> SBase

        Internal implementation method.

        """
        return _libsbml.QualModelPlugin_createObject(self, *args)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Internal implementation method.

        """
        return _libsbml.QualModelPlugin_hasRequiredElements(self)

    def appendFrom(self, *args):
        """
        appendFrom(self, Model model) -> int

        Internal implementation method.

        """
        return _libsbml.QualModelPlugin_appendFrom(self, *args)

    def getListOfQualitativeSpecies(self, *args):
        """
        getListOfQualitativeSpecies(self) -> ListOfQualitativeSpecies
        getListOfQualitativeSpecies(self) -> ListOfQualitativeSpecies

        Returns the ListOfQualitativeSpecies in this plugin object.

        Returns ListOfQualitativeSpecies object in this plugin object.

        """
        return _libsbml.QualModelPlugin_getListOfQualitativeSpecies(self, *args)

    def getQualitativeSpecies(self, *args):
        """
        getQualitativeSpecies(self, unsigned int n) -> QualitativeSpecies
        getQualitativeSpecies(self, unsigned int n) -> QualitativeSpecies
        getQualitativeSpecies(self, string sid) -> QualitativeSpecies
        getQualitativeSpecies(self, string sid) -> QualitativeSpecies

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getQualitativeSpecies(long n)

        Returns the QualitativeSpecies object that belongs to the given index.
        If the index is invalid, None is returned.

        Parameter 'n' is the index number of the QualitativeSpecies to get.

        Returns the nth QualitativeSpecies in the ListOfQualitativeSpecies.

        @par <hr> Method variant with the following signature:

            getQualitativeSpecies(string sid)

        Returns the qualitativeSpecies object based on its identifier.

        Parameter 'sid' is a string representing the identifier  of the
        QualitativeSpecies to get.

        Returns QualitativeSpecies in the ListOfQualitativeSpecies with the
        given id  or None if no such QualitativeSpecies exists.

        See also getListOfQualitativeSpecies().

        """
        return _libsbml.QualModelPlugin_getQualitativeSpecies(self, *args)

    def addQualitativeSpecies(self, *args):
        """
        addQualitativeSpecies(self, QualitativeSpecies qualitativeSpecies) -> int

        Adds a copy of the given QualitativeSpecies object to the list of
        qual.

        Parameter 'qualitativeSpecies' is the QualitativeSpecies object to be
        added to the list of qual.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.QualModelPlugin_addQualitativeSpecies(self, *args)

    def createQualitativeSpecies(self):
        """
        createQualitativeSpecies(self) -> QualitativeSpecies

        Creates a new qual object and adds it to the list of qual objects and
        returns it.

        Returns a newly created QualitativeSpecies object

        """
        return _libsbml.QualModelPlugin_createQualitativeSpecies(self)

    def removeQualitativeSpecies(self, *args):
        """
        removeQualitativeSpecies(self, unsigned int n) -> QualitativeSpecies
        removeQualitativeSpecies(self, string sid) -> QualitativeSpecies

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeQualitativeSpecies(long n)

        Removes the nth QualitativeSpecies object from this plugin object and
        returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the QualitativeSpecies object to remove

        Returns the QualitativeSpecies object removed.  As mentioned above,
        the  caller owns the returned object. None is returned if the  given
        index is out of range.

        @par <hr> Method variant with the following signature:

            removeQualitativeSpecies(string sid)

        Removes the QualitativeSpecies object with the given id attribute from
        this plugin object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the id attribute of the QualitativeSpecies object
        to remove

        Returns the QualitativeSpecies object removed.  As mentioned above,
        the  caller owns the returned object. None is returned if the  given
        index is out of range.

        """
        return _libsbml.QualModelPlugin_removeQualitativeSpecies(self, *args)

    def getNumQualitativeSpecies(self):
        """
        getNumQualitativeSpecies(self) -> unsigned int

        Returns the number of QualitativeSpecies object in this plugin object.

        Returns the number of QualitativeSpecies object in this plugin object.

        """
        return _libsbml.QualModelPlugin_getNumQualitativeSpecies(self)

    def getListOfTransitions(self, *args):
        """
        getListOfTransitions(self) -> ListOfTransitions
        getListOfTransitions(self) -> ListOfTransitions

        Returns the ListOfTransitions in this plugin object.

        Returns ListOfTransitions object in this plugin object.

        """
        return _libsbml.QualModelPlugin_getListOfTransitions(self, *args)

    def getTransition(self, *args):
        """
        getTransition(self, unsigned int n) -> Transition
        getTransition(self, unsigned int n) -> Transition
        getTransition(self, string sid) -> Transition
        getTransition(self, string sid) -> Transition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getTransition(long n)

        Returns the Transition object that belongs to the given index. If the
        index is invalid, None is returned.

        Parameter 'n' is the index number of the Transition to get.

        Returns the nth Transition in the ListOfTransitions.

        @par <hr> Method variant with the following signature:

            getTransition(string sid)

        Returns the qualitativeSpecies object based on its identifier.

        Parameter 'sid' is a string representing the identifier  of the
        Transition to get.

        Returns Transition in the ListOfTransitions with the given id  or None
        if no such Transition exists.

        See also getListOfTransitions().

        """
        return _libsbml.QualModelPlugin_getTransition(self, *args)

    def addTransition(self, *args):
        """
        addTransition(self, Transition transition) -> int

        Adds a copy of the given Transition object to the list of qual.

        Parameter 'transition' is the Transition object to be added to the
        list of qual.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

        """
        return _libsbml.QualModelPlugin_addTransition(self, *args)

    def createTransition(self):
        """
        createTransition(self) -> Transition

        Creates a new qual object and adds it to the list of qual objects and
        returns it.

        Returns a newly created Transition object

        """
        return _libsbml.QualModelPlugin_createTransition(self)

    def removeTransition(self, *args):
        """
        removeTransition(self, unsigned int n) -> Transition
        removeTransition(self, string sid) -> Transition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeTransition(long n)

        Removes the nth Transition object from this plugin object and returns
        a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'n' is the index of the Transition object to remove

        Returns the Transition object removed.  As mentioned above, the
        caller owns the returned object. None is returned if the  given index
        is out of range.

        @par <hr> Method variant with the following signature:

            removeTransition(string sid)

        Removes the Transition object with the given id attribute from  this
        plugin object and returns a pointer to it.

        The caller owns the returned object and is responsible for deleting
        it.

        Parameter 'sid' is the id attribute of the Transition object to remove

        Returns the Transition object removed.  As mentioned above, the
        caller owns the returned object. None is returned if the  given index
        is out of range.

        """
        return _libsbml.QualModelPlugin_removeTransition(self, *args)

    def getNumTransitions(self):
        """
        getNumTransitions(self) -> unsigned int

        Returns the number of Transition object in this plugin object.

        Returns the number of Transition object in this plugin object.

        """
        return _libsbml.QualModelPlugin_getNumTransitions(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.QualModelPlugin_connectToChild(self)

    def connectToParent(self, *args):
        """
        connectToParent(self, SBase sbase)

        Internal implementation method.

        """
        return _libsbml.QualModelPlugin_connectToParent(self, *args)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.QualModelPlugin_enablePackageInternal(self, *args)

QualModelPlugin_swigregister = _libsbml.QualModelPlugin_swigregister
QualModelPlugin_swigregister(QualModelPlugin)

class FunctionTerm(SBase):
    """
    [SBML 'qual' package]

     The FunctionTerm class for the Qualitative Models package.

    Each FunctionTerm is associated with a result and with a Boolean
    function inside a Math element that can be used to set the conditions
    under which this term is selected.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionTerm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> FunctionTerm
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> FunctionTerm
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> FunctionTerm
        __init__(self) -> FunctionTerm
        __init__(self,  qualns) -> FunctionTerm
        __init__(self, FunctionTerm orig) -> FunctionTerm

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            FunctionTerm(long level      = QualExtension.getDefaultLevel(),
        long version    = QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new FunctionTerm with the given level, version, and package
        version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        FunctionTerm

        Parameter 'version' is a long integer, the SBML Version to assign to
        this FunctionTerm

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this FunctionTerm

        @par <hr> Method variant with the following signature:

            FunctionTerm(FunctionTerm orig)

        Copy constructor for FunctionTerm.

        Parameter 'orig' is the FunctionTerm instance to copy.

        @par <hr> Method variant with the following signature:

            FunctionTerm(QualPkgNamespaces qualns)

        Creates a new FunctionTerm with the given QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_FunctionTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> FunctionTerm

        Creates and returns a deep copy of this FunctionTerm object.

        Returns a (deep) copy of this FunctionTerm object.

        """
        return _libsbml.FunctionTerm_clone(self)

    __swig_destroy__ = _libsbml.delete_FunctionTerm
    __del__ = lambda self : None;
    def getResultLevel(self):
        """
        getResultLevel(self) -> int

        Returns the value of the 'resultLevel' attribute of this FunctionTerm.

        Returns the value of the 'resultLevel' attribute of this FunctionTerm
        as a integer.

        """
        return _libsbml.FunctionTerm_getResultLevel(self)

    def isSetResultLevel(self):
        """
        isSetResultLevel(self) -> bool

        Predicate returning True or False depending on whether this
        FunctionTerm's 'resultLevel' attribute has been set.

        Returns True if this FunctionTerm's 'resultLevel' attribute has been
        set, otherwise False is returned.

        """
        return _libsbml.FunctionTerm_isSetResultLevel(self)

    def setResultLevel(self, *args):
        """
        setResultLevel(self, int resultLevel) -> int

        Sets the value of the 'resultLevel' attribute of this FunctionTerm.

        Parameter 'resultLevel' is int value of the 'resultLevel' attribute to
        be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FunctionTerm_setResultLevel(self, *args)

    def unsetResultLevel(self):
        """
        unsetResultLevel(self) -> int

        Unsets the value of the 'resultLevel' attribute of this FunctionTerm.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FunctionTerm_unsetResultLevel(self)

    def getMath(self):
        """
        getMath(self) -> ASTNode

        Returns the 'math' element of this FunctionTerm.

        Returns the 'math' element of this FunctionTerm.

        """
        return _libsbml.FunctionTerm_getMath(self)

    def isSetMath(self):
        """
        isSetMath(self) -> bool

        Predicate returning True or False depending on whether this
        FunctionTerm's 'math' element has been set.

        Returns True if this FunctionTerm's 'math' element has been set,
        otherwise False is returned.

        """
        return _libsbml.FunctionTerm_isSetMath(self)

    def setMath(self, *args):
        """
        setMath(self, ASTNode math) -> int

        Sets the 'math' element of this FunctionTerm.

        Parameter 'math' is ASTNode math of the 'resultLevel' attribute to be
        set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.FunctionTerm_setMath(self, *args)

    def unsetMath(self):
        """
        unsetMath(self) -> int

        Unsets the 'math' element of this FunctionTerm.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.FunctionTerm_unsetMath(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.FunctionTerm_renameSIdRefs(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for FunctionTerm,
        is always 'functionTerm'.

        Returns the name of this element, i.e. 'functionTerm'.

        """
        return _libsbml.FunctionTerm_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_QUAL_FUNCTION_TERM

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.FunctionTerm_getTypeCode(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        FunctionTerm object have been set.

        Note:

        The required attributes for a FunctionTerm object are:

        Returns a boolean value indicating whether all the required attributes
        for this object have been defined.

        """
        return _libsbml.FunctionTerm_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required elements for this
        FunctionTerm object have been set.

        Note:

        The required elements for a FunctionTerm object are:

           * 'math'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.FunctionTerm_hasRequiredElements(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.FunctionTerm_enablePackageInternal(self, *args)

FunctionTerm_swigregister = _libsbml.FunctionTerm_swigregister
FunctionTerm_swigregister(FunctionTerm)

class ListOfFunctionTerms(ListOf):
    """
    [SBML 'qual' package]

     Implementation of the ListOfFunctionTerms construct from the 'qual'
    package.

    The ListOfFunctionTerms is a container for the FunctionTerms of a
    Transition.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, Input.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfFunctionTerms, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfFunctionTerms, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> ListOfFunctionTerms
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> ListOfFunctionTerms
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> ListOfFunctionTerms
        __init__(self) -> ListOfFunctionTerms
        __init__(self,  qualns) -> ListOfFunctionTerms
        __init__(self, ListOfFunctionTerms orig) -> ListOfFunctionTerms

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfFunctionTerms(ListOfFunctionTerms orig)

         @par <hr> Method variant with the following signature:

            ListOfFunctionTerms(long level      =
        QualExtension.getDefaultLevel(), long version    =
        QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new ListOfFunctionTerms with the given level, version, and
        package version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        ListOfFunctionTerms

        Parameter 'version' is a long integer, the SBML Version to assign to
        this ListOfFunctionTerms

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this ListOfFunctionTerms

        @par <hr> Method variant with the following signature:

            ListOfFunctionTerms(QualPkgNamespaces qualns)

        Creates a new ListOfFunctionTerms with the given QualPkgNamespaces
        object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_ListOfFunctionTerms(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfFunctionTerms

        Creates and returns a deep copy of this ListOfFunctionTerms object.

        Returns a (deep) copy of this ListOfFunctionTerms object.

        """
        return _libsbml.ListOfFunctionTerms_clone(self)

    __swig_destroy__ = _libsbml.delete_ListOfFunctionTerms
    __del__ = lambda self : None;
    def get(self, *args):
        """
        get(self, unsigned int n) -> FunctionTerm
        get(self, unsigned int n) -> FunctionTerm
        get(self, string sid) -> FunctionTerm
        get(self, string sid) -> FunctionTerm

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a FunctionTerm from the ListOfFunctionTerms.

        Parameter 'n' is the index number of the FunctionTerm to get.

        Returns the nth FunctionTerm in this ListOfFunctionTerms.

        See also size(), size().

        """
        return _libsbml.ListOfFunctionTerms_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> FunctionTerm
        remove(self, string sid) -> FunctionTerm

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth FunctionTerm from this ListOfFunctionTerms and returns
        a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the FunctionTerm to remove.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes the FunctionTerm from this ListOfFunctionTerms with the given
        identifier and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the FunctionTerm to remove.

        Returns the FunctionTerm removed. As mentioned above, the caller owns
        the returned item.

        """
        return _libsbml.ListOfFunctionTerms_remove(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        ListOfFunctionTerms, is always 'listOfFunctionTerms'.

        Returns the name of this element, i.e. 'listOfFunctionTerms'.

        """
        return _libsbml.ListOfFunctionTerms_getElementName(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_QUAL_FUNCTION_TERM (default).

        See also getPackageName().

        """
        return _libsbml.ListOfFunctionTerms_getItemTypeCode(self)

    def getDefaultTerm(self, *args):
        """
        getDefaultTerm(self) -> DefaultTerm
        getDefaultTerm(self) -> DefaultTerm

        Get the DefaultTerm from this ListOfFunctionTerms.

        Returns the DefaultTerm in this ListOfFunctionTerms, or None if no
        such value is set.

        See also Transition::getDefaultTerm.

        """
        return _libsbml.ListOfFunctionTerms_getDefaultTerm(self, *args)

    def setDefaultTerm(self, *args):
        """
        setDefaultTerm(self, DefaultTerm dt) -> int

        Sets the given DefaultTerm to this Transition.

        Parameter 'dt' is the DefaultTerm object to add

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.ListOfFunctionTerms_setDefaultTerm(self, *args)

    def isSetDefaultTerm(self):
        """
        isSetDefaultTerm(self) -> bool

        Predicate returning True if the defaultTerm  for this
        ListOfFunctionTerms object has been set.

        Returns a boolean value indicating whether the defaultTerm child for
        this object has been defined.

        """
        return _libsbml.ListOfFunctionTerms_isSetDefaultTerm(self)

ListOfFunctionTerms_swigregister = _libsbml.ListOfFunctionTerms_swigregister
ListOfFunctionTerms_swigregister(ListOfFunctionTerms)

class DefaultTerm(SBase):
    """
    [SBML 'qual' package]

     The DefaultTerm class for the Qualitative Models package.

    The DefaultTerm defines the default result of a Transition. This term
    is used if there are no other FunctionTerm elements or if none of the
    Math elements of the FunctionTerm elements evaluates to True.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultTerm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> DefaultTerm
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> DefaultTerm
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> DefaultTerm
        __init__(self) -> DefaultTerm
        __init__(self,  qualns) -> DefaultTerm
        __init__(self, DefaultTerm orig) -> DefaultTerm

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            DefaultTerm(long level      = QualExtension.getDefaultLevel(),
        long version    = QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new DefaultTerm with the given level, version, and package
        version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        DefaultTerm

        Parameter 'version' is a long integer, the SBML Version to assign to
        this DefaultTerm

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this DefaultTerm

        @par <hr> Method variant with the following signature:

            DefaultTerm(DefaultTerm orig)

        Copy constructor for DefaultTerm.

        Parameter 'orig' is the DefaultTerm instance to copy.

        @par <hr> Method variant with the following signature:

            DefaultTerm(QualPkgNamespaces qualns)

        Creates a new DefaultTerm with the given QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_DefaultTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> DefaultTerm

        Creates and returns a deep copy of this DefaultTerm object.

        Returns a (deep) copy of this DefaultTerm object.

        """
        return _libsbml.DefaultTerm_clone(self)

    __swig_destroy__ = _libsbml.delete_DefaultTerm
    __del__ = lambda self : None;
    def getResultLevel(self):
        """
        getResultLevel(self) -> int

        Returns the value of the 'resultLevel' attribute of this DefaultTerm.

        Returns the value of the 'resultLevel' attribute of this DefaultTerm
        as a integer.

        """
        return _libsbml.DefaultTerm_getResultLevel(self)

    def isSetResultLevel(self):
        """
        isSetResultLevel(self) -> bool

        Predicate returning True or False depending on whether this
        DefaultTerm's 'resultLevel' attribute has been set.

        Returns True if this DefaultTerm's 'resultLevel' attribute has been
        set, otherwise False is returned.

        """
        return _libsbml.DefaultTerm_isSetResultLevel(self)

    def setResultLevel(self, *args):
        """
        setResultLevel(self, int resultLevel) -> int

        Sets the value of the 'resultLevel' attribute of this DefaultTerm.

        Parameter 'resultLevel' is int value of the 'resultLevel' attribute to
        be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.DefaultTerm_setResultLevel(self, *args)

    def unsetResultLevel(self):
        """
        unsetResultLevel(self) -> int

        Unsets the value of the 'resultLevel' attribute of this DefaultTerm.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.DefaultTerm_unsetResultLevel(self)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for DefaultTerm, is
        always 'defaultTerm'.

        Returns the name of this element, i.e. 'defaultTerm'.

        """
        return _libsbml.DefaultTerm_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_QUAL_DEFAULT_TERM

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.DefaultTerm_getTypeCode(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        DefaultTerm object have been set.

        Note:

        The required attributes for a DefaultTerm object are:

        Returns a boolean value indicating whether all the required attributes
        for this object have been defined.

        """
        return _libsbml.DefaultTerm_hasRequiredAttributes(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.DefaultTerm_enablePackageInternal(self, *args)

DefaultTerm_swigregister = _libsbml.DefaultTerm_swigregister
DefaultTerm_swigregister(DefaultTerm)

INPUT_TRANSITION_EFFECT_NONE = _libsbml.INPUT_TRANSITION_EFFECT_NONE
INPUT_TRANSITION_EFFECT_CONSUMPTION = _libsbml.INPUT_TRANSITION_EFFECT_CONSUMPTION
INPUT_TRANSITION_EFFECT_UNKNOWN = _libsbml.INPUT_TRANSITION_EFFECT_UNKNOWN
INPUT_SIGN_POSITIVE = _libsbml.INPUT_SIGN_POSITIVE
INPUT_SIGN_NEGATIVE = _libsbml.INPUT_SIGN_NEGATIVE
INPUT_SIGN_DUAL = _libsbml.INPUT_SIGN_DUAL
INPUT_SIGN_UNKNOWN = _libsbml.INPUT_SIGN_UNKNOWN
INPUT_SIGN_VALUE_NOTSET = _libsbml.INPUT_SIGN_VALUE_NOTSET
class Input(SBase):
    """
    [SBML 'qual' package]

     The Input class for the Qualitative Models package.

    Each Input refers to a QualitativeSpecies that participates in the
    corresponding Transition. In Petri nets, these are the input places of
    the transition. In logical models, they are the regulators of the
    species whose behaviour is defined by the transition.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Input, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Input, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> Input
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> Input
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> Input
        __init__(self) -> Input
        __init__(self,  qualns) -> Input
        __init__(self, Input orig) -> Input

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Input(long level      = QualExtension.getDefaultLevel(), long
        version    = QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new Input with the given level, version, and package
        version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Input

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Input

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this Input

        @par <hr> Method variant with the following signature:

            Input(Input orig)

        Copy constructor for Input.

        Parameter 'orig' is the Input instance to copy.

        @par <hr> Method variant with the following signature:

            Input(QualPkgNamespaces qualns)

        Creates a new Input with the given QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_Input(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Input

        Creates and returns a deep copy of this Input object.

        Returns a (deep) copy of this Input object.

        """
        return _libsbml.Input_clone(self)

    __swig_destroy__ = _libsbml.delete_Input
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Input.

        Returns the value of the 'id' attribute of this Input as a string.

        """
        return _libsbml.Input_getId(self)

    def getQualitativeSpecies(self):
        """
        getQualitativeSpecies(self) -> string

        Returns the value of the 'qualitativeSpecies' attribute of this Input.

        Returns the value of the 'qualitativeSpecies' attribute of this Input
        as a string.

        """
        return _libsbml.Input_getQualitativeSpecies(self)

    def getTransitionEffect(self):
        """
        getTransitionEffect(self) -> InputTransitionEffect_t

        Returns the value of the 'transitionEffect' attribute of this Input.

        Returns the value of the 'transitionEffect' attribute of this Input as
        a string.

        """
        return _libsbml.Input_getTransitionEffect(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Input.

        Returns the value of the 'name' attribute of this Input as a string.

        """
        return _libsbml.Input_getName(self)

    def getSign(self):
        """
        getSign(self) -> InputSign_t

        Returns the value of the 'sign' attribute of this Input.

        Returns the value of the 'sign' attribute of this Input as a string.

        """
        return _libsbml.Input_getSign(self)

    def getThresholdLevel(self):
        """
        getThresholdLevel(self) -> int

        Returns the value of the 'thresholdLevel' attribute of this Input.

        Returns the value of the 'thresholdLevel' attribute of this Input as a
        integer.

        """
        return _libsbml.Input_getThresholdLevel(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this Input's
        'id' attribute has been set.

        Returns True if this Input's 'id' attribute has been set, otherwise
        False is returned.

        """
        return _libsbml.Input_isSetId(self)

    def isSetQualitativeSpecies(self):
        """
        isSetQualitativeSpecies(self) -> bool

        Predicate returning True or False depending on whether this Input's
        'qualitativeSpecies' attribute has been set.

        Returns True if this Input's 'qualitativeSpecies' attribute has been
        set, otherwise False is returned.

        """
        return _libsbml.Input_isSetQualitativeSpecies(self)

    def isSetTransitionEffect(self):
        """
        isSetTransitionEffect(self) -> bool

        Predicate returning True or False depending on whether this Input's
        'transitionEffect' attribute has been set.

        Returns True if this Input's 'transitionEffect' attribute has been
        set, otherwise False is returned.

        """
        return _libsbml.Input_isSetTransitionEffect(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this Input's
        'name' attribute has been set.

        Returns True if this Input's 'name' attribute has been set, otherwise
        False is returned.

        """
        return _libsbml.Input_isSetName(self)

    def isSetSign(self):
        """
        isSetSign(self) -> bool

        Predicate returning True or False depending on whether this Input's
        'sign' attribute has been set.

        Returns True if this Input's 'sign' attribute has been set, otherwise
        False is returned.

        """
        return _libsbml.Input_isSetSign(self)

    def isSetThresholdLevel(self):
        """
        isSetThresholdLevel(self) -> bool

        Predicate returning True or False depending on whether this Input's
        'thresholdLevel' attribute has been set.

        Returns True if this Input's 'thresholdLevel' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Input_isSetThresholdLevel(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Input.

        Parameter 'id' is string value of the 'id' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Input_setId(self, *args)

    def setQualitativeSpecies(self, *args):
        """
        setQualitativeSpecies(self, string qualitativeSpecies) -> int

        Sets the value of the 'qualitativeSpecies' attribute of this Input.

        Parameter 'qualitativeSpecies' is string value of the
        'qualitativeSpecies' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Input_setQualitativeSpecies(self, *args)

    def setTransitionEffect(self, *args):
        """
        setTransitionEffect(self, InputTransitionEffect_t transitionEffect) -> int

        Sets the value of the 'transitionEffect' attribute of this Input.

        Parameter 'transitionEffect' is string value of the 'transitionEffect'
        attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Input_setTransitionEffect(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Input.

        Parameter 'name' is string value of the 'name' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Input_setName(self, *args)

    def setSign(self, *args):
        """
        setSign(self, InputSign_t sign) -> int

        Sets the value of the 'sign' attribute of this Input.

        Parameter 'sign' is string value of the 'sign' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Input_setSign(self, *args)

    def setThresholdLevel(self, *args):
        """
        setThresholdLevel(self, int thresholdLevel) -> int

        Sets the value of the 'thresholdLevel' attribute of this Input.

        Parameter 'thresholdLevel' is int value of the 'thresholdLevel'
        attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Input_setThresholdLevel(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Input.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Input_unsetId(self)

    def unsetQualitativeSpecies(self):
        """
        unsetQualitativeSpecies(self) -> int

        Unsets the value of the 'qualitativeSpecies' attribute of this Input.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Input_unsetQualitativeSpecies(self)

    def unsetTransitionEffect(self):
        """
        unsetTransitionEffect(self) -> int

        Unsets the value of the 'transitionEffect' attribute of this Input.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Input_unsetTransitionEffect(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Input.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Input_unsetName(self)

    def unsetSign(self):
        """
        unsetSign(self) -> int

        Unsets the value of the 'sign' attribute of this Input.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Input_unsetSign(self)

    def unsetThresholdLevel(self):
        """
        unsetThresholdLevel(self) -> int

        Unsets the value of the 'thresholdLevel' attribute of this Input.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Input_unsetThresholdLevel(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Input_renameSIdRefs(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Input, is
        always 'input'.

        Returns the name of this element, i.e. 'input'.

        """
        return _libsbml.Input_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_QUAL_INPUT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Input_getTypeCode(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this Input
        object have been set.

        Note:

        The required attributes for a Input object are:

           * 'qualitativeSpecies'

           * 'transitionEffect'

        Returns a boolean value indicating whether all the required attributes
        for this object have been defined.

        """
        return _libsbml.Input_hasRequiredAttributes(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Input_enablePackageInternal(self, *args)

Input_swigregister = _libsbml.Input_swigregister
Input_swigregister(Input)

class ListOfInputs(ListOf):
    """
    [SBML 'qual' package]

     Implementation of the ListOfInputs construct from the 'qual' package.

    The ListOfInputs is a container for the Inputs of a Transition.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, Input.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfInputs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfInputs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> ListOfInputs
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> ListOfInputs
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> ListOfInputs
        __init__(self) -> ListOfInputs
        __init__(self,  qualns) -> ListOfInputs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfInputs(long level      = QualExtension.getDefaultLevel(),
        long version    = QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new ListOfInputs with the given level, version, and package
        version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        ListOfInputs

        Parameter 'version' is a long integer, the SBML Version to assign to
        this ListOfInputs

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this ListOfInputs

        @par <hr> Method variant with the following signature:

            ListOfInputs(QualPkgNamespaces qualns)

        Creates a new ListOfInputs with the given QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_ListOfInputs(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfInputs

        Creates and returns a deep copy of this ListOfInputs object.

        Returns a (deep) copy of this ListOfInputs object.

        """
        return _libsbml.ListOfInputs_clone(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Input
        get(self, unsigned int n) -> Input
        get(self, string sid) -> Input
        get(self, string sid) -> Input

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Input from the ListOfInputs.

        Parameter 'n' is the index number of the Input to get.

        Returns the nth Input in this ListOfInputs.

        See also size(), size().

        """
        return _libsbml.ListOfInputs_get(self, *args)

    def getBySpecies(self, *args):
        """
        getBySpecies(self, string sid) -> Input
        getBySpecies(self, string sid) -> Input

        Get a Input from the ListOfInputs based on the qualitativeSpecies to
        which it refers.

        Parameter 'sid' is a string representing the qualitativeSpecies
        attribute of the Input to get.

        Returns the first Input in this ListOfInputs with the given
        qualitativeSpecies or None if no such Input exists.

        @see get()   * See also size().

        """
        return _libsbml.ListOfInputs_getBySpecies(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Input
        remove(self, string sid) -> Input

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth Input from this ListOfInputs and returns a pointer to
        it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the Input to remove.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes the Input from this ListOfInputs with the given identifier and
        returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the Input to remove.

        Returns the Input removed. As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfInputs_remove(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for ListOfInputs,
        is always 'listOfInputs'.

        Returns the name of this element, i.e. 'listOfInputs'.

        """
        return _libsbml.ListOfInputs_getElementName(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_QUAL_INPUT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfInputs_getItemTypeCode(self)

    __swig_destroy__ = _libsbml.delete_ListOfInputs
    __del__ = lambda self : None;
ListOfInputs_swigregister = _libsbml.ListOfInputs_swigregister
ListOfInputs_swigregister(ListOfInputs)

OUTPUT_TRANSITION_EFFECT_PRODUCTION = _libsbml.OUTPUT_TRANSITION_EFFECT_PRODUCTION
OUTPUT_TRANSITION_EFFECT_ASSIGNMENT_LEVEL = _libsbml.OUTPUT_TRANSITION_EFFECT_ASSIGNMENT_LEVEL
OUTPUT_TRANSITION_EFFECT_UNKNOWN = _libsbml.OUTPUT_TRANSITION_EFFECT_UNKNOWN
class Output(SBase):
    """
    [SBML 'qual' package]

     The Output class for the Qualitative Models package.

    Each Output refers to a QualitativeSpecies that participates in (is
    affected by) the corresponding Transition. In Petri net models these
    are the output places of the transition.

    In a logical model, a QualitativeSpecies should be referenced in at
    most one ListOfOutputs, (that of the Transition defining the evolution
    of this species). When a Transition has several outputs, it is because
    the referenced species share the same regulators and the same logical
    rules.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Output, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Output, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> Output
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> Output
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> Output
        __init__(self) -> Output
        __init__(self,  qualns) -> Output
        __init__(self, Output orig) -> Output

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Output(long level      = QualExtension.getDefaultLevel(), long
        version    = QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new Output with the given level, version, and package
        version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Output

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Output

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this Output

        @par <hr> Method variant with the following signature:

            Output(Output orig)

        Copy constructor for Output.

        Parameter 'orig' is the Output instance to copy.

        @par <hr> Method variant with the following signature:

            Output(QualPkgNamespaces qualns)

        Creates a new Output with the given QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_Output(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Output

        Creates and returns a deep copy of this Output object.

        Returns a (deep) copy of this Output object.

        """
        return _libsbml.Output_clone(self)

    __swig_destroy__ = _libsbml.delete_Output
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Output.

        Returns the value of the 'id' attribute of this Output as a string.

        """
        return _libsbml.Output_getId(self)

    def getQualitativeSpecies(self):
        """
        getQualitativeSpecies(self) -> string

        Returns the value of the 'qualitativeSpecies' attribute of this
        Output.

        Returns the value of the 'qualitativeSpecies' attribute of this Output
        as a string.

        """
        return _libsbml.Output_getQualitativeSpecies(self)

    def getTransitionEffect(self):
        """
        getTransitionEffect(self) -> OutputTransitionEffect_t

        Returns the value of the 'transitionEffect' attribute of this Output.

        Returns the value of the 'transitionEffect' attribute of this Output
        as a string.

        """
        return _libsbml.Output_getTransitionEffect(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Output.

        Returns the value of the 'name' attribute of this Output as a string.

        """
        return _libsbml.Output_getName(self)

    def getOutputLevel(self):
        """
        getOutputLevel(self) -> int

        Returns the value of the 'outputLevel' attribute of this Output.

        Returns the value of the 'outputLevel' attribute of this Output as a
        integer.

        """
        return _libsbml.Output_getOutputLevel(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this Output's
        'id' attribute has been set.

        Returns True if this Output's 'id' attribute has been set, otherwise
        False is returned.

        """
        return _libsbml.Output_isSetId(self)

    def isSetQualitativeSpecies(self):
        """
        isSetQualitativeSpecies(self) -> bool

        Predicate returning True or False depending on whether this Output's
        'qualitativeSpecies' attribute has been set.

        Returns True if this Output's 'qualitativeSpecies' attribute has been
        set, otherwise False is returned.

        """
        return _libsbml.Output_isSetQualitativeSpecies(self)

    def isSetTransitionEffect(self):
        """
        isSetTransitionEffect(self) -> bool

        Predicate returning True or False depending on whether this Output's
        'transitionEffect' attribute has been set.

        Returns True if this Output's 'transitionEffect' attribute has been
        set, otherwise False is returned.

        """
        return _libsbml.Output_isSetTransitionEffect(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this Output's
        'name' attribute has been set.

        Returns True if this Output's 'name' attribute has been set, otherwise
        False is returned.

        """
        return _libsbml.Output_isSetName(self)

    def isSetOutputLevel(self):
        """
        isSetOutputLevel(self) -> bool

        Predicate returning True or False depending on whether this Output's
        'outputLevel' attribute has been set.

        Returns True if this Output's 'outputLevel' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Output_isSetOutputLevel(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Output.

        Parameter 'id' is string value of the 'id' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Output_setId(self, *args)

    def setQualitativeSpecies(self, *args):
        """
        setQualitativeSpecies(self, string qualitativeSpecies) -> int

        Sets the value of the 'qualitativeSpecies' attribute of this Output.

        Parameter 'qualitativeSpecies' is string value of the
        'qualitativeSpecies' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Output_setQualitativeSpecies(self, *args)

    def setTransitionEffect(self, *args):
        """
        setTransitionEffect(self, OutputTransitionEffect_t transitionEffect) -> int

        Sets the value of the 'transitionEffect' attribute of this Output.

        Parameter 'transitionEffect' is string value of the 'transitionEffect'
        attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Output_setTransitionEffect(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Output.

        Parameter 'name' is string value of the 'name' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Output_setName(self, *args)

    def setOutputLevel(self, *args):
        """
        setOutputLevel(self, int outputLevel) -> int

        Sets the value of the 'outputLevel' attribute of this Output.

        Parameter 'outputLevel' is int value of the 'outputLevel' attribute to
        be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Output_setOutputLevel(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Output.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Output_unsetId(self)

    def unsetQualitativeSpecies(self):
        """
        unsetQualitativeSpecies(self) -> int

        Unsets the value of the 'qualitativeSpecies' attribute of this Output.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Output_unsetQualitativeSpecies(self)

    def unsetTransitionEffect(self):
        """
        unsetTransitionEffect(self) -> int

        Unsets the value of the 'transitionEffect' attribute of this Output.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Output_unsetTransitionEffect(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Output.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Output_unsetName(self)

    def unsetOutputLevel(self):
        """
        unsetOutputLevel(self) -> int

        Unsets the value of the 'outputLevel' attribute of this Output.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Output_unsetOutputLevel(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.Output_renameSIdRefs(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Output, is
        always 'output'.

        Returns the name of this element, i.e. 'output'.

        """
        return _libsbml.Output_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object: libsbml.SBML_QUAL_OUTPUT

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Output_getTypeCode(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        Output object have been set.

        Note:

        The required attributes for a Output object are:

           * 'qualitativeSpecies'

           * 'transitionEffect'

        Returns a boolean value indicating whether all the required attributes
        for this object have been defined.

        """
        return _libsbml.Output_hasRequiredAttributes(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Output_enablePackageInternal(self, *args)

Output_swigregister = _libsbml.Output_swigregister
Output_swigregister(Output)

class ListOfOutputs(ListOf):
    """
    [SBML 'qual' package]

     Implementation of the ListOfOutputs construct from the 'qual'
    package.

    The ListOfOutputs is a container for the Output elements of a
    Transition.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, Output.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfOutputs, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfOutputs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> ListOfOutputs
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> ListOfOutputs
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> ListOfOutputs
        __init__(self) -> ListOfOutputs
        __init__(self,  qualns) -> ListOfOutputs

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfOutputs(long level      = QualExtension.getDefaultLevel(),
        long version    = QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new ListOfOutputs with the given level, version, and package
        version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        ListOfOutputs

        Parameter 'version' is a long integer, the SBML Version to assign to
        this ListOfOutputs

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this ListOfOutputs

        @par <hr> Method variant with the following signature:

            ListOfOutputs(QualPkgNamespaces qualns)

        Creates a new ListOfOutputs with the given QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_ListOfOutputs(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfOutputs

        Creates and returns a deep copy of this ListOfOutputs object.

        Returns a (deep) copy of this ListOfOutputs object.

        """
        return _libsbml.ListOfOutputs_clone(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Output
        get(self, unsigned int n) -> Output
        get(self, string sid) -> Output
        get(self, string sid) -> Output

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Output from the ListOfOutputs.

        Parameter 'n' is the index number of the Output to get.

        Returns the nth Output in this ListOfOutputs.

        See also size(), size().

        """
        return _libsbml.ListOfOutputs_get(self, *args)

    def getBySpecies(self, *args):
        """
        getBySpecies(self, string sid) -> Output
        getBySpecies(self, string sid) -> Output

        Get a Output from the ListOfOutputs based on the qualitativeSpecies to
        which it refers.

        Parameter 'sid' is a string representing the qualitativeSpecies
        attribute of the Output to get.

        Returns the first Output in this ListOfOutputs with the given
        qualitativeSpecies or None if no such Output exists.

        @see get()   * See also size().

        """
        return _libsbml.ListOfOutputs_getBySpecies(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Output
        remove(self, string sid) -> Output

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth Output from this ListOfOutputs and returns a pointer
        to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the Output to remove.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes the Output from this ListOfOutputs with the given identifier
        and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the Output to remove.

        Returns the Output removed. As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.ListOfOutputs_remove(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for ListOfOutputs,
        is always 'listOfOutputs'.

        Returns the name of this element, i.e. 'listOfOutputs'.

        """
        return _libsbml.ListOfOutputs_getElementName(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_QUAL_OUTPUT (default).

        See also getPackageName().

        """
        return _libsbml.ListOfOutputs_getItemTypeCode(self)

    __swig_destroy__ = _libsbml.delete_ListOfOutputs
    __del__ = lambda self : None;
ListOfOutputs_swigregister = _libsbml.ListOfOutputs_swigregister
ListOfOutputs_swigregister(ListOfOutputs)

class QualitativeSpecies(SBase):
    """
    [SBML 'qual' package]

     The QualitativeSpecies class for the Qualitative Models package.

    Similarly to the Species in SBML, the components of qualitative models
    refer to pools of entities that are considered indistinguishable and
    are each located in a specific Compartment. However, here components
    are characterised by their qualitative influences rather than by
    taking part in reactions. Therefore, we define the QualitativeSpecies
    element to represent such pools of entities.

    In a Petri net, qualitative species refer to the places of the model,
    while in a logical model, they refer to the variables of this model
    (i.e. nodes of the influence graph).

    A QualitativeSpecies describes a pool of indistinguishable entities in
    a Compartment. It is associated with a level (an integer representing
    e.g. an activity state, or a functional level of concentration, etc.)

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualitativeSpecies, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QualitativeSpecies, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> QualitativeSpecies
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> QualitativeSpecies
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> QualitativeSpecies
        __init__(self) -> QualitativeSpecies
        __init__(self,  qualns) -> QualitativeSpecies
        __init__(self, QualitativeSpecies orig) -> QualitativeSpecies

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            QualitativeSpecies(QualitativeSpecies orig)

        Copy constructor for QualitativeSpecies.

        Parameter 'orig' is the QualitativeSpecies instance to copy.

        @par <hr> Method variant with the following signature:

            QualitativeSpecies(long level      =
        QualExtension.getDefaultLevel(), long version    =
        QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new QualitativeSpecies with the given level, version, and
        package version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        QualitativeSpecies

        Parameter 'version' is a long integer, the SBML Version to assign to
        this QualitativeSpecies

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this QualitativeSpecies

        @par <hr> Method variant with the following signature:

            QualitativeSpecies(QualPkgNamespaces qualns)

        Creates a new QualitativeSpecies with the given QualPkgNamespaces
        object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_QualitativeSpecies(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> QualitativeSpecies

        Creates and returns a deep copy of this QualitativeSpecies object.

        Returns a (deep) copy of this QualitativeSpecies object.

        """
        return _libsbml.QualitativeSpecies_clone(self)

    __swig_destroy__ = _libsbml.delete_QualitativeSpecies
    __del__ = lambda self : None;
    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this QualitativeSpecies.

        Returns the value of the 'id' attribute of this QualitativeSpecies as
        a string.

        """
        return _libsbml.QualitativeSpecies_getId(self)

    def getCompartment(self):
        """
        getCompartment(self) -> string

        Returns the value of the 'compartment' attribute of this
        QualitativeSpecies.

        Returns the value of the 'compartment' attribute of this
        QualitativeSpecies as a string.

        """
        return _libsbml.QualitativeSpecies_getCompartment(self)

    def getConstant(self):
        """
        getConstant(self) -> bool

        Returns the value of the 'constant' attribute of this
        QualitativeSpecies.

        Returns the value of the 'constant' attribute of this
        QualitativeSpecies as a boolean.

        """
        return _libsbml.QualitativeSpecies_getConstant(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this QualitativeSpecies.

        Returns the value of the 'name' attribute of this QualitativeSpecies
        as a string.

        """
        return _libsbml.QualitativeSpecies_getName(self)

    def getInitialLevel(self):
        """
        getInitialLevel(self) -> int

        Returns the value of the 'initialLevel' attribute of this
        QualitativeSpecies.

        Returns the value of the 'initialLevel' attribute of this
        QualitativeSpecies as a integer.

        """
        return _libsbml.QualitativeSpecies_getInitialLevel(self)

    def getMaxLevel(self):
        """
        getMaxLevel(self) -> int

        Returns the value of the 'maxLevel' attribute of this
        QualitativeSpecies.

        Returns the value of the 'maxLevel' attribute of this
        QualitativeSpecies as a integer.

        """
        return _libsbml.QualitativeSpecies_getMaxLevel(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        QualitativeSpecies's 'id' attribute has been set.

        Returns True if this QualitativeSpecies's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.QualitativeSpecies_isSetId(self)

    def isSetCompartment(self):
        """
        isSetCompartment(self) -> bool

        Predicate returning True or False depending on whether this
        QualitativeSpecies's 'compartment' attribute has been set.

        Returns True if this QualitativeSpecies's 'compartment' attribute has
        been set, otherwise False is returned.

        """
        return _libsbml.QualitativeSpecies_isSetCompartment(self)

    def isSetConstant(self):
        """
        isSetConstant(self) -> bool

        Predicate returning True or False depending on whether this
        QualitativeSpecies's 'constant' attribute has been set.

        Returns True if this QualitativeSpecies's 'constant' attribute has
        been set, otherwise False is returned.

        """
        return _libsbml.QualitativeSpecies_isSetConstant(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this
        QualitativeSpecies's 'name' attribute has been set.

        Returns True if this QualitativeSpecies's 'name' attribute has been
        set, otherwise False is returned.

        """
        return _libsbml.QualitativeSpecies_isSetName(self)

    def isSetInitialLevel(self):
        """
        isSetInitialLevel(self) -> bool

        Predicate returning True or False depending on whether this
        QualitativeSpecies's 'initialLevel' attribute has been set.

        Returns True if this QualitativeSpecies's 'initialLevel' attribute has
        been set, otherwise False is returned.

        """
        return _libsbml.QualitativeSpecies_isSetInitialLevel(self)

    def isSetMaxLevel(self):
        """
        isSetMaxLevel(self) -> bool

        Predicate returning True or False depending on whether this
        QualitativeSpecies's 'maxLevel' attribute has been set.

        Returns True if this QualitativeSpecies's 'maxLevel' attribute has
        been set, otherwise False is returned.

        """
        return _libsbml.QualitativeSpecies_isSetMaxLevel(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this QualitativeSpecies.

        Parameter 'id' is string value of the 'id' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.QualitativeSpecies_setId(self, *args)

    def setCompartment(self, *args):
        """
        setCompartment(self, string compartment) -> int

        Sets the value of the 'compartment' attribute of this
        QualitativeSpecies.

        Parameter 'compartment' is string value of the 'compartment' attribute
        to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.QualitativeSpecies_setCompartment(self, *args)

    def setConstant(self, *args):
        """
        setConstant(self, bool constant) -> int

        Sets the value of the 'constant' attribute of this QualitativeSpecies.

        Parameter 'constant' is bool value of the 'constant' attribute to be
        set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.QualitativeSpecies_setConstant(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this QualitativeSpecies.

        Parameter 'name' is string value of the 'name' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.QualitativeSpecies_setName(self, *args)

    def setInitialLevel(self, *args):
        """
        setInitialLevel(self, int initialLevel) -> int

        Sets the value of the 'initialLevel' attribute of this
        QualitativeSpecies.

        Parameter 'initialLevel' is int value of the 'initialLevel' attribute
        to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.QualitativeSpecies_setInitialLevel(self, *args)

    def setMaxLevel(self, *args):
        """
        setMaxLevel(self, int maxLevel) -> int

        Sets the value of the 'maxLevel' attribute of this QualitativeSpecies.

        Parameter 'maxLevel' is int value of the 'maxLevel' attribute to be
        set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.QualitativeSpecies_setMaxLevel(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this QualitativeSpecies.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.QualitativeSpecies_unsetId(self)

    def unsetCompartment(self):
        """
        unsetCompartment(self) -> int

        Unsets the value of the 'compartment' attribute of this
        QualitativeSpecies.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.QualitativeSpecies_unsetCompartment(self)

    def unsetConstant(self):
        """
        unsetConstant(self) -> int

        Unsets the value of the 'constant' attribute of this
        QualitativeSpecies.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.QualitativeSpecies_unsetConstant(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this QualitativeSpecies.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.QualitativeSpecies_unsetName(self)

    def unsetInitialLevel(self):
        """
        unsetInitialLevel(self) -> int

        Unsets the value of the 'initialLevel' attribute of this
        QualitativeSpecies.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.QualitativeSpecies_unsetInitialLevel(self)

    def unsetMaxLevel(self):
        """
        unsetMaxLevel(self) -> int

        Unsets the value of the 'maxLevel' attribute of this
        QualitativeSpecies.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.QualitativeSpecies_unsetMaxLevel(self)

    def renameSIdRefs(self, *args):
        """
        renameSIdRefs(self, string oldid, string newid)

        Replaces all uses of a given SIdRef type attribute value with another
        value.

        @par In SBML, object identifiers are of a data type called SId. In
        SBML Level 3, an explicit data type called SIdRef was introduced for
        attribute values that refer to SId values; in previous Levels of SBML,
        this data type did not exist and attributes were simply described to
        as 'referring to an identifier', but the effective data type was the
        same as SIdRefin Level 3.  These and other methods of libSBML refer to
        the type SIdRef for all Levels of SBML, even if the corresponding SBML
        specification did not explicitly name the data type.

        This method works by looking at all attributes and (if appropriate)
        mathematical formulas in MathML content, comparing the referenced
        identifiers to the value of 'oldid'.  If any matches are found, the
        matching values are replaced with 'newid'.  The method does not
        descend into child elements.

        Parameter 'oldid' is the old identifier Parameter 'newid' is the new
        identifier

        """
        return _libsbml.QualitativeSpecies_renameSIdRefs(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        QualitativeSpecies, is always 'qualitativeSpecies'.

        Returns the name of this element, i.e. 'qualitativeSpecies'.

        """
        return _libsbml.QualitativeSpecies_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_QUAL_QUALITATIVE_SPECIES

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.QualitativeSpecies_getTypeCode(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        QualitativeSpecies object have been set.

        Note:

        The required attributes for a QualitativeSpecies object are:

           * 'id'

           * 'compartment'

           * 'constant'

        Returns a boolean value indicating whether all the required attributes
        for this object have been defined.

        """
        return _libsbml.QualitativeSpecies_hasRequiredAttributes(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.QualitativeSpecies_enablePackageInternal(self, *args)

QualitativeSpecies_swigregister = _libsbml.QualitativeSpecies_swigregister
QualitativeSpecies_swigregister(QualitativeSpecies)

class ListOfQualitativeSpecies(ListOf):
    """
    [SBML 'qual' package]

     Implementation of the ListOfQualitativeSpecies construct from the
    'qual' package.

    The ListOfQualitativeSpecies is a container for the QualitativeSpecies
    elements of a Model.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, QualitativeSpecies.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfQualitativeSpecies, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfQualitativeSpecies, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> ListOfQualitativeSpecies
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> ListOfQualitativeSpecies
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> ListOfQualitativeSpecies
        __init__(self) -> ListOfQualitativeSpecies
        __init__(self,  qualns) -> ListOfQualitativeSpecies

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfQualitativeSpecies(long level      =
        QualExtension.getDefaultLevel(), long version    =
        QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new ListOfQualitativeSpecies with the given level, version,
        and package version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        ListOfQualitativeSpecies

        Parameter 'version' is a long integer, the SBML Version to assign to
        this ListOfQualitativeSpecies

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this ListOfQualitativeSpecies

        @par <hr> Method variant with the following signature:

            ListOfQualitativeSpecies(QualPkgNamespaces qualns)

        Creates a new ListOfQualitativeSpecies with the given
        QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_ListOfQualitativeSpecies(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfQualitativeSpecies

        Creates and returns a deep copy of this ListOfQualitativeSpecies
        object.

        Returns a (deep) copy of this ListOfQualitativeSpecies object.

        """
        return _libsbml.ListOfQualitativeSpecies_clone(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> QualitativeSpecies
        get(self, unsigned int n) -> QualitativeSpecies
        get(self, string sid) -> QualitativeSpecies
        get(self, string sid) -> QualitativeSpecies

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a QualitativeSpecies from the ListOfQualitativeSpecies.

        Parameter 'n' is the index number of the QualitativeSpecies to get.

        Returns the nth QualitativeSpecies in this ListOfQualitativeSpecies.

        See also size(), size().

        """
        return _libsbml.ListOfQualitativeSpecies_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> QualitativeSpecies
        remove(self, string sid) -> QualitativeSpecies

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth QualitativeSpecies from this ListOfQualitativeSpecies
        and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the QualitativeSpecies to remove.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes the QualitativeSpecies from this ListOfQualitativeSpecies with
        the given identifier and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the QualitativeSpecies to remove.

        Returns the QualitativeSpecies removed. As mentioned above, the caller
        owns the returned item.

        """
        return _libsbml.ListOfQualitativeSpecies_remove(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        ListOfQualitativeSpecies, is always 'listOfQualitativeSpecies'.

        Returns the name of this element, i.e. 'listOfQualitativeSpecies'.

        """
        return _libsbml.ListOfQualitativeSpecies_getElementName(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_QUAL_QUALITATIVE_SPECIES (default).

        See also getPackageName().

        """
        return _libsbml.ListOfQualitativeSpecies_getItemTypeCode(self)

    __swig_destroy__ = _libsbml.delete_ListOfQualitativeSpecies
    __del__ = lambda self : None;
ListOfQualitativeSpecies_swigregister = _libsbml.ListOfQualitativeSpecies_swigregister
ListOfQualitativeSpecies_swigregister(ListOfQualitativeSpecies)

class Transition(SBase):
    """
    [SBML 'qual' package]

     The Transition class for the Qualitative Models package.

    A Transition element contains at most one ListOfInputs and one
    ListOfOutputs and exactly one ListOfFunctionTerms.

    A Transition defines the changes in level associated with the
    QualitativeSpecies that occur when a Transition is enabled.

    In logical models, a Transition is used to specify the logical rule
    associated with a QualitativeSpecies (that appears as an Output of
    this Transition). For example, the rule 'if A > 1 : B = 2' would be
    encapsulated as a Transition with QualitativeSpecies 'A' as an Input
    and 'B' as an Output; the 'if A > 1' rule being encode by the math
    element of a FunctionTerm with the resultLevel attribute having a
    value '2'.

    In Petri net models, a Transition is interpreted, using the common
    Petri net semantics, as events that might occur within the system
    causing tokens to be moved.

    """
    __swig_setmethods__ = {}
    for _s in [SBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transition, name, value)
    __swig_getmethods__ = {}
    for _s in [SBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Transition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> Transition
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> Transition
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> Transition
        __init__(self) -> Transition
        __init__(self,  qualns) -> Transition
        __init__(self, Transition orig) -> Transition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            Transition(Transition orig)

        Copy constructor for Transition.

        Parameter 'orig' is the Transition instance to copy.

        @par <hr> Method variant with the following signature:

            Transition(long level      = QualExtension.getDefaultLevel(), long
        version    = QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new Transition with the given level, version, and package
        version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        Transition

        Parameter 'version' is a long integer, the SBML Version to assign to
        this Transition

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this Transition

        @par <hr> Method variant with the following signature:

            Transition(QualPkgNamespaces qualns)

        Creates a new Transition with the given QualPkgNamespaces object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_Transition(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> Transition

        Creates and returns a deep copy of this Transition object.

        Returns a (deep) copy of this Transition object.

        """
        return _libsbml.Transition_clone(self)

    __swig_destroy__ = _libsbml.delete_Transition
    __del__ = lambda self : None;
    def getElementBySId(self, *args):
        """
        getElementBySId(self, string id) -> SBase

        Returns the first child element found that has the given 'id'  in the
        model-wide SId namespace, or None if no such object is found.

        Parameter 'id' is string representing the id of objects to find

        Returns a pointer to the SBase element with the given 'id'.

        """
        return _libsbml.Transition_getElementBySId(self, *args)

    def getElementByMetaId(self, *args):
        """
        getElementByMetaId(self, string metaid) -> SBase

        Returns the first child element it can find with the given 'metaid',
        or itself if it has the given 'metaid', or None if no such object  is
        found.

        Parameter 'metaid' is string representing the metaid of objects to
        find

        Returns a pointer to the SBase element with the given 'metaid'.

        """
        return _libsbml.Transition_getElementByMetaId(self, *args)

    def getId(self):
        """
        getId(self) -> string

        Returns the value of the 'id' attribute of this Transition.

        Returns the value of the 'id' attribute of this Transition as a
        string.

        """
        return _libsbml.Transition_getId(self)

    def getName(self):
        """
        getName(self) -> string

        Returns the value of the 'name' attribute of this Transition.

        Returns the value of the 'name' attribute of this Transition as a
        string.

        """
        return _libsbml.Transition_getName(self)

    def isSetId(self):
        """
        isSetId(self) -> bool

        Predicate returning True or False depending on whether this
        Transition's 'id' attribute has been set.

        Returns True if this Transition's 'id' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Transition_isSetId(self)

    def isSetName(self):
        """
        isSetName(self) -> bool

        Predicate returning True or False depending on whether this
        Transition's 'name' attribute has been set.

        Returns True if this Transition's 'name' attribute has been set,
        otherwise False is returned.

        """
        return _libsbml.Transition_isSetName(self)

    def setId(self, *args):
        """
        setId(self, string id) -> int

        Sets the value of the 'id' attribute of this Transition.

        Parameter 'id' is string value of the 'id' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Transition_setId(self, *args)

    def setName(self, *args):
        """
        setName(self, string name) -> int

        Sets the value of the 'name' attribute of this Transition.

        Parameter 'name' is string value of the 'name' attribute to be set

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Transition_setName(self, *args)

    def unsetId(self):
        """
        unsetId(self) -> int

        Unsets the value of the 'id' attribute of this Transition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Transition_unsetId(self)

    def unsetName(self):
        """
        unsetName(self) -> int

        Unsets the value of the 'name' attribute of this Transition.

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_OPERATION_FAILED

        """
        return _libsbml.Transition_unsetName(self)

    def getListOfInputs(self, *args):
        """
        getListOfInputs(self) -> ListOfInputs
        getListOfInputs(self) -> ListOfInputs

        Returns the  'ListOfInputs' in this Transition object.

        Returns the 'ListOfInputs' attribute of this Transition.

        """
        return _libsbml.Transition_getListOfInputs(self, *args)

    def getInput(self, *args):
        """
        getInput(self, unsigned int n) -> Input
        getInput(self, unsigned int n) -> Input
        getInput(self, string sid) -> Input
        getInput(self, string sid) -> Input

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getInput(long n)

        Get a Input from the ListOfInputs.

        Parameter 'n' is the index number of the Input to get.

        Returns the nth Input in the ListOfInputs within this Transition.

        See also getNumInputs(), getInput(), getNumInputs().

        """
        return _libsbml.Transition_getInput(self, *args)

    def getInputBySpecies(self, *args):
        """
        getInputBySpecies(self, string sid) -> Input
        getInputBySpecies(self, string sid) -> Input

        Get a Input from the ListOfInputs based on its qualitativeSpecies
        attribute.

        Parameter 'sid' is a string representing the qualitativeSpecies of the
        Input to get.

        Returns the first Input in the ListOfInputs with the given
        qualitativeSpecies or None if no such Input exists.

        See also getInput(), getNumInputs().

        """
        return _libsbml.Transition_getInputBySpecies(self, *args)

    def addInput(self, *args):
        """
        addInput(self, Input i) -> int

        Adds a copy the given 'Input' to this Transition.

        Parameter 'i' is the Input object to add

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Transition_addInput(self, *args)

    def getNumInputs(self):
        """
        getNumInputs(self) -> unsigned int

        Get the number of Input objects in this Transition.

        Returns the number of Input objects in this Transition

        """
        return _libsbml.Transition_getNumInputs(self)

    def createInput(self):
        """
        createInput(self) -> Input

        Creates a new Input object, adds it to this Transitions ListOfInputs
        and returns the Input object created.

        Returns a new Input object instance

        See also addInput().

        """
        return _libsbml.Transition_createInput(self)

    def removeInput(self, *args):
        """
        removeInput(self, unsigned int n) -> Input
        removeInput(self, string sid) -> Input

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeInput(long n)

        Removes the nth Input from the ListOfInputs within this Transition.
        and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the Input to remove.

        See also getNumInputs().

        @par <hr> Method variant with the following signature:

            removeInput(string sid)

        Removes the Input with the given identifier from the ListOfInputs
        within this Transition and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the Input to remove.

        Returns the Input removed. As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.Transition_removeInput(self, *args)

    def getListOfOutputs(self, *args):
        """
        getListOfOutputs(self) -> ListOfOutputs
        getListOfOutputs(self) -> ListOfOutputs

        Returns the  'ListOfOutputs' in this Transition object.

        Returns the 'ListOfOutputs' attribute of this Transition.

        """
        return _libsbml.Transition_getListOfOutputs(self, *args)

    def getOutput(self, *args):
        """
        getOutput(self, unsigned int n) -> Output
        getOutput(self, unsigned int n) -> Output
        getOutput(self, string sid) -> Output
        getOutput(self, string sid) -> Output

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getOutput(long n)

        Get a Output from the ListOfOutputs.

        Parameter 'n' is the index number of the Output to get.

        Returns the nth Output in the ListOfOutputs within this Transition.

        See also getNumOutputs(), getOutput(), getNumOutputs().

        """
        return _libsbml.Transition_getOutput(self, *args)

    def getOutputBySpecies(self, *args):
        """
        getOutputBySpecies(self, string sid) -> Output
        getOutputBySpecies(self, string sid) -> Output

        Get a Output from the ListOfOutputs based on its qualitativeSpecies
        attribute.

        Parameter 'sid' is a string representing the qualitativeSpecies of the
        Output to get.

        Returns the first Output in the ListOfOutputs with the given
        qualitativeSpecies or None if no such Output exists.

        See also getOutput(), getNumOutputs().

        """
        return _libsbml.Transition_getOutputBySpecies(self, *args)

    def addOutput(self, *args):
        """
        addOutput(self, Output o) -> int

        Adds a copy the given 'Output' to this Transition.

        Parameter 'o' is the Output object to add

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Transition_addOutput(self, *args)

    def getNumOutputs(self):
        """
        getNumOutputs(self) -> unsigned int

        Get the number of Output objects in this Transition.

        Returns the number of Output objects in this Transition

        """
        return _libsbml.Transition_getNumOutputs(self)

    def createOutput(self):
        """
        createOutput(self) -> Output

        Creates a new Output object, adds it to this Transitions ListOfOutputs
        and returns the Output object created.

        Returns a new Output object instance

        See also addOutput().

        """
        return _libsbml.Transition_createOutput(self)

    def removeOutput(self, *args):
        """
        removeOutput(self, unsigned int n) -> Output
        removeOutput(self, string sid) -> Output

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeOutput(long n)

        Removes the nth Output from the ListOfOutputs within this Transition.
        and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the Output to remove.

        See also getNumOutputs().

        @par <hr> Method variant with the following signature:

            removeOutput(string sid)

        Removes the Output with the given identifier from the ListOfOutputs
        within this Transition and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the Output to remove.

        Returns the Output removed. As mentioned above, the caller owns the
        returned item.

        """
        return _libsbml.Transition_removeOutput(self, *args)

    def getListOfFunctionTerms(self, *args):
        """
        getListOfFunctionTerms(self) -> ListOfFunctionTerms
        getListOfFunctionTerms(self) -> ListOfFunctionTerms

        Returns the  'ListOfFunctionTerms' in this Transition object.

        Returns the 'ListOfFunctionTerms' attribute of this Transition.

        """
        return _libsbml.Transition_getListOfFunctionTerms(self, *args)

    def getFunctionTerm(self, *args):
        """
        getFunctionTerm(self, unsigned int n) -> FunctionTerm
        getFunctionTerm(self, unsigned int n) -> FunctionTerm
        getFunctionTerm(self, string sid) -> FunctionTerm
        getFunctionTerm(self, string sid) -> FunctionTerm

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            getFunctionTerm(long n)

        Get a FunctionTerm from the ListOfFunctionTerms.

        Parameter 'n' is the index number of the FunctionTerm to get.

        Returns the nth FunctionTerm in the ListOfFunctionTerms within this
        Transition.

        See also getNumFunctionTerms(), getFunctionTerm(),
        getNumFunctionTerms().

        """
        return _libsbml.Transition_getFunctionTerm(self, *args)

    def addFunctionTerm(self, *args):
        """
        addFunctionTerm(self, FunctionTerm ft) -> int

        Adds a copy the given 'FunctionTerm' to this Transition.

        Parameter 'ft' is the FunctionTerm object to add

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Transition_addFunctionTerm(self, *args)

    def getNumFunctionTerms(self):
        """
        getNumFunctionTerms(self) -> unsigned int

        Get the number of FunctionTerm objects in this Transition.

        Returns the number of FunctionTerm objects in this Transition

        """
        return _libsbml.Transition_getNumFunctionTerms(self)

    def createFunctionTerm(self):
        """
        createFunctionTerm(self) -> FunctionTerm

        Creates a new FunctionTerm object, adds it to this Transitions
        ListOfFunctionTerms and returns the FunctionTerm object created.

        Returns a new FunctionTerm object instance

        See also addFunctionTerm().

        """
        return _libsbml.Transition_createFunctionTerm(self)

    def removeFunctionTerm(self, *args):
        """
        removeFunctionTerm(self, unsigned int n) -> FunctionTerm
        removeFunctionTerm(self, string sid) -> FunctionTerm

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            removeFunctionTerm(long n)

        Removes the nth FunctionTerm from the ListOfFunctionTerms within this
        Transition. and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the FunctionTerm to remove.

        See also getNumFunctionTerms().

        @par <hr> Method variant with the following signature:

            removeFunctionTerm(string sid)

        Removes the FunctionTerm with the given identifier from the
        ListOfFunctionTerms within this Transition and returns a pointer to
        it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the FunctionTerm to remove.

        Returns the FunctionTerm removed. As mentioned above, the caller owns
        the returned item.

        """
        return _libsbml.Transition_removeFunctionTerm(self, *args)

    def createDefaultTerm(self):
        """
        createDefaultTerm(self) -> DefaultTerm

        Creates a new DefaultTerm object, adds it to this Transitions
        ListOfFunctionTerms and returns the DefaultTerm object created.

        Returns a new DefaultTerm object instance

        See also setDefaultTerm().

        """
        return _libsbml.Transition_createDefaultTerm(self)

    def setDefaultTerm(self, *args):
        """
        setDefaultTerm(self, DefaultTerm dt) -> int

        Sets the given 'DefaultTerm' to this Transition.

        Parameter 'dt' is the DefaultTerm object to add

        Returns integer value indicating success/failure of the operation. The
        possible return values are:

           * libsbml.LIBSBML_OPERATION_SUCCESS

           * libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE

        """
        return _libsbml.Transition_setDefaultTerm(self, *args)

    def isSetDefaultTerm(self):
        """
        isSetDefaultTerm(self) -> bool

        Predicate returning True if the defaultTerm for this Transition object
        has been set.

        Returns a boolean value indicating whether the defaultTerm child for
        this object has been defined.

        """
        return _libsbml.Transition_isSetDefaultTerm(self)

    def getDefaultTerm(self, *args):
        """
        getDefaultTerm(self) -> DefaultTerm
        getDefaultTerm(self) -> DefaultTerm

        Get the DefaultTerm from the ListOfFunctionTerms.

        Returns the DefaultTerm in the ListOfFunctionTerms within this
        Transition, or None if no such value is set.

        """
        return _libsbml.Transition_getDefaultTerm(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for Transition, is
        always 'transition'.

        Returns the name of this element, i.e. 'transition'.

        """
        return _libsbml.Transition_getElementName(self)

    def getTypeCode(self):
        """
        getTypeCode(self) -> int

        Returns the libSBML type code of this object instance.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for this object:
        libsbml.SBML_QUAL_TRANSITION

        WARNING:

        The specific integer values of the possible type codes may be reused
        by different Level 3 package plug-ins. Thus, to identifiy the correct
        code, it is necessary to invoke both getTypeCode() and
        getPackageName().

        See also getPackageName().

        """
        return _libsbml.Transition_getTypeCode(self)

    def hasRequiredAttributes(self):
        """
        hasRequiredAttributes(self) -> bool

        Predicate returning True if all the required attributes for this
        Transition object have been set.

        Note:

        The required attributes for a Transition object are:

           * 'output'

        Returns a boolean value indicating whether all the required attributes
        for this object have been defined.

        """
        return _libsbml.Transition_hasRequiredAttributes(self)

    def hasRequiredElements(self):
        """
        hasRequiredElements(self) -> bool

        Predicate returning True if all the required attributes for this
        Transition object have been set.

        Note:

        The required elements for a Transition object are:

           * 'output'

        Returns a boolean value indicating whether all the required elements
        for this object have been defined.

        """
        return _libsbml.Transition_hasRequiredElements(self)

    def connectToChild(self):
        """
        connectToChild(self)

        Internal implementation method.

        """
        return _libsbml.Transition_connectToChild(self)

    def enablePackageInternal(self, *args):
        """
        enablePackageInternal(self, string pkgURI, string pkgPrefix, bool flag)

        Internal implementation method.

        """
        return _libsbml.Transition_enablePackageInternal(self, *args)

Transition_swigregister = _libsbml.Transition_swigregister
Transition_swigregister(Transition)

class ListOfTransitions(ListOf):
    """
    [SBML 'qual' package]

     Implementation of the ListOfTransitions construct from the 'qual'
    package.

    The ListOfTransitions is a container for the Transition elements of a
    Model.

    @par The various ListOf___ classes in SBML are merely containers used
    for organizing the main components of an SBML model.  In libSBML's
    implementation, ListOf___ classes are derived from the intermediate
    utility class ListOf, which is not defined by the SBML specifications
    but serves as a useful programmatic construct.  ListOf is itself is in
    turn derived from SBase, which provides all of the various ListOf___
    classes with common features defined by the SBML specification, such
    as 'metaid' attributes and annotations.

    The relationship between the lists and the rest of an SBML model is
    illustrated by the following (for SBML Level 2 Version 4):

      <?xml version="1.0" encoding="UTF-8"?>
      <sbml xmlns="http://www.sbml.org/sbml/level3/version1/core" 
            level="3" version="1">
        <model id="My_Model">
          <listOfFunctionDefinitions>
            <functionDefinition> ... </functionDefinition> 
          </listOfFunctionDefinitions>
          <listOfUnitDefinitions>
            <unitDefinition> ... </unitDefinition> 
          </listOfUnitDefinitions>
          <listOfCompartments>
            <compartment> ... </compartment> 
          </listOfCompartments>
          <listOfSpecies>
            <species> ... </species> 
          </listOfSpecies>
          <listOfParameters>
            <parameter> ... </parameter> 
          </listOfParameters>
          <listOfInitialAssignments>
            <initialAssignment> ... </initialAssignment> 
          </listOfInitialAssignments>
          <listOfRules>
            ... elements of subclasses of Rule ...
          </listOfRules>
          <listOfConstraints>
            <constraint> ... </constraint> 
          </listOfConstraints>
          <listOfReactions>
            <reaction> ... </reaction> 
          </listOfReactions>
          <listOfEvents>
            <event> ... </event> 
          </listOfEvents>
        </model>
      </sbml>

      Readers may wonder about the motivations for using the ListOf___
    containers in SBML.  A simpler approach in XML might be to place the
    components all directly at the top level of the model definition.  The
    choice made in SBML is to group them within XML elements named after
    ListOfClassname, in part because it helps organize the components.
    More importantly, the fact that the container classes are derived from
    SBase means that software tools can add information about the lists
    themselves into each list container's 'annotation'.

    See also ListOfEvents, Transition.

    """
    __swig_setmethods__ = {}
    for _s in [ListOf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfTransitions, name, value)
    __swig_getmethods__ = {}
    for _s in [ListOf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfTransitions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion(), 
            unsigned int pkgVersion = QualExtension::getDefaultPackageVersion()) -> ListOfTransitions
        __init__(self, unsigned int level = QualExtension::getDefaultLevel(), 
            unsigned int version = QualExtension::getDefaultVersion()) -> ListOfTransitions
        __init__(self, unsigned int level = QualExtension::getDefaultLevel()) -> ListOfTransitions
        __init__(self) -> ListOfTransitions
        __init__(self,  qualns) -> ListOfTransitions

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            ListOfTransitions(long level      =
        QualExtension.getDefaultLevel(), long version    =
        QualExtension.getDefaultVersion(), long pkgVersion =
        QualExtension.getDefaultPackageVersion())

        Creates a new ListOfTransitions with the given level, version, and
        package version.

        Parameter 'level' is a long integer, the SBML Level to assign to this
        ListOfTransitions

        Parameter 'version' is a long integer, the SBML Version to assign to
        this ListOfTransitions

        Parameter 'pkgVersion' is a long integer, the SBML Qual Version to
        assign to this ListOfTransitions

        @par <hr> Method variant with the following signature:

            ListOfTransitions(QualPkgNamespaces qualns)

        Creates a new ListOfTransitions with the given QualPkgNamespaces
        object.

        Parameter 'qualns' is the QualPkgNamespaces object

        """
        this = _libsbml.new_ListOfTransitions(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """
        clone(self) -> ListOfTransitions

        Creates and returns a deep copy of this ListOfTransitions object.

        Returns a (deep) copy of this ListOfTransitions object.

        """
        return _libsbml.ListOfTransitions_clone(self)

    def get(self, *args):
        """
        get(self, unsigned int n) -> Transition
        get(self, unsigned int n) -> Transition
        get(self, string sid) -> Transition
        get(self, string sid) -> Transition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            get(long n)

        Get a Transition from the ListOfTransitions.

        Parameter 'n' is the index number of the Transition to get.

        Returns the nth Transition in this ListOfTransitions.

        See also size(), size().

        """
        return _libsbml.ListOfTransitions_get(self, *args)

    def remove(self, *args):
        """
        remove(self, unsigned int n) -> Transition
        remove(self, string sid) -> Transition

        This method has multiple variants that differ in the arguments  they
        accept.  Each is described separately below.

        @par <hr> Method variant with the following signature:

            remove(long n)

        Removes the nth Transition from this ListOfTransitions and returns a
        pointer to it.

        The caller owns the returned item and is responsible for deleting it.

        Parameter 'n' is the index of the Transition to remove.

        See also size().

        @par <hr> Method variant with the following signature:

            remove(string sid)

        Removes the Transition from this ListOfTransitions with the given
        identifier and returns a pointer to it.

        The caller owns the returned item and is responsible for deleting it.
        If none of the items in this list have the identifier 'sid', then None
        is returned.

        Parameter 'sid' is the identifier of the Transition to remove.

        Returns the Transition removed. As mentioned above, the caller owns
        the returned item.

        """
        return _libsbml.ListOfTransitions_remove(self, *args)

    def getElementName(self):
        """
        getElementName(self) -> string

        Returns the XML element name of this object, which for
        ListOfTransitions, is always 'listOfTransitions'.

        Returns the name of this element, i.e. 'listOfTransitions'.

        """
        return _libsbml.ListOfTransitions_getElementName(self)

    def getItemTypeCode(self):
        """
        getItemTypeCode(self) -> int

        Returns the libSBML type code for the SBML objects contained in this
        ListOf object.

        @par  LibSBML attaches an identifying code to every kind of SBML
        object.  These are integer constants known as SBML type codes.  The
        names of all the codes begin with the characters &ldquo;SBML_&rdquo;.
        In the Python language interface for libSBML, the type codes are
        defined as static integer constants in the interface class libsbml.
        Note that different Level 3  package plug-ins may use overlapping type
        codes; to identify the package to which a given object belongs, call
        the getPackageName() method on the object.

        Returns the SBML type code for objects contained in this list:
        libsbml.SBML_QUAL_TRANSITION (default).

        See also getPackageName().

        """
        return _libsbml.ListOfTransitions_getItemTypeCode(self)

    __swig_destroy__ = _libsbml.delete_ListOfTransitions
    __del__ = lambda self : None;
ListOfTransitions_swigregister = _libsbml.ListOfTransitions_swigregister
ListOfTransitions_swigregister(ListOfTransitions)

QualUnknown = _libsbml.QualUnknown
QualNSUndeclared = _libsbml.QualNSUndeclared
QualElementNotInNs = _libsbml.QualElementNotInNs
QualFunctionTermBool = _libsbml.QualFunctionTermBool
QualMathCSymbolDisallowed = _libsbml.QualMathCSymbolDisallowed
QualDuplicateComponentId = _libsbml.QualDuplicateComponentId
QualAttributeRequiredMissing = _libsbml.QualAttributeRequiredMissing
QualAttributeRequiredMustBeBoolean = _libsbml.QualAttributeRequiredMustBeBoolean
QualRequiredTrueIfTransitions = _libsbml.QualRequiredTrueIfTransitions
QualOneListOfTransOrQS = _libsbml.QualOneListOfTransOrQS
QualEmptyLONotAllowed = _libsbml.QualEmptyLONotAllowed
QualLOTransitiondAllowedElements = _libsbml.QualLOTransitiondAllowedElements
QualLOQualSpeciesAllowedElements = _libsbml.QualLOQualSpeciesAllowedElements
QualLOQualSpeciesAllowedAttributes = _libsbml.QualLOQualSpeciesAllowedAttributes
QualLOTransitionsAllowedAttributes = _libsbml.QualLOTransitionsAllowedAttributes
QualQualSpeciesAllowedCoreAttributes = _libsbml.QualQualSpeciesAllowedCoreAttributes
QualQualSpeciesAllowedElements = _libsbml.QualQualSpeciesAllowedElements
QualQualSpeciesAllowedAttributes = _libsbml.QualQualSpeciesAllowedAttributes
QualConstantMustBeBool = _libsbml.QualConstantMustBeBool
QualNameMustBeString = _libsbml.QualNameMustBeString
QualInitialLevelMustBeInt = _libsbml.QualInitialLevelMustBeInt
QualMaxLevelMustBeInt = _libsbml.QualMaxLevelMustBeInt
QualCompartmentMustReferExisting = _libsbml.QualCompartmentMustReferExisting
QualInitialLevelCannotExceedMax = _libsbml.QualInitialLevelCannotExceedMax
QualConstantQSCannotBeOutput = _libsbml.QualConstantQSCannotBeOutput
QualQSAssignedOnlyOnce = _libsbml.QualQSAssignedOnlyOnce
QualInitalLevelNotNegative = _libsbml.QualInitalLevelNotNegative
QualMaxLevelNotNegative = _libsbml.QualMaxLevelNotNegative
QualTransitionAllowedCoreAttributes = _libsbml.QualTransitionAllowedCoreAttributes
QualTransitionAllowedElements = _libsbml.QualTransitionAllowedElements
QualTransitionAllowedAttributes = _libsbml.QualTransitionAllowedAttributes
QualTransitionNameMustBeString = _libsbml.QualTransitionNameMustBeString
QualTransitionLOElements = _libsbml.QualTransitionLOElements
QualTransitionEmptyLOElements = _libsbml.QualTransitionEmptyLOElements
QualTransitionLOInputElements = _libsbml.QualTransitionLOInputElements
QualTransitionLOOutputElements = _libsbml.QualTransitionLOOutputElements
QualTransitionLOFuncTermElements = _libsbml.QualTransitionLOFuncTermElements
QualTransitionLOInputAttributes = _libsbml.QualTransitionLOInputAttributes
QualTransitionLOOutputAttributes = _libsbml.QualTransitionLOOutputAttributes
QualTransitionLOFuncTermAttributes = _libsbml.QualTransitionLOFuncTermAttributes
QualTransitionLOFuncTermExceedMax = _libsbml.QualTransitionLOFuncTermExceedMax
QualTransitionLOFuncTermNegative = _libsbml.QualTransitionLOFuncTermNegative
QualInputAllowedCoreAttributes = _libsbml.QualInputAllowedCoreAttributes
QualInputAllowedElements = _libsbml.QualInputAllowedElements
QualInputAllowedAttributes = _libsbml.QualInputAllowedAttributes
QualInputNameMustBeString = _libsbml.QualInputNameMustBeString
QualInputSignMustBeSignEnum = _libsbml.QualInputSignMustBeSignEnum
QualInputTransEffectMustBeInputEffect = _libsbml.QualInputTransEffectMustBeInputEffect
QualInputThreshMustBeInteger = _libsbml.QualInputThreshMustBeInteger
QualInputQSMustBeExistingQS = _libsbml.QualInputQSMustBeExistingQS
QualInputConstantCannotBeConsumed = _libsbml.QualInputConstantCannotBeConsumed
QualInputThreshMustBeNonNegative = _libsbml.QualInputThreshMustBeNonNegative
QualOutputAllowedCoreAttributes = _libsbml.QualOutputAllowedCoreAttributes
QualOutputAllowedElements = _libsbml.QualOutputAllowedElements
QualOutputAllowedAttributes = _libsbml.QualOutputAllowedAttributes
QualOutputNameMustBeString = _libsbml.QualOutputNameMustBeString
QualOutputTransEffectMustBeOutput = _libsbml.QualOutputTransEffectMustBeOutput
QualOutputLevelMustBeInteger = _libsbml.QualOutputLevelMustBeInteger
QualOutputQSMustBeExistingQS = _libsbml.QualOutputQSMustBeExistingQS
QualOutputConstantMustBeFalse = _libsbml.QualOutputConstantMustBeFalse
QualOutputProductionMustHaveLevel = _libsbml.QualOutputProductionMustHaveLevel
QualOutputLevelMustBeNonNegative = _libsbml.QualOutputLevelMustBeNonNegative
QualDefaultTermAllowedCoreAttributes = _libsbml.QualDefaultTermAllowedCoreAttributes
QualDefaultTermAllowedElements = _libsbml.QualDefaultTermAllowedElements
QualDefaultTermAllowedAttributes = _libsbml.QualDefaultTermAllowedAttributes
QualDefaultTermResultMustBeInteger = _libsbml.QualDefaultTermResultMustBeInteger
QualDefaultTermResultMustBeNonNeg = _libsbml.QualDefaultTermResultMustBeNonNeg
QualFuncTermAllowedCoreAttributes = _libsbml.QualFuncTermAllowedCoreAttributes
QualFuncTermAllowedElements = _libsbml.QualFuncTermAllowedElements
QualFuncTermAllowedAttributes = _libsbml.QualFuncTermAllowedAttributes
QualFuncTermOnlyOneMath = _libsbml.QualFuncTermOnlyOneMath
QualFuncTermResultMustBeInteger = _libsbml.QualFuncTermResultMustBeInteger
QualFuncTermResultMustBeNonNeg = _libsbml.QualFuncTermResultMustBeNonNeg
# This file is compatible with both classic and new-style classes.


