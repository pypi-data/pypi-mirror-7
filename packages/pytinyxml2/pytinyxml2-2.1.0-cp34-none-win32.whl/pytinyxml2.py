# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pytinyxml2', [dirname(__file__)])
        except ImportError:
            import _pytinyxml2
            return _pytinyxml2
        if fp is not None:
            try:
                _mod = imp.load_module('_pytinyxml2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pytinyxml2 = swig_import_helper()
    del swig_import_helper
else:
    import _pytinyxml2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class StrPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrPair, name)
    __repr__ = _swig_repr
    NEEDS_ENTITY_PROCESSING = _pytinyxml2.StrPair_NEEDS_ENTITY_PROCESSING
    NEEDS_NEWLINE_NORMALIZATION = _pytinyxml2.StrPair_NEEDS_NEWLINE_NORMALIZATION
    COLLAPSE_WHITESPACE = _pytinyxml2.StrPair_COLLAPSE_WHITESPACE
    TEXT_ELEMENT = _pytinyxml2.StrPair_TEXT_ELEMENT
    TEXT_ELEMENT_LEAVE_ENTITIES = _pytinyxml2.StrPair_TEXT_ELEMENT_LEAVE_ENTITIES
    ATTRIBUTE_NAME = _pytinyxml2.StrPair_ATTRIBUTE_NAME
    ATTRIBUTE_VALUE = _pytinyxml2.StrPair_ATTRIBUTE_VALUE
    ATTRIBUTE_VALUE_LEAVE_ENTITIES = _pytinyxml2.StrPair_ATTRIBUTE_VALUE_LEAVE_ENTITIES
    COMMENT = _pytinyxml2.StrPair_COMMENT
    def __init__(self): 
        this = _pytinyxml2.new_StrPair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytinyxml2.delete_StrPair
    __del__ = lambda self : None;
    def Set(self, *args): return _pytinyxml2.StrPair_Set(self, *args)
    def GetStr(self): return _pytinyxml2.StrPair_GetStr(self)
    def Empty(self): return _pytinyxml2.StrPair_Empty(self)
    def SetInternedStr(self, *args): return _pytinyxml2.StrPair_SetInternedStr(self, *args)
    def SetStr(self, *args): return _pytinyxml2.StrPair_SetStr(self, *args)
    def ParseText(self, *args): return _pytinyxml2.StrPair_ParseText(self, *args)
    def ParseName(self, *args): return _pytinyxml2.StrPair_ParseName(self, *args)
StrPair_swigregister = _pytinyxml2.StrPair_swigregister
StrPair_swigregister(StrPair)
cvar = _pytinyxml2.cvar
TIXML2_MAJOR_VERSION = cvar.TIXML2_MAJOR_VERSION
TIXML2_MINOR_VERSION = cvar.TIXML2_MINOR_VERSION
TIXML2_PATCH_VERSION = cvar.TIXML2_PATCH_VERSION

class MemPool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemPool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemPool, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pytinyxml2.delete_MemPool
    __del__ = lambda self : None;
    def ItemSize(self): return _pytinyxml2.MemPool_ItemSize(self)
    def Alloc(self): return _pytinyxml2.MemPool_Alloc(self)
    def Free(self, *args): return _pytinyxml2.MemPool_Free(self, *args)
    def SetTracked(self): return _pytinyxml2.MemPool_SetTracked(self)
MemPool_swigregister = _pytinyxml2.MemPool_swigregister
MemPool_swigregister(MemPool)

class XMLVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLVisitor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pytinyxml2.delete_XMLVisitor
    __del__ = lambda self : None;
    def VisitEnter(self, *args): return _pytinyxml2.XMLVisitor_VisitEnter(self, *args)
    def VisitExit(self, *args): return _pytinyxml2.XMLVisitor_VisitExit(self, *args)
    def Visit(self, *args): return _pytinyxml2.XMLVisitor_Visit(self, *args)
    def __init__(self): 
        this = _pytinyxml2.new_XMLVisitor()
        try: self.this.append(this)
        except: self.this = this
XMLVisitor_swigregister = _pytinyxml2.XMLVisitor_swigregister
XMLVisitor_swigregister(XMLVisitor)

class XMLUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLUtil, name)
    __repr__ = _swig_repr
    __swig_getmethods__["SkipWhiteSpace"] = lambda x: _pytinyxml2.XMLUtil_SkipWhiteSpace
    if _newclass:SkipWhiteSpace = staticmethod(_pytinyxml2.XMLUtil_SkipWhiteSpace)
    __swig_getmethods__["IsWhiteSpace"] = lambda x: _pytinyxml2.XMLUtil_IsWhiteSpace
    if _newclass:IsWhiteSpace = staticmethod(_pytinyxml2.XMLUtil_IsWhiteSpace)
    __swig_getmethods__["IsNameStartChar"] = lambda x: _pytinyxml2.XMLUtil_IsNameStartChar
    if _newclass:IsNameStartChar = staticmethod(_pytinyxml2.XMLUtil_IsNameStartChar)
    __swig_getmethods__["IsNameChar"] = lambda x: _pytinyxml2.XMLUtil_IsNameChar
    if _newclass:IsNameChar = staticmethod(_pytinyxml2.XMLUtil_IsNameChar)
    __swig_getmethods__["StringEqual"] = lambda x: _pytinyxml2.XMLUtil_StringEqual
    if _newclass:StringEqual = staticmethod(_pytinyxml2.XMLUtil_StringEqual)
    __swig_getmethods__["IsUTF8Continuation"] = lambda x: _pytinyxml2.XMLUtil_IsUTF8Continuation
    if _newclass:IsUTF8Continuation = staticmethod(_pytinyxml2.XMLUtil_IsUTF8Continuation)
    __swig_getmethods__["ReadBOM"] = lambda x: _pytinyxml2.XMLUtil_ReadBOM
    if _newclass:ReadBOM = staticmethod(_pytinyxml2.XMLUtil_ReadBOM)
    __swig_getmethods__["GetCharacterRef"] = lambda x: _pytinyxml2.XMLUtil_GetCharacterRef
    if _newclass:GetCharacterRef = staticmethod(_pytinyxml2.XMLUtil_GetCharacterRef)
    __swig_getmethods__["ConvertUTF32ToUTF8"] = lambda x: _pytinyxml2.XMLUtil_ConvertUTF32ToUTF8
    if _newclass:ConvertUTF32ToUTF8 = staticmethod(_pytinyxml2.XMLUtil_ConvertUTF32ToUTF8)
    __swig_getmethods__["ToStr"] = lambda x: _pytinyxml2.XMLUtil_ToStr
    if _newclass:ToStr = staticmethod(_pytinyxml2.XMLUtil_ToStr)
    __swig_getmethods__["ToInt"] = lambda x: _pytinyxml2.XMLUtil_ToInt
    if _newclass:ToInt = staticmethod(_pytinyxml2.XMLUtil_ToInt)
    __swig_getmethods__["ToUnsigned"] = lambda x: _pytinyxml2.XMLUtil_ToUnsigned
    if _newclass:ToUnsigned = staticmethod(_pytinyxml2.XMLUtil_ToUnsigned)
    __swig_getmethods__["ToBool"] = lambda x: _pytinyxml2.XMLUtil_ToBool
    if _newclass:ToBool = staticmethod(_pytinyxml2.XMLUtil_ToBool)
    __swig_getmethods__["ToFloat"] = lambda x: _pytinyxml2.XMLUtil_ToFloat
    if _newclass:ToFloat = staticmethod(_pytinyxml2.XMLUtil_ToFloat)
    __swig_getmethods__["ToDouble"] = lambda x: _pytinyxml2.XMLUtil_ToDouble
    if _newclass:ToDouble = staticmethod(_pytinyxml2.XMLUtil_ToDouble)
    def __init__(self): 
        this = _pytinyxml2.new_XMLUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytinyxml2.delete_XMLUtil
    __del__ = lambda self : None;
XMLUtil_swigregister = _pytinyxml2.XMLUtil_swigregister
XMLUtil_swigregister(XMLUtil)

def XMLUtil_SkipWhiteSpace(*args):
  return _pytinyxml2.XMLUtil_SkipWhiteSpace(*args)
XMLUtil_SkipWhiteSpace = _pytinyxml2.XMLUtil_SkipWhiteSpace

def XMLUtil_IsWhiteSpace(*args):
  return _pytinyxml2.XMLUtil_IsWhiteSpace(*args)
XMLUtil_IsWhiteSpace = _pytinyxml2.XMLUtil_IsWhiteSpace

def XMLUtil_IsNameStartChar(*args):
  return _pytinyxml2.XMLUtil_IsNameStartChar(*args)
XMLUtil_IsNameStartChar = _pytinyxml2.XMLUtil_IsNameStartChar

def XMLUtil_IsNameChar(*args):
  return _pytinyxml2.XMLUtil_IsNameChar(*args)
XMLUtil_IsNameChar = _pytinyxml2.XMLUtil_IsNameChar

def XMLUtil_StringEqual(*args):
  return _pytinyxml2.XMLUtil_StringEqual(*args)
XMLUtil_StringEqual = _pytinyxml2.XMLUtil_StringEqual

def XMLUtil_IsUTF8Continuation(*args):
  return _pytinyxml2.XMLUtil_IsUTF8Continuation(*args)
XMLUtil_IsUTF8Continuation = _pytinyxml2.XMLUtil_IsUTF8Continuation

def XMLUtil_ReadBOM(*args):
  return _pytinyxml2.XMLUtil_ReadBOM(*args)
XMLUtil_ReadBOM = _pytinyxml2.XMLUtil_ReadBOM

def XMLUtil_GetCharacterRef(*args):
  return _pytinyxml2.XMLUtil_GetCharacterRef(*args)
XMLUtil_GetCharacterRef = _pytinyxml2.XMLUtil_GetCharacterRef

def XMLUtil_ConvertUTF32ToUTF8(*args):
  return _pytinyxml2.XMLUtil_ConvertUTF32ToUTF8(*args)
XMLUtil_ConvertUTF32ToUTF8 = _pytinyxml2.XMLUtil_ConvertUTF32ToUTF8

def XMLUtil_ToStr(*args):
  return _pytinyxml2.XMLUtil_ToStr(*args)
XMLUtil_ToStr = _pytinyxml2.XMLUtil_ToStr

def XMLUtil_ToInt(*args):
  return _pytinyxml2.XMLUtil_ToInt(*args)
XMLUtil_ToInt = _pytinyxml2.XMLUtil_ToInt

def XMLUtil_ToUnsigned(*args):
  return _pytinyxml2.XMLUtil_ToUnsigned(*args)
XMLUtil_ToUnsigned = _pytinyxml2.XMLUtil_ToUnsigned

def XMLUtil_ToBool(*args):
  return _pytinyxml2.XMLUtil_ToBool(*args)
XMLUtil_ToBool = _pytinyxml2.XMLUtil_ToBool

def XMLUtil_ToFloat(*args):
  return _pytinyxml2.XMLUtil_ToFloat(*args)
XMLUtil_ToFloat = _pytinyxml2.XMLUtil_ToFloat

def XMLUtil_ToDouble(*args):
  return _pytinyxml2.XMLUtil_ToDouble(*args)
XMLUtil_ToDouble = _pytinyxml2.XMLUtil_ToDouble

class XMLNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetDocument(self, *args): return _pytinyxml2.XMLNode_GetDocument(self, *args)
    def ToElement(self, *args): return _pytinyxml2.XMLNode_ToElement(self, *args)
    def ToText(self, *args): return _pytinyxml2.XMLNode_ToText(self, *args)
    def ToComment(self, *args): return _pytinyxml2.XMLNode_ToComment(self, *args)
    def ToDocument(self, *args): return _pytinyxml2.XMLNode_ToDocument(self, *args)
    def ToDeclaration(self, *args): return _pytinyxml2.XMLNode_ToDeclaration(self, *args)
    def ToUnknown(self, *args): return _pytinyxml2.XMLNode_ToUnknown(self, *args)
    def Value(self): return _pytinyxml2.XMLNode_Value(self)
    def SetValue(self, *args): return _pytinyxml2.XMLNode_SetValue(self, *args)
    def Parent(self, *args): return _pytinyxml2.XMLNode_Parent(self, *args)
    def NoChildren(self): return _pytinyxml2.XMLNode_NoChildren(self)
    def FirstChild(self, *args): return _pytinyxml2.XMLNode_FirstChild(self, *args)
    def FirstChildElement(self, *args): return _pytinyxml2.XMLNode_FirstChildElement(self, *args)
    def LastChild(self, *args): return _pytinyxml2.XMLNode_LastChild(self, *args)
    def LastChildElement(self, *args): return _pytinyxml2.XMLNode_LastChildElement(self, *args)
    def PreviousSibling(self, *args): return _pytinyxml2.XMLNode_PreviousSibling(self, *args)
    def PreviousSiblingElement(self, *args): return _pytinyxml2.XMLNode_PreviousSiblingElement(self, *args)
    def NextSibling(self, *args): return _pytinyxml2.XMLNode_NextSibling(self, *args)
    def NextSiblingElement(self, *args): return _pytinyxml2.XMLNode_NextSiblingElement(self, *args)
    def InsertEndChild(self, *args): return _pytinyxml2.XMLNode_InsertEndChild(self, *args)
    def LinkEndChild(self, *args): return _pytinyxml2.XMLNode_LinkEndChild(self, *args)
    def InsertFirstChild(self, *args): return _pytinyxml2.XMLNode_InsertFirstChild(self, *args)
    def InsertAfterChild(self, *args): return _pytinyxml2.XMLNode_InsertAfterChild(self, *args)
    def DeleteChildren(self): return _pytinyxml2.XMLNode_DeleteChildren(self)
    def DeleteChild(self, *args): return _pytinyxml2.XMLNode_DeleteChild(self, *args)
    def ShallowClone(self, *args): return _pytinyxml2.XMLNode_ShallowClone(self, *args)
    def ShallowEqual(self, *args): return _pytinyxml2.XMLNode_ShallowEqual(self, *args)
    def Accept(self, *args): return _pytinyxml2.XMLNode_Accept(self, *args)
    def ParseDeep(self, *args): return _pytinyxml2.XMLNode_ParseDeep(self, *args)
XMLNode_swigregister = _pytinyxml2.XMLNode_swigregister
XMLNode_swigregister(XMLNode)

class XMLText(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLText, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLText, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Accept(self, *args): return _pytinyxml2.XMLText_Accept(self, *args)
    def ToText(self, *args): return _pytinyxml2.XMLText_ToText(self, *args)
    def SetCData(self, *args): return _pytinyxml2.XMLText_SetCData(self, *args)
    def CData(self): return _pytinyxml2.XMLText_CData(self)
    def ParseDeep(self, *args): return _pytinyxml2.XMLText_ParseDeep(self, *args)
    def ShallowClone(self, *args): return _pytinyxml2.XMLText_ShallowClone(self, *args)
    def ShallowEqual(self, *args): return _pytinyxml2.XMLText_ShallowEqual(self, *args)
XMLText_swigregister = _pytinyxml2.XMLText_swigregister
XMLText_swigregister(XMLText)

class XMLComment(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLComment, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLComment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def ToComment(self, *args): return _pytinyxml2.XMLComment_ToComment(self, *args)
    def Accept(self, *args): return _pytinyxml2.XMLComment_Accept(self, *args)
    def ParseDeep(self, *args): return _pytinyxml2.XMLComment_ParseDeep(self, *args)
    def ShallowClone(self, *args): return _pytinyxml2.XMLComment_ShallowClone(self, *args)
    def ShallowEqual(self, *args): return _pytinyxml2.XMLComment_ShallowEqual(self, *args)
XMLComment_swigregister = _pytinyxml2.XMLComment_swigregister
XMLComment_swigregister(XMLComment)

class XMLDeclaration(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLDeclaration, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLDeclaration, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def ToDeclaration(self, *args): return _pytinyxml2.XMLDeclaration_ToDeclaration(self, *args)
    def Accept(self, *args): return _pytinyxml2.XMLDeclaration_Accept(self, *args)
    def ParseDeep(self, *args): return _pytinyxml2.XMLDeclaration_ParseDeep(self, *args)
    def ShallowClone(self, *args): return _pytinyxml2.XMLDeclaration_ShallowClone(self, *args)
    def ShallowEqual(self, *args): return _pytinyxml2.XMLDeclaration_ShallowEqual(self, *args)
XMLDeclaration_swigregister = _pytinyxml2.XMLDeclaration_swigregister
XMLDeclaration_swigregister(XMLDeclaration)

class XMLUnknown(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLUnknown, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLUnknown, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def ToUnknown(self, *args): return _pytinyxml2.XMLUnknown_ToUnknown(self, *args)
    def Accept(self, *args): return _pytinyxml2.XMLUnknown_Accept(self, *args)
    def ParseDeep(self, *args): return _pytinyxml2.XMLUnknown_ParseDeep(self, *args)
    def ShallowClone(self, *args): return _pytinyxml2.XMLUnknown_ShallowClone(self, *args)
    def ShallowEqual(self, *args): return _pytinyxml2.XMLUnknown_ShallowEqual(self, *args)
XMLUnknown_swigregister = _pytinyxml2.XMLUnknown_swigregister
XMLUnknown_swigregister(XMLUnknown)

XML_NO_ERROR = _pytinyxml2.XML_NO_ERROR
XML_SUCCESS = _pytinyxml2.XML_SUCCESS
XML_NO_ATTRIBUTE = _pytinyxml2.XML_NO_ATTRIBUTE
XML_WRONG_ATTRIBUTE_TYPE = _pytinyxml2.XML_WRONG_ATTRIBUTE_TYPE
XML_ERROR_FILE_NOT_FOUND = _pytinyxml2.XML_ERROR_FILE_NOT_FOUND
XML_ERROR_FILE_COULD_NOT_BE_OPENED = _pytinyxml2.XML_ERROR_FILE_COULD_NOT_BE_OPENED
XML_ERROR_FILE_READ_ERROR = _pytinyxml2.XML_ERROR_FILE_READ_ERROR
XML_ERROR_ELEMENT_MISMATCH = _pytinyxml2.XML_ERROR_ELEMENT_MISMATCH
XML_ERROR_PARSING_ELEMENT = _pytinyxml2.XML_ERROR_PARSING_ELEMENT
XML_ERROR_PARSING_ATTRIBUTE = _pytinyxml2.XML_ERROR_PARSING_ATTRIBUTE
XML_ERROR_IDENTIFYING_TAG = _pytinyxml2.XML_ERROR_IDENTIFYING_TAG
XML_ERROR_PARSING_TEXT = _pytinyxml2.XML_ERROR_PARSING_TEXT
XML_ERROR_PARSING_CDATA = _pytinyxml2.XML_ERROR_PARSING_CDATA
XML_ERROR_PARSING_COMMENT = _pytinyxml2.XML_ERROR_PARSING_COMMENT
XML_ERROR_PARSING_DECLARATION = _pytinyxml2.XML_ERROR_PARSING_DECLARATION
XML_ERROR_PARSING_UNKNOWN = _pytinyxml2.XML_ERROR_PARSING_UNKNOWN
XML_ERROR_EMPTY_DOCUMENT = _pytinyxml2.XML_ERROR_EMPTY_DOCUMENT
XML_ERROR_MISMATCHED_ELEMENT = _pytinyxml2.XML_ERROR_MISMATCHED_ELEMENT
XML_ERROR_PARSING = _pytinyxml2.XML_ERROR_PARSING
XML_CAN_NOT_CONVERT_TEXT = _pytinyxml2.XML_CAN_NOT_CONVERT_TEXT
XML_NO_TEXT_NODE = _pytinyxml2.XML_NO_TEXT_NODE
class XMLAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLAttribute, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Name(self): return _pytinyxml2.XMLAttribute_Name(self)
    def Value(self): return _pytinyxml2.XMLAttribute_Value(self)
    def Next(self): return _pytinyxml2.XMLAttribute_Next(self)
    def IntValue(self): return _pytinyxml2.XMLAttribute_IntValue(self)
    def UnsignedValue(self): return _pytinyxml2.XMLAttribute_UnsignedValue(self)
    def BoolValue(self): return _pytinyxml2.XMLAttribute_BoolValue(self)
    def DoubleValue(self): return _pytinyxml2.XMLAttribute_DoubleValue(self)
    def FloatValue(self): return _pytinyxml2.XMLAttribute_FloatValue(self)
    def QueryIntValue(self, *args): return _pytinyxml2.XMLAttribute_QueryIntValue(self, *args)
    def QueryUnsignedValue(self, *args): return _pytinyxml2.XMLAttribute_QueryUnsignedValue(self, *args)
    def QueryBoolValue(self, *args): return _pytinyxml2.XMLAttribute_QueryBoolValue(self, *args)
    def QueryDoubleValue(self, *args): return _pytinyxml2.XMLAttribute_QueryDoubleValue(self, *args)
    def QueryFloatValue(self, *args): return _pytinyxml2.XMLAttribute_QueryFloatValue(self, *args)
    def SetAttribute(self, *args): return _pytinyxml2.XMLAttribute_SetAttribute(self, *args)
XMLAttribute_swigregister = _pytinyxml2.XMLAttribute_swigregister
XMLAttribute_swigregister(XMLAttribute)

class XMLElement(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLElement, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLElement, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Name(self): return _pytinyxml2.XMLElement_Name(self)
    def SetName(self, *args): return _pytinyxml2.XMLElement_SetName(self, *args)
    def ToElement(self, *args): return _pytinyxml2.XMLElement_ToElement(self, *args)
    def Accept(self, *args): return _pytinyxml2.XMLElement_Accept(self, *args)
    def Attribute(self, *args): return _pytinyxml2.XMLElement_Attribute(self, *args)
    def IntAttribute(self, *args): return _pytinyxml2.XMLElement_IntAttribute(self, *args)
    def UnsignedAttribute(self, *args): return _pytinyxml2.XMLElement_UnsignedAttribute(self, *args)
    def BoolAttribute(self, *args): return _pytinyxml2.XMLElement_BoolAttribute(self, *args)
    def DoubleAttribute(self, *args): return _pytinyxml2.XMLElement_DoubleAttribute(self, *args)
    def FloatAttribute(self, *args): return _pytinyxml2.XMLElement_FloatAttribute(self, *args)
    def QueryIntAttribute(self, *args): return _pytinyxml2.XMLElement_QueryIntAttribute(self, *args)
    def QueryUnsignedAttribute(self, *args): return _pytinyxml2.XMLElement_QueryUnsignedAttribute(self, *args)
    def QueryBoolAttribute(self, *args): return _pytinyxml2.XMLElement_QueryBoolAttribute(self, *args)
    def QueryDoubleAttribute(self, *args): return _pytinyxml2.XMLElement_QueryDoubleAttribute(self, *args)
    def QueryFloatAttribute(self, *args): return _pytinyxml2.XMLElement_QueryFloatAttribute(self, *args)
    def QueryAttribute(self, *args): return _pytinyxml2.XMLElement_QueryAttribute(self, *args)
    def SetAttribute(self, *args): return _pytinyxml2.XMLElement_SetAttribute(self, *args)
    def DeleteAttribute(self, *args): return _pytinyxml2.XMLElement_DeleteAttribute(self, *args)
    def FirstAttribute(self): return _pytinyxml2.XMLElement_FirstAttribute(self)
    def FindAttribute(self, *args): return _pytinyxml2.XMLElement_FindAttribute(self, *args)
    def GetText(self): return _pytinyxml2.XMLElement_GetText(self)
    def SetText(self, *args): return _pytinyxml2.XMLElement_SetText(self, *args)
    def QueryIntText(self, *args): return _pytinyxml2.XMLElement_QueryIntText(self, *args)
    def QueryUnsignedText(self, *args): return _pytinyxml2.XMLElement_QueryUnsignedText(self, *args)
    def QueryBoolText(self, *args): return _pytinyxml2.XMLElement_QueryBoolText(self, *args)
    def QueryDoubleText(self, *args): return _pytinyxml2.XMLElement_QueryDoubleText(self, *args)
    def QueryFloatText(self, *args): return _pytinyxml2.XMLElement_QueryFloatText(self, *args)
    OPEN = _pytinyxml2.XMLElement_OPEN
    CLOSED = _pytinyxml2.XMLElement_CLOSED
    CLOSING = _pytinyxml2.XMLElement_CLOSING
    def ClosingType(self): return _pytinyxml2.XMLElement_ClosingType(self)
    def ParseDeep(self, *args): return _pytinyxml2.XMLElement_ParseDeep(self, *args)
    def ShallowClone(self, *args): return _pytinyxml2.XMLElement_ShallowClone(self, *args)
    def ShallowEqual(self, *args): return _pytinyxml2.XMLElement_ShallowEqual(self, *args)
XMLElement_swigregister = _pytinyxml2.XMLElement_swigregister
XMLElement_swigregister(XMLElement)

PRESERVE_WHITESPACE = _pytinyxml2.PRESERVE_WHITESPACE
COLLAPSE_WHITESPACE = _pytinyxml2.COLLAPSE_WHITESPACE
class XMLDocument(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLDocument, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytinyxml2.new_XMLDocument(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytinyxml2.delete_XMLDocument
    __del__ = lambda self : None;
    def ToDocument(self, *args): return _pytinyxml2.XMLDocument_ToDocument(self, *args)
    def Parse(self, *args): return _pytinyxml2.XMLDocument_Parse(self, *args)
    def LoadFile(self, *args): return _pytinyxml2.XMLDocument_LoadFile(self, *args)
    def SaveFile(self, *args): return _pytinyxml2.XMLDocument_SaveFile(self, *args)
    def ProcessEntities(self): return _pytinyxml2.XMLDocument_ProcessEntities(self)
    def WhitespaceMode(self): return _pytinyxml2.XMLDocument_WhitespaceMode(self)
    def HasBOM(self): return _pytinyxml2.XMLDocument_HasBOM(self)
    def SetBOM(self, *args): return _pytinyxml2.XMLDocument_SetBOM(self, *args)
    def RootElement(self, *args): return _pytinyxml2.XMLDocument_RootElement(self, *args)
    def Print(self, streamer=None): return _pytinyxml2.XMLDocument_Print(self, streamer)
    def Accept(self, *args): return _pytinyxml2.XMLDocument_Accept(self, *args)
    def NewElement(self, *args): return _pytinyxml2.XMLDocument_NewElement(self, *args)
    def NewComment(self, *args): return _pytinyxml2.XMLDocument_NewComment(self, *args)
    def NewText(self, *args): return _pytinyxml2.XMLDocument_NewText(self, *args)
    def NewDeclaration(self, text=None): return _pytinyxml2.XMLDocument_NewDeclaration(self, text)
    def NewUnknown(self, *args): return _pytinyxml2.XMLDocument_NewUnknown(self, *args)
    def DeleteNode(self, *args): return _pytinyxml2.XMLDocument_DeleteNode(self, *args)
    def SetError(self, *args): return _pytinyxml2.XMLDocument_SetError(self, *args)
    def Error(self): return _pytinyxml2.XMLDocument_Error(self)
    def ErrorID(self): return _pytinyxml2.XMLDocument_ErrorID(self)
    def GetErrorStr1(self): return _pytinyxml2.XMLDocument_GetErrorStr1(self)
    def GetErrorStr2(self): return _pytinyxml2.XMLDocument_GetErrorStr2(self)
    def PrintError(self): return _pytinyxml2.XMLDocument_PrintError(self)
    def Clear(self): return _pytinyxml2.XMLDocument_Clear(self)
    def Identify(self, *args): return _pytinyxml2.XMLDocument_Identify(self, *args)
    def ShallowClone(self, *args): return _pytinyxml2.XMLDocument_ShallowClone(self, *args)
    def ShallowEqual(self, *args): return _pytinyxml2.XMLDocument_ShallowEqual(self, *args)
XMLDocument_swigregister = _pytinyxml2.XMLDocument_swigregister
XMLDocument_swigregister(XMLDocument)

class XMLHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLHandle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytinyxml2.new_XMLHandle(*args)
        try: self.this.append(this)
        except: self.this = this
    def FirstChild(self): return _pytinyxml2.XMLHandle_FirstChild(self)
    def FirstChildElement(self, value=None): return _pytinyxml2.XMLHandle_FirstChildElement(self, value)
    def LastChild(self): return _pytinyxml2.XMLHandle_LastChild(self)
    def LastChildElement(self, _value=None): return _pytinyxml2.XMLHandle_LastChildElement(self, _value)
    def PreviousSibling(self): return _pytinyxml2.XMLHandle_PreviousSibling(self)
    def PreviousSiblingElement(self, _value=None): return _pytinyxml2.XMLHandle_PreviousSiblingElement(self, _value)
    def NextSibling(self): return _pytinyxml2.XMLHandle_NextSibling(self)
    def NextSiblingElement(self, _value=None): return _pytinyxml2.XMLHandle_NextSiblingElement(self, _value)
    def ToNode(self): return _pytinyxml2.XMLHandle_ToNode(self)
    def ToElement(self): return _pytinyxml2.XMLHandle_ToElement(self)
    def ToText(self): return _pytinyxml2.XMLHandle_ToText(self)
    def ToUnknown(self): return _pytinyxml2.XMLHandle_ToUnknown(self)
    def ToDeclaration(self): return _pytinyxml2.XMLHandle_ToDeclaration(self)
    __swig_destroy__ = _pytinyxml2.delete_XMLHandle
    __del__ = lambda self : None;
XMLHandle_swigregister = _pytinyxml2.XMLHandle_swigregister
XMLHandle_swigregister(XMLHandle)

class XMLConstHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLConstHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLConstHandle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytinyxml2.new_XMLConstHandle(*args)
        try: self.this.append(this)
        except: self.this = this
    def FirstChild(self): return _pytinyxml2.XMLConstHandle_FirstChild(self)
    def FirstChildElement(self, value=None): return _pytinyxml2.XMLConstHandle_FirstChildElement(self, value)
    def LastChild(self): return _pytinyxml2.XMLConstHandle_LastChild(self)
    def LastChildElement(self, _value=None): return _pytinyxml2.XMLConstHandle_LastChildElement(self, _value)
    def PreviousSibling(self): return _pytinyxml2.XMLConstHandle_PreviousSibling(self)
    def PreviousSiblingElement(self, _value=None): return _pytinyxml2.XMLConstHandle_PreviousSiblingElement(self, _value)
    def NextSibling(self): return _pytinyxml2.XMLConstHandle_NextSibling(self)
    def NextSiblingElement(self, _value=None): return _pytinyxml2.XMLConstHandle_NextSiblingElement(self, _value)
    def ToNode(self): return _pytinyxml2.XMLConstHandle_ToNode(self)
    def ToElement(self): return _pytinyxml2.XMLConstHandle_ToElement(self)
    def ToText(self): return _pytinyxml2.XMLConstHandle_ToText(self)
    def ToUnknown(self): return _pytinyxml2.XMLConstHandle_ToUnknown(self)
    def ToDeclaration(self): return _pytinyxml2.XMLConstHandle_ToDeclaration(self)
    __swig_destroy__ = _pytinyxml2.delete_XMLConstHandle
    __del__ = lambda self : None;
XMLConstHandle_swigregister = _pytinyxml2.XMLConstHandle_swigregister
XMLConstHandle_swigregister(XMLConstHandle)

class XMLPrinter(XMLVisitor):
    __swig_setmethods__ = {}
    for _s in [XMLVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLPrinter, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLPrinter, name)
    __repr__ = _swig_repr
    def __init__(self, file=None, compact=False, depth=0): 
        this = _pytinyxml2.new_XMLPrinter(file, compact, depth)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytinyxml2.delete_XMLPrinter
    __del__ = lambda self : None;
    def PushHeader(self, *args): return _pytinyxml2.XMLPrinter_PushHeader(self, *args)
    def OpenElement(self, *args): return _pytinyxml2.XMLPrinter_OpenElement(self, *args)
    def PushAttribute(self, *args): return _pytinyxml2.XMLPrinter_PushAttribute(self, *args)
    def CloseElement(self, compactMode=False): return _pytinyxml2.XMLPrinter_CloseElement(self, compactMode)
    def PushText(self, *args): return _pytinyxml2.XMLPrinter_PushText(self, *args)
    def PushComment(self, *args): return _pytinyxml2.XMLPrinter_PushComment(self, *args)
    def PushDeclaration(self, *args): return _pytinyxml2.XMLPrinter_PushDeclaration(self, *args)
    def PushUnknown(self, *args): return _pytinyxml2.XMLPrinter_PushUnknown(self, *args)
    def VisitEnter(self, *args): return _pytinyxml2.XMLPrinter_VisitEnter(self, *args)
    def VisitExit(self, *args): return _pytinyxml2.XMLPrinter_VisitExit(self, *args)
    def Visit(self, *args): return _pytinyxml2.XMLPrinter_Visit(self, *args)
    def CStr(self): return _pytinyxml2.XMLPrinter_CStr(self)
    def CStrSize(self): return _pytinyxml2.XMLPrinter_CStrSize(self)
    def ClearBuffer(self): return _pytinyxml2.XMLPrinter_ClearBuffer(self)
XMLPrinter_swigregister = _pytinyxml2.XMLPrinter_swigregister
XMLPrinter_swigregister(XMLPrinter)

# This file is compatible with both classic and new-style classes.


