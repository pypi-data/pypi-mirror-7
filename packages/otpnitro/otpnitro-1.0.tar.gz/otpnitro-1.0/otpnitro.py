# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_otpnitro', [dirname(__file__)])
        except ImportError:
            import _otpnitro
            return _otpnitro
        if fp is not None:
            try:
                _mod = imp.load_module('_otpnitro', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _otpnitro = swig_import_helper()
    del swig_import_helper
else:
    import _otpnitro
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Page(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Page, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otpnitro.new_Page()
        try: self.this.append(this)
        except: self.this = this
    def generate(self, *args): return _otpnitro.Page_generate(self, *args)
    def write(self, *args): return _otpnitro.Page_write(self, *args)
    def next(self, *args): return _otpnitro.Page_next(self, *args)
    def burn(self, *args): return _otpnitro.Page_burn(self, *args)
    def read(self, *args): return _otpnitro.Page_read(self, *args)
    def get(self): return _otpnitro.Page_get(self)
    def list(self): return _otpnitro.Page_list(self)
    __swig_destroy__ = _otpnitro.delete_Page
    __del__ = lambda self : None;
Page_swigregister = _otpnitro.Page_swigregister
Page_swigregister(Page)

class Rand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rand, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otpnitro.new_Rand()
        try: self.this.append(this)
        except: self.this = this
    def getTicks(self): return _otpnitro.Rand_getTicks(self)
    def setSeed(self, *args): return _otpnitro.Rand_setSeed(self, *args)
    def getSeed(self): return _otpnitro.Rand_getSeed(self)
    def genSeed(self): return _otpnitro.Rand_genSeed(self)
    def getChar(self): return _otpnitro.Rand_getChar(self)
    def getLetter(self): return _otpnitro.Rand_getLetter(self)
    def getNumber(self, *args): return _otpnitro.Rand_getNumber(self, *args)
    __swig_destroy__ = _otpnitro.delete_Rand
    __del__ = lambda self : None;
Rand_swigregister = _otpnitro.Rand_swigregister
Rand_swigregister(Rand)

class Text(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg"] = _otpnitro.Text_msg_set
    __swig_getmethods__["msg"] = _otpnitro.Text_msg_get
    if _newclass:msg = _swig_property(_otpnitro.Text_msg_get, _otpnitro.Text_msg_set)
    __swig_setmethods__["book"] = _otpnitro.Text_book_set
    __swig_getmethods__["book"] = _otpnitro.Text_book_get
    if _newclass:book = _swig_property(_otpnitro.Text_book_get, _otpnitro.Text_book_set)
    __swig_setmethods__["_from"] = _otpnitro.Text__from_set
    __swig_getmethods__["_from"] = _otpnitro.Text__from_get
    if _newclass:_from = _swig_property(_otpnitro.Text__from_get, _otpnitro.Text__from_set)
    __swig_setmethods__["page"] = _otpnitro.Text_page_set
    __swig_getmethods__["page"] = _otpnitro.Text_page_get
    if _newclass:page = _swig_property(_otpnitro.Text_page_get, _otpnitro.Text_page_set)
    def replaceAll(self, *args): return _otpnitro.Text_replaceAll(self, *args)
    def create(self, *args): return _otpnitro.Text_create(self, *args)
    def _print(self, *args): return _otpnitro.Text__print(self, *args)
    def encodeB26(self, *args): return _otpnitro.Text_encodeB26(self, *args)
    def decodeB26(self, *args): return _otpnitro.Text_decodeB26(self, *args)
    def parse(self, *args): return _otpnitro.Text_parse(self, *args)
    def __init__(self): 
        this = _otpnitro.new_Text()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otpnitro.delete_Text
    __del__ = lambda self : None;
Text_swigregister = _otpnitro.Text_swigregister
Text_swigregister(Text)

class Crypto(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crypto, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Crypto, name)
    __repr__ = _swig_repr
    def decrypt(self, *args): return _otpnitro.Crypto_decrypt(self, *args)
    def encrypt(self, *args): return _otpnitro.Crypto_encrypt(self, *args)
    def __init__(self): 
        this = _otpnitro.new_Crypto()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otpnitro.delete_Crypto
    __del__ = lambda self : None;
Crypto_swigregister = _otpnitro.Crypto_swigregister
Crypto_swigregister(Crypto)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otpnitro.new_Config()
        try: self.this.append(this)
        except: self.this = this
    def getChars(self): return _otpnitro.Config_getChars(self)
    def getPages(self): return _otpnitro.Config_getPages(self)
    def getPath(self): return _otpnitro.Config_getPath(self)
    def setChars(self, *args): return _otpnitro.Config_setChars(self, *args)
    def setPages(self, *args): return _otpnitro.Config_setPages(self, *args)
    def setPath(self, *args): return _otpnitro.Config_setPath(self, *args)
    def saveConfig(self): return _otpnitro.Config_saveConfig(self)
    __swig_destroy__ = _otpnitro.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _otpnitro.Config_swigregister
Config_swigregister(Config)

# This file is compatible with both classic and new-style classes.


