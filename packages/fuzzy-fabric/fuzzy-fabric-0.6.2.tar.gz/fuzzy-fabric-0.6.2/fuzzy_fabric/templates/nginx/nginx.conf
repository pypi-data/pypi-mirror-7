# from cast
keepalive_timeout		15;
client_header_timeout		10;
client_body_timeout		10;
send_timeout			10;


#    Ограничиваем количество одновременных подключений с одного IP.
#
#    переменная $binary_remote_addr здесь это ключ по которому группируются соединения.
#
#    Когда их количество от одного IP достигает указанного - выдаётся 503 ошибка.
#
#    Интересный момент:
#    Используется $binary_remote_addr, а не $remote_addr, так как она занимает 4байта (против 7-15).
#    Состояние занимает 32/64 байта (в зависимости от битности).
#    Т.о. в 1m поместятся 32k/16k состояний. так что не обязательно выделять по 5 метров на одну зону.
limit_conn...

#    Ограничиваем число одновременных запросов с одного IP
#
#    rate 3r/s - здесь означает скорость, а не число запросов в секунду, важный момент.
#    Может показаться что это одно и то же, но это не совсем так.
#
#    Т.е. пока запросы приходят со скоростью до 3 штук в секунду, всё хорошо.
#    Как только этот лимит превышается, клиенту выдаётся 503 ошибка.
#
#    Что бы сгладить ситуацию и не сбрасывать клиентов, существует параметр burst.

#    Этот параметр позволяет обработать указанное число запросов, откладывая их на время, необходимое чтобы выровнять скорость до указанной в rate.
#
#    Теперь у нас есть жесткий лимит и мягкий лимит. Казалось бы все должны быть счастливы, но это ещё не всё.
#
#    Как правило клиент скачивает страницу, парсит её, и посылает ещё десяток запросов на связанные ресурсы (стили, скрипты, картинки, т.д.).
#    Все знают, что нужно уменьшать количество запросов на сервер, но не все это делают.
#    Таким образом два-три одновременных запроса на сервак расцениваются уже как скорость в 100500 запросов в секунду, потому что между ними были тысячные доли одной секунды.
#    И запросы отваливаются.
#    Не смотря даже на то, что запросов всего было 3, а не 10, часть из них будет отложена или сброшена.
#    Чтоб исправить это существует третий параметр

#    Он говорит nignx-у не откладывать запросы, пока они в пределах числа burst.
#    Т.е. по факту у нас могут быть скорости вроде 100500 запросов в секунду, а не 3.
#    Но так как их всего 4, то они будут обслужены.
#    А уже все остальные будут отваливаться с 503 ошибкой.

limit_req_...