===================================================
LMAP - Linux Physical Memory acquisition tool
===================================================

Version: RC1

Author: Johannes Stuettgen (johannes.stuettgen@gmail.com)

Summary:
========
This is a collection of tools to load a memory acquisition driver without having
to build anything on the target system.

Available Tools:
================
1.) lmap
  This is the end-user tool. It works by injecting a minimal acquisition driver
  into a compatible kernel module on the running system and then loading that.
  It is statically linked and should work on any Linux x86-64 system from kernel
  2.6 to 3.X [1].
2.) elfrelink
  The functionality of lmap requires relinking and modification of ELF64 files,
  as well as their relocation and symbol tables. Elfrelink is the library that
  provides this functionality.
3.) kohook
  The kohook program allows use of the elfrelink library from the command line.
  It is meant to allow users to script the relinking functionality from the
  shell or even a make-file. Check the build target "hooked_pmem" for an
  example.
4.) minpmem
  The minpmem kernel module is a stripped down version of the Linux pmem driver,
  utilizing pte remapping to access physical memory [2].

Usage:
======
lmap can be used by simply executing the binary on the target system. It will
automatically search for a compatible host, load it into memory, inject the
memory driver and load it.

Compatibility:
==============
The entire tool suite is only compatible with x86-64 processors and binaries.

Building from Source:
=====================
Use CMake to generate a makefile in the 'build' directory by changing to it
('cd build') and calling 'cmake ..'. Then just call 'make' and it will build all
the binaries and the driver. There are no external dependencies except the
kernel headers, gcc, cmake, make and libc. On Ubuntu systems you need to install
the packages 'build-essential', 'cmake' and 'linux-headers-`uname -r`'.

References:
===========
[1] Stüttgen, Johannes, and Michael Cohen.
  "Robust Linux Memory Acquisition with Minimal Target Impact"
  Digital Investigation 11 (2014): P112-P119.
[2] Stüttgen, Johannes, and Michael Cohen.
  "Anti-forensic resilient memory acquisition"
  Digital Investigation 10 (2013): P105-P115.

