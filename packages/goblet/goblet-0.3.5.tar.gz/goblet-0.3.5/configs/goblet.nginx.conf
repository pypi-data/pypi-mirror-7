# Example nginx virtual host config for goblet. You will need to (at least)
# modify $repo_root and $goblet_root to make it work for you. Also note that
# goblet can at the moment only run in the root path of a host.

server {
    # Path to the directory all the repositories are in
    set $repo_root /home/dennis/code;
    # Path to the goblet code
    set $goblet_root /home/dennis/code/goblet;

    listen 80;

    # Set root to the repository directory so we can serve the repositories and
    # goblet from the same host. If you do not want this, set root to an empty
    # dir, disable git-http-backend below, disable the try_files line and
    # change location @uwsgi to location /
    root $repo_root;
    server_name localhost;

    # Use git's smart HTTP backend for quicker cloning
    location ~ ^.*/(HEAD|info/refs|objects/info/.*|git-(upload|receive)-pack)$ {
        fastcgi_pass unix:/var/run/fcgiwrap.socket;
        fastcgi_param SCRIPT_FILENAME   /usr/lib/git-core/git-http-backend;
        fastcgi_param PATH_INFO         $uri;
        fastcgi_param GIT_PROJECT_ROOT  $repo_root;
        fastcgi_param REMOTE_USER       $remote_user;
        include fastcgi_params;
    }

    # Try to find files first. If no file exists, forward to goblet's uwsgi
    # socket.
    try_files $uri @uwsgi;
    location @uwsgi {
        include uwsgi_params;
        uwsgi_pass unix:/tmp/uwsgi.sock;
    }

    # Static content is served from the goblet checkout.
    location /static/ {
        alias $goblet_root/goblet/themes/default/static/;
    }

    # Snapshots are served using the X-SendFile mechanism, or in nginx terms:
    # X-Accel-Redirect. Make sure the directory specified here matches
    # CACHE_ROOT in your goblet.conf, or you'll see no snapshots whatsoever.
    location /snapshots/ {
        internal;
        alias /tmp/goblet-snapshots/;
    }
}

# Perl you say? Well, that makes it surprisingly readable!
# vim:syntax=perl
