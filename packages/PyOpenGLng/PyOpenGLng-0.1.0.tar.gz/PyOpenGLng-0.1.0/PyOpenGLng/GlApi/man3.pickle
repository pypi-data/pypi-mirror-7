ÄcPyOpenGLng.GlApi.ManualParser
Manual
q)Åq(UglUniformMatrix2fvqcPyOpenGLng.GlApi.ManualParser
Page
q)Åq}q(UfunctionqhU	page_nameqU	glUniformq	Upurposeq
UFSpecify the value of a uniform variable for the current program objectqubUglFlushqh)Åq}q(hhhUglFlushh
U-force execution of GL commands in finite timeubUglCopyTexImage1Dqh)Åq}q(hhhUglCopyTexImage1Dh
U#copy pixels into a 1D texture imageubUglClearColorqh)Åq}q(hhhUglClearColorh
U*specify clear values for the color buffersubUglGetUniformBlockIndexqh)Åq}q(hhhUglGetUniformBlockIndexh
U+retrieve the index of a named uniform blockubUglPixelStoreqh)Åq}q(hhhUglPixelStoreh
Uset pixel storage modesubUglClearBufferqh)Åq}q(hhhUglClearBufferh
U@clear individual buffers of the currently bound draw framebufferubUglStencilMaskSeparateqh)Åq}q (hhhUglStencilMaskSeparateh
UNcontrol the front and/or back writing of individual bits in the stencil planesubUglGetVertexAttribPointervq!h)Åq"}q#(hh!hUglGetVertexAttribPointervh
UDreturn the address of the specified generic vertex attribute pointerubU%glGetFramebufferAttachmentParameterivq$h)Åq%}q&(hh$hU#glGetFramebufferAttachmentParameterh
UDretrieve information about attachments of a bound framebuffer objectubUglBlendColorq'h)Åq(}q)(hh'hUglBlendColorh
Uset the blend colorubUglLinkProgramq*h)Åq+}q,(hh*hUglLinkProgramh
ULinks a program objectubUglBindTextureq-h)Åq.}q/(hh-hUglBindTextureh
U*bind a named texture to a texturing targetubUglPointParameterq0h)Åq1}q2(hh0hUglPointParameterh
Uspecify point parametersubUglMultiTexCoordq3h)Åq4}q5(hh3hUglMultiTexCoordh
U#set the current texture coordinatesubUglFenceSyncq6h)Åq7}q8(hh6hUglFenceSynch
UAcreate a new sync object and insert it into the GL command streamubUglUniform3uiq9h)Åq:}q;(hh9hh	h
hubUglUniform2uivq<h)Åq=}q>(hh<hh	h
hubUglGetStringq?h)Åq@}qA(hh?hUglGetStringh
U4return a string describing the current GL connectionubUglCompressedTexSubImage3DqBh)ÅqC}qD(hhBhUglCompressedTexSubImage3Dh
UCspecify a three-dimensional texture subimage in a compressed formatubUglDetachShaderqEh)ÅqF}qG(hhEhUglDetachShaderh
UFDetaches a shader object from a program object to which it is attachedubUglIsEnabled, glIsEnablediqHh)ÅqI}qJ(hhHhUglIsEnabledh
U$test whether a capability is enabledubUglCompressedTexSubImage1DqKh)ÅqL}qM(hhKhUglCompressedTexSubImage1Dh
UAspecify a one-dimensional texture subimage in a compressed formatubUglBindSamplerqNh)ÅqO}qP(hhNhUglBindSamplerh
U*bind a named sampler to a texturing targetubUglLineWidthqQh)ÅqR}qS(hhQhUglLineWidthh
U%specify the width of rasterized linesubUglUniform2fvqTh)ÅqU}qV(hhThh	h
hubUglBlendFuncSeparateqWh)ÅqX}qY(hhWhUglBlendFuncSeparateh
U@specify pixel arithmetic for RGB and alpha components separatelyubUglCompileShaderqZh)Åq[}q\(hhZhUglCompileShaderh
UCompiles a shader objectubUglGetTransformFeedbackVaryingq]h)Åq^}q_(hh]hUglGetTransformFeedbackVaryingh
ULretrieve information about varying variables selected for transform feedbackubUglDeleteTexturesq`h)Åqa}qb(hh`hUglDeleteTexturesh
Udelete named texturesubUglStencilOpSeparateqch)Åqd}qe(hhchUglStencilOpSeparateh
U*set front and/or back stencil test actionsubUglCopyBufferSubDataqfh)Åqg}qh(hhfhUglCopyBufferSubDatah
UYcopy part of the data store of a buffer object to the data store of another buffer objectubUglDeleteQueriesqih)Åqj}qk(hhihUglDeleteQueriesh
Udelete named query objectsubUglBindBufferRangeqlh)Åqm}qn(hhlhUglBindBufferRangeh
U?bind a range within a buffer object to an indexed buffer targetubUglDeleteShaderqoh)Åqp}qq(hhohUglDeleteShaderh
UDeletes a shader objectubUglGenRenderbuffersqrh)Åqs}qt(hhrhUglGenRenderbuffersh
U"generate renderbuffer object namesubUglUniformMatrix3x4fvquh)Åqv}qw(hhuhh	h
hubUglClampColorqxh)Åqy}qz(hhxhUglClampColorh
Uspecify whether data read via ubUglUniform4ivq{h)Åq|}q}(hh{hh	h
hubUglClearStencilq~h)Åq}qÄ(hh~hUglClearStencilh
U.specify the clear value for the stencil bufferubUglUniformMatrix2x3fvqÅh)ÅqÇ}qÉ(hhÅhh	h
hubUglBeginConditionalRenderqÑh)ÅqÖ}qÜ(hhÑhUglBeginConditionalRenderh
Ustart conditional renderingubUglDrawElementsBaseVertexqáh)Åqà}qâ(hháhUglDrawElementsBaseVertexh
U;render primitives from array data with a per-element offsetubUglSampleCoverageqäh)Åqã}qå(hhähUglSampleCoverageh
U'specify multisample coverage parametersubUglGenTexturesqçh)Åqé}qè(hhçhUglGenTexturesh
Ugenerate texture namesubUglDepthFuncqêh)Åqë}qí(hhêhUglDepthFunch
U3specify the value used for depth buffer comparisonsubUglCompressedTexSubImage2Dqìh)Åqî}qï(hhìhUglCompressedTexSubImage2Dh
UAspecify a two-dimensional texture subimage in a compressed formatubUglGetRenderbufferParameterivqñh)Åqó}qò(hhñhUglGetRenderbufferParameterh
U6retrieve information about a bound renderbuffer objectubUglUniform1fqôh)Åqö}qõ(hhôhh	h
hubUglGetVertexAttribfvqúh)Åqù}qû(hhúhUglGetVertexAttribqüh
U+Return a generic vertex attribute parameterq†ubUglReadBufferq°h)Åq¢}q£(hh°hUglReadBufferh
U'select a color buffer source for pixelsubUglGetCompressedTexImageq§h)Åq•}q¶(hh§hUglGetCompressedTexImageh
U!return a compressed texture imageubUglCreateShaderqßh)Åq®}q©(hhßhUglCreateShaderh
UCreates a shader objectubU
glIsBufferq™h)Åq´}q¨(hh™hU
glIsBufferh
U2determine if a name corresponds to a buffer objectubUglUniform1iq≠h)ÅqÆ}qØ(hh≠hh	h
hubUglIsSyncq∞h)Åq±}q≤(hh∞hUglIsSynch
U0determine if a name corresponds to a sync objectubUglCopyTexSubImage2Dq≥h)Åq¥}qµ(hh≥hUglCopyTexSubImage2Dh
U'copy a two-dimensional texture subimageubUglGetTexParameterq∂h)Åq∑}q∏(hh∂hUglGetTexParameterh
Ureturn texture parameter valuesubUglTexSubImage2Dqπh)Åq∫}qª(hhπhUglTexSubImage2Dh
U*specify a two-dimensional texture subimageubUglVertexAttribqºh)ÅqΩ}qæ(hhºhUglVertexAttribh
U1Specifies the value of a generic vertex attributeubUglGetUniformivqøh)Åq¿}q¡(hhøhUglGetUniformq¬h
U'Returns the value of a uniform variableq√ubUglUniform2iqƒh)Åq≈}q∆(hhƒhh	h
hubUglUniform2fq«h)Åq»}q…(hh«hh	h
hubU	glLogicOpq h)ÅqÀ}qÃ(hh hU	glLogicOph
U/specify a logical pixel operation for renderingubUglGetProgramivqÕh)ÅqŒ}qœ(hhÕhUglGetProgramh
U)Returns a parameter from a program objectubUglVertexAttribPointerq–h)Åq—}q“(hh–hUglVertexAttribPointerh
U0define an array of generic vertex attribute dataubUglDrawBuffersq”h)Åq‘}q’(hh”hUglDrawBuffersh
U2Specifies a list of color buffers to be drawn intoubUglQueryCounterq÷h)Åq◊}qÿ(hh÷hUglQueryCounterh
UÑrecord the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.ubUglFramebufferTextureLayerqŸh)Åq⁄}q€(hhŸhUglFramebufferTextureLayerh
U3attach a single layer of a texture to a framebufferubUglUniform4uiq‹h)Åq›}qﬁ(hh‹hh	h
hubUglGetUniformLocationqﬂh)Åq‡}q·(hhﬂhUglGetUniformLocationh
U*Returns the location of a uniform variableubUglSampleMaskiq‚h)Åq„}q‰(hh‚hUglSampleMaskih
U.set the value of a sub-word of the sample maskubUglBindFramebufferqÂh)ÅqÊ}qÁ(hhÂhUglBindFramebufferh
U*bind a framebuffer to a framebuffer targetubU
glCullFaceqËh)ÅqÈ}qÍ(hhËhU
glCullFaceh
U:specify whether front- or back-facing facets can be culledubUglUniformMatrix3x2fvqÎh)ÅqÏ}qÌ(hhÎhh	h
hubUglTexImage2DMultisampleqÓh)ÅqÔ}q(hhÓhUglTexImage2DMultisampleh
Ufestablish the data storage, format, dimensions, and number of samples of a multisample texture's imageubUglBeginTransformFeedbackqÒh)ÅqÚ}qÛ(hhÒhUglBeginTransformFeedbackh
U"start transform feedback operationubUglDeleteProgramqÙh)Åqı}qˆ(hhÙhUglDeleteProgramh
UDeletes a program objectubUglIsSamplerq˜h)Åq¯}q˘(hh˜hUglIsSamplerh
U3determine if a name corresponds to a sampler objectubUglVertexAttribDivisorq˙h)Åq˚}q¸(hh˙hUglVertexAttribDivisorh
UUmodify the rate at which generic vertex attributes advance during instanced renderingubUglGenQueriesq˝h)Åq˛}qˇ(hh˝hUglGenQueriesh
Ugenerate query object namesubU
glWaitSyncr   h)År  }r  (hj   hU
glWaitSynch
UPinstruct the GL server to block until the specified sync object becomes signaledubUglAttachShaderr  h)År  }r  (hj  hUglAttachShaderh
U,Attaches a shader object to a program objectubUglRenderbufferStorager  h)År  }r  (hj  hUglRenderbufferStorageh
UNestablish data storage, format and dimensions of a renderbuffer object's imageubUglUniformMatrix4x3fvr	  h)År
  }r  (hj	  hh	h
hubUglUniform3ir  h)År  }r  (hj  hh	h
hubUglCompressedTexImage1Dr  h)År  }r  (hj  hUglCompressedTexImage1Dh
U>specify a one-dimensional texture image in a compressed formatubUglDeleteSamplersr  h)År  }r  (hj  hUglDeleteSamplersh
Udelete named sampler objectsubUglCopyTexSubImage1Dr  h)År  }r  (hj  hUglCopyTexSubImage1Dh
U'copy a one-dimensional texture subimageubUglDrawRangeElementsBaseVertexr  h)År  }r  (hj  hUglDrawRangeElementsBaseVertexh
U;render primitives from array data with a per-element offsetubUglCheckFramebufferStatusr  h)År  }r  (hj  hUglCheckFramebufferStatush
U.check the completeness status of a framebufferubUglTexSubImage3Dr  h)År  }r   (hj  hUglTexSubImage3Dh
U,specify a three-dimensional texture subimageubUglProvokingVertexr!  h)År"  }r#  (hj!  hUglProvokingVertexh
UMspecifiy the vertex to be used as the source of data for flat shaded varyingsubUglTexParameterr$  h)År%  }r&  (hj$  hUglTexParameterh
Uset texture parametersubUglGetMultisamplefvr'  h)År(  }r)  (hj'  hUglGetMultisampleh
U!retrieve the location of a sampleubUglCopyTexImage2Dr*  h)År+  }r,  (hj*  hUglCopyTexImage2Dh
U#copy pixels into a 2D texture imageubUglUniform3fr-  h)År.  }r/  (hj-  hh	h
hubUglBlitFramebufferr0  h)År1  }r2  (hj0  hUglBlitFramebufferh
UHcopy a block of pixels from the read framebuffer to the draw framebufferubUglGetBufferParameterivr3  h)År4  }r5  (hj3  hUglGetBufferParameterh
U$return parameters of a buffer objectubUglUniformMatrix4x2fvr6  h)År7  }r8  (hj6  hh	h
hubUglDrawElementsr9  h)År:  }r;  (hj9  hUglDrawElementsh
U!render primitives from array dataubUglBindFragDataLocationIndexedr<  h)År=  }r>  (hj<  hUglBindFragDataLocationIndexedh
UTbind a user-defined varying out variable to a fragment shader color number and indexubUglDrawRangeElementsr?  h)År@  }rA  (hj?  hUglDrawRangeElementsh
U!render primitives from array dataubUglColorMask, glColorMaskirB  h)ÅrC  }rD  (hjB  hUglColorMaskh
U;enable and disable writing of frame buffer color componentsubUglBindBufferBaserE  h)ÅrF  }rG  (hjE  hUglBindBufferBaseh
U0bind a buffer object to an indexed buffer targetubUglBufferSubDatarH  h)ÅrI  }rJ  (hjH  hUglBufferSubDatah
U0updates a subset of a buffer object's data storeubUglUniform1ivrK  h)ÅrL  }rM  (hjK  hh	h
hubUglBindAttribLocationrN  h)ÅrO  }rP  (hjN  hUglBindAttribLocationh
UKAssociates a generic vertex attribute index with a named attribute variableubUglMapBufferRangerQ  h)ÅrR  }rS  (hjQ  hUglMapBufferRangeh
U-map a section of a buffer object's data storeubUglGetFragDataIndexrT  h)ÅrU  }rV  (hjT  hUglGetFragDataIndexh
UIquery the bindings of color indices to user-defined varying out variablesubUglDrawArraysInstancedrW  h)ÅrX  }rY  (hjW  hUglDrawArraysInstancedh
U.draw multiple instances of a range of elementsubUglGenerateMipmaprZ  h)År[  }r\  (hjZ  hUglGenerateMipmaph
U/generate mipmaps for a specified texture targetubUglMultiDrawArraysr]  h)År^  }r_  (hj]  hUglMultiDrawArraysh
U2render multiple sets of primitives from array dataubUglGetShaderivr`  h)Åra  }rb  (hj`  hUglGetShaderh
U(Returns a parameter from a shader objectubUglGetActiveAttribrc  h)Ård  }re  (hjc  hUglGetActiveAttribh
UWReturns information about an active attribute variable for the specified program objectubUglBindFragDataLocationrf  h)Årg  }rh  (hjf  hUglBindFragDataLocationh
UJbind a user-defined varying out variable to a fragment shader color numberubUglPolygonOffsetri  h)Årj  }rk  (hji  hUglPolygonOffseth
U6set the scale and units used to calculate depth valuesubUglDisableVertexAttribArrayrl  h)Årm  }rn  (hjl  hUglEnableVertexAttribArrayro  h
U2Enable or disable a generic vertex attribute arrayrp  ubUglGetShaderInfoLogrq  h)Årr  }rs  (hjq  hUglGetShaderInfoLogh
U/Returns the information log for a shader objectubUglShaderSourcert  h)Åru  }rv  (hjt  hUglShaderSourceh
U+Replaces the source code in a shader objectubUglBindRenderbufferrw  h)Årx  }ry  (hjw  hUglBindRenderbufferh
U,bind a renderbuffer to a renderbuffer targetubUglCompressedTexImage2Drz  h)År{  }r|  (hjz  hUglCompressedTexImage2Dh
U>specify a two-dimensional texture image in a compressed formatubUglDeleteFramebuffersr}  h)År~  }r  (hj}  hUglDeleteFramebuffersh
Udelete framebuffer objectsubUglDrawArraysrÄ  h)ÅrÅ  }rÇ  (hjÄ  hUglDrawArraysh
U!render primitives from array dataubUglUniform1uirÉ  h)ÅrÑ  }rÖ  (hjÉ  hh	h
hubUglGetSamplerParameterrÜ  h)Årá  }rà  (hjÜ  hUglGetSamplerParameterh
Ureturn sampler parameter valuesubUglIsProgramrâ  h)Årä  }rã  (hjâ  hUglIsProgramh
U4Determines if a name corresponds to a program objectubUglGetSyncivrå  h)Årç  }ré  (hjå  hU	glGetSynch
U%query the properties of a sync objectubUglClientWaitSyncrè  h)Årê  }rë  (hjè  hUglClientWaitSynch
U3block and wait for a sync object to become signaledubUglGetQueryObjectrí  h)Årì  }rî  (hjí  hUglGetQueryObjecth
U#return parameters of a query objectubUglClearrï  h)Årñ  }ró  (hjï  hUglClearh
Uclear buffers to preset valuesubUglGetActiveUniformNamerò  h)Årô  }rö  (hjò  hUglGetActiveUniformNameh
U#query the name of an active uniformubUglUniform4irõ  h)Årú  }rù  (hjõ  hh	h
hubUglGetrû  h)Årü  }r†  (hjû  hUglGeth
U2return the value or values of a selected parameterubUglActiveTexturer°  h)År¢  }r£  (hj°  hUglActiveTextureh
Uselect active texture unitubUglEnableVertexAttribArrayr§  h)År•  }r¶  (hj§  hjo  h
jp  ubUglUniform2ivrß  h)År®  }r©  (hjß  hh	h
hubUglUniform3fvr™  h)År´  }r¨  (hj™  hh	h
hubUglBeginQueryr≠  h)ÅrÆ  }rØ  (hj≠  hUglBeginQueryh
U(delimit the boundaries of a query objectubUglReadPixelsr∞  h)År±  }r≤  (hj∞  hUglReadPixelsh
U,read a block of pixels from the frame bufferubUglDepthRanger≥  h)År¥  }rµ  (hj≥  hUglDepthRangeh
UXspecify mapping of depth values from normalized device coordinates to window coordinatesubUglUniform4fr∂  h)År∑  }r∏  (hj∂  hh	h
hubU glRenderbufferStorageMultisamplerπ  h)År∫  }rª  (hjπ  hU glRenderbufferStorageMultisampleh
U\establish data storage, format, dimensions and sample count of a renderbuffer object's imageubUglMapBufferrº  h)ÅrΩ  }ræ  (hjº  hUglMapBufferh
U map a buffer object's data storeubUglGenVertexArraysrø  h)År¿  }r¡  (hjø  hUglGenVertexArraysh
U"generate vertex array object namesubUglUniformMatrix2x4fvr¬  h)År√  }rƒ  (hj¬  hh	h
hubUglUniformMatrix3fvr≈  h)År∆  }r«  (hj≈  hh	h
hubUglGetFragDataLocationr»  h)År…  }r   (hj»  hUglGetFragDataLocationh
UIquery the bindings of color numbers to user-defined varying out variablesubUglCompressedTexImage3DrÀ  h)ÅrÃ  }rÕ  (hjÀ  hUglCompressedTexImage3Dh
U@specify a three-dimensional texture image in a compressed formatubUglTexImage1DrŒ  h)Årœ  }r–  (hjŒ  hUglTexImage1Dh
U'specify a one-dimensional texture imageubUglDeleteSyncr—  h)År“  }r”  (hj—  hUglDeleteSynch
Udelete a sync objectubUglCopyTexSubImage3Dr‘  h)År’  }r÷  (hj‘  hUglCopyTexSubImage3Dh
U)copy a three-dimensional texture subimageubU
glGetErrorr◊  h)Årÿ  }rŸ  (hj◊  hU
glGetErrorh
Ureturn error informationubUglDeleteRenderbuffersr⁄  h)År€  }r‹  (hj⁄  hUglDeleteRenderbuffersh
Udelete renderbuffer objectsubUglGetVertexAttribivr›  h)Årﬁ  }rﬂ  (hj›  hhüh
h†ubUglMultiDrawElementsr‡  h)År·  }r‚  (hj‡  hUglMultiDrawElementsh
UOrender multiple sets of primitives by specifying indices of array data elementsubUglStencilOpr„  h)År‰  }rÂ  (hj„  hUglStencilOph
U'set front and back stencil test actionsubUglTexSubImage1DrÊ  h)ÅrÁ  }rË  (hjÊ  hUglTexSubImage1Dh
U*specify a one-dimensional texture subimageubUglUniform3ivrÈ  h)ÅrÍ  }rÎ  (hjÈ  hh	h
hubUglGetTexImagerÏ  h)ÅrÌ  }rÓ  (hjÏ  hUglGetTexImageh
Ureturn a texture imageubUglPolygonModerÔ  h)År  }rÒ  (hjÔ  hUglPolygonModeh
U#select a polygon rasterization modeubUglGenFramebuffersrÚ  h)ÅrÛ  }rÙ  (hjÚ  hUglGenFramebuffersh
U!generate framebuffer object namesubUglFramebufferRenderbufferrı  h)Årˆ  }r˜  (hjı  hUglFramebufferRenderbufferh
USattach a renderbuffer as a logical buffer to the currently bound framebuffer objectubUglIsTexturer¯  h)År˘  }r˙  (hj¯  hUglIsTextureh
U,determine if a name corresponds to a textureubUglStencilFuncr˚  h)År¸  }r˝  (hj˚  hUglStencilFunch
UCset front and back function and reference value for stencil testingubUglGetAttachedShadersr˛  h)Årˇ  }r   (hj˛  hUglGetAttachedShadersh
UFReturns the handles of the shader objects attached to a program objectubUglUniformBlockBindingr  h)År  }r  (hj  hUglUniformBlockBindingh
U1assign a binding point to an active uniform blockubUglIsRenderbufferr  h)År  }r  (hj  hUglIsRenderbufferh
U8determine if a name corresponds to a renderbuffer objectubUglGetBufferPointervr  h)År  }r	  (hj  hUglGetBufferPointervh
U9return the pointer to a mapped buffer object's data storeubUglDepthMaskr
  h)År  }r  (hj
  hUglDepthMaskh
U/enable or disable writing into the depth bufferubUglDeleteVertexArraysr  h)År  }r  (hj  hUglDeleteVertexArraysh
Udelete vertex array objectsubUglUniform1fvr  h)År  }r  (hj  hh	h
hubUglUniform4uivr  h)År  }r  (hj  hh	h
hubU	glIsQueryr  h)År  }r  (hj  hU	glIsQueryh
U1determine if a name corresponds to a query objectubUglIsVertexArrayr  h)År  }r  (hj  hUglIsVertexArrayh
U8determine if a name corresponds to a vertex array objectubUglUseProgramr  h)År  }r  (hj  hUglUseProgramh
U<Installs a program object as part of current rendering stateubUglFramebufferTexturer  h)År   }r!  (hj  hUglFramebufferTextureh
U`attach a level of a texture object as a logical buffer to the currently bound framebuffer objectubUglGetQueryivr"  h)År#  }r$  (hj"  hUglGetQueryivh
U*return parameters of a query object targetubUglTexImage2Dr%  h)År&  }r'  (hj%  hUglTexImage2Dh
U'specify a two-dimensional texture imageubUglGetProgramInfoLogr(  h)År)  }r*  (hj(  hUglGetProgramInfoLogh
U0Returns the information log for a program objectubUglStencilMaskr+  h)År,  }r-  (hj+  hUglStencilMaskh
UKcontrol the front and back writing of individual bits in the stencil planesubUglBlendEquationr.  h)År/  }r0  (hj.  hUglBlendEquationh
UVspecify the equation used for both the RGB blend equation and the Alpha blend equationubUglBindVertexArrayr1  h)År2  }r3  (hj1  hUglBindVertexArrayh
Ubind a vertex array objectubUglPointSizer4  h)År5  }r6  (hj4  hUglPointSizeh
U)specify the diameter of rasterized pointsubUglGetUniformIndicesr7  h)År8  }r9  (hj7  hUglGetUniformIndicesh
U+retrieve the index of a named uniform blockubU
glIsShaderr:  h)År;  }r<  (hj:  hU
glIsShaderh
U3Determines if a name corresponds to a shader objectubUglDeleteBuffersr=  h)År>  }r?  (hj=  hUglDeleteBuffersh
Udelete named buffer objectsubUglBindBufferr@  h)ÅrA  }rB  (hj@  hUglBindBufferh
Ubind a named buffer objectubUglMultiDrawElementsBaseVertexrC  h)ÅrD  }rE  (hjC  hUglMultiDrawElementsBaseVertexh
Usrender multiple sets of primitives by specifying indices of array data elements and an index to apply to each indexubUglUniform4fvrF  h)ÅrG  }rH  (hjF  hh	h
hubUglDrawElementsInstancedrI  h)ÅrJ  }rK  (hjI  hUglDrawElementsInstancedh
U,draw multiple instances of a set of elementsubUglEnablerL  h)ÅrM  }rN  (hjL  hUglEnableh
U-enable or disable server-side GL capabilitiesubUglGetActiveUniformBlockNamerO  h)ÅrP  }rQ  (hjO  hUglGetActiveUniformBlockNameh
U,retrieve the name of an active uniform blockubUglGetActiveUniformsivrR  h)ÅrS  }rT  (hjR  hUglGetActiveUniformsivh
U[Returns information about several active uniform variables for the specified program objectubUglStencilFuncSeparaterU  h)ÅrV  }rW  (hjU  hUglStencilFuncSeparateh
UFset front and/or back function and reference value for stencil testingubUglBufferDatarX  h)ÅrY  }rZ  (hjX  hUglBufferDatah
U4creates and initializes a buffer object's data storeubUglBlendEquationSeparater[  h)År\  }r]  (hj[  hUglBlendEquationSeparateh
UBset the RGB blend equation and the alpha blend equation separatelyubUglGenBuffersr^  h)År_  }r`  (hj^  hUglGenBuffersh
Ugenerate buffer object namesubUglFinishra  h)Årb  }rc  (hja  hUglFinishh
U(block until all GL execution is completeubUglGetAttribLocationrd  h)Åre  }rf  (hjd  hUglGetAttribLocationh
U-Returns the location of an attribute variableubUglHintrg  h)Årh  }ri  (hjg  hUglHinth
U%specify implementation-specific hintsubUglGetTexLevelParameterrj  h)Årk  }rl  (hjj  hUglGetTexLevelParameterh
U>return texture parameter values for a specific level of detailubUglGetBufferSubDatarm  h)Årn  }ro  (hjm  hUglGetBufferSubDatah
U0returns a subset of a buffer object's data storeubUglGetActiveUniformBlockrp  h)Årq  }rr  (hjp  hUglGetActiveUniformBlockh
U/query information about an active uniform blockubUglBlendFuncrs  h)Årt  }ru  (hjs  hUglBlendFunch
Uspecify pixel arithmeticubUglCreateProgramrv  h)Årw  }rx  (hjv  hUglCreateProgramh
UCreates a program objectubUglTexImage3Dry  h)Årz  }r{  (hjy  hUglTexImage3Dh
U)specify a three-dimensional texture imageubUglGenSamplersr|  h)År}  }r~  (hj|  hUglGenSamplersh
Ugenerate sampler object namesubUglIsFramebufferr  h)ÅrÄ  }rÅ  (hj  hUglIsFramebufferh
U7determine if a name corresponds to a framebuffer objectubUglFlushMappedBufferRangerÇ  h)ÅrÉ  }rÑ  (hjÇ  hUglFlushMappedBufferRangeh
U4indicate modifications to a range of a mapped bufferubU
glViewportrÖ  h)ÅrÜ  }rá  (hjÖ  hU
glViewporth
Uset the viewportubUglUniform1uivrà  h)Årâ  }rä  (hjà  hh	h
hubUglTransformFeedbackVaryingsrã  h)Årå  }rç  (hjã  hUglTransformFeedbackVaryingsh
U6specify values to record in transform feedback buffersubUglGetVertexAttribdvré  h)Årè  }rê  (hjé  hhüh
h†ubUglPrimitiveRestartIndexrë  h)Årí  }rì  (hjë  hUglPrimitiveRestartIndexh
U#specify the primitive restart indexubUglUniform2uirî  h)Årï  }rñ  (hjî  hh	h
hubUglGetUniformfvró  h)Årò  }rô  (hjó  hh¬h
h√ubUglTexImage3DMultisamplerö  h)Årõ  }rú  (hjö  hUglTexImage3DMultisampleh
Ufestablish the data storage, format, dimensions, and number of samples of a multisample texture's imageubUglUniformMatrix4fvrù  h)Årû  }rü  (hjù  hh	h
hubUglClearDepthr†  h)År°  }r¢  (hj†  hUglClearDepthh
U,specify the clear value for the depth bufferubUglGetActiveUniformr£  h)År§  }r•  (hj£  hUglGetActiveUniformh
UUReturns information about an active uniform variable for the specified program objectubUglSamplerParameterr¶  h)Årß  }r®  (hj¶  hUglSamplerParameterh
Uset sampler parametersubUglDrawBufferr©  h)År™  }r´  (hj©  hUglDrawBufferh
U0specify which color buffers are to be drawn intoubUglFrontFacer¨  h)År≠  }rÆ  (hj¨  hUglFrontFaceh
U&define front- and back-facing polygonsubUglGetShaderSourcerØ  h)År∞  }r±  (hjØ  hUglGetShaderSourceh
U3Returns the source code string from a shader objectubU	glScissorr≤  h)År≥  }r¥  (hj≤  hU	glScissorh
Udefine the scissor boxubU!glDrawElementsInstancedBaseVertexrµ  h)År∂  }r∑  (hjµ  hU!glDrawElementsInstancedBaseVertexh
UZrender multiple instances of a set of primitives from array data with a per-element offsetubUglTexBufferr∏  h)Årπ  }r∫  (hj∏  hUglTexBufferh
UCattach the storage for a buffer object to the active buffer textureubUglValidateProgramrª  h)Årº  }rΩ  (hjª  hUglValidateProgramh
UValidates a program objectubUglUniform3uivræ  h)Årø  }r¿  (hjæ  hh	h
hubu}r¡  Unamer¬  Uman3sb.