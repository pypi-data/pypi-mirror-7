SPACEGRIDS README. 

The Python 2.7 Spacegrids module, "Numpy on grids", provides useful classes for analyzing spatial data defined on grids (e.g. covering the Earth's surface). It interprets Netcdf metadata, and is designed to ensure consistency between data and grid information via interacting objects of fields, grids, coordinates and axes. It provides intuitive short expressions for complex operations, including volume and distance related concepts such as integration and differentiation. 

Interprets metadata for most climate model output and datasets in Netcdf format, and is confirmed to work with UVic (all versions), CSIRO Mk3L, FAMOUS, CCM3.6 (Atmosphere), Levitus Data. If you have problems reading data and/ or interpreting metadata (or find a bug), the author would be happy to take a look (see also Github for email etc).

Installs by typing "pip install spacegrids" on command line. On Mac, pip can be installed via "sudo easy_install pip". On Ubuntu/ Debian, install dependencies via package manager if pip install fails:

apt-get install python-{tk,numpy,matplotlib,scipy}

=============================================================

Documentation on more advanced use: http://nbviewer.ipython.org/github/willo12/spacegrids/blob/master/advanced.ipynb
Older documentation: https://github.com/willo12/spacegrids/wiki

The following import statement provides all functionality: 

import spacegrids as sg

Once loaded, sg allows an overview of the available data via sg.info(). A project object is created via P = sg.project(D['some_project']). This then allows fields to be loaded automatically for all experiment subdirectories. Data grids are constructed based on the Netcdf metadata. 

DATA ORGANISATION ON DISK

Before using projects, Netcdf data must be organised in a projects directory tree. Create a directory named PROJECTS inside your home directory ($HOME) or on a storage disk (see below). This will contain all the data for all the projects. Then create a subdirectory for each of your projects. Inside each project, say directory test_project, create a small text file named projname containing only a name, say "glacial", to identify your project. In this case, type: echo glacial > projname within the test_project dir. This will allow the sg Python code to regard all Netcdf files placed directly inside test_project as belonging to individual experiments. Alternatively, subdirectories inside the test_project directory are associated with output from a single experiment each, where all Netcdf files contained within are interpreted as belonging to that same experiment.   

The following python modules are required:

numpy
matplotlib (requires python-tk)
scipy

To obtain pip on Ubuntu/ Debian: (sudo) apt-get install python-pip.



