---
# Configurable settings for Underwear. Settings that must be changed are
# listed first. Not all variables need to be filled in. For example, when
# deploying a Flask app, all the django_ prefixed variables can be left
# empty.
#
##

################################################
####### System level settings ##################
################################################
# user name to create on all remote systems to handle deployment tasks
# as of 0.4.4, it is recommended you do not change this setting
deploy_user: deployer

# group name for the deploy users 
deploy_group: deployers


################################################
####### Settings common to all WSGI apps #######
################################################

# WSGI framework that the application was built with and should be deployed.
# Currently only django is supported. Future Underwear versions will include
# flask, bottle, and pyramid.
wsgi_framework: django

# remote git repository to pull application code from, for example:
# ssh://git@github.com/makaimc/txt2react.git
code_repository: 

# server directory for the virtualenv that will be created to run the web app.
# you can leave this setting as is unless you want a different directory
virtualenv_dir: /home/{{deploy_user}}/venvs/{{app_name}}

# server directory to put the code into that is pulled from the code 
# repository. leave this setting alone unless you want a different directory.
app_code_dir: /home/{{deploy_user}}/{{app_name}}

# local directory where public & private deployment ssh keys and 
# authorized_keys are located
ssh_dir: /home/{{deploy_user}}/.ssh

# root domain name the server should run as. do not include a subdomain,
# for example, txt2react.com
root_domain_name: 

# for now, disable SSL (deploying with SSL works but need to update scripts
# to use it)
deploy_ssl: false

# local directory for web server SSL files. this variable can be left blank if
# the above "deploy_ssl" is set to false. if "deploy_ssl" is set to true,
# this variable must point to the directory where previously generated SSL 
# certification files in the naming format of "app_name".key and 
# "app_name".sslchain.crt are stored 
ssl_certs_dir:

################################################
####### Database configuration below ###########
################################################

# what database type to install and configure on the backend. choices
# are currently postgresql and mysql
db_backend: postgresql

# password for the database user, which by default is set to the same username
# as the "deploy_user" variable. the database name is set to the "app_name"
# variable
db_password: 

################################################
####### Django specific settings below #########
################################################

# Django project settings directory, which might be different than your
# app name. not necessary for frameworks other than Django. 
# Example value: txt2react 
django_settings_dir_name: 

# toggles whether or not South should be used for migrations (will run
# "python manage.py migrate" before loading any fixtures
django_use_south: true

# if you want to load a fixtures file (other than initial_data.json if you
# have one in your Django project), put the file here. Leave blank to not
# load a fixture file. Example: with an app called core, 
# put core/fixtures/prod.json
django_fixtures_file: 

# app_name should be a shorthand, lowercase, no spaces version of the
# application name since this variable will be used as a directory name
app_name: django_app

# all environment variables for your app should be included below so
# that Django's manage.py command can run properly
django_env_vars: {
    DEBUG: True,
    DATABASE_URL: '', # ex: postgres://deployer@127.0.0.1:5432/dbname'
    STATIC_URL: '/static/',
    SECRET_KEY: '',
}

